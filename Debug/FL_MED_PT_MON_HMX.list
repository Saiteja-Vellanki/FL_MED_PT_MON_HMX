
FL_MED_PT_MON_HMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae18  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005070  0800afe8  0800afe8  0000bfe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010058  08010058  00015854  2**0
                  CONTENTS
  4 .ARM          00000008  08010058  08010058  00011058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010060  08010060  00015854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010060  08010060  00011060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010064  08010064  00011064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00003854  20000000  08010068  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002394  20003854  080138bc  00015854  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005be8  080138bc  00015be8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015854  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181fa  00000000  00000000  00015884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cdf  00000000  00000000  0002da7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00031760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001249  00000000  00000000  00032ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191f0  00000000  00000000  00034141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3f5  00000000  00000000  0004d331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d925  00000000  00000000  0006b726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f904b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007280  00000000  00000000  000f9090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00100310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20003854 	.word	0x20003854
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800afd0 	.word	0x0800afd0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20003858 	.word	0x20003858
 800020c:	0800afd0 	.word	0x0800afd0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Display_app_init>:
char day_data[20];

uint8_t tx_buf[256 * 64 / 2];

void Display_app_init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	 Display_init();
 8000efc:	f005 ff17 	bl	8006d2e <Display_init>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <Set_Display_buffsize>:

void Set_Display_buffsize(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	 set_buffer_size(256, 64);
 8000f08:	2140      	movs	r1, #64	@ 0x40
 8000f0a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f0e:	f005 ffdd 	bl	8006ecc <set_buffer_size>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <Display_refresh>:

void Display_refresh(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	 Set_Display_buffsize();
 8000f1c:	f7ff fff2 	bl	8000f04 <Set_Display_buffsize>
	 fill_buffer(tx_buf, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	4807      	ldr	r0, [pc, #28]	@ (8000f40 <Display_refresh+0x28>)
 8000f24:	f005 ffe6 	bl	8006ef4 <fill_buffer>
	 send_buffer_to_OLED(tx_buf, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <Display_refresh+0x28>)
 8000f2e:	f006 f9eb 	bl	8007308 <send_buffer_to_OLED>
     //HAL_Delay(10);
     fill_buffer(tx_buf, 0);
 8000f32:	2100      	movs	r1, #0
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <Display_refresh+0x28>)
 8000f36:	f005 ffdd 	bl	8006ef4 <fill_buffer>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20003900 	.word	0x20003900

08000f44 <Display_company_name>:
	send_buffer_to_OLED(tx_buf, 0, 0);
	HAL_Delay(5000);

}
void Display_company_name(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af02      	add	r7, sp, #8
	select_font(&FreeMonoBold12pt7b);
 8000f4a:	4814      	ldr	r0, [pc, #80]	@ (8000f9c <Display_company_name+0x58>)
 8000f4c:	f006 f8ac 	bl	80070a8 <select_font>
	draw_bitmap_4bpp(tx_buf, matrix, 0, 0, 32, 43);
 8000f50:	232b      	movs	r3, #43	@ 0x2b
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	2320      	movs	r3, #32
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4910      	ldr	r1, [pc, #64]	@ (8000fa0 <Display_company_name+0x5c>)
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <Display_company_name+0x60>)
 8000f60:	f006 f97e 	bl	8007260 <draw_bitmap_4bpp>
    draw_text(tx_buf, "HEALOMEX BIO", 32, 20, 15);
 8000f64:	230f      	movs	r3, #15
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2314      	movs	r3, #20
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	490e      	ldr	r1, [pc, #56]	@ (8000fa8 <Display_company_name+0x64>)
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <Display_company_name+0x60>)
 8000f70:	f006 f942 	bl	80071f8 <draw_text>
    draw_text(tx_buf, "SCIENCES PVT LTD", 32, 45, 15);
 8000f74:	230f      	movs	r3, #15
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	232d      	movs	r3, #45	@ 0x2d
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	490b      	ldr	r1, [pc, #44]	@ (8000fac <Display_company_name+0x68>)
 8000f7e:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <Display_company_name+0x60>)
 8000f80:	f006 f93a 	bl	80071f8 <draw_text>
    send_buffer_to_OLED(tx_buf, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <Display_company_name+0x60>)
 8000f8a:	f006 f9bd 	bl	8007308 <send_buffer_to_OLED>
	HAL_Delay(5000);
 8000f8e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f92:	f001 f879 	bl	8002088 <HAL_Delay>

}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	0800babc 	.word	0x0800babc
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20003900 	.word	0x20003900
 8000fa8:	0800afe8 	.word	0x0800afe8
 8000fac:	0800aff8 	.word	0x0800aff8

08000fb0 <Display_contct_num>:
void Display_contct_num(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af02      	add	r7, sp, #8
	select_font(&FreeMonoBold12pt7b);
 8000fb6:	480f      	ldr	r0, [pc, #60]	@ (8000ff4 <Display_contct_num+0x44>)
 8000fb8:	f006 f876 	bl	80070a8 <select_font>
    draw_text(tx_buf, "CONTACT", 10, 20, 15);
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2314      	movs	r3, #20
 8000fc2:	220a      	movs	r2, #10
 8000fc4:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <Display_contct_num+0x48>)
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fc8:	f006 f916 	bl	80071f8 <draw_text>
	draw_text(tx_buf, "+91 9603966993", 10, 45, 15);
 8000fcc:	230f      	movs	r3, #15
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	232d      	movs	r3, #45	@ 0x2d
 8000fd2:	220a      	movs	r2, #10
 8000fd4:	490a      	ldr	r1, [pc, #40]	@ (8001000 <Display_contct_num+0x50>)
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fd8:	f006 f90e 	bl	80071f8 <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fe2:	f006 f991 	bl	8007308 <send_buffer_to_OLED>
    HAL_Delay(2000);
 8000fe6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fea:	f001 f84d 	bl	8002088 <HAL_Delay>
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0800babc 	.word	0x0800babc
 8000ff8:	0800b00c 	.word	0x0800b00c
 8000ffc:	20003900 	.word	0x20003900
 8001000:	0800b014 	.word	0x0800b014

08001004 <Display_Managmnt_sys>:
void Display_Managmnt_sys(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af02      	add	r7, sp, #8
	select_font(&FreeMono9pt7b);
 800100a:	481b      	ldr	r0, [pc, #108]	@ (8001078 <Display_Managmnt_sys+0x74>)
 800100c:	f006 f84c 	bl	80070a8 <select_font>
	draw_text(tx_buf, "TEMPERATURE", 10, 20, 15);
 8001010:	230f      	movs	r3, #15
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2314      	movs	r3, #20
 8001016:	220a      	movs	r2, #10
 8001018:	4918      	ldr	r1, [pc, #96]	@ (800107c <Display_Managmnt_sys+0x78>)
 800101a:	4819      	ldr	r0, [pc, #100]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 800101c:	f006 f8ec 	bl	80071f8 <draw_text>
	draw_bitmap_4bpp(tx_buf, p_warm, 200, 10, 40, 42);
 8001020:	232a      	movs	r3, #42	@ 0x2a
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	2328      	movs	r3, #40	@ 0x28
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	230a      	movs	r3, #10
 800102a:	22c8      	movs	r2, #200	@ 0xc8
 800102c:	4915      	ldr	r1, [pc, #84]	@ (8001084 <Display_Managmnt_sys+0x80>)
 800102e:	4814      	ldr	r0, [pc, #80]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001030:	f006 f916 	bl	8007260 <draw_bitmap_4bpp>
	select_font(&Font5x7FixedMono);
 8001034:	4814      	ldr	r0, [pc, #80]	@ (8001088 <Display_Managmnt_sys+0x84>)
 8001036:	f006 f837 	bl	80070a8 <select_font>
	draw_text(tx_buf, "HMX-V01", 150, 20, 15);
 800103a:	230f      	movs	r3, #15
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2314      	movs	r3, #20
 8001040:	2296      	movs	r2, #150	@ 0x96
 8001042:	4912      	ldr	r1, [pc, #72]	@ (800108c <Display_Managmnt_sys+0x88>)
 8001044:	480e      	ldr	r0, [pc, #56]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001046:	f006 f8d7 	bl	80071f8 <draw_text>
	select_font(&FreeMono9pt7b);
 800104a:	480b      	ldr	r0, [pc, #44]	@ (8001078 <Display_Managmnt_sys+0x74>)
 800104c:	f006 f82c 	bl	80070a8 <select_font>
	draw_text(tx_buf, "MANAGEMENT SYSTEM", 10, 45, 15);
 8001050:	230f      	movs	r3, #15
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	232d      	movs	r3, #45	@ 0x2d
 8001056:	220a      	movs	r2, #10
 8001058:	490d      	ldr	r1, [pc, #52]	@ (8001090 <Display_Managmnt_sys+0x8c>)
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 800105c:	f006 f8cc 	bl	80071f8 <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	4806      	ldr	r0, [pc, #24]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001066:	f006 f94f 	bl	8007308 <send_buffer_to_OLED>
	HAL_Delay(5000);
 800106a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800106e:	f001 f80b 	bl	8002088 <HAL_Delay>
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	0800c598 	.word	0x0800c598
 800107c:	0800b024 	.word	0x0800b024
 8001080:	20003900 	.word	0x20003900
 8001084:	200032b0 	.word	0x200032b0
 8001088:	0800bf44 	.word	0x0800bf44
 800108c:	0800b030 	.word	0x0800b030
 8001090:	0800b038 	.word	0x0800b038

08001094 <fan_Hspeed>:

void fan_Hspeed()
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af02      	add	r7, sp, #8
	select_font(&Font5x7FixedMono);
 800109a:	48bb      	ldr	r0, [pc, #748]	@ (8001388 <fan_Hspeed+0x2f4>)
 800109c:	f006 f804 	bl	80070a8 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80010a0:	230f      	movs	r3, #15
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	230a      	movs	r3, #10
 80010a6:	220a      	movs	r2, #10
 80010a8:	49b8      	ldr	r1, [pc, #736]	@ (800138c <fan_Hspeed+0x2f8>)
 80010aa:	48b9      	ldr	r0, [pc, #740]	@ (8001390 <fan_Hspeed+0x2fc>)
 80010ac:	f006 f8a4 	bl	80071f8 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80010b0:	48b8      	ldr	r0, [pc, #736]	@ (8001394 <fan_Hspeed+0x300>)
 80010b2:	f005 fff9 	bl	80070a8 <select_font>
	sprintf(data,"%.1f%.f",Temp[0],Temp[1]);
 80010b6:	4bb8      	ldr	r3, [pc, #736]	@ (8001398 <fan_Hspeed+0x304>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa74 	bl	80005a8 <__aeabi_f2d>
 80010c0:	4604      	mov	r4, r0
 80010c2:	460d      	mov	r5, r1
 80010c4:	4bb4      	ldr	r3, [pc, #720]	@ (8001398 <fan_Hspeed+0x304>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa6d 	bl	80005a8 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	e9cd 2300 	strd	r2, r3, [sp]
 80010d6:	4622      	mov	r2, r4
 80010d8:	462b      	mov	r3, r5
 80010da:	49b0      	ldr	r1, [pc, #704]	@ (800139c <fan_Hspeed+0x308>)
 80010dc:	48b0      	ldr	r0, [pc, #704]	@ (80013a0 <fan_Hspeed+0x30c>)
 80010de:	f007 fe4b 	bl	8008d78 <siprintf>
	draw_text(tx_buf, data, 5, 55, 15);
 80010e2:	230f      	movs	r3, #15
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2337      	movs	r3, #55	@ 0x37
 80010e8:	2205      	movs	r2, #5
 80010ea:	49ad      	ldr	r1, [pc, #692]	@ (80013a0 <fan_Hspeed+0x30c>)
 80010ec:	48a8      	ldr	r0, [pc, #672]	@ (8001390 <fan_Hspeed+0x2fc>)
 80010ee:	f006 f883 	bl	80071f8 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 80010f2:	48ac      	ldr	r0, [pc, #688]	@ (80013a4 <fan_Hspeed+0x310>)
 80010f4:	f005 ffd8 	bl	80070a8 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80010f8:	230f      	movs	r3, #15
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2337      	movs	r3, #55	@ 0x37
 80010fe:	2294      	movs	r2, #148	@ 0x94
 8001100:	49a9      	ldr	r1, [pc, #676]	@ (80013a8 <fan_Hspeed+0x314>)
 8001102:	48a3      	ldr	r0, [pc, #652]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001104:	f006 f878 	bl	80071f8 <draw_text>
	select_font(&Font5x7FixedMono);
 8001108:	489f      	ldr	r0, [pc, #636]	@ (8001388 <fan_Hspeed+0x2f4>)
 800110a:	f005 ffcd 	bl	80070a8 <select_font>
    draw_text(tx_buf, "H",  170, 8, 15);
 800110e:	230f      	movs	r3, #15
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2308      	movs	r3, #8
 8001114:	22aa      	movs	r2, #170	@ 0xaa
 8001116:	49a5      	ldr	r1, [pc, #660]	@ (80013ac <fan_Hspeed+0x318>)
 8001118:	489d      	ldr	r0, [pc, #628]	@ (8001390 <fan_Hspeed+0x2fc>)
 800111a:	f006 f86d 	bl	80071f8 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_1gif,145,8, 64, 64);
 800111e:	2340      	movs	r3, #64	@ 0x40
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	2340      	movs	r3, #64	@ 0x40
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2308      	movs	r3, #8
 8001128:	2291      	movs	r2, #145	@ 0x91
 800112a:	49a1      	ldr	r1, [pc, #644]	@ (80013b0 <fan_Hspeed+0x31c>)
 800112c:	4898      	ldr	r0, [pc, #608]	@ (8001390 <fan_Hspeed+0x2fc>)
 800112e:	f006 f897 	bl	8007260 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001132:	2310      	movs	r3, #16
 8001134:	9301      	str	r3, [sp, #4]
 8001136:	2310      	movs	r3, #16
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2300      	movs	r3, #0
 800113c:	228e      	movs	r2, #142	@ 0x8e
 800113e:	499d      	ldr	r1, [pc, #628]	@ (80013b4 <fan_Hspeed+0x320>)
 8001140:	4893      	ldr	r0, [pc, #588]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001142:	f006 f88d 	bl	8007260 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001146:	f000 f9eb 	bl	8001520 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	4890      	ldr	r0, [pc, #576]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001150:	f006 f8da 	bl	8007308 <send_buffer_to_OLED>
    draw_rect_filled(tx_buf,0,0,256,64,0);
 8001154:	2300      	movs	r3, #0
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	2340      	movs	r3, #64	@ 0x40
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	488a      	ldr	r0, [pc, #552]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001166:	f005 ff71 	bl	800704c <draw_rect_filled>
	select_font(&Font5x7FixedMono);
 800116a:	4887      	ldr	r0, [pc, #540]	@ (8001388 <fan_Hspeed+0x2f4>)
 800116c:	f005 ff9c 	bl	80070a8 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001170:	230f      	movs	r3, #15
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	230a      	movs	r3, #10
 8001176:	220a      	movs	r2, #10
 8001178:	4984      	ldr	r1, [pc, #528]	@ (800138c <fan_Hspeed+0x2f8>)
 800117a:	4885      	ldr	r0, [pc, #532]	@ (8001390 <fan_Hspeed+0x2fc>)
 800117c:	f006 f83c 	bl	80071f8 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001180:	4884      	ldr	r0, [pc, #528]	@ (8001394 <fan_Hspeed+0x300>)
 8001182:	f005 ff91 	bl	80070a8 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001186:	230f      	movs	r3, #15
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2337      	movs	r3, #55	@ 0x37
 800118c:	2205      	movs	r2, #5
 800118e:	4984      	ldr	r1, [pc, #528]	@ (80013a0 <fan_Hspeed+0x30c>)
 8001190:	487f      	ldr	r0, [pc, #508]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001192:	f006 f831 	bl	80071f8 <draw_text>
	select_font(&Font5x7FixedMono);
 8001196:	487c      	ldr	r0, [pc, #496]	@ (8001388 <fan_Hspeed+0x2f4>)
 8001198:	f005 ff86 	bl	80070a8 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800119c:	230f      	movs	r3, #15
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	2337      	movs	r3, #55	@ 0x37
 80011a2:	2294      	movs	r2, #148	@ 0x94
 80011a4:	4980      	ldr	r1, [pc, #512]	@ (80013a8 <fan_Hspeed+0x314>)
 80011a6:	487a      	ldr	r0, [pc, #488]	@ (8001390 <fan_Hspeed+0x2fc>)
 80011a8:	f006 f826 	bl	80071f8 <draw_text>
    draw_text(tx_buf, "H",  170, 8, 15);
 80011ac:	230f      	movs	r3, #15
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2308      	movs	r3, #8
 80011b2:	22aa      	movs	r2, #170	@ 0xaa
 80011b4:	497d      	ldr	r1, [pc, #500]	@ (80013ac <fan_Hspeed+0x318>)
 80011b6:	4876      	ldr	r0, [pc, #472]	@ (8001390 <fan_Hspeed+0x2fc>)
 80011b8:	f006 f81e 	bl	80071f8 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_2gif, 145, 8, 64, 64);
 80011bc:	2340      	movs	r3, #64	@ 0x40
 80011be:	9301      	str	r3, [sp, #4]
 80011c0:	2340      	movs	r3, #64	@ 0x40
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	2308      	movs	r3, #8
 80011c6:	2291      	movs	r2, #145	@ 0x91
 80011c8:	497b      	ldr	r1, [pc, #492]	@ (80013b8 <fan_Hspeed+0x324>)
 80011ca:	4871      	ldr	r0, [pc, #452]	@ (8001390 <fan_Hspeed+0x2fc>)
 80011cc:	f006 f848 	bl	8007260 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 80011d0:	2310      	movs	r3, #16
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	2310      	movs	r3, #16
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	228e      	movs	r2, #142	@ 0x8e
 80011dc:	4975      	ldr	r1, [pc, #468]	@ (80013b4 <fan_Hspeed+0x320>)
 80011de:	486c      	ldr	r0, [pc, #432]	@ (8001390 <fan_Hspeed+0x2fc>)
 80011e0:	f006 f83e 	bl	8007260 <draw_bitmap_4bpp>
	Display_RTC_clock();
 80011e4:	f000 f99c 	bl	8001520 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	4868      	ldr	r0, [pc, #416]	@ (8001390 <fan_Hspeed+0x2fc>)
 80011ee:	f006 f88b 	bl	8007308 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80011f2:	2300      	movs	r3, #0
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	2340      	movs	r3, #64	@ 0x40
 80011f8:	9300      	str	r3, [sp, #0]
 80011fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	4863      	ldr	r0, [pc, #396]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001204:	f005 ff22 	bl	800704c <draw_rect_filled>
	select_font(&Font5x7FixedMono);
 8001208:	485f      	ldr	r0, [pc, #380]	@ (8001388 <fan_Hspeed+0x2f4>)
 800120a:	f005 ff4d 	bl	80070a8 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800120e:	230f      	movs	r3, #15
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	230a      	movs	r3, #10
 8001214:	220a      	movs	r2, #10
 8001216:	495d      	ldr	r1, [pc, #372]	@ (800138c <fan_Hspeed+0x2f8>)
 8001218:	485d      	ldr	r0, [pc, #372]	@ (8001390 <fan_Hspeed+0x2fc>)
 800121a:	f005 ffed 	bl	80071f8 <draw_text>
	select_font(&Seven_Segment32pt7b);
 800121e:	485d      	ldr	r0, [pc, #372]	@ (8001394 <fan_Hspeed+0x300>)
 8001220:	f005 ff42 	bl	80070a8 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001224:	230f      	movs	r3, #15
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2337      	movs	r3, #55	@ 0x37
 800122a:	2205      	movs	r2, #5
 800122c:	495c      	ldr	r1, [pc, #368]	@ (80013a0 <fan_Hspeed+0x30c>)
 800122e:	4858      	ldr	r0, [pc, #352]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001230:	f005 ffe2 	bl	80071f8 <draw_text>
	select_font(&Font5x7FixedMono);
 8001234:	4854      	ldr	r0, [pc, #336]	@ (8001388 <fan_Hspeed+0x2f4>)
 8001236:	f005 ff37 	bl	80070a8 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800123a:	230f      	movs	r3, #15
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2337      	movs	r3, #55	@ 0x37
 8001240:	2294      	movs	r2, #148	@ 0x94
 8001242:	4959      	ldr	r1, [pc, #356]	@ (80013a8 <fan_Hspeed+0x314>)
 8001244:	4852      	ldr	r0, [pc, #328]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001246:	f005 ffd7 	bl	80071f8 <draw_text>
    draw_text(tx_buf, "H",  170, 8, 15);
 800124a:	230f      	movs	r3, #15
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2308      	movs	r3, #8
 8001250:	22aa      	movs	r2, #170	@ 0xaa
 8001252:	4956      	ldr	r1, [pc, #344]	@ (80013ac <fan_Hspeed+0x318>)
 8001254:	484e      	ldr	r0, [pc, #312]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001256:	f005 ffcf 	bl	80071f8 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_3gif, 145, 8, 64, 64);
 800125a:	2340      	movs	r3, #64	@ 0x40
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2340      	movs	r3, #64	@ 0x40
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2308      	movs	r3, #8
 8001264:	2291      	movs	r2, #145	@ 0x91
 8001266:	4955      	ldr	r1, [pc, #340]	@ (80013bc <fan_Hspeed+0x328>)
 8001268:	4849      	ldr	r0, [pc, #292]	@ (8001390 <fan_Hspeed+0x2fc>)
 800126a:	f005 fff9 	bl	8007260 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 800126e:	2310      	movs	r3, #16
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	2310      	movs	r3, #16
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2300      	movs	r3, #0
 8001278:	228e      	movs	r2, #142	@ 0x8e
 800127a:	494e      	ldr	r1, [pc, #312]	@ (80013b4 <fan_Hspeed+0x320>)
 800127c:	4844      	ldr	r0, [pc, #272]	@ (8001390 <fan_Hspeed+0x2fc>)
 800127e:	f005 ffef 	bl	8007260 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001282:	f000 f94d 	bl	8001520 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	4841      	ldr	r0, [pc, #260]	@ (8001390 <fan_Hspeed+0x2fc>)
 800128c:	f006 f83c 	bl	8007308 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001290:	2300      	movs	r3, #0
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	2340      	movs	r3, #64	@ 0x40
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	483b      	ldr	r0, [pc, #236]	@ (8001390 <fan_Hspeed+0x2fc>)
 80012a2:	f005 fed3 	bl	800704c <draw_rect_filled>
	select_font(&Font5x7FixedMono);
 80012a6:	4838      	ldr	r0, [pc, #224]	@ (8001388 <fan_Hspeed+0x2f4>)
 80012a8:	f005 fefe 	bl	80070a8 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80012ac:	230f      	movs	r3, #15
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	230a      	movs	r3, #10
 80012b2:	220a      	movs	r2, #10
 80012b4:	4935      	ldr	r1, [pc, #212]	@ (800138c <fan_Hspeed+0x2f8>)
 80012b6:	4836      	ldr	r0, [pc, #216]	@ (8001390 <fan_Hspeed+0x2fc>)
 80012b8:	f005 ff9e 	bl	80071f8 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80012bc:	4835      	ldr	r0, [pc, #212]	@ (8001394 <fan_Hspeed+0x300>)
 80012be:	f005 fef3 	bl	80070a8 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 80012c2:	230f      	movs	r3, #15
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2337      	movs	r3, #55	@ 0x37
 80012c8:	2205      	movs	r2, #5
 80012ca:	4935      	ldr	r1, [pc, #212]	@ (80013a0 <fan_Hspeed+0x30c>)
 80012cc:	4830      	ldr	r0, [pc, #192]	@ (8001390 <fan_Hspeed+0x2fc>)
 80012ce:	f005 ff93 	bl	80071f8 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 80012d2:	4834      	ldr	r0, [pc, #208]	@ (80013a4 <fan_Hspeed+0x310>)
 80012d4:	f005 fee8 	bl	80070a8 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80012d8:	230f      	movs	r3, #15
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2337      	movs	r3, #55	@ 0x37
 80012de:	2294      	movs	r2, #148	@ 0x94
 80012e0:	4931      	ldr	r1, [pc, #196]	@ (80013a8 <fan_Hspeed+0x314>)
 80012e2:	482b      	ldr	r0, [pc, #172]	@ (8001390 <fan_Hspeed+0x2fc>)
 80012e4:	f005 ff88 	bl	80071f8 <draw_text>
	select_font(&Font5x7FixedMono);
 80012e8:	4827      	ldr	r0, [pc, #156]	@ (8001388 <fan_Hspeed+0x2f4>)
 80012ea:	f005 fedd 	bl	80070a8 <select_font>
    draw_text(tx_buf, "H",  170, 8, 15);
 80012ee:	230f      	movs	r3, #15
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2308      	movs	r3, #8
 80012f4:	22aa      	movs	r2, #170	@ 0xaa
 80012f6:	492d      	ldr	r1, [pc, #180]	@ (80013ac <fan_Hspeed+0x318>)
 80012f8:	4825      	ldr	r0, [pc, #148]	@ (8001390 <fan_Hspeed+0x2fc>)
 80012fa:	f005 ff7d 	bl	80071f8 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_4gif, 145, 8, 64, 64);
 80012fe:	2340      	movs	r3, #64	@ 0x40
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2340      	movs	r3, #64	@ 0x40
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2308      	movs	r3, #8
 8001308:	2291      	movs	r2, #145	@ 0x91
 800130a:	492d      	ldr	r1, [pc, #180]	@ (80013c0 <fan_Hspeed+0x32c>)
 800130c:	4820      	ldr	r0, [pc, #128]	@ (8001390 <fan_Hspeed+0x2fc>)
 800130e:	f005 ffa7 	bl	8007260 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001312:	2310      	movs	r3, #16
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	2310      	movs	r3, #16
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	228e      	movs	r2, #142	@ 0x8e
 800131e:	4925      	ldr	r1, [pc, #148]	@ (80013b4 <fan_Hspeed+0x320>)
 8001320:	481b      	ldr	r0, [pc, #108]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001322:	f005 ff9d 	bl	8007260 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001326:	f000 f8fb 	bl	8001520 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	4818      	ldr	r0, [pc, #96]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001330:	f005 ffea 	bl	8007308 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001334:	2300      	movs	r3, #0
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	2340      	movs	r3, #64	@ 0x40
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	4812      	ldr	r0, [pc, #72]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001346:	f005 fe81 	bl	800704c <draw_rect_filled>
	select_font(&Font5x7FixedMono);
 800134a:	480f      	ldr	r0, [pc, #60]	@ (8001388 <fan_Hspeed+0x2f4>)
 800134c:	f005 feac 	bl	80070a8 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001350:	230f      	movs	r3, #15
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	230a      	movs	r3, #10
 8001356:	220a      	movs	r2, #10
 8001358:	490c      	ldr	r1, [pc, #48]	@ (800138c <fan_Hspeed+0x2f8>)
 800135a:	480d      	ldr	r0, [pc, #52]	@ (8001390 <fan_Hspeed+0x2fc>)
 800135c:	f005 ff4c 	bl	80071f8 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001360:	480c      	ldr	r0, [pc, #48]	@ (8001394 <fan_Hspeed+0x300>)
 8001362:	f005 fea1 	bl	80070a8 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001366:	230f      	movs	r3, #15
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2337      	movs	r3, #55	@ 0x37
 800136c:	2205      	movs	r2, #5
 800136e:	490c      	ldr	r1, [pc, #48]	@ (80013a0 <fan_Hspeed+0x30c>)
 8001370:	4807      	ldr	r0, [pc, #28]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001372:	f005 ff41 	bl	80071f8 <draw_text>
	select_font(&Font5x7FixedMono);
 8001376:	4804      	ldr	r0, [pc, #16]	@ (8001388 <fan_Hspeed+0x2f4>)
 8001378:	f005 fe96 	bl	80070a8 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800137c:	230f      	movs	r3, #15
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2337      	movs	r3, #55	@ 0x37
 8001382:	2294      	movs	r2, #148	@ 0x94
 8001384:	4908      	ldr	r1, [pc, #32]	@ (80013a8 <fan_Hspeed+0x314>)
 8001386:	e01d      	b.n	80013c4 <fan_Hspeed+0x330>
 8001388:	0800bf44 	.word	0x0800bf44
 800138c:	0800b04c 	.word	0x0800b04c
 8001390:	20003900 	.word	0x20003900
 8001394:	0800fcc0 	.word	0x0800fcc0
 8001398:	20005a50 	.word	0x20005a50
 800139c:	0800b054 	.word	0x0800b054
 80013a0:	200038cc 	.word	0x200038cc
 80013a4:	0800cdb8 	.word	0x0800cdb8
 80013a8:	0800b05c 	.word	0x0800b05c
 80013ac:	0800b060 	.word	0x0800b060
 80013b0:	200002b0 	.word	0x200002b0
 80013b4:	200035f8 	.word	0x200035f8
 80013b8:	20000ab0 	.word	0x20000ab0
 80013bc:	200012b0 	.word	0x200012b0
 80013c0:	20001ab0 	.word	0x20001ab0
 80013c4:	4842      	ldr	r0, [pc, #264]	@ (80014d0 <fan_Hspeed+0x43c>)
 80013c6:	f005 ff17 	bl	80071f8 <draw_text>
    draw_text(tx_buf, "H", 170, 8, 15);
 80013ca:	230f      	movs	r3, #15
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2308      	movs	r3, #8
 80013d0:	22aa      	movs	r2, #170	@ 0xaa
 80013d2:	4940      	ldr	r1, [pc, #256]	@ (80014d4 <fan_Hspeed+0x440>)
 80013d4:	483e      	ldr	r0, [pc, #248]	@ (80014d0 <fan_Hspeed+0x43c>)
 80013d6:	f005 ff0f 	bl	80071f8 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_5gif, 145, 8, 64, 64);
 80013da:	2340      	movs	r3, #64	@ 0x40
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	2340      	movs	r3, #64	@ 0x40
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2308      	movs	r3, #8
 80013e4:	2291      	movs	r2, #145	@ 0x91
 80013e6:	493c      	ldr	r1, [pc, #240]	@ (80014d8 <fan_Hspeed+0x444>)
 80013e8:	4839      	ldr	r0, [pc, #228]	@ (80014d0 <fan_Hspeed+0x43c>)
 80013ea:	f005 ff39 	bl	8007260 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 80013ee:	2310      	movs	r3, #16
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	2310      	movs	r3, #16
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2300      	movs	r3, #0
 80013f8:	228e      	movs	r2, #142	@ 0x8e
 80013fa:	4938      	ldr	r1, [pc, #224]	@ (80014dc <fan_Hspeed+0x448>)
 80013fc:	4834      	ldr	r0, [pc, #208]	@ (80014d0 <fan_Hspeed+0x43c>)
 80013fe:	f005 ff2f 	bl	8007260 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001402:	f000 f88d 	bl	8001520 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	4831      	ldr	r0, [pc, #196]	@ (80014d0 <fan_Hspeed+0x43c>)
 800140c:	f005 ff7c 	bl	8007308 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001410:	2300      	movs	r3, #0
 8001412:	9301      	str	r3, [sp, #4]
 8001414:	2340      	movs	r3, #64	@ 0x40
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800141c:	2200      	movs	r2, #0
 800141e:	2100      	movs	r1, #0
 8001420:	482b      	ldr	r0, [pc, #172]	@ (80014d0 <fan_Hspeed+0x43c>)
 8001422:	f005 fe13 	bl	800704c <draw_rect_filled>
	select_font(&Font5x7FixedMono);
 8001426:	482e      	ldr	r0, [pc, #184]	@ (80014e0 <fan_Hspeed+0x44c>)
 8001428:	f005 fe3e 	bl	80070a8 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800142c:	230f      	movs	r3, #15
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	230a      	movs	r3, #10
 8001432:	220a      	movs	r2, #10
 8001434:	492b      	ldr	r1, [pc, #172]	@ (80014e4 <fan_Hspeed+0x450>)
 8001436:	4826      	ldr	r0, [pc, #152]	@ (80014d0 <fan_Hspeed+0x43c>)
 8001438:	f005 fede 	bl	80071f8 <draw_text>
	select_font(&Seven_Segment32pt7b);
 800143c:	482a      	ldr	r0, [pc, #168]	@ (80014e8 <fan_Hspeed+0x454>)
 800143e:	f005 fe33 	bl	80070a8 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001442:	230f      	movs	r3, #15
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	2337      	movs	r3, #55	@ 0x37
 8001448:	2205      	movs	r2, #5
 800144a:	4928      	ldr	r1, [pc, #160]	@ (80014ec <fan_Hspeed+0x458>)
 800144c:	4820      	ldr	r0, [pc, #128]	@ (80014d0 <fan_Hspeed+0x43c>)
 800144e:	f005 fed3 	bl	80071f8 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 8001452:	4827      	ldr	r0, [pc, #156]	@ (80014f0 <fan_Hspeed+0x45c>)
 8001454:	f005 fe28 	bl	80070a8 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001458:	230f      	movs	r3, #15
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	2337      	movs	r3, #55	@ 0x37
 800145e:	2294      	movs	r2, #148	@ 0x94
 8001460:	4924      	ldr	r1, [pc, #144]	@ (80014f4 <fan_Hspeed+0x460>)
 8001462:	481b      	ldr	r0, [pc, #108]	@ (80014d0 <fan_Hspeed+0x43c>)
 8001464:	f005 fec8 	bl	80071f8 <draw_text>
	select_font(&Font5x7FixedMono);
 8001468:	481d      	ldr	r0, [pc, #116]	@ (80014e0 <fan_Hspeed+0x44c>)
 800146a:	f005 fe1d 	bl	80070a8 <select_font>
    draw_text(tx_buf, "H",  170, 8, 15);
 800146e:	230f      	movs	r3, #15
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2308      	movs	r3, #8
 8001474:	22aa      	movs	r2, #170	@ 0xaa
 8001476:	4917      	ldr	r1, [pc, #92]	@ (80014d4 <fan_Hspeed+0x440>)
 8001478:	4815      	ldr	r0, [pc, #84]	@ (80014d0 <fan_Hspeed+0x43c>)
 800147a:	f005 febd 	bl	80071f8 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_6gif, 145, 8, 64, 64);
 800147e:	2340      	movs	r3, #64	@ 0x40
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	2340      	movs	r3, #64	@ 0x40
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	2308      	movs	r3, #8
 8001488:	2291      	movs	r2, #145	@ 0x91
 800148a:	491b      	ldr	r1, [pc, #108]	@ (80014f8 <fan_Hspeed+0x464>)
 800148c:	4810      	ldr	r0, [pc, #64]	@ (80014d0 <fan_Hspeed+0x43c>)
 800148e:	f005 fee7 	bl	8007260 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001492:	2310      	movs	r3, #16
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2310      	movs	r3, #16
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	228e      	movs	r2, #142	@ 0x8e
 800149e:	490f      	ldr	r1, [pc, #60]	@ (80014dc <fan_Hspeed+0x448>)
 80014a0:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <fan_Hspeed+0x43c>)
 80014a2:	f005 fedd 	bl	8007260 <draw_bitmap_4bpp>
	Display_RTC_clock();
 80014a6:	f000 f83b 	bl	8001520 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	4808      	ldr	r0, [pc, #32]	@ (80014d0 <fan_Hspeed+0x43c>)
 80014b0:	f005 ff2a 	bl	8007308 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80014b4:	2300      	movs	r3, #0
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	2340      	movs	r3, #64	@ 0x40
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <fan_Hspeed+0x43c>)
 80014c6:	f005 fdc1 	bl	800704c <draw_rect_filled>



}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bdb0      	pop	{r4, r5, r7, pc}
 80014d0:	20003900 	.word	0x20003900
 80014d4:	0800b060 	.word	0x0800b060
 80014d8:	200022b0 	.word	0x200022b0
 80014dc:	200035f8 	.word	0x200035f8
 80014e0:	0800bf44 	.word	0x0800bf44
 80014e4:	0800b04c 	.word	0x0800b04c
 80014e8:	0800fcc0 	.word	0x0800fcc0
 80014ec:	200038cc 	.word	0x200038cc
 80014f0:	0800cdb8 	.word	0x0800cdb8
 80014f4:	0800b05c 	.word	0x0800b05c
 80014f8:	20002ab0 	.word	0x20002ab0

080014fc <Display_curr_temp>:


}

void Display_curr_temp(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	fan_Hspeed();
 8001500:	f7ff fdc8 	bl	8001094 <fan_Hspeed>
//	fan_Mspeed();
//    fan_Lspeed();

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}

08001508 <Gpio_Ex_init>:

void Gpio_Ex_init()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	Ex_gpio_init();
 800150c:	f006 f8a0 	bl	8007650 <Ex_gpio_init>
}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}

08001514 <RTC_init>:

}


void RTC_init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

MX_RTC_Init();
 8001518:	f005 fb12 	bl	8006b40 <MX_RTC_Init>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <Display_RTC_clock>:

void Display_RTC_clock()
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b085      	sub	sp, #20
 8001524:	af04      	add	r7, sp, #16
	RTC_interface();
 8001526:	f005 fae3 	bl	8006af0 <RTC_interface>
	select_font(&Font5x7FixedMono);
 800152a:	4826      	ldr	r0, [pc, #152]	@ (80015c4 <Display_RTC_clock+0xa4>)
 800152c:	f005 fdbc 	bl	80070a8 <select_font>
    draw_text(tx_buf, "HH : MM", 210, 43, 15);
 8001530:	230f      	movs	r3, #15
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	232b      	movs	r3, #43	@ 0x2b
 8001536:	22d2      	movs	r2, #210	@ 0xd2
 8001538:	4923      	ldr	r1, [pc, #140]	@ (80015c8 <Display_RTC_clock+0xa8>)
 800153a:	4824      	ldr	r0, [pc, #144]	@ (80015cc <Display_RTC_clock+0xac>)
 800153c:	f005 fe5c 	bl	80071f8 <draw_text>
    select_font(&DSEG7_Classic_Bold_16);
 8001540:	4823      	ldr	r0, [pc, #140]	@ (80015d0 <Display_RTC_clock+0xb0>)
 8001542:	f005 fdb1 	bl	80070a8 <select_font>
    sprintf(temp_data,"%c%c%c%c%c",time[0],time[1],time[2],time[3],time[4]);
 8001546:	4b23      	ldr	r3, [pc, #140]	@ (80015d4 <Display_RTC_clock+0xb4>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <Display_RTC_clock+0xb4>)
 800154e:	785b      	ldrb	r3, [r3, #1]
 8001550:	461c      	mov	r4, r3
 8001552:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <Display_RTC_clock+0xb4>)
 8001554:	789b      	ldrb	r3, [r3, #2]
 8001556:	461a      	mov	r2, r3
 8001558:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <Display_RTC_clock+0xb4>)
 800155a:	78db      	ldrb	r3, [r3, #3]
 800155c:	4619      	mov	r1, r3
 800155e:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <Display_RTC_clock+0xb4>)
 8001560:	791b      	ldrb	r3, [r3, #4]
 8001562:	9302      	str	r3, [sp, #8]
 8001564:	9101      	str	r1, [sp, #4]
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	4623      	mov	r3, r4
 800156a:	4602      	mov	r2, r0
 800156c:	491a      	ldr	r1, [pc, #104]	@ (80015d8 <Display_RTC_clock+0xb8>)
 800156e:	481b      	ldr	r0, [pc, #108]	@ (80015dc <Display_RTC_clock+0xbc>)
 8001570:	f007 fc02 	bl	8008d78 <siprintf>
	draw_text(tx_buf, temp_data, 200, 63, 15);
 8001574:	230f      	movs	r3, #15
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	233f      	movs	r3, #63	@ 0x3f
 800157a:	22c8      	movs	r2, #200	@ 0xc8
 800157c:	4917      	ldr	r1, [pc, #92]	@ (80015dc <Display_RTC_clock+0xbc>)
 800157e:	4813      	ldr	r0, [pc, #76]	@ (80015cc <Display_RTC_clock+0xac>)
 8001580:	f005 fe3a 	bl	80071f8 <draw_text>
    sprintf(day_data,"%c%c",time[6],time[7]);
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <Display_RTC_clock+0xb4>)
 8001586:	799b      	ldrb	r3, [r3, #6]
 8001588:	461a      	mov	r2, r3
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <Display_RTC_clock+0xb4>)
 800158c:	79db      	ldrb	r3, [r3, #7]
 800158e:	4914      	ldr	r1, [pc, #80]	@ (80015e0 <Display_RTC_clock+0xc0>)
 8001590:	4814      	ldr	r0, [pc, #80]	@ (80015e4 <Display_RTC_clock+0xc4>)
 8001592:	f007 fbf1 	bl	8008d78 <siprintf>
    select_font(&Font5x7FixedMono);
 8001596:	480b      	ldr	r0, [pc, #44]	@ (80015c4 <Display_RTC_clock+0xa4>)
 8001598:	f005 fd86 	bl	80070a8 <select_font>
    draw_text(tx_buf, "d",  243, 10, 15);
 800159c:	230f      	movs	r3, #15
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	230a      	movs	r3, #10
 80015a2:	22f3      	movs	r2, #243	@ 0xf3
 80015a4:	4910      	ldr	r1, [pc, #64]	@ (80015e8 <Display_RTC_clock+0xc8>)
 80015a6:	4809      	ldr	r0, [pc, #36]	@ (80015cc <Display_RTC_clock+0xac>)
 80015a8:	f005 fe26 	bl	80071f8 <draw_text>
    draw_text(tx_buf, day_data,  230, 10, 15);
 80015ac:	230f      	movs	r3, #15
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	230a      	movs	r3, #10
 80015b2:	22e6      	movs	r2, #230	@ 0xe6
 80015b4:	490b      	ldr	r1, [pc, #44]	@ (80015e4 <Display_RTC_clock+0xc4>)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <Display_RTC_clock+0xac>)
 80015b8:	f005 fe1e 	bl	80071f8 <draw_text>
}
 80015bc:	bf00      	nop
 80015be:	3704      	adds	r7, #4
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	0800bf44 	.word	0x0800bf44
 80015c8:	0800b074 	.word	0x0800b074
 80015cc:	20003900 	.word	0x20003900
 80015d0:	0800cdb8 	.word	0x0800cdb8
 80015d4:	200038b8 	.word	0x200038b8
 80015d8:	0800b07c 	.word	0x0800b07c
 80015dc:	200038d8 	.word	0x200038d8
 80015e0:	0800b088 	.word	0x0800b088
 80015e4:	200038ec 	.word	0x200038ec
 80015e8:	0800b090 	.word	0x0800b090

080015ec <MX_USART1_UART_Init>:
/* USER CODE END EV */



void MX_USART1_UART_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <MX_USART1_UART_Init+0x50>)
 80015f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 80015f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001610:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 8001612:	220c      	movs	r2, #12
 8001614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001616:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	@ (8001638 <MX_USART1_UART_Init+0x4c>)
 8001624:	f004 fb3e 	bl	8005ca4 <HAL_HalfDuplex_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800162e:	f000 fa03 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20003870 	.word	0x20003870
 800163c:	40011000 	.word	0x40011000

08001640 <USART1_IRQHandler>:
/**
  * @brief This function handles Non maskable interrupt.
  */

void USART1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	 owReadHandler();
 8001644:	f006 fa0c 	bl	8007a60 <owReadHandler>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <USART1_IRQHandler+0x14>)
 800164a:	f004 fb83 	bl	8005d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20003870 	.word	0x20003870

08001658 <MX_GPIO_Init>:
 */

#include "gpio.h"

void MX_GPIO_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	@ 0x28
 800165c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	4b4a      	ldr	r3, [pc, #296]	@ (800179c <MX_GPIO_Init+0x144>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a49      	ldr	r2, [pc, #292]	@ (800179c <MX_GPIO_Init+0x144>)
 8001678:	f043 0304 	orr.w	r3, r3, #4
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b47      	ldr	r3, [pc, #284]	@ (800179c <MX_GPIO_Init+0x144>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	60fb      	str	r3, [r7, #12]
 800168e:	4b43      	ldr	r3, [pc, #268]	@ (800179c <MX_GPIO_Init+0x144>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a42      	ldr	r2, [pc, #264]	@ (800179c <MX_GPIO_Init+0x144>)
 8001694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b40      	ldr	r3, [pc, #256]	@ (800179c <MX_GPIO_Init+0x144>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	4b3c      	ldr	r3, [pc, #240]	@ (800179c <MX_GPIO_Init+0x144>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a3b      	ldr	r2, [pc, #236]	@ (800179c <MX_GPIO_Init+0x144>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b39      	ldr	r3, [pc, #228]	@ (800179c <MX_GPIO_Init+0x144>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
 80016c6:	4b35      	ldr	r3, [pc, #212]	@ (800179c <MX_GPIO_Init+0x144>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a34      	ldr	r2, [pc, #208]	@ (800179c <MX_GPIO_Init+0x144>)
 80016cc:	f043 0302 	orr.w	r3, r3, #2
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b32      	ldr	r3, [pc, #200]	@ (800179c <MX_GPIO_Init+0x144>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80016de:	2200      	movs	r2, #0
 80016e0:	2130      	movs	r1, #48	@ 0x30
 80016e2:	482f      	ldr	r0, [pc, #188]	@ (80017a0 <MX_GPIO_Init+0x148>)
 80016e4:	f001 f80c 	bl	8002700 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2110      	movs	r1, #16
 80016ec:	482d      	ldr	r0, [pc, #180]	@ (80017a4 <MX_GPIO_Init+0x14c>)
 80016ee:	f001 f807 	bl	8002700 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f2:	2301      	movs	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4825      	ldr	r0, [pc, #148]	@ (80017a0 <MX_GPIO_Init+0x148>)
 800170a:	f000 fe85 	bl	8002418 <HAL_GPIO_Init>
//  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
//


  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800170e:	2330      	movs	r3, #48	@ 0x30
 8001710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	481e      	ldr	r0, [pc, #120]	@ (80017a0 <MX_GPIO_Init+0x148>)
 8001726:	f000 fe77 	bl	8002418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800172a:	f24f 0302 	movw	r3, #61442	@ 0xf002
 800172e:	617b      	str	r3, [r7, #20]
                            |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001734:	2301      	movs	r3, #1
 8001736:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	481a      	ldr	r0, [pc, #104]	@ (80017a8 <MX_GPIO_Init+0x150>)
 8001740:	f000 fe6a 	bl	8002418 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001744:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174e:	2301      	movs	r3, #1
 8001750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4812      	ldr	r0, [pc, #72]	@ (80017a4 <MX_GPIO_Init+0x14c>)
 800175a:	f000 fe5d 	bl	8002418 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800175e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001764:	2300      	movs	r3, #0
 8001766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001768:	2301      	movs	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480b      	ldr	r0, [pc, #44]	@ (80017a0 <MX_GPIO_Init+0x148>)
 8001774:	f000 fe50 	bl	8002418 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001778:	2310      	movs	r3, #16
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2301      	movs	r3, #1
 800177e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001780:	2301      	movs	r3, #1
 8001782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4805      	ldr	r0, [pc, #20]	@ (80017a4 <MX_GPIO_Init+0x14c>)
 8001790:	f000 fe42 	bl	8002418 <HAL_GPIO_Init>

}
 8001794:	bf00      	nop
 8001796:	3728      	adds	r7, #40	@ 0x28
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020800 	.word	0x40020800
 80017a4:	40020000 	.word	0x40020000
 80017a8:	40020400 	.word	0x40020400

080017ac <MX_I2C1_Init>:
  * @param None
  * @retval None
  *
  */
void MX_I2C1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <MX_I2C1_Init+0x50>)
 80017b2:	4a13      	ldr	r2, [pc, #76]	@ (8001800 <MX_I2C1_Init+0x54>)
 80017b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017b6:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_I2C1_Init+0x50>)
 80017b8:	4a12      	ldr	r2, [pc, #72]	@ (8001804 <MX_I2C1_Init+0x58>)
 80017ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <MX_I2C1_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <MX_I2C1_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <MX_I2C1_Init+0x50>)
 80017ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <MX_I2C1_Init+0x50>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017d6:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <MX_I2C1_Init+0x50>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017dc:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <MX_I2C1_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <MX_I2C1_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e8:	4804      	ldr	r0, [pc, #16]	@ (80017fc <MX_I2C1_Init+0x50>)
 80017ea:	f000 ffa3 	bl	8002734 <HAL_I2C_Init>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017f4:	f000 f920 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000599c 	.word	0x2000599c
 8001800:	40005400 	.word	0x40005400
 8001804:	000186a0 	.word	0x000186a0

08001808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	@ 0x28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a19      	ldr	r2, [pc, #100]	@ (800188c <HAL_I2C_MspInit+0x84>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d12b      	bne.n	8001882 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a17      	ldr	r2, [pc, #92]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 8001834:	f043 0302 	orr.w	r3, r3, #2
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001846:	23c0      	movs	r3, #192	@ 0xc0
 8001848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001856:	2304      	movs	r3, #4
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	480c      	ldr	r0, [pc, #48]	@ (8001894 <HAL_I2C_MspInit+0x8c>)
 8001862:	f000 fdd9 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186e:	4a08      	ldr	r2, [pc, #32]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 8001870:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001874:	6413      	str	r3, [r2, #64]	@ 0x40
 8001876:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_I2C_MspInit+0x88>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001882:	bf00      	nop
 8001884:	3728      	adds	r7, #40	@ 0x28
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40005400 	.word	0x40005400
 8001890:	40023800 	.word	0x40023800
 8001894:	40020400 	.word	0x40020400

08001898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800189c:	f000 fb82 	bl	8001fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018a0:	f000 f85e 	bl	8001960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018a4:	f7ff fed8 	bl	8001658 <MX_GPIO_Init>
  MX_SPI1_Init();
 80018a8:	f000 f8cc 	bl	8001a44 <MX_SPI1_Init>
  Display_app_init();
 80018ac:	f7ff fb24 	bl	8000ef8 <Display_app_init>
  MX_USART1_UART_Init();
 80018b0:	f7ff fe9c 	bl	80015ec <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80018b4:	f7ff ff7a 	bl	80017ac <MX_I2C1_Init>
  Gpio_Ex_init();
 80018b8:	f7ff fe26 	bl	8001508 <Gpio_Ex_init>


  /* USER CODE BEGIN 2 */
//  Display_refresh();
//  company_logo();
  Display_refresh();
 80018bc:	f7ff fb2c 	bl	8000f18 <Display_refresh>
  Display_company_name();
 80018c0:	f7ff fb40 	bl	8000f44 <Display_company_name>
  Display_refresh();
 80018c4:	f7ff fb28 	bl	8000f18 <Display_refresh>
  Display_Managmnt_sys();
 80018c8:	f7ff fb9c 	bl	8001004 <Display_Managmnt_sys>
  Display_refresh();
 80018cc:	f7ff fb24 	bl	8000f18 <Display_refresh>
  Display_contct_num();
 80018d0:	f7ff fb6e 	bl	8000fb0 <Display_contct_num>
  Display_refresh();
 80018d4:	f7ff fb20 	bl	8000f18 <Display_refresh>
  get_ROMid();
 80018d8:	f006 fbf4 	bl	80080c4 <get_ROMid>
  RTC_init();
 80018dc:	f7ff fe1a 	bl	8001514 <RTC_init>
  MX_TIM1_Init();
 80018e0:	f005 feee 	bl	80076c0 <MX_TIM1_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	2101      	movs	r1, #1
 80018e8:	481c      	ldr	r0, [pc, #112]	@ (800195c <main+0xc4>)
 80018ea:	f000 ff09 	bl	8002700 <HAL_GPIO_WritePin>

  while (1)
  {
//	  Tempset_35();

	get_Temperature();
 80018ee:	f006 fca7 	bl	8008240 <get_Temperature>
//    HAL_Delay(10);
//    Display_refresh();
    Display_curr_temp();
 80018f2:	f7ff fe03 	bl	80014fc <Display_curr_temp>
//    Display_refresh();
    //display_clock_gif();

    //Led_State();

      Motor_25_duty();
 80018f6:	f005 ff83 	bl	8007800 <Motor_25_duty>
   	  HAL_Delay(30000);
 80018fa:	f247 5030 	movw	r0, #30000	@ 0x7530
 80018fe:	f000 fbc3 	bl	8002088 <HAL_Delay>
   	  Motor_35_duty();
 8001902:	f005 ff91 	bl	8007828 <Motor_35_duty>
   	  HAL_Delay(30000);
 8001906:	f247 5030 	movw	r0, #30000	@ 0x7530
 800190a:	f000 fbbd 	bl	8002088 <HAL_Delay>

   	  Motor_45_duty();
 800190e:	f005 ff9f 	bl	8007850 <Motor_45_duty>
   	  HAL_Delay(30000);
 8001912:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001916:	f000 fbb7 	bl	8002088 <HAL_Delay>

   	  Motor_55_duty();
 800191a:	f005 ffad 	bl	8007878 <Motor_55_duty>
   	  HAL_Delay(30000);
 800191e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001922:	f000 fbb1 	bl	8002088 <HAL_Delay>

   	  Motor_65_duty();
 8001926:	f005 ffbb 	bl	80078a0 <Motor_65_duty>
   	  HAL_Delay(30000);
 800192a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800192e:	f000 fbab 	bl	8002088 <HAL_Delay>

   	  Motor_75_duty();
 8001932:	f005 ffc9 	bl	80078c8 <Motor_75_duty>
   	  HAL_Delay(30000);
 8001936:	f247 5030 	movw	r0, #30000	@ 0x7530
 800193a:	f000 fba5 	bl	8002088 <HAL_Delay>

   	  Motor_85_duty();
 800193e:	f005 ffd7 	bl	80078f0 <Motor_85_duty>
   	  HAL_Delay(30000);
 8001942:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001946:	f000 fb9f 	bl	8002088 <HAL_Delay>

   	  Motor_95_duty();
 800194a:	f005 ffe5 	bl	8007918 <Motor_95_duty>
   	  HAL_Delay(30000);
 800194e:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001952:	f000 fb99 	bl	8002088 <HAL_Delay>
	get_Temperature();
 8001956:	bf00      	nop
 8001958:	e7c9      	b.n	80018ee <main+0x56>
 800195a:	bf00      	nop
 800195c:	40020800 	.word	0x40020800

08001960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b094      	sub	sp, #80	@ 0x50
 8001964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	2234      	movs	r2, #52	@ 0x34
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f007 fa65 	bl	8008e3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001974:	f107 0308 	add.w	r3, r7, #8
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	4b29      	ldr	r3, [pc, #164]	@ (8001a30 <SystemClock_Config+0xd0>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	4a28      	ldr	r2, [pc, #160]	@ (8001a30 <SystemClock_Config+0xd0>)
 800198e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001992:	6413      	str	r3, [r2, #64]	@ 0x40
 8001994:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <SystemClock_Config+0xd0>)
 8001996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019a0:	2300      	movs	r3, #0
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <SystemClock_Config+0xd4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a22      	ldr	r2, [pc, #136]	@ (8001a34 <SystemClock_Config+0xd4>)
 80019aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019ae:	6013      	str	r3, [r2, #0]
 80019b0:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <SystemClock_Config+0xd4>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80019bc:	2309      	movs	r3, #9
 80019be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80019c6:	2301      	movs	r3, #1
 80019c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ca:	2302      	movs	r3, #2
 80019cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019d4:	2304      	movs	r3, #4
 80019d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80019d8:	2332      	movs	r3, #50	@ 0x32
 80019da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019dc:	2302      	movs	r3, #2
 80019de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019e0:	2304      	movs	r3, #4
 80019e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 faef 	bl	8003fd0 <HAL_RCC_OscConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019f8:	f000 f81e 	bl	8001a38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019fc:	230f      	movs	r3, #15
 80019fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a00:	2302      	movs	r3, #2
 8001a02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a04:	2300      	movs	r3, #0
 8001a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a10:	f107 0308 	add.w	r3, r7, #8
 8001a14:	2101      	movs	r1, #1
 8001a16:	4618      	mov	r0, r3
 8001a18:	f001 ffde 	bl	80039d8 <HAL_RCC_ClockConfig>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a22:	f000 f809 	bl	8001a38 <Error_Handler>
  }
}
 8001a26:	bf00      	nop
 8001a28:	3750      	adds	r7, #80	@ 0x50
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40007000 	.word	0x40007000

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a3c:	b672      	cpsid	i
}
 8001a3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <Error_Handler+0x8>

08001a44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a48:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a4a:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a4e:	4b16      	ldr	r3, [pc, #88]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a64:	2202      	movs	r2, #2
 8001a66:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a74:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a78:	2210      	movs	r2, #16
 8001a7a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a88:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 15;
 8001a8e:	4b06      	ldr	r3, [pc, #24]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a90:	220f      	movs	r2, #15
 8001a92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a94:	4804      	ldr	r0, [pc, #16]	@ (8001aa8 <MX_SPI1_Init+0x64>)
 8001a96:	f003 f82b 	bl	8004af0 <HAL_SPI_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001aa0:	f7ff ffca 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20005900 	.word	0x20005900
 8001aac:	40013000 	.word	0x40013000

08001ab0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	@ 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	609a      	str	r2, [r3, #8]
 8001ac4:	60da      	str	r2, [r3, #12]
 8001ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	@ (8001b34 <HAL_SPI_MspInit+0x84>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d12b      	bne.n	8001b2a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
 8001ad6:	4b18      	ldr	r3, [pc, #96]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ada:	4a17      	ldr	r2, [pc, #92]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001adc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aea:	613b      	str	r3, [r7, #16]
 8001aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	4b11      	ldr	r3, [pc, #68]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a10      	ldr	r2, [pc, #64]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b0e      	ldr	r3, [pc, #56]	@ (8001b38 <HAL_SPI_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b0a:	23a0      	movs	r3, #160	@ 0xa0
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	@ (8001b3c <HAL_SPI_MspInit+0x8c>)
 8001b26:	f000 fc77 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b2a:	bf00      	nop
 8001b2c:	3728      	adds	r7, #40	@ 0x28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40013000 	.word	0x40013000
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020000 	.word	0x40020000

08001b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b7c <HAL_TIM_Base_MspInit+0x3c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d10d      	bne.n	8001b6e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <HAL_TIM_Base_MspInit+0x40>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	4a09      	ldr	r2, [pc, #36]	@ (8001b80 <HAL_TIM_Base_MspInit+0x40>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b62:	4b07      	ldr	r3, [pc, #28]	@ (8001b80 <HAL_TIM_Base_MspInit+0x40>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40010000 	.word	0x40010000
 8001b80:	40023800 	.word	0x40023800

08001b84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <HAL_TIM_MspPostInit+0x68>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d11e      	bne.n	8001be4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_TIM_MspPostInit+0x6c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	4a10      	ldr	r2, [pc, #64]	@ (8001bf0 <HAL_TIM_MspPostInit+0x6c>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <HAL_TIM_MspPostInit+0x6c>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bc2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 030c 	add.w	r3, r7, #12
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <HAL_TIM_MspPostInit+0x70>)
 8001be0:	f000 fc1a 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001be4:	bf00      	nop
 8001be6:	3720      	adds	r7, #32
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4b10      	ldr	r3, [pc, #64]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	4a0f      	ldr	r2, [pc, #60]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4a08      	ldr	r2, [pc, #32]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_MspInit+0x4c>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c36:	2007      	movs	r0, #7
 8001c38:	f000 fb1a 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40023800 	.word	0x40023800

08001c48 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <HAL_RTC_MspInit+0x50>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d111      	bne.n	8001c90 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c6c:	2304      	movs	r3, #4
 8001c6e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c74:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f002 f8cc 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001c86:	f7ff fed7 	bl	8001a38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c8a:	4b04      	ldr	r3, [pc, #16]	@ (8001c9c <HAL_RTC_MspInit+0x54>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c90:	bf00      	nop
 8001c92:	3720      	adds	r7, #32
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40002800 	.word	0x40002800
 8001c9c:	42470e3c 	.word	0x42470e3c

08001ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	@ 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8001d34 <HAL_UART_MspInit+0x94>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d134      	bne.n	8001d2c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d38 <HAL_UART_MspInit+0x98>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	4a1b      	ldr	r2, [pc, #108]	@ (8001d38 <HAL_UART_MspInit+0x98>)
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd2:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <HAL_UART_MspInit+0x98>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <HAL_UART_MspInit+0x98>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a14      	ldr	r2, [pc, #80]	@ (8001d38 <HAL_UART_MspInit+0x98>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_UART_MspInit+0x98>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d00:	2312      	movs	r3, #18
 8001d02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d0c:	2307      	movs	r3, #7
 8001d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	4809      	ldr	r0, [pc, #36]	@ (8001d3c <HAL_UART_MspInit+0x9c>)
 8001d18:	f000 fb7e 	bl	8002418 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2025      	movs	r0, #37	@ 0x25
 8001d22:	f000 fab0 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d26:	2025      	movs	r0, #37	@ 0x25
 8001d28:	f000 fac9 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d2c:	bf00      	nop
 8001d2e:	3728      	adds	r7, #40	@ 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40011000 	.word	0x40011000
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40020000 	.word	0x40020000

08001d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <NMI_Handler+0x4>

08001d48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4c:	bf00      	nop
 8001d4e:	e7fd      	b.n	8001d4c <HardFault_Handler+0x4>

08001d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <MemManage_Handler+0x4>

08001d58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5c:	bf00      	nop
 8001d5e:	e7fd      	b.n	8001d5c <BusFault_Handler+0x4>

08001d60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <UsageFault_Handler+0x4>

08001d68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d96:	f000 f957 	bl	8002048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  return 1;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_kill>:

int _kill(int pid, int sig)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001db8:	f007 f894 	bl	8008ee4 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2216      	movs	r2, #22
 8001dc0:	601a      	str	r2, [r3, #0]
  return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_exit>:

void _exit (int status)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffe7 	bl	8001dae <_kill>
  while (1) {}    /* Make sure we hang here */
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <_exit+0x12>

08001de4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e00a      	b.n	8001e0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df6:	f3af 8000 	nop.w
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	b2ca      	uxtb	r2, r1
 8001e04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbf0      	blt.n	8001df6 <_read+0x12>
  }

  return len;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b086      	sub	sp, #24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	e009      	b.n	8001e44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	3301      	adds	r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697a      	ldr	r2, [r7, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	dbf1      	blt.n	8001e30 <_write+0x12>
  }
  return len;
 8001e4c:	687b      	ldr	r3, [r7, #4]
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <_close>:

int _close(int file)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e7e:	605a      	str	r2, [r3, #4]
  return 0;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <_isatty>:

int _isatty(int file)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ec8:	4a14      	ldr	r2, [pc, #80]	@ (8001f1c <_sbrk+0x5c>)
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <_sbrk+0x60>)
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d102      	bne.n	8001ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <_sbrk+0x64>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	@ (8001f28 <_sbrk+0x68>)
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee2:	4b10      	ldr	r3, [pc, #64]	@ (8001f24 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d207      	bcs.n	8001f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef0:	f006 fff8 	bl	8008ee4 <__errno>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	e009      	b.n	8001f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <_sbrk+0x64>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f06:	4b07      	ldr	r3, [pc, #28]	@ (8001f24 <_sbrk+0x64>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a05      	ldr	r2, [pc, #20]	@ (8001f24 <_sbrk+0x64>)
 8001f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f12:	68fb      	ldr	r3, [r7, #12]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3718      	adds	r7, #24
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20008000 	.word	0x20008000
 8001f20:	00000400 	.word	0x00000400
 8001f24:	20005958 	.word	0x20005958
 8001f28:	20005be8 	.word	0x20005be8

08001f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <SystemInit+0x20>)
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f36:	4a05      	ldr	r2, [pc, #20]	@ (8001f4c <SystemInit+0x20>)
 8001f38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001f50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f54:	f7ff ffea 	bl	8001f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f58:	480c      	ldr	r0, [pc, #48]	@ (8001f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f5a:	490d      	ldr	r1, [pc, #52]	@ (8001f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f60:	e002      	b.n	8001f68 <LoopCopyDataInit>

08001f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f66:	3304      	adds	r3, #4

08001f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f6c:	d3f9      	bcc.n	8001f62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f70:	4c0a      	ldr	r4, [pc, #40]	@ (8001f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f74:	e001      	b.n	8001f7a <LoopFillZerobss>

08001f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f78:	3204      	adds	r2, #4

08001f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f7c:	d3fb      	bcc.n	8001f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f006 ffb7 	bl	8008ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f82:	f7ff fc89 	bl	8001898 <main>
  bx  lr    
 8001f86:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f88:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f90:	20003854 	.word	0x20003854
  ldr r2, =_sidata
 8001f94:	08010068 	.word	0x08010068
  ldr r2, =_sbss
 8001f98:	20003854 	.word	0x20003854
  ldr r4, =_ebss
 8001f9c:	20005be8 	.word	0x20005be8

08001fa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa0:	e7fe      	b.n	8001fa0 <ADC_IRQHandler>
	...

08001fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <HAL_Init+0x40>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <HAL_Init+0x40>)
 8001fae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe4 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe4 <HAL_Init+0x40>)
 8001fba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc0:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	@ (8001fe4 <HAL_Init+0x40>)
 8001fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 f94f 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f808 	bl	8001fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd8:	f7ff fe0e 	bl	8001bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40023c00 	.word	0x40023c00

08001fe8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff0:	4b12      	ldr	r3, [pc, #72]	@ (800203c <HAL_InitTick+0x54>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b12      	ldr	r3, [pc, #72]	@ (8002040 <HAL_InitTick+0x58>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f967 	bl	80022da <HAL_SYSTICK_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00e      	b.n	8002034 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d80a      	bhi.n	8002032 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f000 f92f 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002028:	4a06      	ldr	r2, [pc, #24]	@ (8002044 <HAL_InitTick+0x5c>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20003678 	.word	0x20003678
 8002040:	20003680 	.word	0x20003680
 8002044:	2000367c 	.word	0x2000367c

08002048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	@ (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	20003680 	.word	0x20003680
 800206c:	2000595c 	.word	0x2000595c

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b03      	ldr	r3, [pc, #12]	@ (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	2000595c 	.word	0x2000595c

08002088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff ffee 	bl	8002070 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffde 	bl	8002070 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20003680 	.word	0x20003680

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4907      	ldr	r1, [pc, #28]	@ (800216c <__NVIC_EnableIRQ+0x38>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	@ (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	@ (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	@ 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	@ 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	@ (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff8e 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	@ (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff29 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff3e 	bl	8002118 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff8e 	bl	80021c4 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5d 	bl	8002170 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff31 	bl	8002134 <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffa2 	bl	800222c <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff feb6 	bl	8002070 <HAL_GetTick>
 8002304:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d008      	beq.n	8002324 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2280      	movs	r2, #128	@ 0x80
 8002316:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e052      	b.n	80023ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 0216 	bic.w	r2, r2, #22
 8002332:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002342:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <HAL_DMA_Abort+0x62>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0208 	bic.w	r2, r2, #8
 8002362:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002374:	e013      	b.n	800239e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002376:	f7ff fe7b 	bl	8002070 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b05      	cmp	r3, #5
 8002382:	d90c      	bls.n	800239e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2203      	movs	r2, #3
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e015      	b.n	80023ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1e4      	bne.n	8002376 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b0:	223f      	movs	r2, #63	@ 0x3f
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d004      	beq.n	80023f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2280      	movs	r2, #128	@ 0x80
 80023ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e00c      	b.n	800240a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2205      	movs	r2, #5
 80023f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
	...

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	@ 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e14d      	b.n	80026d0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	f040 813c 	bne.w	80026ca <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d005      	beq.n	800246a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	2b02      	cmp	r3, #2
 8002468:	d130      	bne.n	80024cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	2203      	movs	r2, #3
 8002476:	fa02 f303 	lsl.w	r3, r2, r3
 800247a:	43db      	mvns	r3, r3
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	4013      	ands	r3, r2
 8002480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a0:	2201      	movs	r2, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0201 	and.w	r2, r3, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d017      	beq.n	8002508 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d123      	bne.n	800255c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	08da      	lsrs	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8096 	beq.w	80026ca <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b51      	ldr	r3, [pc, #324]	@ (80026e8 <HAL_GPIO_Init+0x2d0>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	4a50      	ldr	r2, [pc, #320]	@ (80026e8 <HAL_GPIO_Init+0x2d0>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ae:	4b4e      	ldr	r3, [pc, #312]	@ (80026e8 <HAL_GPIO_Init+0x2d0>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ba:	4a4c      	ldr	r2, [pc, #304]	@ (80026ec <HAL_GPIO_Init+0x2d4>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a43      	ldr	r2, [pc, #268]	@ (80026f0 <HAL_GPIO_Init+0x2d8>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d00d      	beq.n	8002602 <HAL_GPIO_Init+0x1ea>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a42      	ldr	r2, [pc, #264]	@ (80026f4 <HAL_GPIO_Init+0x2dc>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d007      	beq.n	80025fe <HAL_GPIO_Init+0x1e6>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a41      	ldr	r2, [pc, #260]	@ (80026f8 <HAL_GPIO_Init+0x2e0>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d101      	bne.n	80025fa <HAL_GPIO_Init+0x1e2>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e004      	b.n	8002604 <HAL_GPIO_Init+0x1ec>
 80025fa:	2307      	movs	r3, #7
 80025fc:	e002      	b.n	8002604 <HAL_GPIO_Init+0x1ec>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_GPIO_Init+0x1ec>
 8002602:	2300      	movs	r3, #0
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	f002 0203 	and.w	r2, r2, #3
 800260a:	0092      	lsls	r2, r2, #2
 800260c:	4093      	lsls	r3, r2
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002614:	4935      	ldr	r1, [pc, #212]	@ (80026ec <HAL_GPIO_Init+0x2d4>)
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	089b      	lsrs	r3, r3, #2
 800261a:	3302      	adds	r3, #2
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002622:	4b36      	ldr	r3, [pc, #216]	@ (80026fc <HAL_GPIO_Init+0x2e4>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002646:	4a2d      	ldr	r2, [pc, #180]	@ (80026fc <HAL_GPIO_Init+0x2e4>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800264c:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <HAL_GPIO_Init+0x2e4>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002670:	4a22      	ldr	r2, [pc, #136]	@ (80026fc <HAL_GPIO_Init+0x2e4>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002676:	4b21      	ldr	r3, [pc, #132]	@ (80026fc <HAL_GPIO_Init+0x2e4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800269a:	4a18      	ldr	r2, [pc, #96]	@ (80026fc <HAL_GPIO_Init+0x2e4>)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026a0:	4b16      	ldr	r3, [pc, #88]	@ (80026fc <HAL_GPIO_Init+0x2e4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026c4:	4a0d      	ldr	r2, [pc, #52]	@ (80026fc <HAL_GPIO_Init+0x2e4>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3301      	adds	r3, #1
 80026ce:	61fb      	str	r3, [r7, #28]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	2b0f      	cmp	r3, #15
 80026d4:	f67f aeae 	bls.w	8002434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	3724      	adds	r7, #36	@ 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40013800 	.word	0x40013800
 80026f0:	40020000 	.word	0x40020000
 80026f4:	40020400 	.word	0x40020400
 80026f8:	40020800 	.word	0x40020800
 80026fc:	40013c00 	.word	0x40013c00

08002700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	807b      	strh	r3, [r7, #2]
 800270c:	4613      	mov	r3, r2
 800270e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002710:	787b      	ldrb	r3, [r7, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800271c:	e003      	b.n	8002726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800271e:	887b      	ldrh	r3, [r7, #2]
 8002720:	041a      	lsls	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
	...

08002734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e12b      	b.n	800299e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff f854 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	@ 0x24
 8002764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002786:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002796:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002798:	f001 fb16 	bl	8003dc8 <HAL_RCC_GetPCLK1Freq>
 800279c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4a81      	ldr	r2, [pc, #516]	@ (80029a8 <HAL_I2C_Init+0x274>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d807      	bhi.n	80027b8 <HAL_I2C_Init+0x84>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a80      	ldr	r2, [pc, #512]	@ (80029ac <HAL_I2C_Init+0x278>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	bf94      	ite	ls
 80027b0:	2301      	movls	r3, #1
 80027b2:	2300      	movhi	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e006      	b.n	80027c6 <HAL_I2C_Init+0x92>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a7d      	ldr	r2, [pc, #500]	@ (80029b0 <HAL_I2C_Init+0x27c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	bf94      	ite	ls
 80027c0:	2301      	movls	r3, #1
 80027c2:	2300      	movhi	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0e7      	b.n	800299e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a78      	ldr	r2, [pc, #480]	@ (80029b4 <HAL_I2C_Init+0x280>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	0c9b      	lsrs	r3, r3, #18
 80027d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a6a      	ldr	r2, [pc, #424]	@ (80029a8 <HAL_I2C_Init+0x274>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d802      	bhi.n	8002808 <HAL_I2C_Init+0xd4>
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	3301      	adds	r3, #1
 8002806:	e009      	b.n	800281c <HAL_I2C_Init+0xe8>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	4a69      	ldr	r2, [pc, #420]	@ (80029b8 <HAL_I2C_Init+0x284>)
 8002814:	fba2 2303 	umull	r2, r3, r2, r3
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	3301      	adds	r3, #1
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	430b      	orrs	r3, r1
 8002822:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800282e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	495c      	ldr	r1, [pc, #368]	@ (80029a8 <HAL_I2C_Init+0x274>)
 8002838:	428b      	cmp	r3, r1
 800283a:	d819      	bhi.n	8002870 <HAL_I2C_Init+0x13c>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e59      	subs	r1, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fbb1 f3f3 	udiv	r3, r1, r3
 800284a:	1c59      	adds	r1, r3, #1
 800284c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002850:	400b      	ands	r3, r1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_I2C_Init+0x138>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1e59      	subs	r1, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	fbb1 f3f3 	udiv	r3, r1, r3
 8002864:	3301      	adds	r3, #1
 8002866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286a:	e051      	b.n	8002910 <HAL_I2C_Init+0x1dc>
 800286c:	2304      	movs	r3, #4
 800286e:	e04f      	b.n	8002910 <HAL_I2C_Init+0x1dc>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d111      	bne.n	800289c <HAL_I2C_Init+0x168>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e58      	subs	r0, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6859      	ldr	r1, [r3, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	440b      	add	r3, r1
 8002886:	fbb0 f3f3 	udiv	r3, r0, r3
 800288a:	3301      	adds	r3, #1
 800288c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	e012      	b.n	80028c2 <HAL_I2C_Init+0x18e>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1e58      	subs	r0, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	0099      	lsls	r1, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_I2C_Init+0x196>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e022      	b.n	8002910 <HAL_I2C_Init+0x1dc>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10e      	bne.n	80028f0 <HAL_I2C_Init+0x1bc>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1e58      	subs	r0, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	460b      	mov	r3, r1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	440b      	add	r3, r1
 80028e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028ee:	e00f      	b.n	8002910 <HAL_I2C_Init+0x1dc>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1e58      	subs	r0, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6859      	ldr	r1, [r3, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	0099      	lsls	r1, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	fbb0 f3f3 	udiv	r3, r0, r3
 8002906:	3301      	adds	r3, #1
 8002908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	6809      	ldr	r1, [r1, #0]
 8002914:	4313      	orrs	r3, r2
 8002916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800293e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6911      	ldr	r1, [r2, #16]
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68d2      	ldr	r2, [r2, #12]
 800294a:	4311      	orrs	r1, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	430b      	orrs	r3, r1
 8002952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	000186a0 	.word	0x000186a0
 80029ac:	001e847f 	.word	0x001e847f
 80029b0:	003d08ff 	.word	0x003d08ff
 80029b4:	431bde83 	.word	0x431bde83
 80029b8:	10624dd3 	.word	0x10624dd3

080029bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	4608      	mov	r0, r1
 80029c6:	4611      	mov	r1, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	4603      	mov	r3, r0
 80029cc:	817b      	strh	r3, [r7, #10]
 80029ce:	460b      	mov	r3, r1
 80029d0:	813b      	strh	r3, [r7, #8]
 80029d2:	4613      	mov	r3, r2
 80029d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029d6:	f7ff fb4b 	bl	8002070 <HAL_GetTick>
 80029da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	f040 80d9 	bne.w	8002b9c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	2319      	movs	r3, #25
 80029f0:	2201      	movs	r2, #1
 80029f2:	496d      	ldr	r1, [pc, #436]	@ (8002ba8 <HAL_I2C_Mem_Write+0x1ec>)
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fdb9 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a00:	2302      	movs	r3, #2
 8002a02:	e0cc      	b.n	8002b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_I2C_Mem_Write+0x56>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e0c5      	b.n	8002b9e <HAL_I2C_Mem_Write+0x1e2>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d007      	beq.n	8002a38 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2221      	movs	r2, #33	@ 0x21
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2240      	movs	r2, #64	@ 0x40
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a3a      	ldr	r2, [r7, #32]
 8002a62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002a68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4a4d      	ldr	r2, [pc, #308]	@ (8002bac <HAL_I2C_Mem_Write+0x1f0>)
 8002a78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a7a:	88f8      	ldrh	r0, [r7, #6]
 8002a7c:	893a      	ldrh	r2, [r7, #8]
 8002a7e:	8979      	ldrh	r1, [r7, #10]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	4603      	mov	r3, r0
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fbf0 	bl	8003270 <I2C_RequestMemoryWrite>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d052      	beq.n	8002b3c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e081      	b.n	8002b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fe7e 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d107      	bne.n	8002ac2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e06b      	b.n	8002b9e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d11b      	bne.n	8002b3c <HAL_I2C_Mem_Write+0x180>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d017      	beq.n	8002b3c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1aa      	bne.n	8002a9a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f000 fe71 	bl	8003830 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00d      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d107      	bne.n	8002b6c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e016      	b.n	8002b9e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e000      	b.n	8002b9e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
  }
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	00100002 	.word	0x00100002
 8002bac:	ffff0000 	.word	0xffff0000

08002bb0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	@ 0x30
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bca:	f7ff fa51 	bl	8002070 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b20      	cmp	r3, #32
 8002bda:	f040 8214 	bne.w	8003006 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	9300      	str	r3, [sp, #0]
 8002be2:	2319      	movs	r3, #25
 8002be4:	2201      	movs	r2, #1
 8002be6:	497b      	ldr	r1, [pc, #492]	@ (8002dd4 <HAL_I2C_Mem_Read+0x224>)
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 fcbf 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e207      	b.n	8003008 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_I2C_Mem_Read+0x56>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e200      	b.n	8003008 <HAL_I2C_Mem_Read+0x458>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d007      	beq.n	8002c2c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c3a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2222      	movs	r2, #34	@ 0x22
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2240      	movs	r2, #64	@ 0x40
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4a5b      	ldr	r2, [pc, #364]	@ (8002dd8 <HAL_I2C_Mem_Read+0x228>)
 8002c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c6e:	88f8      	ldrh	r0, [r7, #6]
 8002c70:	893a      	ldrh	r2, [r7, #8]
 8002c72:	8979      	ldrh	r1, [r7, #10]
 8002c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fb8c 	bl	800339c <I2C_RequestMemoryRead>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e1bc      	b.n	8003008 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d113      	bne.n	8002cbe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c96:	2300      	movs	r3, #0
 8002c98:	623b      	str	r3, [r7, #32]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	623b      	str	r3, [r7, #32]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e190      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d11b      	bne.n	8002cfe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	61fb      	str	r3, [r7, #28]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e170      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d11b      	bne.n	8002d3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	e150      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695b      	ldr	r3, [r3, #20]
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d54:	e144      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5a:	2b03      	cmp	r3, #3
 8002d5c:	f200 80f1 	bhi.w	8002f42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d123      	bne.n	8002db0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d6a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 fda7 	bl	80038c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e145      	b.n	8003008 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	1c5a      	adds	r2, r3, #1
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dae:	e117      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d14e      	bne.n	8002e56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	4906      	ldr	r1, [pc, #24]	@ (8002ddc <HAL_I2C_Mem_Read+0x22c>)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fbd2 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e11a      	b.n	8003008 <HAL_I2C_Mem_Read+0x458>
 8002dd2:	bf00      	nop
 8002dd4:	00100002 	.word	0x00100002
 8002dd8:	ffff0000 	.word	0xffff0000
 8002ddc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691a      	ldr	r2, [r3, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e02:	1c5a      	adds	r2, r3, #1
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	1c5a      	adds	r2, r3, #1
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	3b01      	subs	r3, #1
 8002e4e:	b29a      	uxth	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e54:	e0c4      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	496c      	ldr	r1, [pc, #432]	@ (8003010 <HAL_I2C_Mem_Read+0x460>)
 8002e60:	68f8      	ldr	r0, [r7, #12]
 8002e62:	f000 fb83 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0cb      	b.n	8003008 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	691a      	ldr	r2, [r3, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	b2d2      	uxtb	r2, r2
 8002e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4955      	ldr	r1, [pc, #340]	@ (8003010 <HAL_I2C_Mem_Read+0x460>)
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 fb55 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e09d      	b.n	8003008 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	691a      	ldr	r2, [r3, #16]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f40:	e04e      	b.n	8002fe0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 fcba 	bl	80038c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e058      	b.n	8003008 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b04      	cmp	r3, #4
 8002f94:	d124      	bne.n	8002fe0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d107      	bne.n	8002fae <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f47f aeb6 	bne.w	8002d56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003002:	2300      	movs	r3, #0
 8003004:	e000      	b.n	8003008 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003006:	2302      	movs	r3, #2
  }
}
 8003008:	4618      	mov	r0, r3
 800300a:	3728      	adds	r7, #40	@ 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	00010004 	.word	0x00010004

08003014 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08a      	sub	sp, #40	@ 0x28
 8003018:	af02      	add	r7, sp, #8
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	603b      	str	r3, [r7, #0]
 8003020:	460b      	mov	r3, r1
 8003022:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff f824 	bl	8002070 <HAL_GetTick>
 8003028:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	f040 8111 	bne.w	800325e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2319      	movs	r3, #25
 8003042:	2201      	movs	r2, #1
 8003044:	4988      	ldr	r1, [pc, #544]	@ (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fa90 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003052:	2302      	movs	r3, #2
 8003054:	e104      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_I2C_IsDeviceReady+0x50>
 8003060:	2302      	movs	r3, #2
 8003062:	e0fd      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d007      	beq.n	800308a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0201 	orr.w	r2, r2, #1
 8003088:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2224      	movs	r2, #36	@ 0x24
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a70      	ldr	r2, [pc, #448]	@ (800326c <HAL_I2C_IsDeviceReady+0x258>)
 80030ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fa4e 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e4:	d103      	bne.n	80030ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ec:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e0b6      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003100:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003102:	f7fe ffb5 	bl	8002070 <HAL_GetTick>
 8003106:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	b2db      	uxtb	r3, r3
 8003134:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003136:	e025      	b.n	8003184 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003138:	f7fe ff9a 	bl	8002070 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <HAL_I2C_IsDeviceReady+0x13a>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	22a0      	movs	r2, #160	@ 0xa0
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2ba0      	cmp	r3, #160	@ 0xa0
 800318e:	d005      	beq.n	800319c <HAL_I2C_IsDeviceReady+0x188>
 8003190:	7dfb      	ldrb	r3, [r7, #23]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <HAL_I2C_IsDeviceReady+0x188>
 8003196:	7dbb      	ldrb	r3, [r7, #22]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0cd      	beq.n	8003138 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d129      	bne.n	8003206 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2319      	movs	r3, #25
 80031de:	2201      	movs	r2, #1
 80031e0:	4921      	ldr	r1, [pc, #132]	@ (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 f9c2 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e036      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2220      	movs	r2, #32
 80031f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003202:	2300      	movs	r3, #0
 8003204:	e02c      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003214:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800321e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	2319      	movs	r3, #25
 8003226:	2201      	movs	r2, #1
 8003228:	490f      	ldr	r1, [pc, #60]	@ (8003268 <HAL_I2C_IsDeviceReady+0x254>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f99e 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e012      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	3301      	adds	r3, #1
 800323e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	f4ff af32 	bcc.w	80030ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
  }
}
 8003260:	4618      	mov	r0, r3
 8003262:	3720      	adds	r7, #32
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	00100002 	.word	0x00100002
 800326c:	ffff0000 	.word	0xffff0000

08003270 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	461a      	mov	r2, r3
 800327e:	4603      	mov	r3, r0
 8003280:	817b      	strh	r3, [r7, #10]
 8003282:	460b      	mov	r3, r1
 8003284:	813b      	strh	r3, [r7, #8]
 8003286:	4613      	mov	r3, r2
 8003288:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003298:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f960 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032c0:	d103      	bne.n	80032ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e05f      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e0:	6a3a      	ldr	r2, [r7, #32]
 80032e2:	492d      	ldr	r1, [pc, #180]	@ (8003398 <I2C_RequestMemoryWrite+0x128>)
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 f9bb 	bl	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e04c      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800330a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330c:	6a39      	ldr	r1, [r7, #32]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fa46 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00d      	beq.n	8003336 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	2b04      	cmp	r3, #4
 8003320:	d107      	bne.n	8003332 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003330:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e02b      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800333c:	893b      	ldrh	r3, [r7, #8]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	611a      	str	r2, [r3, #16]
 8003346:	e021      	b.n	800338c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003348:	893b      	ldrh	r3, [r7, #8]
 800334a:	0a1b      	lsrs	r3, r3, #8
 800334c:	b29b      	uxth	r3, r3
 800334e:	b2da      	uxtb	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003358:	6a39      	ldr	r1, [r7, #32]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fa20 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00d      	beq.n	8003382 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	2b04      	cmp	r3, #4
 800336c:	d107      	bne.n	800337e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800337c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e005      	b.n	800338e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003382:	893b      	ldrh	r3, [r7, #8]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	00010002 	.word	0x00010002

0800339c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b088      	sub	sp, #32
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	817b      	strh	r3, [r7, #10]
 80033ae:	460b      	mov	r3, r1
 80033b0:	813b      	strh	r3, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	9300      	str	r3, [sp, #0]
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	2200      	movs	r2, #0
 80033de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f8c2 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00d      	beq.n	800340a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033fc:	d103      	bne.n	8003406 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003404:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e0aa      	b.n	8003560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800340a:	897b      	ldrh	r3, [r7, #10]
 800340c:	b2db      	uxtb	r3, r3
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003418:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	6a3a      	ldr	r2, [r7, #32]
 800341e:	4952      	ldr	r1, [pc, #328]	@ (8003568 <I2C_RequestMemoryRead+0x1cc>)
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f91d 	bl	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e097      	b.n	8003560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	617b      	str	r3, [r7, #20]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003448:	6a39      	ldr	r1, [r7, #32]
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f9a8 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00d      	beq.n	8003472 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	2b04      	cmp	r3, #4
 800345c:	d107      	bne.n	800346e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800346c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e076      	b.n	8003560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003478:	893b      	ldrh	r3, [r7, #8]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	611a      	str	r2, [r3, #16]
 8003482:	e021      	b.n	80034c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003484:	893b      	ldrh	r3, [r7, #8]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	b29b      	uxth	r3, r3
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003494:	6a39      	ldr	r1, [r7, #32]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f982 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00d      	beq.n	80034be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d107      	bne.n	80034ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e050      	b.n	8003560 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034be:	893b      	ldrh	r3, [r7, #8]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ca:	6a39      	ldr	r1, [r7, #32]
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f967 	bl	80037a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00d      	beq.n	80034f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d107      	bne.n	80034f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e035      	b.n	8003560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003502:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	2200      	movs	r2, #0
 800350c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f82b 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00d      	beq.n	8003538 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800352a:	d103      	bne.n	8003534 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003532:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e013      	b.n	8003560 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003538:	897b      	ldrh	r3, [r7, #10]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	f043 0301 	orr.w	r3, r3, #1
 8003540:	b2da      	uxtb	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	6a3a      	ldr	r2, [r7, #32]
 800354c:	4906      	ldr	r1, [pc, #24]	@ (8003568 <I2C_RequestMemoryRead+0x1cc>)
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 f886 	bl	8003660 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	00010002 	.word	0x00010002

0800356c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357c:	e048      	b.n	8003610 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d044      	beq.n	8003610 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fe fd73 	bl	8002070 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d139      	bne.n	8003610 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	0c1b      	lsrs	r3, r3, #16
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d10d      	bne.n	80035c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	43da      	mvns	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4013      	ands	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	e00c      	b.n	80035dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d116      	bne.n	8003610 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e023      	b.n	8003658 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	0c1b      	lsrs	r3, r3, #16
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b01      	cmp	r3, #1
 8003618:	d10d      	bne.n	8003636 <I2C_WaitOnFlagUntilTimeout+0xca>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	43da      	mvns	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	e00c      	b.n	8003650 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	43da      	mvns	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	79fb      	ldrb	r3, [r7, #7]
 8003652:	429a      	cmp	r2, r3
 8003654:	d093      	beq.n	800357e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800366e:	e071      	b.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800367a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800367e:	d123      	bne.n	80036c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003698:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2220      	movs	r2, #32
 80036a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	f043 0204 	orr.w	r2, r3, #4
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e067      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d041      	beq.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d0:	f7fe fcce 	bl	8002070 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d302      	bcc.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d136      	bne.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	0c1b      	lsrs	r3, r3, #16
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10c      	bne.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bf14      	ite	ne
 8003702:	2301      	movne	r3, #1
 8003704:	2300      	moveq	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	e00b      	b.n	8003722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	43da      	mvns	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d016      	beq.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e021      	b.n	8003798 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	0c1b      	lsrs	r3, r3, #16
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10c      	bne.n	8003778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	43da      	mvns	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4013      	ands	r3, r2
 800376a:	b29b      	uxth	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e00b      	b.n	8003790 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	f47f af6d 	bne.w	8003670 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ac:	e034      	b.n	8003818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f8e3 	bl	800397a <I2C_IsAcknowledgeFailed>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e034      	b.n	8003828 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d028      	beq.n	8003818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe fc53 	bl	8002070 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11d      	bne.n	8003818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b80      	cmp	r3, #128	@ 0x80
 80037e8:	d016      	beq.n	8003818 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e007      	b.n	8003828 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003822:	2b80      	cmp	r3, #128	@ 0x80
 8003824:	d1c3      	bne.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800383c:	e034      	b.n	80038a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f89b 	bl	800397a <I2C_IsAcknowledgeFailed>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e034      	b.n	80038b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d028      	beq.n	80038a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003856:	f7fe fc0b 	bl	8002070 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d11d      	bne.n	80038a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d016      	beq.n	80038a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	f043 0220 	orr.w	r2, r3, #32
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e007      	b.n	80038b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	f003 0304 	and.w	r3, r3, #4
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d1c3      	bne.n	800383e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3710      	adds	r7, #16
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038cc:	e049      	b.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b10      	cmp	r3, #16
 80038da:	d119      	bne.n	8003910 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0210 	mvn.w	r2, #16
 80038e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e030      	b.n	8003972 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003910:	f7fe fbae 	bl	8002070 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	429a      	cmp	r2, r3
 800391e:	d302      	bcc.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d11d      	bne.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003930:	2b40      	cmp	r3, #64	@ 0x40
 8003932:	d016      	beq.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e007      	b.n	8003972 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396c:	2b40      	cmp	r3, #64	@ 0x40
 800396e:	d1ae      	bne.n	80038ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003990:	d11b      	bne.n	80039ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800399a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	f043 0204 	orr.w	r2, r3, #4
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0cc      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039ec:	4b68      	ldr	r3, [pc, #416]	@ (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d90c      	bls.n	8003a14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b65      	ldr	r3, [pc, #404]	@ (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a02:	4b63      	ldr	r3, [pc, #396]	@ (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0b8      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d020      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a2c:	4b59      	ldr	r3, [pc, #356]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4a58      	ldr	r2, [pc, #352]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0308 	and.w	r3, r3, #8
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a44:	4b53      	ldr	r3, [pc, #332]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a52      	ldr	r2, [pc, #328]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a50:	4b50      	ldr	r3, [pc, #320]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	494d      	ldr	r1, [pc, #308]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d044      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a76:	4b47      	ldr	r3, [pc, #284]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d119      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e07f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d003      	beq.n	8003a96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	4b3f      	ldr	r3, [pc, #252]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e06f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e067      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab6:	4b37      	ldr	r3, [pc, #220]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4934      	ldr	r1, [pc, #208]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac8:	f7fe fad2 	bl	8002070 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7fe face 	bl	8002070 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e04f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 020c 	and.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1eb      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af8:	4b25      	ldr	r3, [pc, #148]	@ (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d20c      	bcs.n	8003b20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b22      	ldr	r3, [pc, #136]	@ (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	4b20      	ldr	r3, [pc, #128]	@ (8003b90 <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e032      	b.n	8003b86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d008      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b2c:	4b19      	ldr	r3, [pc, #100]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	4916      	ldr	r1, [pc, #88]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d009      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4a:	4b12      	ldr	r3, [pc, #72]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	490e      	ldr	r1, [pc, #56]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b5e:	f000 f821 	bl	8003ba4 <HAL_RCC_GetSysClockFreq>
 8003b62:	4602      	mov	r2, r0
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	490a      	ldr	r1, [pc, #40]	@ (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	5ccb      	ldrb	r3, [r1, r3]
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	4a09      	ldr	r2, [pc, #36]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fa32 	bl	8001fe8 <HAL_InitTick>

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023c00 	.word	0x40023c00
 8003b94:	40023800 	.word	0x40023800
 8003b98:	0800fcd0 	.word	0x0800fcd0
 8003b9c:	20003678 	.word	0x20003678
 8003ba0:	2000367c 	.word	0x2000367c

08003ba4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba8:	b094      	sub	sp, #80	@ 0x50
 8003baa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bac:	2300      	movs	r3, #0
 8003bae:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bbc:	4b79      	ldr	r3, [pc, #484]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 030c 	and.w	r3, r3, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d00d      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x40>
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	f200 80e1 	bhi.w	8003d90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x3a>
 8003bd6:	e0db      	b.n	8003d90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd8:	4b73      	ldr	r3, [pc, #460]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bda:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003bdc:	e0db      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bde:	4b73      	ldr	r3, [pc, #460]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x208>)
 8003be0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be2:	e0d8      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be4:	4b6f      	ldr	r3, [pc, #444]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bec:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bee:	4b6d      	ldr	r3, [pc, #436]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d063      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfa:	4b6a      	ldr	r3, [pc, #424]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	099b      	lsrs	r3, r3, #6
 8003c00:	2200      	movs	r2, #0
 8003c02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c0e:	2300      	movs	r3, #0
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c16:	4622      	mov	r2, r4
 8003c18:	462b      	mov	r3, r5
 8003c1a:	f04f 0000 	mov.w	r0, #0
 8003c1e:	f04f 0100 	mov.w	r1, #0
 8003c22:	0159      	lsls	r1, r3, #5
 8003c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c28:	0150      	lsls	r0, r2, #5
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4621      	mov	r1, r4
 8003c30:	1a51      	subs	r1, r2, r1
 8003c32:	6139      	str	r1, [r7, #16]
 8003c34:	4629      	mov	r1, r5
 8003c36:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c48:	4659      	mov	r1, fp
 8003c4a:	018b      	lsls	r3, r1, #6
 8003c4c:	4651      	mov	r1, sl
 8003c4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c52:	4651      	mov	r1, sl
 8003c54:	018a      	lsls	r2, r1, #6
 8003c56:	4651      	mov	r1, sl
 8003c58:	ebb2 0801 	subs.w	r8, r2, r1
 8003c5c:	4659      	mov	r1, fp
 8003c5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c76:	4690      	mov	r8, r2
 8003c78:	4699      	mov	r9, r3
 8003c7a:	4623      	mov	r3, r4
 8003c7c:	eb18 0303 	adds.w	r3, r8, r3
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	462b      	mov	r3, r5
 8003c84:	eb49 0303 	adc.w	r3, r9, r3
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c96:	4629      	mov	r1, r5
 8003c98:	024b      	lsls	r3, r1, #9
 8003c9a:	4621      	mov	r1, r4
 8003c9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	024a      	lsls	r2, r1, #9
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003caa:	2200      	movs	r2, #0
 8003cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb4:	f7fc ffa8 	bl	8000c08 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc0:	e058      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc2:	4b38      	ldr	r3, [pc, #224]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	2200      	movs	r2, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	4611      	mov	r1, r2
 8003cce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cd2:	623b      	str	r3, [r7, #32]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cdc:	4642      	mov	r2, r8
 8003cde:	464b      	mov	r3, r9
 8003ce0:	f04f 0000 	mov.w	r0, #0
 8003ce4:	f04f 0100 	mov.w	r1, #0
 8003ce8:	0159      	lsls	r1, r3, #5
 8003cea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cee:	0150      	lsls	r0, r2, #5
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d14:	ebb2 040a 	subs.w	r4, r2, sl
 8003d18:	eb63 050b 	sbc.w	r5, r3, fp
 8003d1c:	f04f 0200 	mov.w	r2, #0
 8003d20:	f04f 0300 	mov.w	r3, #0
 8003d24:	00eb      	lsls	r3, r5, #3
 8003d26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d2a:	00e2      	lsls	r2, r4, #3
 8003d2c:	4614      	mov	r4, r2
 8003d2e:	461d      	mov	r5, r3
 8003d30:	4643      	mov	r3, r8
 8003d32:	18e3      	adds	r3, r4, r3
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	464b      	mov	r3, r9
 8003d38:	eb45 0303 	adc.w	r3, r5, r3
 8003d3c:	607b      	str	r3, [r7, #4]
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d4a:	4629      	mov	r1, r5
 8003d4c:	028b      	lsls	r3, r1, #10
 8003d4e:	4621      	mov	r1, r4
 8003d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d54:	4621      	mov	r1, r4
 8003d56:	028a      	lsls	r2, r1, #10
 8003d58:	4610      	mov	r0, r2
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d5e:	2200      	movs	r2, #0
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	61fa      	str	r2, [r7, #28]
 8003d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d68:	f7fc ff4e 	bl	8000c08 <__aeabi_uldivmod>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	460b      	mov	r3, r1
 8003d70:	4613      	mov	r3, r2
 8003d72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d74:	4b0b      	ldr	r3, [pc, #44]	@ (8003da4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	3301      	adds	r3, #1
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d8e:	e002      	b.n	8003d96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d90:	4b05      	ldr	r3, [pc, #20]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3750      	adds	r7, #80	@ 0x50
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	00f42400 	.word	0x00f42400
 8003dac:	007a1200 	.word	0x007a1200

08003db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db4:	4b03      	ldr	r3, [pc, #12]	@ (8003dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db6:	681b      	ldr	r3, [r3, #0]
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20003678 	.word	0x20003678

08003dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dcc:	f7ff fff0 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	0a9b      	lsrs	r3, r3, #10
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	4903      	ldr	r1, [pc, #12]	@ (8003dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40023800 	.word	0x40023800
 8003dec:	0800fce0 	.word	0x0800fce0

08003df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003df4:	f7ff ffdc 	bl	8003db0 <HAL_RCC_GetHCLKFreq>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	0b5b      	lsrs	r3, r3, #13
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	4903      	ldr	r1, [pc, #12]	@ (8003e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e06:	5ccb      	ldrb	r3, [r1, r3]
 8003e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	40023800 	.word	0x40023800
 8003e14:	0800fce0 	.word	0x0800fce0

08003e18 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8083 	beq.w	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b61      	ldr	r3, [pc, #388]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3e:	4a60      	ldr	r2, [pc, #384]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e46:	4b5e      	ldr	r3, [pc, #376]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003e52:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a5b      	ldr	r2, [pc, #364]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003e5e:	f7fe f907 	bl	8002070 <HAL_GetTick>
 8003e62:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e64:	e008      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003e66:	f7fe f903 	bl	8002070 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e09f      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003e78:	4b52      	ldr	r3, [pc, #328]	@ (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d0f0      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e84:	4b4e      	ldr	r3, [pc, #312]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d02f      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d028      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea2:	4b47      	ldr	r3, [pc, #284]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eaa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eac:	4b46      	ldr	r3, [pc, #280]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb2:	4b45      	ldr	r3, [pc, #276]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003eb8:	4a41      	ldr	r2, [pc, #260]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ebe:	4b40      	ldr	r3, [pc, #256]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d114      	bne.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fe f8d1 	bl	8002070 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed0:	e00a      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ed2:	f7fe f8cd 	bl	8002070 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e067      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee8:	4b35      	ldr	r3, [pc, #212]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eec:	f003 0302 	and.w	r3, r3, #2
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ee      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xba>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003efc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f00:	d10d      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f02:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f16:	492a      	ldr	r1, [pc, #168]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]
 8003f1c:	e005      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003f1e:	4b28      	ldr	r3, [pc, #160]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	4a27      	ldr	r2, [pc, #156]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f24:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f28:	6093      	str	r3, [r2, #8]
 8003f2a:	4b25      	ldr	r3, [pc, #148]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f2c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f36:	4922      	ldr	r1, [pc, #136]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	7d1a      	ldrb	r2, [r3, #20]
 8003f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f4e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00a      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003f5c:	4b18      	ldr	r3, [pc, #96]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	4915      	ldr	r1, [pc, #84]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f7e:	4b10      	ldr	r3, [pc, #64]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f84:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	490c      	ldr	r1, [pc, #48]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }

  /*---------------------------- I2S Configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00a      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));

    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
 8003fa0:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fa6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4904      	ldr	r1, [pc, #16]	@ (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40007000 	.word	0x40007000
 8003fc8:	42470e40 	.word	0x42470e40
 8003fcc:	424711e0 	.word	0x424711e0

08003fd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e273      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d075      	beq.n	80040da <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003fee:	4b88      	ldr	r3, [pc, #544]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d00c      	beq.n	8004014 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffa:	4b85      	ldr	r3, [pc, #532]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004002:	2b08      	cmp	r3, #8
 8004004:	d112      	bne.n	800402c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004006:	4b82      	ldr	r3, [pc, #520]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800400e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004012:	d10b      	bne.n	800402c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	4b7e      	ldr	r3, [pc, #504]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05b      	beq.n	80040d8 <HAL_RCC_OscConfig+0x108>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d157      	bne.n	80040d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e24e      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004034:	d106      	bne.n	8004044 <HAL_RCC_OscConfig+0x74>
 8004036:	4b76      	ldr	r3, [pc, #472]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a75      	ldr	r2, [pc, #468]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e01d      	b.n	8004080 <HAL_RCC_OscConfig+0xb0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0x98>
 800404e:	4b70      	ldr	r3, [pc, #448]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a6f      	ldr	r2, [pc, #444]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4b6d      	ldr	r3, [pc, #436]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a6c      	ldr	r2, [pc, #432]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e00b      	b.n	8004080 <HAL_RCC_OscConfig+0xb0>
 8004068:	4b69      	ldr	r3, [pc, #420]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a68      	ldr	r2, [pc, #416]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800406e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4b66      	ldr	r3, [pc, #408]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a65      	ldr	r2, [pc, #404]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800407a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800407e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004088:	f7fd fff2 	bl	8002070 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004090:	f7fd ffee 	bl	8002070 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	@ 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e213      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0xc0>
 80040ae:	e014      	b.n	80040da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fd ffde 	bl	8002070 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fd ffda 	bl	8002070 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	@ 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e1ff      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	4b51      	ldr	r3, [pc, #324]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0xe8>
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d063      	beq.n	80041ae <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f2:	4b47      	ldr	r3, [pc, #284]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d11c      	bne.n	8004138 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fe:	4b44      	ldr	r3, [pc, #272]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d116      	bne.n	8004138 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410a:	4b41      	ldr	r3, [pc, #260]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_RCC_OscConfig+0x152>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d001      	beq.n	8004122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e1d3      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4937      	ldr	r1, [pc, #220]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004136:	e03a      	b.n	80041ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d020      	beq.n	8004182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004140:	4b34      	ldr	r3, [pc, #208]	@ (8004214 <HAL_RCC_OscConfig+0x244>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004146:	f7fd ff93 	bl	8002070 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800414e:	f7fd ff8f 	bl	8002070 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1b4      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004160:	4b2b      	ldr	r3, [pc, #172]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416c:	4b28      	ldr	r3, [pc, #160]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4925      	ldr	r1, [pc, #148]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800417c:	4313      	orrs	r3, r2
 800417e:	600b      	str	r3, [r1, #0]
 8004180:	e015      	b.n	80041ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004182:	4b24      	ldr	r3, [pc, #144]	@ (8004214 <HAL_RCC_OscConfig+0x244>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fd ff72 	bl	8002070 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004190:	f7fd ff6e 	bl	8002070 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e193      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d036      	beq.n	8004228 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d016      	beq.n	80041f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c2:	4b15      	ldr	r3, [pc, #84]	@ (8004218 <HAL_RCC_OscConfig+0x248>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fd ff52 	bl	8002070 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fd ff4e 	bl	8002070 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e173      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80041e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x200>
 80041ee:	e01b      	b.n	8004228 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f0:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <HAL_RCC_OscConfig+0x248>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fd ff3b 	bl	8002070 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fc:	e00e      	b.n	800421c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041fe:	f7fd ff37 	bl	8002070 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d907      	bls.n	800421c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e15c      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
 8004210:	40023800 	.word	0x40023800
 8004214:	42470000 	.word	0x42470000
 8004218:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421c:	4b8a      	ldr	r3, [pc, #552]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 800421e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1ea      	bne.n	80041fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8097 	beq.w	8004364 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423a:	4b83      	ldr	r3, [pc, #524]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	4b7f      	ldr	r3, [pc, #508]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	4a7e      	ldr	r2, [pc, #504]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004254:	6413      	str	r3, [r2, #64]	@ 0x40
 8004256:	4b7c      	ldr	r3, [pc, #496]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004262:	2301      	movs	r3, #1
 8004264:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004266:	4b79      	ldr	r3, [pc, #484]	@ (800444c <HAL_RCC_OscConfig+0x47c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d118      	bne.n	80042a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004272:	4b76      	ldr	r3, [pc, #472]	@ (800444c <HAL_RCC_OscConfig+0x47c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a75      	ldr	r2, [pc, #468]	@ (800444c <HAL_RCC_OscConfig+0x47c>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800427c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427e:	f7fd fef7 	bl	8002070 <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fd fef3 	bl	8002070 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e118      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004298:	4b6c      	ldr	r3, [pc, #432]	@ (800444c <HAL_RCC_OscConfig+0x47c>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x2ea>
 80042ac:	4b66      	ldr	r3, [pc, #408]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b0:	4a65      	ldr	r2, [pc, #404]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b8:	e01c      	b.n	80042f4 <HAL_RCC_OscConfig+0x324>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b05      	cmp	r3, #5
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0x30c>
 80042c2:	4b61      	ldr	r3, [pc, #388]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	4a60      	ldr	r2, [pc, #384]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80042c8:	f043 0304 	orr.w	r3, r3, #4
 80042cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	4a5d      	ldr	r2, [pc, #372]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0x324>
 80042dc:	4b5a      	ldr	r3, [pc, #360]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e0:	4a59      	ldr	r2, [pc, #356]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e8:	4b57      	ldr	r3, [pc, #348]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ec:	4a56      	ldr	r2, [pc, #344]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80042ee:	f023 0304 	bic.w	r3, r3, #4
 80042f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fc:	f7fd feb8 	bl	8002070 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004302:	e00a      	b.n	800431a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7fd feb4 	bl	8002070 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e0d7      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431a:	4b4b      	ldr	r3, [pc, #300]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ee      	beq.n	8004304 <HAL_RCC_OscConfig+0x334>
 8004326:	e014      	b.n	8004352 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004328:	f7fd fea2 	bl	8002070 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432e:	e00a      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fd fe9e 	bl	8002070 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0c1      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004346:	4b40      	ldr	r3, [pc, #256]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1ee      	bne.n	8004330 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004358:	4b3b      	ldr	r3, [pc, #236]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	4a3a      	ldr	r2, [pc, #232]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 800435e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004362:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80ad 	beq.w	80044c8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800436e:	4b36      	ldr	r3, [pc, #216]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b08      	cmp	r3, #8
 8004378:	d060      	beq.n	800443c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d145      	bne.n	800440e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b33      	ldr	r3, [pc, #204]	@ (8004450 <HAL_RCC_OscConfig+0x480>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004388:	f7fd fe72 	bl	8002070 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004390:	f7fd fe6e 	bl	8002070 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e093      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	4b29      	ldr	r3, [pc, #164]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	019b      	lsls	r3, r3, #6
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	3b01      	subs	r3, #1
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	071b      	lsls	r3, r3, #28
 80043da:	491b      	ldr	r1, [pc, #108]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004450 <HAL_RCC_OscConfig+0x480>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e6:	f7fd fe43 	bl	8002070 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ee:	f7fd fe3f 	bl	8002070 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e064      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004400:	4b11      	ldr	r3, [pc, #68]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x41e>
 800440c:	e05c      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800440e:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <HAL_RCC_OscConfig+0x480>)
 8004410:	2200      	movs	r2, #0
 8004412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004414:	f7fd fe2c 	bl	8002070 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800441c:	f7fd fe28 	bl	8002070 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e04d      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0x44c>
 800443a:	e045      	b.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d107      	bne.n	8004454 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e040      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
 8004448:	40023800 	.word	0x40023800
 800444c:	40007000 	.word	0x40007000
 8004450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004454:	4b1f      	ldr	r3, [pc, #124]	@ (80044d4 <HAL_RCC_OscConfig+0x504>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d030      	beq.n	80044c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d129      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800447a:	429a      	cmp	r2, r3
 800447c:	d122      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800448a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800448c:	4293      	cmp	r3, r2
 800448e:	d119      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449a:	085b      	lsrs	r3, r3, #1
 800449c:	3b01      	subs	r3, #1
 800449e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d10f      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d107      	bne.n	80044c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800

080044d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e073      	b.n	80045d6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	7f5b      	ldrb	r3, [r3, #29]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d105      	bne.n	8004504 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fd fba2 	bl	8001c48 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2202      	movs	r2, #2
 8004508:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b10      	cmp	r3, #16
 8004516:	d055      	beq.n	80045c4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	22ca      	movs	r2, #202	@ 0xca
 800451e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2253      	movs	r2, #83	@ 0x53
 8004526:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fa49 	bl	80049c0 <RTC_EnterInitMode>
 800452e:	4603      	mov	r3, r0
 8004530:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004532:	7bfb      	ldrb	r3, [r7, #15]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d12c      	bne.n	8004592 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6812      	ldr	r2, [r2, #0]
 8004542:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800454a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6899      	ldr	r1, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68d2      	ldr	r2, [r2, #12]
 8004572:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6919      	ldr	r1, [r3, #16]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	041a      	lsls	r2, r3, #16
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fa50 	bl	8004a2e <RTC_ExitInitMode>
 800458e:	4603      	mov	r3, r0
 8004590:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d110      	bne.n	80045ba <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80045a6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	22ff      	movs	r2, #255	@ 0xff
 80045c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80045c2:	e001      	b.n	80045c8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80045de:	b590      	push	{r4, r7, lr}
 80045e0:	b087      	sub	sp, #28
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	60f8      	str	r0, [r7, #12]
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	7f1b      	ldrb	r3, [r3, #28]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <HAL_RTC_SetTime+0x1c>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e087      	b.n	800470a <HAL_RTC_SetTime+0x12c>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2202      	movs	r2, #2
 8004604:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d126      	bne.n	800465a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004616:	2b00      	cmp	r3, #0
 8004618:	d102      	bne.n	8004620 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	2200      	movs	r2, #0
 800461e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fa27 	bl	8004a78 <RTC_ByteToBcd2>
 800462a:	4603      	mov	r3, r0
 800462c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	4618      	mov	r0, r3
 8004634:	f000 fa20 	bl	8004a78 <RTC_ByteToBcd2>
 8004638:	4603      	mov	r3, r0
 800463a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800463c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	789b      	ldrb	r3, [r3, #2]
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fa18 	bl	8004a78 <RTC_ByteToBcd2>
 8004648:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800464a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	78db      	ldrb	r3, [r3, #3]
 8004652:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004654:	4313      	orrs	r3, r2
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	e018      	b.n	800468c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2200      	movs	r2, #0
 800466c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	785b      	ldrb	r3, [r3, #1]
 8004678:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800467a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004680:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	78db      	ldrb	r3, [r3, #3]
 8004686:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004688:	4313      	orrs	r3, r2
 800468a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	22ca      	movs	r2, #202	@ 0xca
 8004692:	625a      	str	r2, [r3, #36]	@ 0x24
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2253      	movs	r2, #83	@ 0x53
 800469a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f98f 	bl	80049c0 <RTC_EnterInitMode>
 80046a2:	4603      	mov	r3, r0
 80046a4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d120      	bne.n	80046ee <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80046b6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80046ba:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80046ca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6899      	ldr	r1, [r3, #8]
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	68da      	ldr	r2, [r3, #12]
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	431a      	orrs	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f9a2 	bl	8004a2e <RTC_ExitInitMode>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80046ee:	7cfb      	ldrb	r3, [r7, #19]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d102      	bne.n	80046fa <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	22ff      	movs	r2, #255	@ 0xff
 8004700:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]

  return status;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
}
 800470a:	4618      	mov	r0, r3
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	bd90      	pop	{r4, r7, pc}

08004712 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004744:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004748:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	0c1b      	lsrs	r3, r3, #16
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004754:	b2da      	uxtb	r2, r3
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	0a1b      	lsrs	r3, r3, #8
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004772:	b2da      	uxtb	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	0d9b      	lsrs	r3, r3, #22
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	b2da      	uxtb	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d11a      	bne.n	80047c4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f98e 	bl	8004ab4 <RTC_Bcd2ToByte>
 8004798:	4603      	mov	r3, r0
 800479a:	461a      	mov	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	785b      	ldrb	r3, [r3, #1]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 f985 	bl	8004ab4 <RTC_Bcd2ToByte>
 80047aa:	4603      	mov	r3, r0
 80047ac:	461a      	mov	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	789b      	ldrb	r3, [r3, #2]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 f97c 	bl	8004ab4 <RTC_Bcd2ToByte>
 80047bc:	4603      	mov	r3, r0
 80047be:	461a      	mov	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80047ce:	b590      	push	{r4, r7, lr}
 80047d0:	b087      	sub	sp, #28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	7f1b      	ldrb	r3, [r3, #28]
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_RTC_SetDate+0x1c>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e071      	b.n	80048ce <HAL_RTC_SetDate+0x100>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2201      	movs	r2, #1
 80047ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2202      	movs	r2, #2
 80047f4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10e      	bne.n	800481a <HAL_RTC_SetDate+0x4c>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	785b      	ldrb	r3, [r3, #1]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	f023 0310 	bic.w	r3, r3, #16
 8004810:	b2db      	uxtb	r3, r3
 8004812:	330a      	adds	r3, #10
 8004814:	b2da      	uxtb	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d11c      	bne.n	800485a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	78db      	ldrb	r3, [r3, #3]
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f927 	bl	8004a78 <RTC_ByteToBcd2>
 800482a:	4603      	mov	r3, r0
 800482c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	785b      	ldrb	r3, [r3, #1]
 8004832:	4618      	mov	r0, r3
 8004834:	f000 f920 	bl	8004a78 <RTC_ByteToBcd2>
 8004838:	4603      	mov	r3, r0
 800483a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800483c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	789b      	ldrb	r3, [r3, #2]
 8004842:	4618      	mov	r0, r3
 8004844:	f000 f918 	bl	8004a78 <RTC_ByteToBcd2>
 8004848:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800484a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e00e      	b.n	8004878 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	78db      	ldrb	r3, [r3, #3]
 800485e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	785b      	ldrb	r3, [r3, #1]
 8004864:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004866:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800486c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	22ca      	movs	r2, #202	@ 0xca
 800487e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2253      	movs	r2, #83	@ 0x53
 8004886:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 f899 	bl	80049c0 <RTC_EnterInitMode>
 800488e:	4603      	mov	r3, r0
 8004890:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004892:	7cfb      	ldrb	r3, [r7, #19]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10c      	bne.n	80048b2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80048a2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80048a6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f8c0 	bl	8004a2e <RTC_ExitInitMode>
 80048ae:	4603      	mov	r3, r0
 80048b0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d102      	bne.n	80048be <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	22ff      	movs	r2, #255	@ 0xff
 80048c4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2200      	movs	r2, #0
 80048ca:	771a      	strb	r2, [r3, #28]

  return status;
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd90      	pop	{r4, r7, pc}

080048d6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80048f0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80048f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	0c1b      	lsrs	r3, r3, #16
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	0a1b      	lsrs	r3, r3, #8
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f003 031f 	and.w	r3, r3, #31
 800490a:	b2da      	uxtb	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	0b5b      	lsrs	r3, r3, #13
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	b2da      	uxtb	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d11a      	bne.n	800496a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	78db      	ldrb	r3, [r3, #3]
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f8bb 	bl	8004ab4 <RTC_Bcd2ToByte>
 800493e:	4603      	mov	r3, r0
 8004940:	461a      	mov	r2, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	785b      	ldrb	r3, [r3, #1]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f8b2 	bl	8004ab4 <RTC_Bcd2ToByte>
 8004950:	4603      	mov	r3, r0
 8004952:	461a      	mov	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	789b      	ldrb	r3, [r3, #2]
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f8a9 	bl	8004ab4 <RTC_Bcd2ToByte>
 8004962:	4603      	mov	r3, r0
 8004964:	461a      	mov	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a0d      	ldr	r2, [pc, #52]	@ (80049bc <HAL_RTC_WaitForSynchro+0x48>)
 8004986:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004988:	f7fd fb72 	bl	8002070 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800498e:	e009      	b.n	80049a4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004990:	f7fd fb6e 	bl	8002070 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800499e:	d901      	bls.n	80049a4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e007      	b.n	80049b4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f003 0320 	and.w	r3, r3, #32
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0ee      	beq.n	8004990 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	00017f5f 	.word	0x00017f5f

080049c0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d122      	bne.n	8004a24 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80049ec:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80049ee:	f7fd fb3f 	bl	8002070 <HAL_GetTick>
 80049f2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80049f4:	e00c      	b.n	8004a10 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80049f6:	f7fd fb3b 	bl	8002070 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004a04:	d904      	bls.n	8004a10 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2204      	movs	r2, #4
 8004a0a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d102      	bne.n	8004a24 <RTC_EnterInitMode+0x64>
 8004a1e:	7bfb      	ldrb	r3, [r7, #15]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d1e8      	bne.n	80049f6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a48:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff ff8b 	bl	8004974 <HAL_RTC_WaitForSynchro>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d004      	beq.n	8004a6e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2204      	movs	r2, #4
 8004a68:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004a86:	e005      	b.n	8004a94 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004a8e:	79fb      	ldrb	r3, [r7, #7]
 8004a90:	3b0a      	subs	r3, #10
 8004a92:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	2b09      	cmp	r3, #9
 8004a98:	d8f6      	bhi.n	8004a88 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	b2db      	uxtb	r3, r3
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b2db      	uxtb	r3, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e07b      	b.n	8004bfa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d108      	bne.n	8004b1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b12:	d009      	beq.n	8004b28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	61da      	str	r2, [r3, #28]
 8004b1a:	e005      	b.n	8004b28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d106      	bne.n	8004b48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7fc ffb4 	bl	8001ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	691b      	ldr	r3, [r3, #16]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bac:	ea42 0103 	orr.w	r1, r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	430a      	orrs	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	f003 0104 	and.w	r1, r3, #4
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	f003 0210 	and.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69da      	ldr	r2, [r3, #28]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004be8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3708      	adds	r7, #8
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b088      	sub	sp, #32
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	603b      	str	r3, [r7, #0]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c12:	2300      	movs	r3, #0
 8004c14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d101      	bne.n	8004c24 <HAL_SPI_Transmit+0x22>
 8004c20:	2302      	movs	r3, #2
 8004c22:	e12d      	b.n	8004e80 <HAL_SPI_Transmit+0x27e>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c2c:	f7fd fa20 	bl	8002070 <HAL_GetTick>
 8004c30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d002      	beq.n	8004c48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
 8004c44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c46:	e116      	b.n	8004e76 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_SPI_Transmit+0x52>
 8004c4e:	88fb      	ldrh	r3, [r7, #6]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c58:	e10d      	b.n	8004e76 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	88fa      	ldrh	r2, [r7, #6]
 8004c78:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca0:	d10f      	bne.n	8004cc2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004cb0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cc0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ccc:	2b40      	cmp	r3, #64	@ 0x40
 8004cce:	d007      	beq.n	8004ce0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004cde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ce8:	d14f      	bne.n	8004d8a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_SPI_Transmit+0xf6>
 8004cf2:	8afb      	ldrh	r3, [r7, #22]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d142      	bne.n	8004d7e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cfc:	881a      	ldrh	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d08:	1c9a      	adds	r2, r3, #2
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d1c:	e02f      	b.n	8004d7e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d112      	bne.n	8004d52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d30:	881a      	ldrh	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3c:	1c9a      	adds	r2, r3, #2
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004d50:	e015      	b.n	8004d7e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d52:	f7fd f98d 	bl	8002070 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d803      	bhi.n	8004d6a <HAL_SPI_Transmit+0x168>
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d68:	d102      	bne.n	8004d70 <HAL_SPI_Transmit+0x16e>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004d7c:	e07b      	b.n	8004e76 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ca      	bne.n	8004d1e <HAL_SPI_Transmit+0x11c>
 8004d88:	e050      	b.n	8004e2c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d002      	beq.n	8004d98 <HAL_SPI_Transmit+0x196>
 8004d92:	8afb      	ldrh	r3, [r7, #22]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d144      	bne.n	8004e22 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	330c      	adds	r3, #12
 8004da2:	7812      	ldrb	r2, [r2, #0]
 8004da4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	3b01      	subs	r3, #1
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004dbe:	e030      	b.n	8004e22 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d113      	bne.n	8004df6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	330c      	adds	r3, #12
 8004dd8:	7812      	ldrb	r2, [r2, #0]
 8004dda:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004df4:	e015      	b.n	8004e22 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df6:	f7fd f93b 	bl	8002070 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	683a      	ldr	r2, [r7, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d803      	bhi.n	8004e0e <HAL_SPI_Transmit+0x20c>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e0c:	d102      	bne.n	8004e14 <HAL_SPI_Transmit+0x212>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d106      	bne.n	8004e22 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004e20:	e029      	b.n	8004e76 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1c9      	bne.n	8004dc0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	6839      	ldr	r1, [r7, #0]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f000 f8b1 	bl	8004f98 <SPI_EndRxTxTransaction>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	77fb      	strb	r3, [r7, #31]
 8004e6c:	e003      	b.n	8004e76 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004e7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3720      	adds	r7, #32
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	4613      	mov	r3, r2
 8004e96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e98:	f7fd f8ea 	bl	8002070 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ea8:	f7fd f8e2 	bl	8002070 <HAL_GetTick>
 8004eac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004eae:	4b39      	ldr	r3, [pc, #228]	@ (8004f94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	015b      	lsls	r3, r3, #5
 8004eb4:	0d1b      	lsrs	r3, r3, #20
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	fb02 f303 	mul.w	r3, r2, r3
 8004ebc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ebe:	e054      	b.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d050      	beq.n	8004f6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ec8:	f7fd f8d2 	bl	8002070 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d902      	bls.n	8004ede <SPI_WaitFlagStateUntilTimeout+0x56>
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d13d      	bne.n	8004f5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ef6:	d111      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f00:	d004      	beq.n	8004f0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f0a:	d107      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f24:	d10f      	bne.n	8004f46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e017      	b.n	8004f8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	4013      	ands	r3, r2
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	461a      	mov	r2, r3
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d19b      	bne.n	8004ec0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3720      	adds	r7, #32
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20003678 	.word	0x20003678

08004f98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2201      	movs	r2, #1
 8004fac:	2102      	movs	r1, #2
 8004fae:	68f8      	ldr	r0, [r7, #12]
 8004fb0:	f7ff ff6a 	bl	8004e88 <SPI_WaitFlagStateUntilTimeout>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbe:	f043 0220 	orr.w	r2, r3, #32
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e032      	b.n	8005030 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004fca:	4b1b      	ldr	r3, [pc, #108]	@ (8005038 <SPI_EndRxTxTransaction+0xa0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a1b      	ldr	r2, [pc, #108]	@ (800503c <SPI_EndRxTxTransaction+0xa4>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	0d5b      	lsrs	r3, r3, #21
 8004fd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe8:	d112      	bne.n	8005010 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	@ 0x80
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f7ff ff47 	bl	8004e88 <SPI_WaitFlagStateUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d016      	beq.n	800502e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005004:	f043 0220 	orr.w	r2, r3, #32
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e00f      	b.n	8005030 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	3b01      	subs	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005026:	2b80      	cmp	r3, #128	@ 0x80
 8005028:	d0f2      	beq.n	8005010 <SPI_EndRxTxTransaction+0x78>
 800502a:	e000      	b.n	800502e <SPI_EndRxTxTransaction+0x96>
        break;
 800502c:	bf00      	nop
  }

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	20003678 	.word	0x20003678
 800503c:	165e9f81 	.word	0x165e9f81

08005040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e041      	b.n	80050d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fc fd6a 	bl	8001b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f000 faae 	bl	80055e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e041      	b.n	8005174 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d106      	bne.n	800510a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f839 	bl	800517c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3304      	adds	r3, #4
 800511a:	4619      	mov	r1, r3
 800511c:	4610      	mov	r0, r2
 800511e:	f000 fa5f 	bl	80055e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d109      	bne.n	80051b4 <HAL_TIM_PWM_Start+0x24>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	e022      	b.n	80051fa <HAL_TIM_PWM_Start+0x6a>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d109      	bne.n	80051ce <HAL_TIM_PWM_Start+0x3e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	bf14      	ite	ne
 80051c6:	2301      	movne	r3, #1
 80051c8:	2300      	moveq	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	e015      	b.n	80051fa <HAL_TIM_PWM_Start+0x6a>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d109      	bne.n	80051e8 <HAL_TIM_PWM_Start+0x58>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	bf14      	ite	ne
 80051e0:	2301      	movne	r3, #1
 80051e2:	2300      	moveq	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e008      	b.n	80051fa <HAL_TIM_PWM_Start+0x6a>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	bf14      	ite	ne
 80051f4:	2301      	movne	r3, #1
 80051f6:	2300      	moveq	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e059      	b.n	80052b6 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start+0x82>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005210:	e013      	b.n	800523a <HAL_TIM_PWM_Start+0xaa>
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b04      	cmp	r3, #4
 8005216:	d104      	bne.n	8005222 <HAL_TIM_PWM_Start+0x92>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2202      	movs	r2, #2
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005220:	e00b      	b.n	800523a <HAL_TIM_PWM_Start+0xaa>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b08      	cmp	r3, #8
 8005226:	d104      	bne.n	8005232 <HAL_TIM_PWM_Start+0xa2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005230:	e003      	b.n	800523a <HAL_TIM_PWM_Start+0xaa>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2201      	movs	r2, #1
 8005240:	6839      	ldr	r1, [r7, #0]
 8005242:	4618      	mov	r0, r3
 8005244:	f000 fc5c 	bl	8005b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a1c      	ldr	r2, [pc, #112]	@ (80052c0 <HAL_TIM_PWM_Start+0x130>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d107      	bne.n	8005262 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005260:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a16      	ldr	r2, [pc, #88]	@ (80052c0 <HAL_TIM_PWM_Start+0x130>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d009      	beq.n	8005280 <HAL_TIM_PWM_Start+0xf0>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a14      	ldr	r2, [pc, #80]	@ (80052c4 <HAL_TIM_PWM_Start+0x134>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d004      	beq.n	8005280 <HAL_TIM_PWM_Start+0xf0>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a13      	ldr	r2, [pc, #76]	@ (80052c8 <HAL_TIM_PWM_Start+0x138>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d111      	bne.n	80052a4 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b06      	cmp	r3, #6
 8005290:	d010      	beq.n	80052b4 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0201 	orr.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a2:	e007      	b.n	80052b4 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0201 	orr.w	r2, r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40014000 	.word	0x40014000

080052cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052e6:	2302      	movs	r3, #2
 80052e8:	e0ae      	b.n	8005448 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	f200 809f 	bhi.w	8005438 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005300 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005300:	08005335 	.word	0x08005335
 8005304:	08005439 	.word	0x08005439
 8005308:	08005439 	.word	0x08005439
 800530c:	08005439 	.word	0x08005439
 8005310:	08005375 	.word	0x08005375
 8005314:	08005439 	.word	0x08005439
 8005318:	08005439 	.word	0x08005439
 800531c:	08005439 	.word	0x08005439
 8005320:	080053b7 	.word	0x080053b7
 8005324:	08005439 	.word	0x08005439
 8005328:	08005439 	.word	0x08005439
 800532c:	08005439 	.word	0x08005439
 8005330:	080053f7 	.word	0x080053f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f9ba 	bl	80056b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699a      	ldr	r2, [r3, #24]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0208 	orr.w	r2, r2, #8
 800534e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0204 	bic.w	r2, r2, #4
 800535e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6999      	ldr	r1, [r3, #24]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	691a      	ldr	r2, [r3, #16]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	619a      	str	r2, [r3, #24]
      break;
 8005372:	e064      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fa00 	bl	8005780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800538e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800539e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6999      	ldr	r1, [r3, #24]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	021a      	lsls	r2, r3, #8
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	619a      	str	r2, [r3, #24]
      break;
 80053b4:	e043      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68b9      	ldr	r1, [r7, #8]
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fa4b 	bl	8005858 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0208 	orr.w	r2, r2, #8
 80053d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0204 	bic.w	r2, r2, #4
 80053e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69d9      	ldr	r1, [r3, #28]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	61da      	str	r2, [r3, #28]
      break;
 80053f4:	e023      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fa95 	bl	800592c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69d9      	ldr	r1, [r3, #28]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	021a      	lsls	r2, r3, #8
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	61da      	str	r2, [r3, #28]
      break;
 8005436:	e002      	b.n	800543e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	75fb      	strb	r3, [r7, #23]
      break;
 800543c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005446:	7dfb      	ldrb	r3, [r7, #23]
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_TIM_ConfigClockSource+0x1c>
 8005468:	2302      	movs	r3, #2
 800546a:	e0b4      	b.n	80055d6 <HAL_TIM_ConfigClockSource+0x186>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800548a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005492:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68ba      	ldr	r2, [r7, #8]
 800549a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a4:	d03e      	beq.n	8005524 <HAL_TIM_ConfigClockSource+0xd4>
 80054a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054aa:	f200 8087 	bhi.w	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b2:	f000 8086 	beq.w	80055c2 <HAL_TIM_ConfigClockSource+0x172>
 80054b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ba:	d87f      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054bc:	2b70      	cmp	r3, #112	@ 0x70
 80054be:	d01a      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0xa6>
 80054c0:	2b70      	cmp	r3, #112	@ 0x70
 80054c2:	d87b      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054c4:	2b60      	cmp	r3, #96	@ 0x60
 80054c6:	d050      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x11a>
 80054c8:	2b60      	cmp	r3, #96	@ 0x60
 80054ca:	d877      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054cc:	2b50      	cmp	r3, #80	@ 0x50
 80054ce:	d03c      	beq.n	800554a <HAL_TIM_ConfigClockSource+0xfa>
 80054d0:	2b50      	cmp	r3, #80	@ 0x50
 80054d2:	d873      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054d4:	2b40      	cmp	r3, #64	@ 0x40
 80054d6:	d058      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x13a>
 80054d8:	2b40      	cmp	r3, #64	@ 0x40
 80054da:	d86f      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054dc:	2b30      	cmp	r3, #48	@ 0x30
 80054de:	d064      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054e0:	2b30      	cmp	r3, #48	@ 0x30
 80054e2:	d86b      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d060      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d867      	bhi.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d05c      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d05a      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x15a>
 80054f4:	e062      	b.n	80055bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005506:	f000 fadb 	bl	8005ac0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005518:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	609a      	str	r2, [r3, #8]
      break;
 8005522:	e04f      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005534:	f000 fac4 	bl	8005ac0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005546:	609a      	str	r2, [r3, #8]
      break;
 8005548:	e03c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005556:	461a      	mov	r2, r3
 8005558:	f000 fa38 	bl	80059cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2150      	movs	r1, #80	@ 0x50
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fa91 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 8005568:	e02c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005576:	461a      	mov	r2, r3
 8005578:	f000 fa57 	bl	8005a2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2160      	movs	r1, #96	@ 0x60
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fa81 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 8005588:	e01c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005596:	461a      	mov	r2, r3
 8005598:	f000 fa18 	bl	80059cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2140      	movs	r1, #64	@ 0x40
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fa71 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 80055a8:	e00c      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4619      	mov	r1, r3
 80055b4:	4610      	mov	r0, r2
 80055b6:	f000 fa68 	bl	8005a8a <TIM_ITRx_SetConfig>
      break;
 80055ba:	e003      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	73fb      	strb	r3, [r7, #15]
      break;
 80055c0:	e000      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a2c      	ldr	r2, [pc, #176]	@ (80056a4 <TIM_Base_SetConfig+0xc4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_Base_SetConfig+0x20>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a2b      	ldr	r2, [pc, #172]	@ (80056a8 <TIM_Base_SetConfig+0xc8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d108      	bne.n	8005612 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a23      	ldr	r2, [pc, #140]	@ (80056a4 <TIM_Base_SetConfig+0xc4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00b      	beq.n	8005632 <TIM_Base_SetConfig+0x52>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a22      	ldr	r2, [pc, #136]	@ (80056a8 <TIM_Base_SetConfig+0xc8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d007      	beq.n	8005632 <TIM_Base_SetConfig+0x52>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a21      	ldr	r2, [pc, #132]	@ (80056ac <TIM_Base_SetConfig+0xcc>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d003      	beq.n	8005632 <TIM_Base_SetConfig+0x52>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a20      	ldr	r2, [pc, #128]	@ (80056b0 <TIM_Base_SetConfig+0xd0>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d108      	bne.n	8005644 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	689a      	ldr	r2, [r3, #8]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a0e      	ldr	r2, [pc, #56]	@ (80056a4 <TIM_Base_SetConfig+0xc4>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d103      	bne.n	8005678 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b01      	cmp	r3, #1
 8005688:	d105      	bne.n	8005696 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f023 0201 	bic.w	r2, r3, #1
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	611a      	str	r2, [r3, #16]
  }
}
 8005696:	bf00      	nop
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40000c00 	.word	0x40000c00
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014800 	.word	0x40014800

080056b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f023 0201 	bic.w	r2, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f023 0303 	bic.w	r3, r3, #3
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f023 0302 	bic.w	r3, r3, #2
 80056fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a1c      	ldr	r2, [pc, #112]	@ (800577c <TIM_OC1_SetConfig+0xc8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d10c      	bne.n	800572a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f023 0308 	bic.w	r3, r3, #8
 8005716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	4313      	orrs	r3, r2
 8005720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 0304 	bic.w	r3, r3, #4
 8005728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a13      	ldr	r2, [pc, #76]	@ (800577c <TIM_OC1_SetConfig+0xc8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d111      	bne.n	8005756 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	4313      	orrs	r3, r2
 800574a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	621a      	str	r2, [r3, #32]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	40010000 	.word	0x40010000

08005780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f023 0210 	bic.w	r2, r3, #16
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0320 	bic.w	r3, r3, #32
 80057ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a1e      	ldr	r2, [pc, #120]	@ (8005854 <TIM_OC2_SetConfig+0xd4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d10d      	bne.n	80057fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a15      	ldr	r2, [pc, #84]	@ (8005854 <TIM_OC2_SetConfig+0xd4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d113      	bne.n	800582c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800580a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005812:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40010000 	.word	0x40010000

08005858 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0303 	bic.w	r3, r3, #3
 800588e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	021b      	lsls	r3, r3, #8
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005928 <TIM_OC3_SetConfig+0xd0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10d      	bne.n	80058d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a14      	ldr	r2, [pc, #80]	@ (8005928 <TIM_OC3_SetConfig+0xd0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d113      	bne.n	8005902 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	011b      	lsls	r3, r3, #4
 80058fc:	693a      	ldr	r2, [r7, #16]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685a      	ldr	r2, [r3, #4]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	621a      	str	r2, [r3, #32]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	40010000 	.word	0x40010000

0800592c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	031b      	lsls	r3, r3, #12
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4313      	orrs	r3, r2
 8005982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a10      	ldr	r2, [pc, #64]	@ (80059c8 <TIM_OC4_SetConfig+0x9c>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d109      	bne.n	80059a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005992:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	019b      	lsls	r3, r3, #6
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40010000 	.word	0x40010000

080059cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f023 0201 	bic.w	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	011b      	lsls	r3, r3, #4
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f023 030a 	bic.w	r3, r3, #10
 8005a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	693a      	ldr	r2, [r7, #16]
 8005a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	621a      	str	r2, [r3, #32]
}
 8005a1e:	bf00      	nop
 8005a20:	371c      	adds	r7, #28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b087      	sub	sp, #28
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	f023 0210 	bic.w	r2, r3, #16
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	031b      	lsls	r3, r3, #12
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b085      	sub	sp, #20
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f043 0307 	orr.w	r3, r3, #7
 8005aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	609a      	str	r2, [r3, #8]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b087      	sub	sp, #28
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	021a      	lsls	r2, r3, #8
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	609a      	str	r2, [r3, #8]
}
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	2201      	movs	r2, #1
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6a1a      	ldr	r2, [r3, #32]
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	43db      	mvns	r3, r3
 8005b22:	401a      	ands	r2, r3
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6a1a      	ldr	r2, [r3, #32]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 031f 	and.w	r3, r3, #31
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	fa01 f303 	lsl.w	r3, r1, r3
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	621a      	str	r2, [r3, #32]
}
 8005b3e:	bf00      	nop
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
	...

08005b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d101      	bne.n	8005b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b60:	2302      	movs	r3, #2
 8005b62:	e041      	b.n	8005be8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2202      	movs	r2, #2
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a14      	ldr	r2, [pc, #80]	@ (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d009      	beq.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a12      	ldr	r2, [pc, #72]	@ (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a11      	ldr	r2, [pc, #68]	@ (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d10c      	bne.n	8005bd6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005be6:	2300      	movs	r3, #0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40000c00 	.word	0x40000c00
 8005bfc:	40014000 	.word	0x40014000

08005c00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e03d      	b.n	8005c98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	695b      	ldr	r3, [r3, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e04a      	b.n	8005d4c <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d106      	bne.n	8005cd0 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7fb ffe8 	bl	8001ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2224      	movs	r2, #36	@ 0x24
 8005cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fc8d 	bl	8006608 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	691a      	ldr	r2, [r3, #16]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695a      	ldr	r2, [r3, #20]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005d0c:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695a      	ldr	r2, [r3, #20]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f042 0208 	orr.w	r2, r2, #8
 8005d1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b0ba      	sub	sp, #232	@ 0xe8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10f      	bne.n	8005dba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <HAL_UART_IRQHandler+0x66>
 8005da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005daa:	f003 0320 	and.w	r3, r3, #32
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d003      	beq.n	8005dba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fb69 	bl	800648a <UART_Receive_IT>
      return;
 8005db8:	e25b      	b.n	8006272 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 80de 	beq.w	8005f80 <HAL_UART_IRQHandler+0x22c>
 8005dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d106      	bne.n	8005dde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80d1 	beq.w	8005f80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_UART_IRQHandler+0xae>
 8005dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dfa:	f043 0201 	orr.w	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e06:	f003 0304 	and.w	r3, r3, #4
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00b      	beq.n	8005e26 <HAL_UART_IRQHandler+0xd2>
 8005e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1e:	f043 0202 	orr.w	r2, r3, #2
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00b      	beq.n	8005e4a <HAL_UART_IRQHandler+0xf6>
 8005e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e42:	f043 0204 	orr.w	r2, r3, #4
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d011      	beq.n	8005e7a <HAL_UART_IRQHandler+0x126>
 8005e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d105      	bne.n	8005e6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e72:	f043 0208 	orr.w	r2, r3, #8
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 81f2 	beq.w	8006268 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d008      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x14e>
 8005e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 faf4 	bl	800648a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eac:	2b40      	cmp	r3, #64	@ 0x40
 8005eae:	bf0c      	ite	eq
 8005eb0:	2301      	moveq	r3, #1
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d103      	bne.n	8005ece <HAL_UART_IRQHandler+0x17a>
 8005ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d04f      	beq.n	8005f6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f9fc 	bl	80062cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ede:	2b40      	cmp	r3, #64	@ 0x40
 8005ee0:	d141      	bne.n	8005f66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3314      	adds	r3, #20
 8005ee8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3314      	adds	r3, #20
 8005f0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f1e:	e841 2300 	strex	r3, r2, [r1]
 8005f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1d9      	bne.n	8005ee2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d013      	beq.n	8005f5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8006134 <HAL_UART_IRQHandler+0x3e0>)
 8005f3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fc fa45 	bl	80023d2 <HAL_DMA_Abort_IT>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d016      	beq.n	8005f7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005f58:	4610      	mov	r0, r2
 8005f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f5c:	e00e      	b.n	8005f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f99e 	bl	80062a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	e00a      	b.n	8005f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f99a 	bl	80062a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6c:	e006      	b.n	8005f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f996 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005f7a:	e175      	b.n	8006268 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	bf00      	nop
    return;
 8005f7e:	e173      	b.n	8006268 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	f040 814f 	bne.w	8006228 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8148 	beq.w	8006228 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 8141 	beq.w	8006228 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	60bb      	str	r3, [r7, #8]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	695b      	ldr	r3, [r3, #20]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc6:	2b40      	cmp	r3, #64	@ 0x40
 8005fc8:	f040 80b6 	bne.w	8006138 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 8145 	beq.w	800626c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005fea:	429a      	cmp	r2, r3
 8005fec:	f080 813e 	bcs.w	800626c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ff6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006002:	f000 8088 	beq.w	8006116 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	330c      	adds	r3, #12
 800600c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006010:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006014:	e853 3f00 	ldrex	r3, [r3]
 8006018:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800601c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006024:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006032:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800603e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800604a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1d9      	bne.n	8006006 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3314      	adds	r3, #20
 8006058:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006062:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006064:	f023 0301 	bic.w	r3, r3, #1
 8006068:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3314      	adds	r3, #20
 8006072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006076:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800607a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800607e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006082:	e841 2300 	strex	r3, r2, [r1]
 8006086:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800608a:	2b00      	cmp	r3, #0
 800608c:	d1e1      	bne.n	8006052 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3314      	adds	r3, #20
 8006094:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800609e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3314      	adds	r3, #20
 80060ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80060b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e3      	bne.n	800608e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2220      	movs	r2, #32
 80060ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	330c      	adds	r3, #12
 80060da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060e6:	f023 0310 	bic.w	r3, r3, #16
 80060ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	330c      	adds	r3, #12
 80060f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80060f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e3      	bne.n	80060d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006110:	4618      	mov	r0, r3
 8006112:	f7fc f8ee 	bl	80022f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006124:	b29b      	uxth	r3, r3
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	b29b      	uxth	r3, r3
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f8c1 	bl	80062b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006132:	e09b      	b.n	800626c <HAL_UART_IRQHandler+0x518>
 8006134:	08006393 	.word	0x08006393
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006140:	b29b      	uxth	r3, r3
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800614c:	b29b      	uxth	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 808e 	beq.w	8006270 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 8089 	beq.w	8006270 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	330c      	adds	r3, #12
 8006164:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006168:	e853 3f00 	ldrex	r3, [r3]
 800616c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800616e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006174:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	330c      	adds	r3, #12
 800617e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006182:	647a      	str	r2, [r7, #68]	@ 0x44
 8006184:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006188:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e3      	bne.n	800615e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3314      	adds	r3, #20
 800619c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	623b      	str	r3, [r7, #32]
   return(result);
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	f023 0301 	bic.w	r3, r3, #1
 80061ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3314      	adds	r3, #20
 80061b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80061ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80061bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e3      	bne.n	8006196 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0310 	bic.w	r3, r3, #16
 80061f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006200:	61fa      	str	r2, [r7, #28]
 8006202:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	69b9      	ldr	r1, [r7, #24]
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	617b      	str	r3, [r7, #20]
   return(result);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e3      	bne.n	80061dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800621a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800621e:	4619      	mov	r1, r3
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f847 	bl	80062b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006226:	e023      	b.n	8006270 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800622c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006230:	2b00      	cmp	r3, #0
 8006232:	d009      	beq.n	8006248 <HAL_UART_IRQHandler+0x4f4>
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006238:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f8ba 	bl	80063ba <UART_Transmit_IT>
    return;
 8006246:	e014      	b.n	8006272 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800624c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00e      	beq.n	8006272 <HAL_UART_IRQHandler+0x51e>
 8006254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d008      	beq.n	8006272 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f8fa 	bl	800645a <UART_EndTransmit_IT>
    return;
 8006266:	e004      	b.n	8006272 <HAL_UART_IRQHandler+0x51e>
    return;
 8006268:	bf00      	nop
 800626a:	e002      	b.n	8006272 <HAL_UART_IRQHandler+0x51e>
      return;
 800626c:	bf00      	nop
 800626e:	e000      	b.n	8006272 <HAL_UART_IRQHandler+0x51e>
      return;
 8006270:	bf00      	nop
  }
}
 8006272:	37e8      	adds	r7, #232	@ 0xe8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062c0:	bf00      	nop
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b095      	sub	sp, #84	@ 0x54
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	330c      	adds	r3, #12
 80062da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062de:	e853 3f00 	ldrex	r3, [r3]
 80062e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80062f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062fc:	e841 2300 	strex	r3, r2, [r1]
 8006300:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1e5      	bne.n	80062d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3314      	adds	r3, #20
 800630e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	e853 3f00 	ldrex	r3, [r3]
 8006316:	61fb      	str	r3, [r7, #28]
   return(result);
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f023 0301 	bic.w	r3, r3, #1
 800631e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3314      	adds	r3, #20
 8006326:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006328:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800632a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800632e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e5      	bne.n	8006308 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006340:	2b01      	cmp	r3, #1
 8006342:	d119      	bne.n	8006378 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	60bb      	str	r3, [r7, #8]
   return(result);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f023 0310 	bic.w	r3, r3, #16
 800635a:	647b      	str	r3, [r7, #68]	@ 0x44
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006364:	61ba      	str	r2, [r7, #24]
 8006366:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6979      	ldr	r1, [r7, #20]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	613b      	str	r3, [r7, #16]
   return(result);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e5      	bne.n	8006344 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006386:	bf00      	nop
 8006388:	3754      	adds	r7, #84	@ 0x54
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr

08006392 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b084      	sub	sp, #16
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800639e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f7ff ff77 	bl	80062a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b21      	cmp	r3, #33	@ 0x21
 80063cc:	d13e      	bne.n	800644c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d6:	d114      	bne.n	8006402 <UART_Transmit_IT+0x48>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d110      	bne.n	8006402 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	461a      	mov	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	1c9a      	adds	r2, r3, #2
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	621a      	str	r2, [r3, #32]
 8006400:	e008      	b.n	8006414 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	1c59      	adds	r1, r3, #1
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6211      	str	r1, [r2, #32]
 800640c:	781a      	ldrb	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006418:	b29b      	uxth	r3, r3
 800641a:	3b01      	subs	r3, #1
 800641c:	b29b      	uxth	r3, r3
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	4619      	mov	r1, r3
 8006422:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10f      	bne.n	8006448 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68da      	ldr	r2, [r3, #12]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006436:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006446:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006448:	2300      	movs	r3, #0
 800644a:	e000      	b.n	800644e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800644c:	2302      	movs	r3, #2
  }
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006470:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2220      	movs	r2, #32
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7ff fefc 	bl	8006278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b08c      	sub	sp, #48	@ 0x30
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b22      	cmp	r3, #34	@ 0x22
 800649c:	f040 80ae 	bne.w	80065fc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a8:	d117      	bne.n	80064da <UART_Receive_IT+0x50>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d113      	bne.n	80064da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064b2:	2300      	movs	r3, #0
 80064b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d2:	1c9a      	adds	r2, r3, #2
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80064d8:	e026      	b.n	8006528 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ec:	d007      	beq.n	80064fe <UART_Receive_IT+0x74>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10a      	bne.n	800650c <UART_Receive_IT+0x82>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	b2da      	uxtb	r2, r3
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	e008      	b.n	800651e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006518:	b2da      	uxtb	r2, r3
 800651a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800652c:	b29b      	uxth	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	b29b      	uxth	r3, r3
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	4619      	mov	r1, r3
 8006536:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006538:	2b00      	cmp	r3, #0
 800653a:	d15d      	bne.n	80065f8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0220 	bic.w	r2, r2, #32
 800654a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800655a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695a      	ldr	r2, [r3, #20]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0201 	bic.w	r2, r2, #1
 800656a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2220      	movs	r2, #32
 8006570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657e:	2b01      	cmp	r3, #1
 8006580:	d135      	bne.n	80065ee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	330c      	adds	r3, #12
 800658e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	613b      	str	r3, [r7, #16]
   return(result);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f023 0310 	bic.w	r3, r3, #16
 800659e:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	330c      	adds	r3, #12
 80065a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a8:	623a      	str	r2, [r7, #32]
 80065aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	69f9      	ldr	r1, [r7, #28]
 80065ae:	6a3a      	ldr	r2, [r7, #32]
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e5      	bne.n	8006588 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b10      	cmp	r3, #16
 80065c8:	d10a      	bne.n	80065e0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80065e4:	4619      	mov	r1, r3
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f7ff fe64 	bl	80062b4 <HAL_UARTEx_RxEventCallback>
 80065ec:	e002      	b.n	80065f4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff fe4c 	bl	800628c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	e002      	b.n	80065fe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	e000      	b.n	80065fe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80065fc:	2302      	movs	r3, #2
  }
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3730      	adds	r7, #48	@ 0x30
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
	...

08006608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800660c:	b0c0      	sub	sp, #256	@ 0x100
 800660e:	af00      	add	r7, sp, #0
 8006610:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006624:	68d9      	ldr	r1, [r3, #12]
 8006626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	ea40 0301 	orr.w	r3, r0, r1
 8006630:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	431a      	orrs	r2, r3
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	431a      	orrs	r2, r3
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	4313      	orrs	r3, r2
 8006650:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006660:	f021 010c 	bic.w	r1, r1, #12
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800666e:	430b      	orrs	r3, r1
 8006670:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800667e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006682:	6999      	ldr	r1, [r3, #24]
 8006684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	ea40 0301 	orr.w	r3, r0, r1
 800668e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b8f      	ldr	r3, [pc, #572]	@ (80068d4 <UART_SetConfig+0x2cc>)
 8006698:	429a      	cmp	r2, r3
 800669a:	d005      	beq.n	80066a8 <UART_SetConfig+0xa0>
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	4b8d      	ldr	r3, [pc, #564]	@ (80068d8 <UART_SetConfig+0x2d0>)
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d104      	bne.n	80066b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066a8:	f7fd fba2 	bl	8003df0 <HAL_RCC_GetPCLK2Freq>
 80066ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066b0:	e003      	b.n	80066ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066b2:	f7fd fb89 	bl	8003dc8 <HAL_RCC_GetPCLK1Freq>
 80066b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066c4:	f040 810c 	bne.w	80068e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066cc:	2200      	movs	r2, #0
 80066ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80066d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80066da:	4622      	mov	r2, r4
 80066dc:	462b      	mov	r3, r5
 80066de:	1891      	adds	r1, r2, r2
 80066e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066e2:	415b      	adcs	r3, r3
 80066e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066ea:	4621      	mov	r1, r4
 80066ec:	eb12 0801 	adds.w	r8, r2, r1
 80066f0:	4629      	mov	r1, r5
 80066f2:	eb43 0901 	adc.w	r9, r3, r1
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800670a:	4690      	mov	r8, r2
 800670c:	4699      	mov	r9, r3
 800670e:	4623      	mov	r3, r4
 8006710:	eb18 0303 	adds.w	r3, r8, r3
 8006714:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006718:	462b      	mov	r3, r5
 800671a:	eb49 0303 	adc.w	r3, r9, r3
 800671e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800672e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006732:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006736:	460b      	mov	r3, r1
 8006738:	18db      	adds	r3, r3, r3
 800673a:	653b      	str	r3, [r7, #80]	@ 0x50
 800673c:	4613      	mov	r3, r2
 800673e:	eb42 0303 	adc.w	r3, r2, r3
 8006742:	657b      	str	r3, [r7, #84]	@ 0x54
 8006744:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006748:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800674c:	f7fa fa5c 	bl	8000c08 <__aeabi_uldivmod>
 8006750:	4602      	mov	r2, r0
 8006752:	460b      	mov	r3, r1
 8006754:	4b61      	ldr	r3, [pc, #388]	@ (80068dc <UART_SetConfig+0x2d4>)
 8006756:	fba3 2302 	umull	r2, r3, r3, r2
 800675a:	095b      	lsrs	r3, r3, #5
 800675c:	011c      	lsls	r4, r3, #4
 800675e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006762:	2200      	movs	r2, #0
 8006764:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006768:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800676c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006770:	4642      	mov	r2, r8
 8006772:	464b      	mov	r3, r9
 8006774:	1891      	adds	r1, r2, r2
 8006776:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006778:	415b      	adcs	r3, r3
 800677a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800677c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006780:	4641      	mov	r1, r8
 8006782:	eb12 0a01 	adds.w	sl, r2, r1
 8006786:	4649      	mov	r1, r9
 8006788:	eb43 0b01 	adc.w	fp, r3, r1
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006798:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800679c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067a0:	4692      	mov	sl, r2
 80067a2:	469b      	mov	fp, r3
 80067a4:	4643      	mov	r3, r8
 80067a6:	eb1a 0303 	adds.w	r3, sl, r3
 80067aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067ae:	464b      	mov	r3, r9
 80067b0:	eb4b 0303 	adc.w	r3, fp, r3
 80067b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067cc:	460b      	mov	r3, r1
 80067ce:	18db      	adds	r3, r3, r3
 80067d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80067d2:	4613      	mov	r3, r2
 80067d4:	eb42 0303 	adc.w	r3, r2, r3
 80067d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80067da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067e2:	f7fa fa11 	bl	8000c08 <__aeabi_uldivmod>
 80067e6:	4602      	mov	r2, r0
 80067e8:	460b      	mov	r3, r1
 80067ea:	4611      	mov	r1, r2
 80067ec:	4b3b      	ldr	r3, [pc, #236]	@ (80068dc <UART_SetConfig+0x2d4>)
 80067ee:	fba3 2301 	umull	r2, r3, r3, r1
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	2264      	movs	r2, #100	@ 0x64
 80067f6:	fb02 f303 	mul.w	r3, r2, r3
 80067fa:	1acb      	subs	r3, r1, r3
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006802:	4b36      	ldr	r3, [pc, #216]	@ (80068dc <UART_SetConfig+0x2d4>)
 8006804:	fba3 2302 	umull	r2, r3, r3, r2
 8006808:	095b      	lsrs	r3, r3, #5
 800680a:	005b      	lsls	r3, r3, #1
 800680c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006810:	441c      	add	r4, r3
 8006812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006816:	2200      	movs	r2, #0
 8006818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800681c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006820:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006824:	4642      	mov	r2, r8
 8006826:	464b      	mov	r3, r9
 8006828:	1891      	adds	r1, r2, r2
 800682a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800682c:	415b      	adcs	r3, r3
 800682e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006830:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006834:	4641      	mov	r1, r8
 8006836:	1851      	adds	r1, r2, r1
 8006838:	6339      	str	r1, [r7, #48]	@ 0x30
 800683a:	4649      	mov	r1, r9
 800683c:	414b      	adcs	r3, r1
 800683e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	f04f 0300 	mov.w	r3, #0
 8006848:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800684c:	4659      	mov	r1, fp
 800684e:	00cb      	lsls	r3, r1, #3
 8006850:	4651      	mov	r1, sl
 8006852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006856:	4651      	mov	r1, sl
 8006858:	00ca      	lsls	r2, r1, #3
 800685a:	4610      	mov	r0, r2
 800685c:	4619      	mov	r1, r3
 800685e:	4603      	mov	r3, r0
 8006860:	4642      	mov	r2, r8
 8006862:	189b      	adds	r3, r3, r2
 8006864:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006868:	464b      	mov	r3, r9
 800686a:	460a      	mov	r2, r1
 800686c:	eb42 0303 	adc.w	r3, r2, r3
 8006870:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006880:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006884:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006888:	460b      	mov	r3, r1
 800688a:	18db      	adds	r3, r3, r3
 800688c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800688e:	4613      	mov	r3, r2
 8006890:	eb42 0303 	adc.w	r3, r2, r3
 8006894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800689a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800689e:	f7fa f9b3 	bl	8000c08 <__aeabi_uldivmod>
 80068a2:	4602      	mov	r2, r0
 80068a4:	460b      	mov	r3, r1
 80068a6:	4b0d      	ldr	r3, [pc, #52]	@ (80068dc <UART_SetConfig+0x2d4>)
 80068a8:	fba3 1302 	umull	r1, r3, r3, r2
 80068ac:	095b      	lsrs	r3, r3, #5
 80068ae:	2164      	movs	r1, #100	@ 0x64
 80068b0:	fb01 f303 	mul.w	r3, r1, r3
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	00db      	lsls	r3, r3, #3
 80068b8:	3332      	adds	r3, #50	@ 0x32
 80068ba:	4a08      	ldr	r2, [pc, #32]	@ (80068dc <UART_SetConfig+0x2d4>)
 80068bc:	fba2 2303 	umull	r2, r3, r2, r3
 80068c0:	095b      	lsrs	r3, r3, #5
 80068c2:	f003 0207 	and.w	r2, r3, #7
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4422      	add	r2, r4
 80068ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068d0:	e106      	b.n	8006ae0 <UART_SetConfig+0x4d8>
 80068d2:	bf00      	nop
 80068d4:	40011000 	.word	0x40011000
 80068d8:	40011400 	.word	0x40011400
 80068dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068f2:	4642      	mov	r2, r8
 80068f4:	464b      	mov	r3, r9
 80068f6:	1891      	adds	r1, r2, r2
 80068f8:	6239      	str	r1, [r7, #32]
 80068fa:	415b      	adcs	r3, r3
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006902:	4641      	mov	r1, r8
 8006904:	1854      	adds	r4, r2, r1
 8006906:	4649      	mov	r1, r9
 8006908:	eb43 0501 	adc.w	r5, r3, r1
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	f04f 0300 	mov.w	r3, #0
 8006914:	00eb      	lsls	r3, r5, #3
 8006916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800691a:	00e2      	lsls	r2, r4, #3
 800691c:	4614      	mov	r4, r2
 800691e:	461d      	mov	r5, r3
 8006920:	4643      	mov	r3, r8
 8006922:	18e3      	adds	r3, r4, r3
 8006924:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006928:	464b      	mov	r3, r9
 800692a:	eb45 0303 	adc.w	r3, r5, r3
 800692e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800693e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006942:	f04f 0200 	mov.w	r2, #0
 8006946:	f04f 0300 	mov.w	r3, #0
 800694a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800694e:	4629      	mov	r1, r5
 8006950:	008b      	lsls	r3, r1, #2
 8006952:	4621      	mov	r1, r4
 8006954:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006958:	4621      	mov	r1, r4
 800695a:	008a      	lsls	r2, r1, #2
 800695c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006960:	f7fa f952 	bl	8000c08 <__aeabi_uldivmod>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4b60      	ldr	r3, [pc, #384]	@ (8006aec <UART_SetConfig+0x4e4>)
 800696a:	fba3 2302 	umull	r2, r3, r3, r2
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	011c      	lsls	r4, r3, #4
 8006972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006976:	2200      	movs	r2, #0
 8006978:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800697c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006980:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006984:	4642      	mov	r2, r8
 8006986:	464b      	mov	r3, r9
 8006988:	1891      	adds	r1, r2, r2
 800698a:	61b9      	str	r1, [r7, #24]
 800698c:	415b      	adcs	r3, r3
 800698e:	61fb      	str	r3, [r7, #28]
 8006990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006994:	4641      	mov	r1, r8
 8006996:	1851      	adds	r1, r2, r1
 8006998:	6139      	str	r1, [r7, #16]
 800699a:	4649      	mov	r1, r9
 800699c:	414b      	adcs	r3, r1
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	f04f 0200 	mov.w	r2, #0
 80069a4:	f04f 0300 	mov.w	r3, #0
 80069a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069ac:	4659      	mov	r1, fp
 80069ae:	00cb      	lsls	r3, r1, #3
 80069b0:	4651      	mov	r1, sl
 80069b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069b6:	4651      	mov	r1, sl
 80069b8:	00ca      	lsls	r2, r1, #3
 80069ba:	4610      	mov	r0, r2
 80069bc:	4619      	mov	r1, r3
 80069be:	4603      	mov	r3, r0
 80069c0:	4642      	mov	r2, r8
 80069c2:	189b      	adds	r3, r3, r2
 80069c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069c8:	464b      	mov	r3, r9
 80069ca:	460a      	mov	r2, r1
 80069cc:	eb42 0303 	adc.w	r3, r2, r3
 80069d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	f04f 0300 	mov.w	r3, #0
 80069e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069ec:	4649      	mov	r1, r9
 80069ee:	008b      	lsls	r3, r1, #2
 80069f0:	4641      	mov	r1, r8
 80069f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f6:	4641      	mov	r1, r8
 80069f8:	008a      	lsls	r2, r1, #2
 80069fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069fe:	f7fa f903 	bl	8000c08 <__aeabi_uldivmod>
 8006a02:	4602      	mov	r2, r0
 8006a04:	460b      	mov	r3, r1
 8006a06:	4611      	mov	r1, r2
 8006a08:	4b38      	ldr	r3, [pc, #224]	@ (8006aec <UART_SetConfig+0x4e4>)
 8006a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a0e:	095b      	lsrs	r3, r3, #5
 8006a10:	2264      	movs	r2, #100	@ 0x64
 8006a12:	fb02 f303 	mul.w	r3, r2, r3
 8006a16:	1acb      	subs	r3, r1, r3
 8006a18:	011b      	lsls	r3, r3, #4
 8006a1a:	3332      	adds	r3, #50	@ 0x32
 8006a1c:	4a33      	ldr	r2, [pc, #204]	@ (8006aec <UART_SetConfig+0x4e4>)
 8006a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a22:	095b      	lsrs	r3, r3, #5
 8006a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a28:	441c      	add	r4, r3
 8006a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a2e:	2200      	movs	r2, #0
 8006a30:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a32:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a38:	4642      	mov	r2, r8
 8006a3a:	464b      	mov	r3, r9
 8006a3c:	1891      	adds	r1, r2, r2
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	415b      	adcs	r3, r3
 8006a42:	60fb      	str	r3, [r7, #12]
 8006a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a48:	4641      	mov	r1, r8
 8006a4a:	1851      	adds	r1, r2, r1
 8006a4c:	6039      	str	r1, [r7, #0]
 8006a4e:	4649      	mov	r1, r9
 8006a50:	414b      	adcs	r3, r1
 8006a52:	607b      	str	r3, [r7, #4]
 8006a54:	f04f 0200 	mov.w	r2, #0
 8006a58:	f04f 0300 	mov.w	r3, #0
 8006a5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a60:	4659      	mov	r1, fp
 8006a62:	00cb      	lsls	r3, r1, #3
 8006a64:	4651      	mov	r1, sl
 8006a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a6a:	4651      	mov	r1, sl
 8006a6c:	00ca      	lsls	r2, r1, #3
 8006a6e:	4610      	mov	r0, r2
 8006a70:	4619      	mov	r1, r3
 8006a72:	4603      	mov	r3, r0
 8006a74:	4642      	mov	r2, r8
 8006a76:	189b      	adds	r3, r3, r2
 8006a78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a7a:	464b      	mov	r3, r9
 8006a7c:	460a      	mov	r2, r1
 8006a7e:	eb42 0303 	adc.w	r3, r2, r3
 8006a82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	f04f 0300 	mov.w	r3, #0
 8006a98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	008b      	lsls	r3, r1, #2
 8006aa0:	4641      	mov	r1, r8
 8006aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa6:	4641      	mov	r1, r8
 8006aa8:	008a      	lsls	r2, r1, #2
 8006aaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006aae:	f7fa f8ab 	bl	8000c08 <__aeabi_uldivmod>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8006aec <UART_SetConfig+0x4e4>)
 8006ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	2164      	movs	r1, #100	@ 0x64
 8006ac0:	fb01 f303 	mul.w	r3, r1, r3
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	3332      	adds	r3, #50	@ 0x32
 8006aca:	4a08      	ldr	r2, [pc, #32]	@ (8006aec <UART_SetConfig+0x4e4>)
 8006acc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad0:	095b      	lsrs	r3, r3, #5
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4422      	add	r2, r4
 8006ade:	609a      	str	r2, [r3, #8]
}
 8006ae0:	bf00      	nop
 8006ae2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aec:	51eb851f 	.word	0x51eb851f

08006af0 <RTC_interface>:

extern char date[10];
extern char time[20];

void RTC_interface ()
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b082      	sub	sp, #8
 8006af4:	af02      	add	r7, sp, #8



		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8006af6:	2200      	movs	r2, #0
 8006af8:	490c      	ldr	r1, [pc, #48]	@ (8006b2c <RTC_interface+0x3c>)
 8006afa:	480d      	ldr	r0, [pc, #52]	@ (8006b30 <RTC_interface+0x40>)
 8006afc:	f7fd feeb 	bl	80048d6 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8006b00:	2200      	movs	r2, #0
 8006b02:	490c      	ldr	r1, [pc, #48]	@ (8006b34 <RTC_interface+0x44>)
 8006b04:	480a      	ldr	r0, [pc, #40]	@ (8006b30 <RTC_interface+0x40>)
 8006b06:	f7fd fe04 	bl	8004712 <HAL_RTC_GetTime>


		//sprintf(date,"Date: %d:%d:%d",sDate.Date,sDate.Month,sDate.Year);
		sprintf(time, "%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sDate.Date);
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b34 <RTC_interface+0x44>)
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	4b08      	ldr	r3, [pc, #32]	@ (8006b34 <RTC_interface+0x44>)
 8006b12:	785b      	ldrb	r3, [r3, #1]
 8006b14:	4619      	mov	r1, r3
 8006b16:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <RTC_interface+0x3c>)
 8006b18:	789b      	ldrb	r3, [r3, #2]
 8006b1a:	9300      	str	r3, [sp, #0]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4906      	ldr	r1, [pc, #24]	@ (8006b38 <RTC_interface+0x48>)
 8006b20:	4806      	ldr	r0, [pc, #24]	@ (8006b3c <RTC_interface+0x4c>)
 8006b22:	f002 f929 	bl	8008d78 <siprintf>

		//HAL_Delay(500);



}
 8006b26:	bf00      	nop
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20005994 	.word	0x20005994
 8006b30:	20005960 	.word	0x20005960
 8006b34:	20005980 	.word	0x20005980
 8006b38:	0800b094 	.word	0x0800b094
 8006b3c:	200038b8 	.word	0x200038b8

08006b40 <MX_RTC_Init>:
   * @brief RTC Initialization Function
   * @param None
   * @retval None
   */
  void MX_RTC_Init(void)
 {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN RTC_Init 0 */

   /* USER CODE END RTC_Init 0 */

   RTC_TimeTypeDef sTime = {0};
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	605a      	str	r2, [r3, #4]
 8006b4e:	609a      	str	r2, [r3, #8]
 8006b50:	60da      	str	r2, [r3, #12]
 8006b52:	611a      	str	r2, [r3, #16]
   RTC_DateTypeDef sDate = {0};
 8006b54:	2300      	movs	r3, #0
 8006b56:	603b      	str	r3, [r7, #0]

   /* USER CODE END RTC_Init 1 */

   /** Initialize RTC Only
   */
   hrtc.Instance = RTC;
 8006b58:	4b24      	ldr	r3, [pc, #144]	@ (8006bec <MX_RTC_Init+0xac>)
 8006b5a:	4a25      	ldr	r2, [pc, #148]	@ (8006bf0 <MX_RTC_Init+0xb0>)
 8006b5c:	601a      	str	r2, [r3, #0]
   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006b5e:	4b23      	ldr	r3, [pc, #140]	@ (8006bec <MX_RTC_Init+0xac>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	605a      	str	r2, [r3, #4]
   hrtc.Init.AsynchPrediv = 127;
 8006b64:	4b21      	ldr	r3, [pc, #132]	@ (8006bec <MX_RTC_Init+0xac>)
 8006b66:	227f      	movs	r2, #127	@ 0x7f
 8006b68:	609a      	str	r2, [r3, #8]
   hrtc.Init.SynchPrediv = 255;
 8006b6a:	4b20      	ldr	r3, [pc, #128]	@ (8006bec <MX_RTC_Init+0xac>)
 8006b6c:	22ff      	movs	r2, #255	@ 0xff
 8006b6e:	60da      	str	r2, [r3, #12]
   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006b70:	4b1e      	ldr	r3, [pc, #120]	@ (8006bec <MX_RTC_Init+0xac>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	611a      	str	r2, [r3, #16]
   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006b76:	4b1d      	ldr	r3, [pc, #116]	@ (8006bec <MX_RTC_Init+0xac>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	615a      	str	r2, [r3, #20]
   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bec <MX_RTC_Init+0xac>)
 8006b7e:	2200      	movs	r2, #0
 8006b80:	619a      	str	r2, [r3, #24]
   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006b82:	481a      	ldr	r0, [pc, #104]	@ (8006bec <MX_RTC_Init+0xac>)
 8006b84:	f7fd fca8 	bl	80044d8 <HAL_RTC_Init>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <MX_RTC_Init+0x52>
   {
     Error_Handler();
 8006b8e:	f7fa ff53 	bl	8001a38 <Error_Handler>

   /* USER CODE END Check_RTC_BKUP */

   /** Initialize RTC and set the Time and Date
   */
   sTime.Hours = 0x00;
 8006b92:	2300      	movs	r3, #0
 8006b94:	713b      	strb	r3, [r7, #4]
   sTime.Minutes = 0x00;
 8006b96:	2300      	movs	r3, #0
 8006b98:	717b      	strb	r3, [r7, #5]
   sTime.Seconds = 0x00;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	71bb      	strb	r3, [r7, #6]
   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	613b      	str	r3, [r7, #16]
   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]
   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	2201      	movs	r2, #1
 8006baa:	4619      	mov	r1, r3
 8006bac:	480f      	ldr	r0, [pc, #60]	@ (8006bec <MX_RTC_Init+0xac>)
 8006bae:	f7fd fd16 	bl	80045de <HAL_RTC_SetTime>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <MX_RTC_Init+0x7c>
   {
     Error_Handler();
 8006bb8:	f7fa ff3e 	bl	8001a38 <Error_Handler>
   }
   sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8006bbc:	2306      	movs	r3, #6
 8006bbe:	703b      	strb	r3, [r7, #0]
   sDate.Month = 0x00;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	707b      	strb	r3, [r7, #1]
   sDate.Date = 0x00;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	70bb      	strb	r3, [r7, #2]
   sDate.Year = 0x0;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	70fb      	strb	r3, [r7, #3]

   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8006bcc:	463b      	mov	r3, r7
 8006bce:	2201      	movs	r2, #1
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4806      	ldr	r0, [pc, #24]	@ (8006bec <MX_RTC_Init+0xac>)
 8006bd4:	f7fd fdfb 	bl	80047ce <HAL_RTC_SetDate>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <MX_RTC_Init+0xa2>
   {
     Error_Handler();
 8006bde:	f7fa ff2b 	bl	8001a38 <Error_Handler>
   }
   /* USER CODE BEGIN RTC_Init 2 */

   /* USER CODE END RTC_Init 2 */

 }
 8006be2:	bf00      	nop
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	20005960 	.word	0x20005960
 8006bf0:	40002800 	.word	0x40002800

08006bf4 <Drive_CS_low>:




void Drive_CS_low()
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	2110      	movs	r1, #16
 8006bfc:	4802      	ldr	r0, [pc, #8]	@ (8006c08 <Drive_CS_low+0x14>)
 8006bfe:	f7fb fd7f 	bl	8002700 <HAL_GPIO_WritePin>
}
 8006c02:	bf00      	nop
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	40020000 	.word	0x40020000

08006c0c <Drive_CS_high>:


void Drive_CS_high()
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8006c10:	2201      	movs	r2, #1
 8006c12:	2110      	movs	r1, #16
 8006c14:	4802      	ldr	r0, [pc, #8]	@ (8006c20 <Drive_CS_high+0x14>)
 8006c16:	f7fb fd73 	bl	8002700 <HAL_GPIO_WritePin>
}
 8006c1a:	bf00      	nop
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	40020000 	.word	0x40020000

08006c24 <Drive_DC_low>:


void Drive_DC_low()
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2110      	movs	r1, #16
 8006c2c:	4802      	ldr	r0, [pc, #8]	@ (8006c38 <Drive_DC_low+0x14>)
 8006c2e:	f7fb fd67 	bl	8002700 <HAL_GPIO_WritePin>
}
 8006c32:	bf00      	nop
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	40020800 	.word	0x40020800

08006c3c <Drive_DC_high>:


void Drive_DC_high()
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8006c40:	2201      	movs	r2, #1
 8006c42:	2110      	movs	r1, #16
 8006c44:	4802      	ldr	r0, [pc, #8]	@ (8006c50 <Drive_DC_high+0x14>)
 8006c46:	f7fb fd5b 	bl	8002700 <HAL_GPIO_WritePin>
}
 8006c4a:	bf00      	nop
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	40020800 	.word	0x40020800

08006c54 <Drive_RESET_low>:


void Drive_RESET_low()
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2120      	movs	r1, #32
 8006c5c:	4802      	ldr	r0, [pc, #8]	@ (8006c68 <Drive_RESET_low+0x14>)
 8006c5e:	f7fb fd4f 	bl	8002700 <HAL_GPIO_WritePin>
}
 8006c62:	bf00      	nop
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	40020800 	.word	0x40020800

08006c6c <Drive_RESET_high>:


void Drive_RESET_high()
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8006c70:	2201      	movs	r2, #1
 8006c72:	2120      	movs	r1, #32
 8006c74:	4802      	ldr	r0, [pc, #8]	@ (8006c80 <Drive_RESET_high+0x14>)
 8006c76:	f7fb fd43 	bl	8002700 <HAL_GPIO_WritePin>
}
 8006c7a:	bf00      	nop
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	40020800 	.word	0x40020800

08006c84 <SPI_send_byte>:


void SPI_send_byte(uint8_t byte_to_transmit)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_transmit, 1, 10);
 8006c8e:	1df9      	adds	r1, r7, #7
 8006c90:	230a      	movs	r3, #10
 8006c92:	2201      	movs	r2, #1
 8006c94:	4803      	ldr	r0, [pc, #12]	@ (8006ca4 <SPI_send_byte+0x20>)
 8006c96:	f7fd ffb4 	bl	8004c02 <HAL_SPI_Transmit>
}
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20005900 	.word	0x20005900

08006ca8 <SPI_send_array>:


void SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi1, array_to_transmit, array_size, 100);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	2364      	movs	r3, #100	@ 0x64
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	4803      	ldr	r0, [pc, #12]	@ (8006cc8 <SPI_send_array+0x20>)
 8006cbc:	f7fd ffa1 	bl	8004c02 <HAL_SPI_Transmit>
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20005900 	.word	0x20005900

08006ccc <msDelay>:


void msDelay(uint32_t milliseconds)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fb f9d7 	bl	8002088 <HAL_Delay>
}
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <Display_command>:


void Display_command(uint8_t command)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b082      	sub	sp, #8
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	4603      	mov	r3, r0
 8006cea:	71fb      	strb	r3, [r7, #7]
	Drive_CS_low();
 8006cec:	f7ff ff82 	bl	8006bf4 <Drive_CS_low>
	Drive_DC_low();
 8006cf0:	f7ff ff98 	bl	8006c24 <Drive_DC_low>
	SPI_send_byte(command);
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff ffc4 	bl	8006c84 <SPI_send_byte>
	Drive_CS_high();
 8006cfc:	f7ff ff86 	bl	8006c0c <Drive_CS_high>
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <Display_data>:

void Display_data(uint8_t data)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	4603      	mov	r3, r0
 8006d10:	71fb      	strb	r3, [r7, #7]
	Drive_CS_low();
 8006d12:	f7ff ff6f 	bl	8006bf4 <Drive_CS_low>
	Drive_DC_high();
 8006d16:	f7ff ff91 	bl	8006c3c <Drive_DC_high>
	SPI_send_byte(data);
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff ffb1 	bl	8006c84 <SPI_send_byte>
	Drive_CS_high();
 8006d22:	f7ff ff73 	bl	8006c0c <Drive_CS_high>
}
 8006d26:	bf00      	nop
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <Display_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void Display_init()
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	af00      	add	r7, sp, #0
	Drive_RESET_low();
 8006d32:	f7ff ff8f 	bl	8006c54 <Drive_RESET_low>
	msDelay(1);
 8006d36:	2001      	movs	r0, #1
 8006d38:	f7ff ffc8 	bl	8006ccc <msDelay>
	Drive_RESET_high();
 8006d3c:	f7ff ff96 	bl	8006c6c <Drive_RESET_high>
	msDelay(50);
 8006d40:	2032      	movs	r0, #50	@ 0x32
 8006d42:	f7ff ffc3 	bl	8006ccc <msDelay>
	Display_command(0xFD);
 8006d46:	20fd      	movs	r0, #253	@ 0xfd
 8006d48:	f7ff ffcb 	bl	8006ce2 <Display_command>
	Display_data(0x12);
 8006d4c:	2012      	movs	r0, #18
 8006d4e:	f7ff ffdb 	bl	8006d08 <Display_data>
	Display_command(0xAE);
 8006d52:	20ae      	movs	r0, #174	@ 0xae
 8006d54:	f7ff ffc5 	bl	8006ce2 <Display_command>
	Display_command(0xB3);
 8006d58:	20b3      	movs	r0, #179	@ 0xb3
 8006d5a:	f7ff ffc2 	bl	8006ce2 <Display_command>
	Display_data(0x91);
 8006d5e:	2091      	movs	r0, #145	@ 0x91
 8006d60:	f7ff ffd2 	bl	8006d08 <Display_data>
	Display_command(0xCA);
 8006d64:	20ca      	movs	r0, #202	@ 0xca
 8006d66:	f7ff ffbc 	bl	8006ce2 <Display_command>
	Display_data(0x3F);
 8006d6a:	203f      	movs	r0, #63	@ 0x3f
 8006d6c:	f7ff ffcc 	bl	8006d08 <Display_data>
	Display_command(0xA2);
 8006d70:	20a2      	movs	r0, #162	@ 0xa2
 8006d72:	f7ff ffb6 	bl	8006ce2 <Display_command>
	Display_data(0x00);
 8006d76:	2000      	movs	r0, #0
 8006d78:	f7ff ffc6 	bl	8006d08 <Display_data>
	Display_command(0xA1);
 8006d7c:	20a1      	movs	r0, #161	@ 0xa1
 8006d7e:	f7ff ffb0 	bl	8006ce2 <Display_command>
	Display_data(0x00);
 8006d82:	2000      	movs	r0, #0
 8006d84:	f7ff ffc0 	bl	8006d08 <Display_data>
	Display_command(0xA0);
 8006d88:	20a0      	movs	r0, #160	@ 0xa0
 8006d8a:	f7ff ffaa 	bl	8006ce2 <Display_command>
	Display_data(0x14);
 8006d8e:	2014      	movs	r0, #20
 8006d90:	f7ff ffba 	bl	8006d08 <Display_data>
	Display_data(0x11);
 8006d94:	2011      	movs	r0, #17
 8006d96:	f7ff ffb7 	bl	8006d08 <Display_data>
	Display_command(0xB5);
 8006d9a:	20b5      	movs	r0, #181	@ 0xb5
 8006d9c:	f7ff ffa1 	bl	8006ce2 <Display_command>
	Display_data(0x00);
 8006da0:	2000      	movs	r0, #0
 8006da2:	f7ff ffb1 	bl	8006d08 <Display_data>
	Display_command(0xAB);
 8006da6:	20ab      	movs	r0, #171	@ 0xab
 8006da8:	f7ff ff9b 	bl	8006ce2 <Display_command>
	Display_data(0x01);
 8006dac:	2001      	movs	r0, #1
 8006dae:	f7ff ffab 	bl	8006d08 <Display_data>
	Display_command(0xB4);
 8006db2:	20b4      	movs	r0, #180	@ 0xb4
 8006db4:	f7ff ff95 	bl	8006ce2 <Display_command>
	Display_data(0xA0);
 8006db8:	20a0      	movs	r0, #160	@ 0xa0
 8006dba:	f7ff ffa5 	bl	8006d08 <Display_data>
	Display_data(0xFD);
 8006dbe:	20fd      	movs	r0, #253	@ 0xfd
 8006dc0:	f7ff ffa2 	bl	8006d08 <Display_data>
	Display_command(0xC1);
 8006dc4:	20c1      	movs	r0, #193	@ 0xc1
 8006dc6:	f7ff ff8c 	bl	8006ce2 <Display_command>
	Display_data(0xFF);
 8006dca:	20ff      	movs	r0, #255	@ 0xff
 8006dcc:	f7ff ff9c 	bl	8006d08 <Display_data>
	Display_command(0xC7);
 8006dd0:	20c7      	movs	r0, #199	@ 0xc7
 8006dd2:	f7ff ff86 	bl	8006ce2 <Display_command>
	Display_data(0x0F);
 8006dd6:	200f      	movs	r0, #15
 8006dd8:	f7ff ff96 	bl	8006d08 <Display_data>
	Display_command(0xB9);
 8006ddc:	20b9      	movs	r0, #185	@ 0xb9
 8006dde:	f7ff ff80 	bl	8006ce2 <Display_command>
	Display_command(0xB1);
 8006de2:	20b1      	movs	r0, #177	@ 0xb1
 8006de4:	f7ff ff7d 	bl	8006ce2 <Display_command>
	Display_data(0xE2);
 8006de8:	20e2      	movs	r0, #226	@ 0xe2
 8006dea:	f7ff ff8d 	bl	8006d08 <Display_data>
	Display_command(0xD1);
 8006dee:	20d1      	movs	r0, #209	@ 0xd1
 8006df0:	f7ff ff77 	bl	8006ce2 <Display_command>
	Display_data(0x82);
 8006df4:	2082      	movs	r0, #130	@ 0x82
 8006df6:	f7ff ff87 	bl	8006d08 <Display_data>
	Display_data(0x20);
 8006dfa:	2020      	movs	r0, #32
 8006dfc:	f7ff ff84 	bl	8006d08 <Display_data>
	Display_command(0xBB);
 8006e00:	20bb      	movs	r0, #187	@ 0xbb
 8006e02:	f7ff ff6e 	bl	8006ce2 <Display_command>
	Display_data(0x1F);
 8006e06:	201f      	movs	r0, #31
 8006e08:	f7ff ff7e 	bl	8006d08 <Display_data>
	Display_command(0xB6);
 8006e0c:	20b6      	movs	r0, #182	@ 0xb6
 8006e0e:	f7ff ff68 	bl	8006ce2 <Display_command>
	Display_data(0x08);
 8006e12:	2008      	movs	r0, #8
 8006e14:	f7ff ff78 	bl	8006d08 <Display_data>
	Display_command(0xBE);
 8006e18:	20be      	movs	r0, #190	@ 0xbe
 8006e1a:	f7ff ff62 	bl	8006ce2 <Display_command>
	Display_data(0x07);
 8006e1e:	2007      	movs	r0, #7
 8006e20:	f7ff ff72 	bl	8006d08 <Display_data>
	Display_command(0xA6);
 8006e24:	20a6      	movs	r0, #166	@ 0xa6
 8006e26:	f7ff ff5c 	bl	8006ce2 <Display_command>
	Display_command(0xA9);
 8006e2a:	20a9      	movs	r0, #169	@ 0xa9
 8006e2c:	f7ff ff59 	bl	8006ce2 <Display_command>
	msDelay(10);
 8006e30:	200a      	movs	r0, #10
 8006e32:	f7ff ff4b 	bl	8006ccc <msDelay>
	Display_command(0xAF);
 8006e36:	20af      	movs	r0, #175	@ 0xaf
 8006e38:	f7ff ff53 	bl	8006ce2 <Display_command>
	msDelay(50);
 8006e3c:	2032      	movs	r0, #50	@ 0x32
 8006e3e:	f7ff ff45 	bl	8006ccc <msDelay>
}
 8006e42:	bf00      	nop
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <Display_set_window>:
	Display_command(SET_DEFAULT_GRAYSCALE_TAB);
}


void Display_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
{
 8006e46:	b590      	push	{r4, r7, lr}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	461a      	mov	r2, r3
 8006e54:	4623      	mov	r3, r4
 8006e56:	71fb      	strb	r3, [r7, #7]
 8006e58:	4603      	mov	r3, r0
 8006e5a:	71bb      	strb	r3, [r7, #6]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	717b      	strb	r3, [r7, #5]
 8006e60:	4613      	mov	r3, r2
 8006e62:	713b      	strb	r3, [r7, #4]
	Display_command(SET_COLUMN_ADDR);  //set columns range
 8006e64:	2015      	movs	r0, #21
 8006e66:	f7ff ff3c 	bl	8006ce2 <Display_command>
	Display_data(28+start_column);
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	331c      	adds	r3, #28
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff ff49 	bl	8006d08 <Display_data>
	Display_data(28+end_column);
 8006e76:	79bb      	ldrb	r3, [r7, #6]
 8006e78:	331c      	adds	r3, #28
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff ff43 	bl	8006d08 <Display_data>
	Display_command(SET_ROW_ADDR);  //set rows range
 8006e82:	2075      	movs	r0, #117	@ 0x75
 8006e84:	f7ff ff2d 	bl	8006ce2 <Display_command>
	Display_data(start_row);
 8006e88:	797b      	ldrb	r3, [r7, #5]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff ff3c 	bl	8006d08 <Display_data>
	Display_data(end_row);
 8006e90:	793b      	ldrb	r3, [r7, #4]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7ff ff38 	bl	8006d08 <Display_data>
}
 8006e98:	bf00      	nop
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd90      	pop	{r4, r7, pc}

08006ea0 <Send_buffer>:


void Send_buffer(uint8_t* buffer, uint32_t buffer_size)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
	Display_command(ENABLE_RAM_WRITE);  //enable write of pixels
 8006eaa:	205c      	movs	r0, #92	@ 0x5c
 8006eac:	f7ff ff19 	bl	8006ce2 <Display_command>
	Drive_CS_low();
 8006eb0:	f7ff fea0 	bl	8006bf4 <Drive_CS_low>
	Drive_DC_high();
 8006eb4:	f7ff fec2 	bl	8006c3c <Drive_DC_high>
	SPI_send_array(buffer, buffer_size);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7ff fef4 	bl	8006ca8 <SPI_send_array>
	Drive_CS_high();
 8006ec0:	f7ff fea4 	bl	8006c0c <Drive_CS_high>
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <set_buffer_size>:

uint16_t _buffer_height = 64;       //buffer dimensions used to determine if pixel is within array bounds
uint16_t _buffer_width = 256;      //by default buffer size is equal to OLED size

void set_buffer_size(uint16_t _buffer_width, uint16_t buffer_height)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	460a      	mov	r2, r1
 8006ed6:	80fb      	strh	r3, [r7, #6]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	80bb      	strh	r3, [r7, #4]
	_buffer_height = buffer_height;
 8006edc:	4a04      	ldr	r2, [pc, #16]	@ (8006ef0 <set_buffer_size+0x24>)
 8006ede:	88bb      	ldrh	r3, [r7, #4]
 8006ee0:	8013      	strh	r3, [r2, #0]
	_buffer_width = _buffer_width;
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20003682 	.word	0x20003682

08006ef4 <fill_buffer>:

void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 8006f00:	78fb      	ldrb	r3, [r7, #3]
 8006f02:	011b      	lsls	r3, r3, #4
 8006f04:	b25a      	sxtb	r2, r3
 8006f06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	b25b      	sxtb	r3, r3
 8006f0e:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 8006f10:	4b0e      	ldr	r3, [pc, #56]	@ (8006f4c <fill_buffer+0x58>)
 8006f12:	881b      	ldrh	r3, [r3, #0]
 8006f14:	461a      	mov	r2, r3
 8006f16:	4b0e      	ldr	r3, [pc, #56]	@ (8006f50 <fill_buffer+0x5c>)
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	fb02 f303 	mul.w	r3, r2, r3
 8006f1e:	0fda      	lsrs	r2, r3, #31
 8006f20:	4413      	add	r3, r2
 8006f22:	105b      	asrs	r3, r3, #1
 8006f24:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 8006f26:	e004      	b.n	8006f32 <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	607a      	str	r2, [r7, #4]
 8006f2e:	7afa      	ldrb	r2, [r7, #11]
 8006f30:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	1e5a      	subs	r2, r3, #1
 8006f36:	60fa      	str	r2, [r7, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1f5      	bne.n	8006f28 <fill_buffer+0x34>
	}
}
 8006f3c:	bf00      	nop
 8006f3e:	bf00      	nop
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	20003682 	.word	0x20003682
 8006f50:	20003684 	.word	0x20003684

08006f54 <draw_pixel>:

void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	4608      	mov	r0, r1
 8006f5e:	4611      	mov	r1, r2
 8006f60:	461a      	mov	r2, r3
 8006f62:	4603      	mov	r3, r0
 8006f64:	817b      	strh	r3, [r7, #10]
 8006f66:	460b      	mov	r3, r1
 8006f68:	813b      	strh	r3, [r7, #8]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 8006f6e:	4b35      	ldr	r3, [pc, #212]	@ (8007044 <draw_pixel+0xf0>)
 8006f70:	881b      	ldrh	r3, [r3, #0]
 8006f72:	897a      	ldrh	r2, [r7, #10]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d25f      	bcs.n	8007038 <draw_pixel+0xe4>
 8006f78:	4b33      	ldr	r3, [pc, #204]	@ (8007048 <draw_pixel+0xf4>)
 8006f7a:	881b      	ldrh	r3, [r3, #0]
 8006f7c:	893a      	ldrh	r2, [r7, #8]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d25a      	bcs.n	8007038 <draw_pixel+0xe4>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 8006f82:	893b      	ldrh	r3, [r7, #8]
 8006f84:	4a2f      	ldr	r2, [pc, #188]	@ (8007044 <draw_pixel+0xf0>)
 8006f86:	8812      	ldrh	r2, [r2, #0]
 8006f88:	fb03 f202 	mul.w	r2, r3, r2
 8006f8c:	897b      	ldrh	r3, [r7, #10]
 8006f8e:	4413      	add	r3, r2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	bfb8      	it	lt
 8006f98:	425b      	neglt	r3, r3
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d125      	bne.n	8006fea <draw_pixel+0x96>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 8006f9e:	893b      	ldrh	r3, [r7, #8]
 8006fa0:	4a28      	ldr	r2, [pc, #160]	@ (8007044 <draw_pixel+0xf0>)
 8006fa2:	8812      	ldrh	r2, [r2, #0]
 8006fa4:	fb03 f202 	mul.w	r2, r3, r2
 8006fa8:	897b      	ldrh	r3, [r7, #10]
 8006faa:	4413      	add	r3, r2
 8006fac:	0fda      	lsrs	r2, r3, #31
 8006fae:	4413      	add	r3, r2
 8006fb0:	105b      	asrs	r3, r3, #1
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	b25b      	sxtb	r3, r3
 8006fbc:	f023 030f 	bic.w	r3, r3, #15
 8006fc0:	b25a      	sxtb	r2, r3
 8006fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	b259      	sxtb	r1, r3
 8006fca:	893b      	ldrh	r3, [r7, #8]
 8006fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8007044 <draw_pixel+0xf0>)
 8006fce:	8812      	ldrh	r2, [r2, #0]
 8006fd0:	fb03 f202 	mul.w	r2, r3, r2
 8006fd4:	897b      	ldrh	r3, [r7, #10]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	0fda      	lsrs	r2, r3, #31
 8006fda:	4413      	add	r3, r2
 8006fdc:	105b      	asrs	r3, r3, #1
 8006fde:	461a      	mov	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	b2ca      	uxtb	r2, r1
 8006fe6:	701a      	strb	r2, [r3, #0]
 8006fe8:	e027      	b.n	800703a <draw_pixel+0xe6>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 8006fea:	893b      	ldrh	r3, [r7, #8]
 8006fec:	4a15      	ldr	r2, [pc, #84]	@ (8007044 <draw_pixel+0xf0>)
 8006fee:	8812      	ldrh	r2, [r2, #0]
 8006ff0:	fb03 f202 	mul.w	r2, r3, r2
 8006ff4:	897b      	ldrh	r3, [r7, #10]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	0fda      	lsrs	r2, r3, #31
 8006ffa:	4413      	add	r3, r2
 8006ffc:	105b      	asrs	r3, r3, #1
 8006ffe:	461a      	mov	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4413      	add	r3, r2
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	b25b      	sxtb	r3, r3
 8007008:	f003 030f 	and.w	r3, r3, #15
 800700c:	b25a      	sxtb	r2, r3
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	011b      	lsls	r3, r3, #4
 8007012:	b25b      	sxtb	r3, r3
 8007014:	4313      	orrs	r3, r2
 8007016:	b259      	sxtb	r1, r3
 8007018:	893b      	ldrh	r3, [r7, #8]
 800701a:	4a0a      	ldr	r2, [pc, #40]	@ (8007044 <draw_pixel+0xf0>)
 800701c:	8812      	ldrh	r2, [r2, #0]
 800701e:	fb03 f202 	mul.w	r2, r3, r2
 8007022:	897b      	ldrh	r3, [r7, #10]
 8007024:	4413      	add	r3, r2
 8007026:	0fda      	lsrs	r2, r3, #31
 8007028:	4413      	add	r3, r2
 800702a:	105b      	asrs	r3, r3, #1
 800702c:	461a      	mov	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	4413      	add	r3, r2
 8007032:	b2ca      	uxtb	r2, r1
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e000      	b.n	800703a <draw_pixel+0xe6>
		return;
 8007038:	bf00      	nop
	}
}
 800703a:	3714      	adds	r7, #20
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr
 8007044:	20003684 	.word	0x20003684
 8007048:	20003682 	.word	0x20003682

0800704c <draw_rect_filled>:

void draw_rect_filled(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	4608      	mov	r0, r1
 8007056:	4611      	mov	r1, r2
 8007058:	461a      	mov	r2, r3
 800705a:	4603      	mov	r3, r0
 800705c:	817b      	strh	r3, [r7, #10]
 800705e:	460b      	mov	r3, r1
 8007060:	813b      	strh	r3, [r7, #8]
 8007062:	4613      	mov	r3, r2
 8007064:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = x0; i <= x1; i++)
 8007066:	897b      	ldrh	r3, [r7, #10]
 8007068:	82fb      	strh	r3, [r7, #22]
 800706a:	e013      	b.n	8007094 <draw_rect_filled+0x48>
	{
		for (uint16_t j = y0; j <= y1; j++)
 800706c:	893b      	ldrh	r3, [r7, #8]
 800706e:	82bb      	strh	r3, [r7, #20]
 8007070:	e009      	b.n	8007086 <draw_rect_filled+0x3a>
		{
			draw_pixel(frame_buffer, i, j, brightness);
 8007072:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007076:	8aba      	ldrh	r2, [r7, #20]
 8007078:	8af9      	ldrh	r1, [r7, #22]
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f7ff ff6a 	bl	8006f54 <draw_pixel>
		for (uint16_t j = y0; j <= y1; j++)
 8007080:	8abb      	ldrh	r3, [r7, #20]
 8007082:	3301      	adds	r3, #1
 8007084:	82bb      	strh	r3, [r7, #20]
 8007086:	8aba      	ldrh	r2, [r7, #20]
 8007088:	8c3b      	ldrh	r3, [r7, #32]
 800708a:	429a      	cmp	r2, r3
 800708c:	d9f1      	bls.n	8007072 <draw_rect_filled+0x26>
	for (uint16_t i = x0; i <= x1; i++)
 800708e:	8afb      	ldrh	r3, [r7, #22]
 8007090:	3301      	adds	r3, #1
 8007092:	82fb      	strh	r3, [r7, #22]
 8007094:	8afa      	ldrh	r2, [r7, #22]
 8007096:	88fb      	ldrh	r3, [r7, #6]
 8007098:	429a      	cmp	r2, r3
 800709a:	d9e7      	bls.n	800706c <draw_rect_filled+0x20>
		}
	}
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <select_font>:

void select_font(const GFXfont *new_gfx_font)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 80070b0:	4a04      	ldr	r2, [pc, #16]	@ (80070c4 <select_font+0x1c>)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6013      	str	r3, [r2, #0]
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	20005998 	.word	0x20005998

080070c8 <draw_char>:

void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	@ 0x28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	4608      	mov	r0, r1
 80070d2:	4611      	mov	r1, r2
 80070d4:	461a      	mov	r2, r3
 80070d6:	4603      	mov	r3, r0
 80070d8:	72fb      	strb	r3, [r7, #11]
 80070da:	460b      	mov	r3, r1
 80070dc:	813b      	strh	r3, [r7, #8]
 80070de:	4613      	mov	r3, r2
 80070e0:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 80070e2:	4b44      	ldr	r3, [pc, #272]	@ (80071f4 <draw_char+0x12c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d07f      	beq.n	80071ea <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 80070ea:	4b42      	ldr	r3, [pc, #264]	@ (80071f4 <draw_char+0x12c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	891b      	ldrh	r3, [r3, #8]
 80070f0:	b2db      	uxtb	r3, r3
 80070f2:	7afa      	ldrb	r2, [r7, #11]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 80070f8:	4b3e      	ldr	r3, [pc, #248]	@ (80071f4 <draw_char+0x12c>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	7afb      	ldrb	r3, [r7, #11]
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	4413      	add	r3, r2
 8007104:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 8007106:	4b3b      	ldr	r3, [pc, #236]	@ (80071f4 <draw_char+0x12c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t width = glyph->width;
 8007114:	69fb      	ldr	r3, [r7, #28]
 8007116:	789b      	ldrb	r3, [r3, #2]
 8007118:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	78db      	ldrb	r3, [r3, #3]
 800711e:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	795b      	ldrb	r3, [r3, #5]
 8007124:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	799b      	ldrb	r3, [r3, #6]
 800712a:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t bits = 0;
 8007132:	2300      	movs	r3, #0
 8007134:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t y_pos = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint8_t x_pos = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 8007144:	2300      	movs	r3, #0
 8007146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800714a:	e048      	b.n	80071de <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 800714c:	2300      	movs	r3, #0
 800714e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007152:	e03a      	b.n	80071ca <draw_char+0x102>
		{
			if (!(bit++ & 7))
 8007154:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	f887 2025 	strb.w	r2, [r7, #37]	@ 0x25
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	2b00      	cmp	r3, #0
 8007164:	d108      	bne.n	8007178 <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8007166:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007168:	1c5a      	adds	r2, r3, #1
 800716a:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800716c:	461a      	mov	r2, r3
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	4413      	add	r3, r2
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			}
			if (bits & 0x80)
 8007178:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800717c:	2b00      	cmp	r3, #0
 800717e:	da1a      	bge.n	80071b6 <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 8007180:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8007184:	b29a      	uxth	r2, r3
 8007186:	893b      	ldrh	r3, [r7, #8]
 8007188:	4413      	add	r3, r2
 800718a:	b29a      	uxth	r2, r3
 800718c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007190:	b29b      	uxth	r3, r3
 8007192:	4413      	add	r3, r2
 8007194:	b299      	uxth	r1, r3
 8007196:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800719a:	b29a      	uxth	r2, r3
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	4413      	add	r3, r2
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	4413      	add	r3, r2
 80071aa:	b29a      	uxth	r2, r3
 80071ac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f7ff fecf 	bl	8006f54 <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 80071b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80071ba:	005b      	lsls	r3, r3, #1
 80071bc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 80071c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80071c4:	3301      	adds	r3, #1
 80071c6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071ca:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80071ce:	7dfb      	ldrb	r3, [r7, #23]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d3bf      	bcc.n	8007154 <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 80071d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071d8:	3301      	adds	r3, #1
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071de:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80071e2:	7dbb      	ldrb	r3, [r7, #22]
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d3b1      	bcc.n	800714c <draw_char+0x84>
 80071e8:	e000      	b.n	80071ec <draw_char+0x124>
		return;
 80071ea:	bf00      	nop
		}
	}
}
 80071ec:	3728      	adds	r7, #40	@ 0x28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20005998 	.word	0x20005998

080071f8 <draw_text>:

void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b086      	sub	sp, #24
 80071fc:	af02      	add	r7, sp, #8
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4611      	mov	r1, r2
 8007204:	461a      	mov	r2, r3
 8007206:	460b      	mov	r3, r1
 8007208:	80fb      	strh	r3, [r7, #6]
 800720a:	4613      	mov	r3, r2
 800720c:	80bb      	strh	r3, [r7, #4]
    while (*text)
 800720e:	e01b      	b.n	8007248 <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	7819      	ldrb	r1, [r3, #0]
 8007214:	88b8      	ldrh	r0, [r7, #4]
 8007216:	88fa      	ldrh	r2, [r7, #6]
 8007218:	7e3b      	ldrb	r3, [r7, #24]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	4603      	mov	r3, r0
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff ff52 	bl	80070c8 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 8007224:	4b0d      	ldr	r3, [pc, #52]	@ (800725c <draw_text+0x64>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007232:	3b20      	subs	r3, #32
 8007234:	00db      	lsls	r3, r3, #3
 8007236:	4413      	add	r3, r2
 8007238:	791b      	ldrb	r3, [r3, #4]
 800723a:	461a      	mov	r2, r3
 800723c:	88fb      	ldrh	r3, [r7, #6]
 800723e:	4413      	add	r3, r2
 8007240:	80fb      	strh	r3, [r7, #6]
        text++;
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	3301      	adds	r3, #1
 8007246:	60bb      	str	r3, [r7, #8]
    while (*text)
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1df      	bne.n	8007210 <draw_text+0x18>
    }
}
 8007250:	bf00      	nop
 8007252:	bf00      	nop
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20005998 	.word	0x20005998

08007260 <draw_bitmap_4bpp>:
		}
	}
}

void draw_bitmap_4bpp(uint8_t *frame_buffer, const uint8_t *bitmap, uint16_t x0, uint16_t y0, uint16_t x_size, uint16_t y_size)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	4611      	mov	r1, r2
 800726c:	461a      	mov	r2, r3
 800726e:	460b      	mov	r3, r1
 8007270:	80fb      	strh	r3, [r7, #6]
 8007272:	4613      	mov	r3, r2
 8007274:	80bb      	strh	r3, [r7, #4]
	uint16_t bitmap_pos = 0;       //byte index in bitmap array
 8007276:	2300      	movs	r3, #0
 8007278:	83fb      	strh	r3, [r7, #30]
	uint16_t processed_pixels = 0;
 800727a:	2300      	movs	r3, #0
 800727c:	83bb      	strh	r3, [r7, #28]
	uint8_t pixel_parity = 0;      //if pixel is even = 0; odd = 1
 800727e:	2300      	movs	r3, #0
 8007280:	75fb      	strb	r3, [r7, #23]

	for (uint16_t i = y0; i < y0 + y_size; i++)
 8007282:	88bb      	ldrh	r3, [r7, #4]
 8007284:	837b      	strh	r3, [r7, #26]
 8007286:	e034      	b.n	80072f2 <draw_bitmap_4bpp+0x92>
	{
		for (uint16_t j = x0; j < x0 + x_size; j++)
 8007288:	88fb      	ldrh	r3, [r7, #6]
 800728a:	833b      	strh	r3, [r7, #24]
 800728c:	e028      	b.n	80072e0 <draw_bitmap_4bpp+0x80>
		{
			pixel_parity = processed_pixels % 2;
 800728e:	8bbb      	ldrh	r3, [r7, #28]
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 0301 	and.w	r3, r3, #1
 8007296:	75fb      	strb	r3, [r7, #23]

			if(pixel_parity == 0)
 8007298:	7dfb      	ldrb	r3, [r7, #23]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10e      	bne.n	80072bc <draw_bitmap_4bpp+0x5c>
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos] >> 4);
 800729e:	8bfb      	ldrh	r3, [r7, #30]
 80072a0:	68ba      	ldr	r2, [r7, #8]
 80072a2:	4413      	add	r3, r2
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	091b      	lsrs	r3, r3, #4
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	8b7a      	ldrh	r2, [r7, #26]
 80072ac:	8b39      	ldrh	r1, [r7, #24]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fe50 	bl	8006f54 <draw_pixel>
				processed_pixels++;
 80072b4:	8bbb      	ldrh	r3, [r7, #28]
 80072b6:	3301      	adds	r3, #1
 80072b8:	83bb      	strh	r3, [r7, #28]
 80072ba:	e00e      	b.n	80072da <draw_bitmap_4bpp+0x7a>
			}
			else
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos]);
 80072bc:	8bfb      	ldrh	r3, [r7, #30]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	4413      	add	r3, r2
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	8b7a      	ldrh	r2, [r7, #26]
 80072c6:	8b39      	ldrh	r1, [r7, #24]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f7ff fe43 	bl	8006f54 <draw_pixel>
				processed_pixels++;
 80072ce:	8bbb      	ldrh	r3, [r7, #28]
 80072d0:	3301      	adds	r3, #1
 80072d2:	83bb      	strh	r3, [r7, #28]
				bitmap_pos++;
 80072d4:	8bfb      	ldrh	r3, [r7, #30]
 80072d6:	3301      	adds	r3, #1
 80072d8:	83fb      	strh	r3, [r7, #30]
		for (uint16_t j = x0; j < x0 + x_size; j++)
 80072da:	8b3b      	ldrh	r3, [r7, #24]
 80072dc:	3301      	adds	r3, #1
 80072de:	833b      	strh	r3, [r7, #24]
 80072e0:	8b3a      	ldrh	r2, [r7, #24]
 80072e2:	88f9      	ldrh	r1, [r7, #6]
 80072e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80072e6:	440b      	add	r3, r1
 80072e8:	429a      	cmp	r2, r3
 80072ea:	dbd0      	blt.n	800728e <draw_bitmap_4bpp+0x2e>
	for (uint16_t i = y0; i < y0 + y_size; i++)
 80072ec:	8b7b      	ldrh	r3, [r7, #26]
 80072ee:	3301      	adds	r3, #1
 80072f0:	837b      	strh	r3, [r7, #26]
 80072f2:	8b7a      	ldrh	r2, [r7, #26]
 80072f4:	88b9      	ldrh	r1, [r7, #4]
 80072f6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80072f8:	440b      	add	r3, r1
 80072fa:	429a      	cmp	r2, r3
 80072fc:	dbc4      	blt.n	8007288 <draw_bitmap_4bpp+0x28>
			}
		}
	}
}
 80072fe:	bf00      	nop
 8007300:	bf00      	nop
 8007302:	3720      	adds	r7, #32
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <send_buffer_to_OLED>:

void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	807b      	strh	r3, [r7, #2]
 8007314:	4613      	mov	r3, r2
 8007316:	803b      	strh	r3, [r7, #0]
	Display_set_window(0, 63, 0, 127);
 8007318:	237f      	movs	r3, #127	@ 0x7f
 800731a:	2200      	movs	r2, #0
 800731c:	213f      	movs	r1, #63	@ 0x3f
 800731e:	2000      	movs	r0, #0
 8007320:	f7ff fd91 	bl	8006e46 <Display_set_window>
	Send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 8007324:	883b      	ldrh	r3, [r7, #0]
 8007326:	01db      	lsls	r3, r3, #7
 8007328:	461a      	mov	r2, r3
 800732a:	887b      	ldrh	r3, [r7, #2]
 800732c:	4413      	add	r3, r2
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	4413      	add	r3, r2
 8007332:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8007336:	4618      	mov	r0, r3
 8007338:	f7ff fdb2 	bl	8006ea0 <Send_buffer>
}
 800733c:	bf00      	nop
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <mcp23017_regForPin>:
 * @param pin
 * @param portAaddr
 * @param portBaddr
 * @return
 */
static uint8_t mcp23017_regForPin (uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	4603      	mov	r3, r0
 800734c:	71fb      	strb	r3, [r7, #7]
 800734e:	460b      	mov	r3, r1
 8007350:	71bb      	strb	r3, [r7, #6]
 8007352:	4613      	mov	r3, r2
 8007354:	717b      	strb	r3, [r7, #5]
	return(pin<8) ? portAaddr : portBaddr;
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	2b07      	cmp	r3, #7
 800735a:	d801      	bhi.n	8007360 <mcp23017_regForPin+0x1c>
 800735c:	79bb      	ldrb	r3, [r7, #6]
 800735e:	e000      	b.n	8007362 <mcp23017_regForPin+0x1e>
 8007360:	797b      	ldrb	r3, [r7, #5]
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <mcp23017_bitForPin>:
/**
 * Bit number associated to a given pin
 * @param pin
 * @return
 */
static uint8_t mcp23017_bitForPin(uint8_t pin){
 800736e:	b480      	push	{r7}
 8007370:	b083      	sub	sp, #12
 8007372:	af00      	add	r7, sp, #0
 8007374:	4603      	mov	r3, r0
 8007376:	71fb      	strb	r3, [r7, #7]
	return pin % 8;
 8007378:	79fb      	ldrb	r3, [r7, #7]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	b2db      	uxtb	r3, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <mcp23017_readRegister>:
 * Reads a given register
 * @param hdev
 * @param addr
 * @return
 */
HAL_StatusTypeDef mcp23017_readRegister(MCP23017_HandleTypeDef *hdev, uint8_t addr, uint8_t *data) {
 800738c:	b580      	push	{r7, lr}
 800738e:	b08a      	sub	sp, #40	@ 0x28
 8007390:	af04      	add	r7, sp, #16
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	460b      	mov	r3, r1
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	72fb      	strb	r3, [r7, #11]
	// read the current GPINTEN
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Read(hdev->hi2c1, hdev->addr, addr, 1, data, 1, HAL_MAX_DELAY);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	8899      	ldrh	r1, [r3, #4]
 80073a2:	7afb      	ldrb	r3, [r7, #11]
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	f04f 33ff 	mov.w	r3, #4294967295
 80073aa:	9302      	str	r3, [sp, #8]
 80073ac:	2301      	movs	r3, #1
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2301      	movs	r3, #1
 80073b6:	f7fb fbfb 	bl	8002bb0 <HAL_I2C_Mem_Read>
 80073ba:	4603      	mov	r3, r0
 80073bc:	75fb      	strb	r3, [r7, #23]
	return ret;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3718      	adds	r7, #24
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <mcp23017_writeRegister>:
 * @param regAddr Register Address
 * @param regValue Value to write to
 * @return
 */
static HAL_StatusTypeDef mcp23017_writeRegister(MCP23017_HandleTypeDef *hdev, uint8_t regAddr, uint8_t regValue)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af04      	add	r7, sp, #16
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70fb      	strb	r3, [r7, #3]
 80073d4:	4613      	mov	r3, r2
 80073d6:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Write(hdev->hi2c1, hdev->addr, regAddr, 1, (uint8_t*) &regValue, 1, HAL_MAX_DELAY);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	8899      	ldrh	r1, [r3, #4]
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	f04f 33ff 	mov.w	r3, #4294967295
 80073e8:	9302      	str	r3, [sp, #8]
 80073ea:	2301      	movs	r3, #1
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	1cbb      	adds	r3, r7, #2
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	2301      	movs	r3, #1
 80073f4:	f7fb fae2 	bl	80029bc <HAL_I2C_Mem_Write>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]
	return ret;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <mcp23017_updateRegisterBit>:
 * @param pin
 * @param pValue
 * @param portAaddr
 * @param portBaddr
 */
HAL_StatusTypeDef mcp23017_updateRegisterBit(MCP23017_HandleTypeDef *hdev, uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	4608      	mov	r0, r1
 8007410:	4611      	mov	r1, r2
 8007412:	461a      	mov	r2, r3
 8007414:	4603      	mov	r3, r0
 8007416:	70fb      	strb	r3, [r7, #3]
 8007418:	460b      	mov	r3, r1
 800741a:	70bb      	strb	r3, [r7, #2]
 800741c:	4613      	mov	r3, r2
 800741e:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr = mcp23017_regForPin(pin,portAaddr,portBaddr);
 8007420:	7e3a      	ldrb	r2, [r7, #24]
 8007422:	7879      	ldrb	r1, [r7, #1]
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff ff8c 	bl	8007344 <mcp23017_regForPin>
 800742c:	4603      	mov	r3, r0
 800742e:	73fb      	strb	r3, [r7, #15]
	uint8_t bit = mcp23017_bitForPin(pin);
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	4618      	mov	r0, r3
 8007434:	f7ff ff9b 	bl	800736e <mcp23017_bitForPin>
 8007438:	4603      	mov	r3, r0
 800743a:	73bb      	strb	r3, [r7, #14]
	mcp23017_readRegister(hdev, regAddr, &regValue);
 800743c:	f107 020d 	add.w	r2, r7, #13
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7ff ffa1 	bl	800738c <mcp23017_readRegister>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
 800744a:	78bb      	ldrb	r3, [r7, #2]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d009      	beq.n	8007464 <mcp23017_updateRegisterBit+0x5e>
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2201      	movs	r2, #1
 8007454:	fa02 f303 	lsl.w	r3, r2, r3
 8007458:	b2da      	uxtb	r2, r3
 800745a:	7b7b      	ldrb	r3, [r7, #13]
 800745c:	4313      	orrs	r3, r2
 800745e:	b2db      	uxtb	r3, r3
 8007460:	737b      	strb	r3, [r7, #13]
 8007462:	e00a      	b.n	800747a <mcp23017_updateRegisterBit+0x74>
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	2201      	movs	r2, #1
 8007468:	fa02 f303 	lsl.w	r3, r2, r3
 800746c:	b2db      	uxtb	r3, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	b2da      	uxtb	r2, r3
 8007472:	7b7b      	ldrb	r3, [r7, #13]
 8007474:	4013      	ands	r3, r2
 8007476:	b2db      	uxtb	r3, r3
 8007478:	737b      	strb	r3, [r7, #13]

	return (mcp23017_writeRegister(hdev, regAddr,regValue));
 800747a:	7b7a      	ldrb	r2, [r7, #13]
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	4619      	mov	r1, r3
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7ff ffa1 	bl	80073c8 <mcp23017_writeRegister>
 8007486:	4603      	mov	r3, r0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <mcp23017_init>:
 * @param hdev
 * @param hi2c1
 * @param addr
 */
HAL_StatusTypeDef mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c1, uint16_t addr)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	4613      	mov	r3, r2
 800749c:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret;

	hdev->hi2c1 = hi2c1;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	601a      	str	r2, [r3, #0]
	hdev->addr = addr << 1;
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	005b      	lsls	r3, r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	809a      	strh	r2, [r3, #4]

	ret = HAL_I2C_IsDeviceReady(hi2c1, hdev->addr, 20, I2C_READYNESS_DELAY);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8899      	ldrh	r1, [r3, #4]
 80074b2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80074b6:	2214      	movs	r2, #20
 80074b8:	68b8      	ldr	r0, [r7, #8]
 80074ba:	f7fb fdab 	bl	8003014 <HAL_I2C_IsDeviceReady>
 80074be:	4603      	mov	r3, r0
 80074c0:	75bb      	strb	r3, [r7, #22]
	if (ret != HAL_OK) return ret;
 80074c2:	7dbb      	ldrb	r3, [r7, #22]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <mcp23017_init+0x3c>
 80074c8:	7dbb      	ldrb	r3, [r7, #22]
 80074ca:	e01a      	b.n	8007502 <mcp23017_init+0x72>
	//DISSLW = 	0 : slew rate enabled
	//HAEN = 	0 : hardware address pin is always enabled on 23017
	//ODR = 	0 : open drain output
	//INTPOL = 	0 : interrupt active low
	// bit0 - unplemented read as 0
	uint8_t byte = 0 | 1 << 5 | 1 << 6;
 80074cc:	2360      	movs	r3, #96	@ 0x60
 80074ce:	757b      	strb	r3, [r7, #21]

	for (uint8_t i = 0; i < 2; i++) {
 80074d0:	2300      	movs	r3, #0
 80074d2:	75fb      	strb	r3, [r7, #23]
 80074d4:	e011      	b.n	80074fa <mcp23017_init+0x6a>
		ret = mcp23017_writeRegister(hdev, MCP23017_IOCONA+i, byte);
 80074d6:	7dfb      	ldrb	r3, [r7, #23]
 80074d8:	330a      	adds	r3, #10
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	7d7a      	ldrb	r2, [r7, #21]
 80074de:	4619      	mov	r1, r3
 80074e0:	68f8      	ldr	r0, [r7, #12]
 80074e2:	f7ff ff71 	bl	80073c8 <mcp23017_writeRegister>
 80074e6:	4603      	mov	r3, r0
 80074e8:	75bb      	strb	r3, [r7, #22]
		if (ret != HAL_OK) return ret;
 80074ea:	7dbb      	ldrb	r3, [r7, #22]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <mcp23017_init+0x64>
 80074f0:	7dbb      	ldrb	r3, [r7, #22]
 80074f2:	e006      	b.n	8007502 <mcp23017_init+0x72>
	for (uint8_t i = 0; i < 2; i++) {
 80074f4:	7dfb      	ldrb	r3, [r7, #23]
 80074f6:	3301      	adds	r3, #1
 80074f8:	75fb      	strb	r3, [r7, #23]
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d9ea      	bls.n	80074d6 <mcp23017_init+0x46>
	}

	return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <mcp23017_portMode>:
 * @param pullups
 * @param inverted
 * @return
 */
HAL_StatusTypeDef mcp23017_portMode(MCP23017_HandleTypeDef *hdev, MCP23017Port_t port, MCP23017_PinModeIO_t pinmode, MCP23017_PinPolarity_t pinpolarity)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	4608      	mov	r0, r1
 8007514:	4611      	mov	r1, r2
 8007516:	461a      	mov	r2, r3
 8007518:	4603      	mov	r3, r0
 800751a:	70fb      	strb	r3, [r7, #3]
 800751c:	460b      	mov	r3, r1
 800751e:	70bb      	strb	r3, [r7, #2]
 8007520:	4613      	mov	r3, r2
 8007522:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	ret = mcp23017_writeRegister(hdev, MCP23017_IODIRA + port,
 8007524:	78bb      	ldrb	r3, [r7, #2]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <mcp23017_portMode+0x26>
			(pinmode == MCP23017_PIN_MODE_INPUT || pinmode == MCP23017_PIN_MODE_INPUT_PULLUP) ? 0xFF : 0x00);
 800752a:	78bb      	ldrb	r3, [r7, #2]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <mcp23017_portMode+0x2a>
	ret = mcp23017_writeRegister(hdev, MCP23017_IODIRA + port,
 8007530:	22ff      	movs	r2, #255	@ 0xff
 8007532:	e000      	b.n	8007536 <mcp23017_portMode+0x2c>
 8007534:	2200      	movs	r2, #0
 8007536:	78fb      	ldrb	r3, [r7, #3]
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff ff44 	bl	80073c8 <mcp23017_writeRegister>
 8007540:	4603      	mov	r3, r0
 8007542:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d001      	beq.n	800754e <mcp23017_portMode+0x44>
 800754a:	7bfb      	ldrb	r3, [r7, #15]
 800754c:	e028      	b.n	80075a0 <mcp23017_portMode+0x96>

	ret = mcp23017_writeRegister(hdev, MCP23017_GPPUA + port, (pinmode == MCP23017_PIN_MODE_INPUT_PULLUP ? 0xff : 0x00));
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	330c      	adds	r3, #12
 8007552:	b2d9      	uxtb	r1, r3
 8007554:	78bb      	ldrb	r3, [r7, #2]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <mcp23017_portMode+0x54>
 800755a:	23ff      	movs	r3, #255	@ 0xff
 800755c:	e000      	b.n	8007560 <mcp23017_portMode+0x56>
 800755e:	2300      	movs	r3, #0
 8007560:	461a      	mov	r2, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7ff ff30 	bl	80073c8 <mcp23017_writeRegister>
 8007568:	4603      	mov	r3, r0
 800756a:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <mcp23017_portMode+0x6c>
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	e014      	b.n	80075a0 <mcp23017_portMode+0x96>

	ret = mcp23017_writeRegister(hdev, MCP23017_IPOLA + port, pinpolarity ? 0xff : 0x00);
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	3302      	adds	r3, #2
 800757a:	b2d9      	uxtb	r1, r3
 800757c:	787b      	ldrb	r3, [r7, #1]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <mcp23017_portMode+0x7c>
 8007582:	23ff      	movs	r3, #255	@ 0xff
 8007584:	e000      	b.n	8007588 <mcp23017_portMode+0x7e>
 8007586:	2300      	movs	r3, #0
 8007588:	461a      	mov	r2, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff ff1c 	bl	80073c8 <mcp23017_writeRegister>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8007594:	7bfb      	ldrb	r3, [r7, #15]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <mcp23017_portMode+0x94>
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	e000      	b.n	80075a0 <mcp23017_portMode+0x96>

	return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <mcp23017_pinMode>:
 * @param mode
 * @param inverted
 * @return
 */
HAL_StatusTypeDef mcp23017_pinMode(MCP23017_HandleTypeDef *hdev, uint8_t pin, MCP23017_PinModeIO_t mode, MCP23017_PinPolarity_t polarity)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	4608      	mov	r0, r1
 80075b2:	4611      	mov	r1, r2
 80075b4:	461a      	mov	r2, r3
 80075b6:	4603      	mov	r3, r0
 80075b8:	70fb      	strb	r3, [r7, #3]
 80075ba:	460b      	mov	r3, r1
 80075bc:	70bb      	strb	r3, [r7, #2]
 80075be:	4613      	mov	r3, r2
 80075c0:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	/* if input we set IODIRA or IODIRB (depending on pin number) to 1 */
	ret = mcp23017_updateRegisterBit(hdev, pin, (mode == MCP23017_PIN_MODE_INPUT || mode == MCP23017_PIN_MODE_INPUT_PULLUP),
 80075c2:	78bb      	ldrb	r3, [r7, #2]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <mcp23017_pinMode+0x26>
 80075c8:	78bb      	ldrb	r3, [r7, #2]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <mcp23017_pinMode+0x2a>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <mcp23017_pinMode+0x2c>
 80075d2:	2300      	movs	r3, #0
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	78f9      	ldrb	r1, [r7, #3]
 80075d8:	2301      	movs	r3, #1
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	2300      	movs	r3, #0
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff ff11 	bl	8007406 <mcp23017_updateRegisterBit>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]
			MCP23017_IODIRA, MCP23017_IODIRB);
	if (ret != HAL_OK) return ret;
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <mcp23017_pinMode+0x4a>
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	e02a      	b.n	8007648 <mcp23017_pinMode+0xa0>

	/* we also need to control the polarity, will be ignored anyway if output, 1 if pol inverted */
	ret = mcp23017_updateRegisterBit(hdev, pin, polarity == MCP23017_PIN_POLARITY_INVERTED, MCP23017_IPOLA, MCP23017_IPOLB);
 80075f2:	787b      	ldrb	r3, [r7, #1]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	bf0c      	ite	eq
 80075f8:	2301      	moveq	r3, #1
 80075fa:	2300      	movne	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	78f9      	ldrb	r1, [r7, #3]
 8007602:	2303      	movs	r3, #3
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	2302      	movs	r3, #2
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f7ff fefc 	bl	8007406 <mcp23017_updateRegisterBit>
 800760e:	4603      	mov	r3, r0
 8007610:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d001      	beq.n	800761c <mcp23017_pinMode+0x74>
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	e015      	b.n	8007648 <mcp23017_pinMode+0xa0>

	/* then we need to setup the pull up for that pin if MCP23017_PIN_MODE_INPUT_PULLUP was selected */
	ret = mcp23017_updateRegisterBit(hdev, pin, mode == MCP23017_PIN_MODE_INPUT_PULLUP, MCP23017_GPPUA, MCP23017_GPPUB);
 800761c:	78bb      	ldrb	r3, [r7, #2]
 800761e:	2b01      	cmp	r3, #1
 8007620:	bf0c      	ite	eq
 8007622:	2301      	moveq	r3, #1
 8007624:	2300      	movne	r3, #0
 8007626:	b2db      	uxtb	r3, r3
 8007628:	461a      	mov	r2, r3
 800762a:	78f9      	ldrb	r1, [r7, #3]
 800762c:	230d      	movs	r3, #13
 800762e:	9300      	str	r3, [sp, #0]
 8007630:	230c      	movs	r3, #12
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fee7 	bl	8007406 <mcp23017_updateRegisterBit>
 8007638:	4603      	mov	r3, r0
 800763a:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <mcp23017_pinMode+0x9e>
 8007642:	7bfb      	ldrb	r3, [r7, #15]
 8007644:	e000      	b.n	8007648 <mcp23017_pinMode+0xa0>

	return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <Ex_gpio_init>:

MCP23017_HandleTypeDef hmcp;


void Ex_gpio_init(void)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	af00      	add	r7, sp, #0
	mcp23017_init(&hmcp, &hi2c1, MCP23017_ADD_27);
 8007654:	2227      	movs	r2, #39	@ 0x27
 8007656:	4918      	ldr	r1, [pc, #96]	@ (80076b8 <Ex_gpio_init+0x68>)
 8007658:	4818      	ldr	r0, [pc, #96]	@ (80076bc <Ex_gpio_init+0x6c>)
 800765a:	f7ff ff19 	bl	8007490 <mcp23017_init>
	mcp23017_portMode(&hmcp, MCP23017Port_A, MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 800765e:	2300      	movs	r3, #0
 8007660:	2202      	movs	r2, #2
 8007662:	2100      	movs	r1, #0
 8007664:	4815      	ldr	r0, [pc, #84]	@ (80076bc <Ex_gpio_init+0x6c>)
 8007666:	f7ff ff50 	bl	800750a <mcp23017_portMode>
	mcp23017_portMode(&hmcp, MCP23017Port_B, MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 800766a:	2300      	movs	r3, #0
 800766c:	2202      	movs	r2, #2
 800766e:	2101      	movs	r1, #1
 8007670:	4812      	ldr	r0, [pc, #72]	@ (80076bc <Ex_gpio_init+0x6c>)
 8007672:	f7ff ff4a 	bl	800750a <mcp23017_portMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPB0_Pin | MCP23017_GPB1_Pin | MCP23017_GPB2_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8007676:	2300      	movs	r3, #0
 8007678:	2202      	movs	r2, #2
 800767a:	210b      	movs	r1, #11
 800767c:	480f      	ldr	r0, [pc, #60]	@ (80076bc <Ex_gpio_init+0x6c>)
 800767e:	f7ff ff93 	bl	80075a8 <mcp23017_pinMode>
    mcp23017_pinMode(&hmcp,MCP23017_GPB3_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8007682:	2300      	movs	r3, #0
 8007684:	2202      	movs	r2, #2
 8007686:	210b      	movs	r1, #11
 8007688:	480c      	ldr	r0, [pc, #48]	@ (80076bc <Ex_gpio_init+0x6c>)
 800768a:	f7ff ff8d 	bl	80075a8 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA0_Pin | MCP23017_GPA1_Pin | MCP23017_GPA2_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 800768e:	2300      	movs	r3, #0
 8007690:	2202      	movs	r2, #2
 8007692:	2103      	movs	r1, #3
 8007694:	4809      	ldr	r0, [pc, #36]	@ (80076bc <Ex_gpio_init+0x6c>)
 8007696:	f7ff ff87 	bl	80075a8 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA3_Pin | MCP23017_GPA4_Pin | MCP23017_GPA5_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 800769a:	2300      	movs	r3, #0
 800769c:	2202      	movs	r2, #2
 800769e:	2107      	movs	r1, #7
 80076a0:	4806      	ldr	r0, [pc, #24]	@ (80076bc <Ex_gpio_init+0x6c>)
 80076a2:	f7ff ff81 	bl	80075a8 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA6_Pin | MCP23017_GPA7_Pin ,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80076a6:	2300      	movs	r3, #0
 80076a8:	2202      	movs	r2, #2
 80076aa:	2107      	movs	r1, #7
 80076ac:	4803      	ldr	r0, [pc, #12]	@ (80076bc <Ex_gpio_init+0x6c>)
 80076ae:	f7ff ff7b 	bl	80075a8 <mcp23017_pinMode>

}
 80076b2:	bf00      	nop
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	2000599c 	.word	0x2000599c
 80076bc:	200059f0 	.word	0x200059f0

080076c0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;


void MX_TIM1_Init(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b096      	sub	sp, #88	@ 0x58
 80076c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80076c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80076ca:	2200      	movs	r2, #0
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	605a      	str	r2, [r3, #4]
 80076d0:	609a      	str	r2, [r3, #8]
 80076d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80076d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80076de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	605a      	str	r2, [r3, #4]
 80076e8:	609a      	str	r2, [r3, #8]
 80076ea:	60da      	str	r2, [r3, #12]
 80076ec:	611a      	str	r2, [r3, #16]
 80076ee:	615a      	str	r2, [r3, #20]
 80076f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80076f2:	1d3b      	adds	r3, r7, #4
 80076f4:	2220      	movs	r2, #32
 80076f6:	2100      	movs	r1, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f001 fba0 	bl	8008e3e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80076fe:	4b3e      	ldr	r3, [pc, #248]	@ (80077f8 <MX_TIM1_Init+0x138>)
 8007700:	4a3e      	ldr	r2, [pc, #248]	@ (80077fc <MX_TIM1_Init+0x13c>)
 8007702:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8007704:	4b3c      	ldr	r3, [pc, #240]	@ (80077f8 <MX_TIM1_Init+0x138>)
 8007706:	2231      	movs	r2, #49	@ 0x31
 8007708:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800770a:	4b3b      	ldr	r3, [pc, #236]	@ (80077f8 <MX_TIM1_Init+0x138>)
 800770c:	2200      	movs	r2, #0
 800770e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8007710:	4b39      	ldr	r3, [pc, #228]	@ (80077f8 <MX_TIM1_Init+0x138>)
 8007712:	22c7      	movs	r2, #199	@ 0xc7
 8007714:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007716:	4b38      	ldr	r3, [pc, #224]	@ (80077f8 <MX_TIM1_Init+0x138>)
 8007718:	2200      	movs	r2, #0
 800771a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800771c:	4b36      	ldr	r3, [pc, #216]	@ (80077f8 <MX_TIM1_Init+0x138>)
 800771e:	2200      	movs	r2, #0
 8007720:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007722:	4b35      	ldr	r3, [pc, #212]	@ (80077f8 <MX_TIM1_Init+0x138>)
 8007724:	2200      	movs	r2, #0
 8007726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007728:	4833      	ldr	r0, [pc, #204]	@ (80077f8 <MX_TIM1_Init+0x138>)
 800772a:	f7fd fc89 	bl	8005040 <HAL_TIM_Base_Init>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8007734:	f7fa f980 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800773c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800773e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007742:	4619      	mov	r1, r3
 8007744:	482c      	ldr	r0, [pc, #176]	@ (80077f8 <MX_TIM1_Init+0x138>)
 8007746:	f7fd fe83 	bl	8005450 <HAL_TIM_ConfigClockSource>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8007750:	f7fa f972 	bl	8001a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007754:	4828      	ldr	r0, [pc, #160]	@ (80077f8 <MX_TIM1_Init+0x138>)
 8007756:	f7fd fcc2 	bl	80050de <HAL_TIM_PWM_Init>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8007760:	f7fa f96a 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007764:	2300      	movs	r3, #0
 8007766:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007768:	2300      	movs	r3, #0
 800776a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800776c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007770:	4619      	mov	r1, r3
 8007772:	4821      	ldr	r0, [pc, #132]	@ (80077f8 <MX_TIM1_Init+0x138>)
 8007774:	f7fe f9ea 	bl	8005b4c <HAL_TIMEx_MasterConfigSynchronization>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800777e:	f7fa f95b 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007782:	2360      	movs	r3, #96	@ 0x60
 8007784:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800778a:	2300      	movs	r3, #0
 800778c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800778e:	2300      	movs	r3, #0
 8007790:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007792:	2300      	movs	r3, #0
 8007794:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007796:	2300      	movs	r3, #0
 8007798:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800779a:	2300      	movs	r3, #0
 800779c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800779e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80077a2:	2200      	movs	r2, #0
 80077a4:	4619      	mov	r1, r3
 80077a6:	4814      	ldr	r0, [pc, #80]	@ (80077f8 <MX_TIM1_Init+0x138>)
 80077a8:	f7fd fd90 	bl	80052cc <HAL_TIM_PWM_ConfigChannel>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80077b2:	f7fa f941 	bl	8001a38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80077b6:	2300      	movs	r3, #0
 80077b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80077ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80077ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80077d4:	1d3b      	adds	r3, r7, #4
 80077d6:	4619      	mov	r1, r3
 80077d8:	4807      	ldr	r0, [pc, #28]	@ (80077f8 <MX_TIM1_Init+0x138>)
 80077da:	f7fe fa11 	bl	8005c00 <HAL_TIMEx_ConfigBreakDeadTime>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d001      	beq.n	80077e8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80077e4:	f7fa f928 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80077e8:	4803      	ldr	r0, [pc, #12]	@ (80077f8 <MX_TIM1_Init+0x138>)
 80077ea:	f7fa f9cb 	bl	8001b84 <HAL_TIM_MspPostInit>

}
 80077ee:	bf00      	nop
 80077f0:	3758      	adds	r7, #88	@ 0x58
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	200059f8 	.word	0x200059f8
 80077fc:	40010000 	.word	0x40010000

08007800 <Motor_25_duty>:


//For 25% duty-cycle
void Motor_25_duty ()
{
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 50;
 8007804:	4b06      	ldr	r3, [pc, #24]	@ (8007820 <Motor_25_duty+0x20>)
 8007806:	2232      	movs	r2, #50	@ 0x32
 8007808:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800780a:	2100      	movs	r1, #0
 800780c:	4805      	ldr	r0, [pc, #20]	@ (8007824 <Motor_25_duty+0x24>)
 800780e:	f7fd fcbf 	bl	8005190 <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 8007812:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007816:	f7fa fc37 	bl	8002088 <HAL_Delay>
}
 800781a:	bf00      	nop
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	40010000 	.word	0x40010000
 8007824:	200059f8 	.word	0x200059f8

08007828 <Motor_35_duty>:


//For 35% duty-cycle
void Motor_35_duty ()
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 70;
 800782c:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <Motor_35_duty+0x20>)
 800782e:	2246      	movs	r2, #70	@ 0x46
 8007830:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8007832:	2100      	movs	r1, #0
 8007834:	4805      	ldr	r0, [pc, #20]	@ (800784c <Motor_35_duty+0x24>)
 8007836:	f7fd fcab 	bl	8005190 <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 800783a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800783e:	f7fa fc23 	bl	8002088 <HAL_Delay>
}
 8007842:	bf00      	nop
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40010000 	.word	0x40010000
 800784c:	200059f8 	.word	0x200059f8

08007850 <Motor_45_duty>:


//For 45% duty-cycle
void Motor_45_duty ()
{
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 90;
 8007854:	4b06      	ldr	r3, [pc, #24]	@ (8007870 <Motor_45_duty+0x20>)
 8007856:	225a      	movs	r2, #90	@ 0x5a
 8007858:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800785a:	2100      	movs	r1, #0
 800785c:	4805      	ldr	r0, [pc, #20]	@ (8007874 <Motor_45_duty+0x24>)
 800785e:	f7fd fc97 	bl	8005190 <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 8007862:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007866:	f7fa fc0f 	bl	8002088 <HAL_Delay>
}
 800786a:	bf00      	nop
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40010000 	.word	0x40010000
 8007874:	200059f8 	.word	0x200059f8

08007878 <Motor_55_duty>:



//For 55% duty-cycle
void Motor_55_duty ()
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 110;
 800787c:	4b06      	ldr	r3, [pc, #24]	@ (8007898 <Motor_55_duty+0x20>)
 800787e:	226e      	movs	r2, #110	@ 0x6e
 8007880:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8007882:	2100      	movs	r1, #0
 8007884:	4805      	ldr	r0, [pc, #20]	@ (800789c <Motor_55_duty+0x24>)
 8007886:	f7fd fc83 	bl	8005190 <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 800788a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800788e:	f7fa fbfb 	bl	8002088 <HAL_Delay>
}
 8007892:	bf00      	nop
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	40010000 	.word	0x40010000
 800789c:	200059f8 	.word	0x200059f8

080078a0 <Motor_65_duty>:

//For 65% duty-cycle
void Motor_65_duty ()
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 130;
 80078a4:	4b06      	ldr	r3, [pc, #24]	@ (80078c0 <Motor_65_duty+0x20>)
 80078a6:	2282      	movs	r2, #130	@ 0x82
 80078a8:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80078aa:	2100      	movs	r1, #0
 80078ac:	4805      	ldr	r0, [pc, #20]	@ (80078c4 <Motor_65_duty+0x24>)
 80078ae:	f7fd fc6f 	bl	8005190 <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 80078b2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80078b6:	f7fa fbe7 	bl	8002088 <HAL_Delay>
}
 80078ba:	bf00      	nop
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	40010000 	.word	0x40010000
 80078c4:	200059f8 	.word	0x200059f8

080078c8 <Motor_75_duty>:

//For 75% duty-cycle
void Motor_75_duty ()
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 150;
 80078cc:	4b06      	ldr	r3, [pc, #24]	@ (80078e8 <Motor_75_duty+0x20>)
 80078ce:	2296      	movs	r2, #150	@ 0x96
 80078d0:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80078d2:	2100      	movs	r1, #0
 80078d4:	4805      	ldr	r0, [pc, #20]	@ (80078ec <Motor_75_duty+0x24>)
 80078d6:	f7fd fc5b 	bl	8005190 <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 80078da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80078de:	f7fa fbd3 	bl	8002088 <HAL_Delay>
}
 80078e2:	bf00      	nop
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40010000 	.word	0x40010000
 80078ec:	200059f8 	.word	0x200059f8

080078f0 <Motor_85_duty>:

//For 85% duty-cycle
void Motor_85_duty ()
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 170;
 80078f4:	4b06      	ldr	r3, [pc, #24]	@ (8007910 <Motor_85_duty+0x20>)
 80078f6:	22aa      	movs	r2, #170	@ 0xaa
 80078f8:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80078fa:	2100      	movs	r1, #0
 80078fc:	4805      	ldr	r0, [pc, #20]	@ (8007914 <Motor_85_duty+0x24>)
 80078fe:	f7fd fc47 	bl	8005190 <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 8007902:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007906:	f7fa fbbf 	bl	8002088 <HAL_Delay>
}
 800790a:	bf00      	nop
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	40010000 	.word	0x40010000
 8007914:	200059f8 	.word	0x200059f8

08007918 <Motor_95_duty>:

//For 95% duty-cycle
void Motor_95_duty ()
{
 8007918:	b580      	push	{r7, lr}
 800791a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 190;
 800791c:	4b06      	ldr	r3, [pc, #24]	@ (8007938 <Motor_95_duty+0x20>)
 800791e:	22be      	movs	r2, #190	@ 0xbe
 8007920:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8007922:	2100      	movs	r1, #0
 8007924:	4805      	ldr	r0, [pc, #20]	@ (800793c <Motor_95_duty+0x24>)
 8007926:	f7fd fc33 	bl	8005190 <HAL_TIM_PWM_Start>
	HAL_Delay(500);
 800792a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800792e:	f7fa fbab 	bl	8002088 <HAL_Delay>
}
 8007932:	bf00      	nop
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	40010000 	.word	0x40010000
 800793c:	200059f8 	.word	0x200059f8

08007940 <USART_ReceiveData>:
DEVInfo devInfo;

char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]

  assert_param(IS_USART_ALL_PERIPH(USARTx));

  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	b29b      	uxth	r3, r3
 800794e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007952:	b29b      	uxth	r3, r3
}
 8007954:	4618      	mov	r0, r3
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	807b      	strh	r3, [r7, #2]

  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  USARTx->DR = (Data & (uint16_t)0x01FF);
 800796c:	887b      	ldrh	r3, [r7, #2]
 800796e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	605a      	str	r2, [r3, #4]
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
	...

08007984 <usart_setup>:

uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 800798c:	4b15      	ldr	r3, [pc, #84]	@ (80079e4 <usart_setup+0x60>)
 800798e:	4a16      	ldr	r2, [pc, #88]	@ (80079e8 <usart_setup+0x64>)
 8007990:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8007992:	4a14      	ldr	r2, [pc, #80]	@ (80079e4 <usart_setup+0x60>)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8007998:	4b12      	ldr	r3, [pc, #72]	@ (80079e4 <usart_setup+0x60>)
 800799a:	2200      	movs	r2, #0
 800799c:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 800799e:	4b11      	ldr	r3, [pc, #68]	@ (80079e4 <usart_setup+0x60>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 80079a4:	4b0f      	ldr	r3, [pc, #60]	@ (80079e4 <usart_setup+0x60>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 80079aa:	4b0e      	ldr	r3, [pc, #56]	@ (80079e4 <usart_setup+0x60>)
 80079ac:	220c      	movs	r2, #12
 80079ae:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079b0:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <usart_setup+0x60>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80079b6:	4b0b      	ldr	r3, [pc, #44]	@ (80079e4 <usart_setup+0x60>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 80079bc:	4809      	ldr	r0, [pc, #36]	@ (80079e4 <usart_setup+0x60>)
 80079be:	f7fe f971 	bl	8005ca4 <HAL_HalfDuplex_Init>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d000      	beq.n	80079ca <usart_setup+0x46>
	{

		__asm__("NOP");
 80079c8:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 80079ca:	4b06      	ldr	r3, [pc, #24]	@ (80079e4 <usart_setup+0x60>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	4b04      	ldr	r3, [pc, #16]	@ (80079e4 <usart_setup+0x60>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0220 	orr.w	r2, r2, #32
 80079d8:	60da      	str	r2, [r3, #12]
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	20003870 	.word	0x20003870
 80079e8:	40011000 	.word	0x40011000

080079ec <owInit>:

void owInit(OneWire *ow) {
 80079ec:	b480      	push	{r7}
 80079ee:	b087      	sub	sp, #28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
 80079f8:	2300      	movs	r3, #0
 80079fa:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80079fc:	e015      	b.n	8007a2a <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
    k=0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 8007a0c:	e007      	b.n	8007a1e <owInit+0x32>
    r[k] = 0;
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	2b07      	cmp	r3, #7
 8007a22:	ddf4      	ble.n	8007a0e <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	3301      	adds	r3, #1
 8007a28:	617b      	str	r3, [r7, #20]
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	dde6      	ble.n	80079fe <owInit+0x12>
  }
  k=0;
 8007a30:	2300      	movs	r3, #0
 8007a32:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8007a34:	e008      	b.n	8007a48 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	330c      	adds	r3, #12
 8007a3e:	2200      	movs	r2, #0
 8007a40:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	3301      	adds	r3, #1
 8007a46:	613b      	str	r3, [r7, #16]
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	2b07      	cmp	r3, #7
 8007a4c:	ddf3      	ble.n	8007a36 <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2240      	movs	r2, #64	@ 0x40
 8007a52:	609a      	str	r2, [r3, #8]

}
 8007a54:	bf00      	nop
 8007a56:	371c      	adds	r7, #28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <owReadHandler>:

void owReadHandler() {
 8007a60:	b590      	push	{r4, r7, lr}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 8007a66:	f000 f850 	bl	8007b0a <getUsartIndex>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	71fb      	strb	r3, [r7, #7]
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8007a6e:	4b18      	ldr	r3, [pc, #96]	@ (8007ad0 <owReadHandler+0x70>)
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d025      	beq.n	8007ac6 <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8007a7a:	4b15      	ldr	r3, [pc, #84]	@ (8007ad0 <owReadHandler+0x70>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d01f      	beq.n	8007ac6 <owReadHandler+0x66>

		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 8007a86:	bf00      	nop
 8007a88:	4b11      	ldr	r3, [pc, #68]	@ (8007ad0 <owReadHandler+0x70>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d0f9      	beq.n	8007a88 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);
 8007a94:	79fc      	ldrb	r4, [r7, #7]
 8007a96:	480e      	ldr	r0, [pc, #56]	@ (8007ad0 <owReadHandler+0x70>)
 8007a98:	f7ff ff52 	bl	8007940 <USART_ReceiveData>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ad4 <owReadHandler+0x74>)
 8007aa2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	b25b      	sxtb	r3, r3
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	b25a      	sxtb	r2, r3
 8007ab4:	4b08      	ldr	r3, [pc, #32]	@ (8007ad8 <owReadHandler+0x78>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	b25b      	sxtb	r3, r3
 8007abc:	4013      	ands	r3, r2
 8007abe:	b25b      	sxtb	r3, r3
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	4b05      	ldr	r3, [pc, #20]	@ (8007ad8 <owReadHandler+0x78>)
 8007ac4:	701a      	strb	r2, [r3, #0]
  }
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd90      	pop	{r4, r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	40011000 	.word	0x40011000
 8007ad4:	20005a44 	.word	0x20005a44
 8007ad8:	20005a40 	.word	0x20005a40

08007adc <owResetCmd>:

  uint16_t owResetCmd() {
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b082      	sub	sp, #8
 8007ae0:	af00      	add	r7, sp, #0
	uint16_t owPresence;

	usart_setup(9600);
 8007ae2:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8007ae6:	f7ff ff4d 	bl	8007984 <usart_setup>

  owSend(0xF0);
 8007aea:	20f0      	movs	r0, #240	@ 0xf0
 8007aec:	f000 f816 	bl	8007b1c <owSend>
  owPresence = owEchoRead();
 8007af0:	f000 f854 	bl	8007b9c <owEchoRead>
 8007af4:	4603      	mov	r3, r0
 8007af6:	80fb      	strh	r3, [r7, #6]
	usart_setup(115200);
 8007af8:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8007afc:	f7ff ff42 	bl	8007984 <usart_setup>
  return owPresence;
 8007b00:	88fb      	ldrh	r3, [r7, #6]
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <getUsartIndex>:

uint8_t getUsartIndex() {
 8007b0a:	b480      	push	{r7}
 8007b0c:	af00      	add	r7, sp, #0

	return 0;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
	...

08007b1c <owSend>:

void owSend(uint16_t data) {
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	4603      	mov	r3, r0
 8007b24:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());
 8007b26:	f7ff fff0 	bl	8007b0a <getUsartIndex>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4093      	lsls	r3, r2
 8007b32:	b25a      	sxtb	r2, r3
 8007b34:	4b0d      	ldr	r3, [pc, #52]	@ (8007b6c <owSend+0x50>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	b25b      	sxtb	r3, r3
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	b25b      	sxtb	r3, r3
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	4b0a      	ldr	r3, [pc, #40]	@ (8007b6c <owSend+0x50>)
 8007b44:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);
 8007b46:	88fb      	ldrh	r3, [r7, #6]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4809      	ldr	r0, [pc, #36]	@ (8007b70 <owSend+0x54>)
 8007b4c:	f7ff ff08 	bl	8007960 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);
 8007b50:	bf00      	nop
 8007b52:	4b08      	ldr	r3, [pc, #32]	@ (8007b74 <owSend+0x58>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5c:	2b40      	cmp	r3, #64	@ 0x40
 8007b5e:	d1f8      	bne.n	8007b52 <owSend+0x36>
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20005a40 	.word	0x20005a40
 8007b70:	40011000 	.word	0x40011000
 8007b74:	20003870 	.word	0x20003870

08007b78 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	4603      	mov	r3, r0
 8007b80:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0;
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	2bff      	cmp	r3, #255	@ 0xff
 8007b86:	bf0c      	ite	eq
 8007b88:	2301      	moveq	r3, #1
 8007b8a:	2300      	movne	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	370c      	adds	r7, #12
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
	...

08007b9c <owEchoRead>:

uint16_t owEchoRead() {
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();
 8007ba2:	f7ff ffb2 	bl	8007b0a <getUsartIndex>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8007baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007bae:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);
 8007bb0:	bf00      	nop
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	@ (8007be4 <owEchoRead+0x48>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	461a      	mov	r2, r3
 8007bba:	797b      	ldrb	r3, [r7, #5]
 8007bbc:	fa42 f303 	asr.w	r3, r2, r3
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d004      	beq.n	8007bd2 <owEchoRead+0x36>
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	1e5a      	subs	r2, r3, #1
 8007bcc:	80fa      	strh	r2, [r7, #6]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1ef      	bne.n	8007bb2 <owEchoRead+0x16>
  return rc_buffer[i];
 8007bd2:	797b      	ldrb	r3, [r7, #5]
 8007bd4:	4a04      	ldr	r2, [pc, #16]	@ (8007be8 <owEchoRead+0x4c>)
 8007bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bda:	b29b      	uxth	r3, r3
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20005a40 	.word	0x20005a40
 8007be8:	20005a44 	.word	0x20005a44

08007bec <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	6039      	str	r1, [r7, #0]
 8007bf6:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
 8007bfc:	e014      	b.n	8007c28 <byteToBits+0x3c>
    if (ow_byte & 0x01) {
 8007bfe:	79fb      	ldrb	r3, [r7, #7]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <byteToBits+0x24>
      *bits = WIRE_1;
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	22ff      	movs	r2, #255	@ 0xff
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	2200      	movs	r2, #0
 8007c14:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1;
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	3301      	adds	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	2b07      	cmp	r3, #7
 8007c2c:	d9e7      	bls.n	8007bfe <byteToBits+0x12>
  }
  return bits;
 8007c2e:	683b      	ldr	r3, [r7, #0]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <owSendByte>:

void owSendByte(uint8_t d) {
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);
 8007c46:	f107 020c 	add.w	r2, r7, #12
 8007c4a:	79fb      	ldrb	r3, [r7, #7]
 8007c4c:	4611      	mov	r1, r2
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7ff ffcc 	bl	8007bec <byteToBits>
  for (i = 0; i < 8; ++i) {
 8007c54:	2300      	movs	r3, #0
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	e00a      	b.n	8007c70 <owSendByte+0x34>
    owSend(data[i]);
 8007c5a:	f107 020c 	add.w	r2, r7, #12
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	4413      	add	r3, r2
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff ff59 	bl	8007b1c <owSend>
  for (i = 0; i < 8; ++i) {
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	617b      	str	r3, [r7, #20]
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	2b07      	cmp	r3, #7
 8007c74:	ddf1      	ble.n	8007c5a <owSendByte+0x1e>
  }
}
 8007c76:	bf00      	nop
 8007c78:	bf00      	nop
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <owCRC>:
    bits++;
  }
  return target_byte;
}

uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8007c80:	b480      	push	{r7}
 8007c82:	b085      	sub	sp, #20
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8007c90:	2300      	movs	r3, #0
 8007c92:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8007c94:	7b3b      	ldrb	r3, [r7, #12]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	4413      	add	r3, r2
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	73fb      	strb	r3, [r7, #15]
 8007ca2:	e018      	b.n	8007cd6 <owCRC+0x56>
      fb = crc ^ dat;
 8007ca4:	7b7a      	ldrb	r2, [r7, #13]
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	4053      	eors	r3, r2
 8007caa:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 8007cb4:	7b7b      	ldrb	r3, [r7, #13]
 8007cb6:	085b      	lsrs	r3, r3, #1
 8007cb8:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	085b      	lsrs	r3, r3, #1
 8007cbe:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c;
 8007cc0:	7afb      	ldrb	r3, [r7, #11]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d104      	bne.n	8007cd0 <owCRC+0x50>
 8007cc6:	7b7b      	ldrb	r3, [r7, #13]
 8007cc8:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8007ccc:	43db      	mvns	r3, r3
 8007cce:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	73fb      	strb	r3, [r7, #15]
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	2b07      	cmp	r3, #7
 8007cda:	d9e3      	bls.n	8007ca4 <owCRC+0x24>
    }
    st_byt++;
 8007cdc:	7b3b      	ldrb	r3, [r7, #12]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len);
 8007ce2:	7b3a      	ldrb	r2, [r7, #12]
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d3d4      	bcc.n	8007c94 <owCRC+0x14>
  return crc;
 8007cea:	7b7b      	ldrb	r3, [r7, #13]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);
 8007d00:	2107      	movs	r1, #7
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f7ff ffbc 	bl	8007c80 <owCRC>
 8007d08:	4603      	mov	r3, r0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <hasNextRom>:

int hasNextRom(OneWire *ow, uint8_t *ROM) {
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b088      	sub	sp, #32
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
 8007d1a:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 8007d20:	f04f 33ff 	mov.w	r3, #4294967295
 8007d24:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) {
 8007d2a:	f7ff fed7 	bl	8007adc <owResetCmd>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2bf0      	cmp	r3, #240	@ 0xf0
 8007d32:	d101      	bne.n	8007d38 <hasNextRom+0x26>
    return 0;
 8007d34:	2300      	movs	r3, #0
 8007d36:	e097      	b.n	8007e68 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);
 8007d38:	20f0      	movs	r0, #240	@ 0xf0
 8007d3a:	f7ff ff7f 	bl	8007c3c <owSendByte>
  do {
		uint8_t answerBit =0;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 8007d42:	7ffb      	ldrb	r3, [r7, #31]
 8007d44:	08db      	lsrs	r3, r3, #3
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	4413      	add	r3, r2
 8007d50:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ);
 8007d56:	20ff      	movs	r0, #255	@ 0xff
 8007d58:	f7ff fee0 	bl	8007b1c <owSend>
    cB = owReadSlot(owEchoRead());
 8007d5c:	f7ff ff1e 	bl	8007b9c <owEchoRead>
 8007d60:	4603      	mov	r3, r0
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff ff08 	bl	8007b78 <owReadSlot>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ);
 8007d6c:	20ff      	movs	r0, #255	@ 0xff
 8007d6e:	f7ff fed5 	bl	8007b1c <owSend>
    cmp_cB = owReadSlot(owEchoRead());
 8007d72:	f7ff ff13 	bl	8007b9c <owEchoRead>
 8007d76:	4603      	mov	r3, r0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff fefd 	bl	8007b78 <owReadSlot>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)
 8007d82:	7afa      	ldrb	r2, [r7, #11]
 8007d84:	7abb      	ldrb	r3, [r7, #10]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d105      	bne.n	8007d96 <hasNextRom+0x84>
 8007d8a:	7afb      	ldrb	r3, [r7, #11]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d102      	bne.n	8007d96 <hasNextRom+0x84>
      return -1;
 8007d90:	f04f 33ff 	mov.w	r3, #4294967295
 8007d94:	e068      	b.n	8007e68 <hasNextRom+0x156>
    if (cB != cmp_cB) {
 8007d96:	7afa      	ldrb	r2, [r7, #11]
 8007d98:	7abb      	ldrb	r3, [r7, #10]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d002      	beq.n	8007da4 <hasNextRom+0x92>
      searchDirection = cB;
 8007d9e:	7afb      	ldrb	r3, [r7, #11]
 8007da0:	75bb      	strb	r3, [r7, #22]
 8007da2:	e023      	b.n	8007dec <hasNextRom+0xda>
			} else {
				if (ui32BitNumber == ow->lastDiscrepancy)
 8007da4:	7ffa      	ldrb	r2, [r7, #31]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d102      	bne.n	8007db4 <hasNextRom+0xa2>
        searchDirection = 1;
 8007dae:	2301      	movs	r3, #1
 8007db0:	75bb      	strb	r3, [r7, #22]
 8007db2:	e01b      	b.n	8007dec <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {
 8007db4:	7ffa      	ldrb	r2, [r7, #31]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	dd02      	ble.n	8007dc4 <hasNextRom+0xb2>
          searchDirection = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	75bb      	strb	r3, [r7, #22]
 8007dc2:	e00e      	b.n	8007de2 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	4413      	add	r3, r2
 8007dca:	330c      	adds	r3, #12
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	7ffb      	ldrb	r3, [r7, #31]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	fa42 f303 	asr.w	r3, r2, r3
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8007de2:	7dbb      	ldrb	r3, [r7, #22]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <hasNextRom+0xda>
          zeroFork = ui32BitNumber;
 8007de8:	7ffb      	ldrb	r3, [r7, #31]
 8007dea:	61bb      	str	r3, [r7, #24]
      }
    }

    if (searchDirection)
 8007dec:	7dbb      	ldrb	r3, [r7, #22]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00e      	beq.n	8007e10 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	b25a      	sxtb	r2, r3
 8007df8:	7ffb      	ldrb	r3, [r7, #31]
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	2101      	movs	r1, #1
 8007e00:	fa01 f303 	lsl.w	r3, r1, r3
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	4313      	orrs	r3, r2
 8007e08:	b25b      	sxtb	r3, r3
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);
 8007e10:	7dbb      	ldrb	r3, [r7, #22]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d101      	bne.n	8007e1a <hasNextRom+0x108>
 8007e16:	2300      	movs	r3, #0
 8007e18:	e000      	b.n	8007e1c <hasNextRom+0x10a>
 8007e1a:	23ff      	movs	r3, #255	@ 0xff
 8007e1c:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);
 8007e1e:	7d7b      	ldrb	r3, [r7, #21]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7ff fe7a 	bl	8007b1c <owSend>
    ui32BitNumber++;
 8007e28:	7ffb      	ldrb	r3, [r7, #31]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);
 8007e2e:	7ffb      	ldrb	r3, [r7, #31]
 8007e30:	2b3f      	cmp	r3, #63	@ 0x3f
 8007e32:	d984      	bls.n	8007d3e <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	69ba      	ldr	r2, [r7, #24]
 8007e38:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 8007e3a:	e00b      	b.n	8007e54 <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];
 8007e3c:	7dfb      	ldrb	r3, [r7, #23]
 8007e3e:	683a      	ldr	r2, [r7, #0]
 8007e40:	441a      	add	r2, r3
 8007e42:	7dfb      	ldrb	r3, [r7, #23]
 8007e44:	7811      	ldrb	r1, [r2, #0]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	4413      	add	r3, r2
 8007e4a:	460a      	mov	r2, r1
 8007e4c:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
 8007e50:	3301      	adds	r3, #1
 8007e52:	75fb      	strb	r3, [r7, #23]
 8007e54:	7dfb      	ldrb	r3, [r7, #23]
 8007e56:	2b06      	cmp	r3, #6
 8007e58:	d9f0      	bls.n	8007e3c <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bfcc      	ite	gt
 8007e62:	2301      	movgt	r3, #1
 8007e64:	2300      	movle	r3, #0
 8007e66:	b2db      	uxtb	r3, r3
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3720      	adds	r7, #32
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <owSearchCmd>:

int owSearchCmd(OneWire *ow) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff fdb5 	bl	80079ec <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device]));
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	4413      	add	r3, r2
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7ff ff40 	bl	8007d12 <hasNextRom>
 8007e92:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	da02      	bge.n	8007ea0 <owSearchCmd+0x30>
      return -1;
 8007e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9e:	e009      	b.n	8007eb4 <owSearchCmd+0x44>
    device++;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d002      	beq.n	8007eb2 <owSearchCmd+0x42>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	dde7      	ble.n	8007e82 <owSearchCmd+0x12>
		return device;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {
  owResetCmd();
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
	int i = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 8007ec8:	f7ff fe08 	bl	8007adc <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);
 8007ecc:	2055      	movs	r0, #85	@ 0x55
 8007ece:	f7ff feb5 	bl	8007c3c <owSendByte>
  for (; i < 8; i++)
 8007ed2:	e009      	b.n	8007ee8 <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	4413      	add	r3, r2
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7ff fead 	bl	8007c3c <owSendByte>
  for (; i < 8; i++)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b07      	cmp	r3, #7
 8007eec:	ddf2      	ble.n	8007ed4 <owMatchRomCmd+0x18>
}
 8007eee:	bf00      	nop
 8007ef0:	bf00      	nop
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);
 8007f02:	6838      	ldr	r0, [r7, #0]
 8007f04:	f7ff ffda 	bl	8007ebc <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);
 8007f08:	2044      	movs	r0, #68	@ 0x44
 8007f0a:	f7ff fe97 	bl	8007c3c <owSendByte>
}
 8007f0e:	bf00      	nop
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <owReadScratchpadCmd>:

uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b086      	sub	sp, #24
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	60f8      	str	r0, [r7, #12]
 8007f1e:	60b9      	str	r1, [r7, #8]
 8007f20:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 8007f22:	2300      	movs	r3, #0
 8007f24:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b10      	cmp	r3, #16
 8007f2c:	d001      	beq.n	8007f32 <owReadScratchpadCmd+0x1c>
 8007f2e:	2b28      	cmp	r3, #40	@ 0x28
 8007f30:	d109      	bne.n	8007f46 <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;
 8007f32:	2348      	movs	r3, #72	@ 0x48
 8007f34:	82bb      	strh	r3, [r7, #20]
      break;
 8007f36:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 8007f38:	68b8      	ldr	r0, [r7, #8]
 8007f3a:	f7ff ffbf 	bl	8007ebc <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);
 8007f3e:	20be      	movs	r0, #190	@ 0xbe
 8007f40:	f7ff fe7c 	bl	8007c3c <owSendByte>
  while (b < p) {
 8007f44:	e048      	b.n	8007fd8 <owReadScratchpadCmd+0xc2>
      return data;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	e04b      	b.n	8007fe2 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8));
 8007f4a:	8abb      	ldrh	r3, [r7, #20]
 8007f4c:	3b08      	subs	r3, #8
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	da00      	bge.n	8007f54 <owReadScratchpadCmd+0x3e>
 8007f52:	3307      	adds	r3, #7
 8007f54:	10db      	asrs	r3, r3, #3
 8007f56:	b2da      	uxtb	r2, r3
 8007f58:	8afb      	ldrh	r3, [r7, #22]
 8007f5a:	08db      	lsrs	r3, r3, #3
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	74fb      	strb	r3, [r7, #19]
    uint8_t bt;
		owSend(OW_READ);
 8007f64:	20ff      	movs	r0, #255	@ 0xff
 8007f66:	f7ff fdd9 	bl	8007b1c <owSend>
    bt = owReadSlot(owEchoRead());
 8007f6a:	f7ff fe17 	bl	8007b9c <owEchoRead>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff fe01 	bl	8007b78 <owReadSlot>
 8007f76:	4603      	mov	r3, r0
 8007f78:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8007f7a:	7cbb      	ldrb	r3, [r7, #18]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d113      	bne.n	8007fa8 <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;
 8007f80:	7cfb      	ldrb	r3, [r7, #19]
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	4413      	add	r3, r2
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	b25a      	sxtb	r2, r3
 8007f8a:	8afb      	ldrh	r3, [r7, #22]
 8007f8c:	f003 0307 	and.w	r3, r3, #7
 8007f90:	2101      	movs	r1, #1
 8007f92:	fa01 f303 	lsl.w	r3, r1, r3
 8007f96:	b25b      	sxtb	r3, r3
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	b259      	sxtb	r1, r3
 8007f9c:	7cfb      	ldrb	r3, [r7, #19]
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	b2ca      	uxtb	r2, r1
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	e014      	b.n	8007fd2 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);
 8007fa8:	7cfb      	ldrb	r3, [r7, #19]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b25a      	sxtb	r2, r3
 8007fb2:	8afb      	ldrh	r3, [r7, #22]
 8007fb4:	f003 0307 	and.w	r3, r3, #7
 8007fb8:	2101      	movs	r1, #1
 8007fba:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbe:	b25b      	sxtb	r3, r3
 8007fc0:	43db      	mvns	r3, r3
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	4013      	ands	r3, r2
 8007fc6:	b259      	sxtb	r1, r3
 8007fc8:	7cfb      	ldrb	r3, [r7, #19]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	4413      	add	r3, r2
 8007fce:	b2ca      	uxtb	r2, r1
 8007fd0:	701a      	strb	r2, [r3, #0]
    b++;
 8007fd2:	8afb      	ldrh	r3, [r7, #22]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	82fb      	strh	r3, [r7, #22]
  while (b < p) {
 8007fd8:	8afa      	ldrh	r2, [r7, #22]
 8007fda:	8abb      	ldrh	r3, [r7, #20]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d3b4      	bcc.n	8007f4a <owReadScratchpadCmd+0x34>
  }
  return data;
 8007fe0:	687b      	ldr	r3, [r7, #4]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3718      	adds	r7, #24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <readTemperature>:
  owSendByte(th);
  owSendByte(tl);
  owSendByte(conf);
}

Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b08c      	sub	sp, #48	@ 0x30
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	60f8      	str	r0, [r7, #12]
 8007ff2:	60b9      	str	r1, [r7, #8]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8007ffe:	2300      	movs	r3, #0
 8008000:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sp = (Scratchpad_DS18B20 *) &pad;
 8008004:	f107 0314 	add.w	r3, r7, #20
 8008008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 800800a:	f107 0314 	add.w	r3, r7, #20
 800800e:	62bb      	str	r3, [r7, #40]	@ 0x28
  switch (rom->family) {
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	2b10      	cmp	r3, #16
 8008016:	d022      	beq.n	800805e <readTemperature+0x74>
 8008018:	2b28      	cmp	r3, #40	@ 0x28
 800801a:	d13a      	bne.n	8008092 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);
 800801c:	f107 0314 	add.w	r3, r7, #20
 8008020:	461a      	mov	r2, r3
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7ff ff76 	bl	8007f16 <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);
 800802a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802c:	79db      	ldrb	r3, [r3, #7]
 800802e:	011b      	lsls	r3, r3, #4
 8008030:	b25a      	sxtb	r2, r3
 8008032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008034:	7a1b      	ldrb	r3, [r3, #8]
 8008036:	091b      	lsrs	r3, r3, #4
 8008038:	b2db      	uxtb	r3, r3
 800803a:	b25b      	sxtb	r3, r3
 800803c:	4313      	orrs	r3, r2
 800803e:	b25b      	sxtb	r3, r3
 8008040:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);
 8008044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008046:	7a1b      	ldrb	r3, [r3, #8]
 8008048:	f003 020f 	and.w	r2, r3, #15
 800804c:	4613      	mov	r3, r2
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	4413      	add	r3, r2
 8008052:	005b      	lsls	r3, r3, #1
 8008054:	111b      	asrs	r3, r3, #4
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 800805c:	e01c      	b.n	8008098 <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);
 800805e:	f107 0314 	add.w	r3, r7, #20
 8008062:	461a      	mov	r2, r3
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff ff55 	bl	8007f16 <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 800806c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806e:	7a1b      	ldrb	r3, [r3, #8]
 8008070:	085b      	lsrs	r3, r3, #1
 8008072:	b2db      	uxtb	r3, r3
 8008074:	b25b      	sxtb	r3, r3
 8008076:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 800807a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807c:	7a1b      	ldrb	r3, [r3, #8]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	b2db      	uxtb	r3, r3
 8008084:	461a      	mov	r2, r3
 8008086:	0092      	lsls	r2, r2, #2
 8008088:	4413      	add	r3, r2
 800808a:	b2db      	uxtb	r3, r3
 800808c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 8008090:	e002      	b.n	8008098 <readTemperature+0xae>
    default:
      return t;
 8008092:	8c3b      	ldrh	r3, [r7, #32]
 8008094:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008096:	e008      	b.n	80080aa <readTemperature+0xc0>
  }
  if (reSense) {
 8008098:	79fb      	ldrb	r3, [r7, #7]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);
 800809e:	68b9      	ldr	r1, [r7, #8]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff ff29 	bl	8007ef8 <owConvertTemperatureCmd>
  }
  return t;
 80080a6:	8c3b      	ldrh	r3, [r7, #32]
 80080a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
}
 80080aa:	2300      	movs	r3, #0
 80080ac:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80080b0:	f362 0307 	bfi	r3, r2, #0, #8
 80080b4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80080b8:	f362 230f 	bfi	r3, r2, #8, #8
 80080bc:	4618      	mov	r0, r3
 80080be:	3730      	adds	r7, #48	@ 0x30
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <get_ROMid>:
void owRecallE2Cmd(OneWire *ow, RomCode *rom) {
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}

int get_ROMid (void){
 80080c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080c6:	b089      	sub	sp, #36	@ 0x24
 80080c8:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {
 80080ca:	f7ff fd07 	bl	8007adc <owResetCmd>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80080d2:	d079      	beq.n	80081c8 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);
 80080d4:	484e      	ldr	r0, [pc, #312]	@ (8008210 <get_ROMid+0x14c>)
 80080d6:	f7ff fecb 	bl	8007e70 <owSearchCmd>
 80080da:	4603      	mov	r3, r0
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	4b4d      	ldr	r3, [pc, #308]	@ (8008214 <get_ROMid+0x150>)
 80080e0:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 80080e2:	4b4c      	ldr	r3, [pc, #304]	@ (8008214 <get_ROMid+0x150>)
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d113      	bne.n	8008112 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 80080ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008218 <get_ROMid+0x154>)
 80080ec:	4a4b      	ldr	r2, [pc, #300]	@ (800821c <get_ROMid+0x158>)
 80080ee:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)
 80080f0:	4b4b      	ldr	r3, [pc, #300]	@ (8008220 <get_ROMid+0x15c>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	e005      	b.n	8008104 <get_ROMid+0x40>
					__asm__("nop");
 80080f8:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)
 80080fa:	4b49      	ldr	r3, [pc, #292]	@ (8008220 <get_ROMid+0x15c>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3301      	adds	r3, #1
 8008100:	4a47      	ldr	r2, [pc, #284]	@ (8008220 <get_ROMid+0x15c>)
 8008102:	6013      	str	r3, [r2, #0]
 8008104:	4b46      	ldr	r3, [pc, #280]	@ (8008220 <get_ROMid+0x15c>)
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	4b43      	ldr	r3, [pc, #268]	@ (8008218 <get_ROMid+0x154>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d3f3      	bcc.n	80080f8 <get_ROMid+0x34>
				pDelay = 1000000;
 8008110:	e7eb      	b.n	80080ea <get_ROMid+0x26>
			}

		}
		i = 0;
 8008112:	4b43      	ldr	r3, [pc, #268]	@ (8008220 <get_ROMid+0x15c>)
 8008114:	2200      	movs	r2, #0
 8008116:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {
 8008118:	e04f      	b.n	80081ba <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 800811a:	4b41      	ldr	r3, [pc, #260]	@ (8008220 <get_ROMid+0x15c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	4a3b      	ldr	r2, [pc, #236]	@ (8008210 <get_ROMid+0x14c>)
 8008122:	4413      	add	r3, r2
 8008124:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fde6 	bl	8007cf8 <owCRC8>
 800812c:	4603      	mov	r3, r0
 800812e:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	79db      	ldrb	r3, [r3, #7]
 8008134:	78fa      	ldrb	r2, [r7, #3]
 8008136:	429a      	cmp	r2, r3
 8008138:	d101      	bne.n	800813e <get_ROMid+0x7a>
 800813a:	4b3a      	ldr	r3, [pc, #232]	@ (8008224 <get_ROMid+0x160>)
 800813c:	e000      	b.n	8008140 <get_ROMid+0x7c>
 800813e:	4b3a      	ldr	r3, [pc, #232]	@ (8008228 <get_ROMid+0x164>)
 8008140:	4a3a      	ldr	r2, [pc, #232]	@ (800822c <get_ROMid+0x168>)
 8008142:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8008144:	4b36      	ldr	r3, [pc, #216]	@ (8008220 <get_ROMid+0x15c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	461a      	mov	r2, r3
 800814a:	4b39      	ldr	r3, [pc, #228]	@ (8008230 <get_ROMid+0x16c>)
 800814c:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	461e      	mov	r6, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	799b      	ldrb	r3, [r3, #6]
 8008158:	469c      	mov	ip, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	795b      	ldrb	r3, [r3, #5]
 800815e:	461a      	mov	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	791b      	ldrb	r3, [r3, #4]
 8008164:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800816a:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8008170:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8008176:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800817c:	9305      	str	r3, [sp, #20]
 800817e:	9504      	str	r5, [sp, #16]
 8008180:	9403      	str	r4, [sp, #12]
 8008182:	9002      	str	r0, [sp, #8]
 8008184:	9101      	str	r1, [sp, #4]
 8008186:	9200      	str	r2, [sp, #0]
 8008188:	4663      	mov	r3, ip
 800818a:	4632      	mov	r2, r6
 800818c:	4929      	ldr	r1, [pc, #164]	@ (8008234 <get_ROMid+0x170>)
 800818e:	482a      	ldr	r0, [pc, #168]	@ (8008238 <get_ROMid+0x174>)
 8008190:	f000 fdf2 	bl	8008d78 <siprintf>

			if (crc != r->crc) {
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	79db      	ldrb	r3, [r3, #7]
 8008198:	78fa      	ldrb	r2, [r7, #3]
 800819a:	429a      	cmp	r2, r3
 800819c:	d008      	beq.n	80081b0 <get_ROMid+0xec>
				devInfo.device = i;
 800819e:	4b20      	ldr	r3, [pc, #128]	@ (8008220 <get_ROMid+0x15c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	4b22      	ldr	r3, [pc, #136]	@ (8008230 <get_ROMid+0x16c>)
 80081a6:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 80081a8:	4924      	ldr	r1, [pc, #144]	@ (800823c <get_ROMid+0x178>)
 80081aa:	4823      	ldr	r0, [pc, #140]	@ (8008238 <get_ROMid+0x174>)
 80081ac:	f000 fde4 	bl	8008d78 <siprintf>
		for (; i < devices; i++) {
 80081b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008220 <get_ROMid+0x15c>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	3301      	adds	r3, #1
 80081b6:	4a1a      	ldr	r2, [pc, #104]	@ (8008220 <get_ROMid+0x15c>)
 80081b8:	6013      	str	r3, [r2, #0]
 80081ba:	4b16      	ldr	r3, [pc, #88]	@ (8008214 <get_ROMid+0x150>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	4b17      	ldr	r3, [pc, #92]	@ (8008220 <get_ROMid+0x15c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d8a8      	bhi.n	800811a <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 80081c8:	4b13      	ldr	r3, [pc, #76]	@ (8008218 <get_ROMid+0x154>)
 80081ca:	4a14      	ldr	r2, [pc, #80]	@ (800821c <get_ROMid+0x158>)
 80081cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 80081ce:	4b14      	ldr	r3, [pc, #80]	@ (8008220 <get_ROMid+0x15c>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	601a      	str	r2, [r3, #0]
 80081d4:	e005      	b.n	80081e2 <get_ROMid+0x11e>
		__asm__("nop");
 80081d6:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 80081d8:	4b11      	ldr	r3, [pc, #68]	@ (8008220 <get_ROMid+0x15c>)
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	4a10      	ldr	r2, [pc, #64]	@ (8008220 <get_ROMid+0x15c>)
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008220 <get_ROMid+0x15c>)
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008218 <get_ROMid+0x154>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d3f3      	bcc.n	80081d6 <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 80081ee:	4b0f      	ldr	r3, [pc, #60]	@ (800822c <get_ROMid+0x168>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	490c      	ldr	r1, [pc, #48]	@ (8008224 <get_ROMid+0x160>)
 80081f4:	4618      	mov	r0, r3
 80081f6:	f7f8 f80b 	bl	8000210 <strcmp>
 80081fa:	4603      	mov	r3, r0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <get_ROMid+0x140>
 8008200:	2300      	movs	r3, #0
 8008202:	e001      	b.n	8008208 <get_ROMid+0x144>
	else return -1;
 8008204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008210:	20005a58 	.word	0x20005a58
 8008214:	20005a54 	.word	0x20005a54
 8008218:	20003688 	.word	0x20003688
 800821c:	000f4240 	.word	0x000f4240
 8008220:	20005a6c 	.word	0x20005a6c
 8008224:	0800b0a4 	.word	0x0800b0a4
 8008228:	0800b0ac 	.word	0x0800b0ac
 800822c:	20005a98 	.word	0x20005a98
 8008230:	20005a74 	.word	0x20005a74
 8008234:	0800b0b8 	.word	0x0800b0b8
 8008238:	20005a78 	.word	0x20005a78
 800823c:	0800b0e0 	.word	0x0800b0e0

08008240 <get_Temperature>:

void get_Temperature (void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
	i=0;
 8008244:	4b3a      	ldr	r3, [pc, #232]	@ (8008330 <get_Temperature+0xf0>)
 8008246:	2200      	movs	r2, #0
 8008248:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 800824a:	e067      	b.n	800831c <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {
 800824c:	4b38      	ldr	r3, [pc, #224]	@ (8008330 <get_Temperature+0xf0>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a38      	ldr	r2, [pc, #224]	@ (8008334 <get_Temperature+0xf4>)
 8008252:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8008256:	2b28      	cmp	r3, #40	@ 0x28
 8008258:	d006      	beq.n	8008268 <get_Temperature+0x28>
 800825a:	2b28      	cmp	r3, #40	@ 0x28
 800825c:	dc56      	bgt.n	800830c <get_Temperature+0xcc>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d056      	beq.n	8008310 <get_Temperature+0xd0>
 8008262:	2b10      	cmp	r3, #16
 8008264:	d029      	beq.n	80082ba <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:

			break;
 8008266:	e051      	b.n	800830c <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8008268:	4b31      	ldr	r3, [pc, #196]	@ (8008330 <get_Temperature+0xf0>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	4a31      	ldr	r2, [pc, #196]	@ (8008334 <get_Temperature+0xf4>)
 8008270:	4413      	add	r3, r2
 8008272:	2201      	movs	r2, #1
 8008274:	4619      	mov	r1, r3
 8008276:	482f      	ldr	r0, [pc, #188]	@ (8008334 <get_Temperature+0xf4>)
 8008278:	f7ff feb7 	bl	8007fea <readTemperature>
 800827c:	4603      	mov	r3, r0
 800827e:	4a2e      	ldr	r2, [pc, #184]	@ (8008338 <get_Temperature+0xf8>)
 8008280:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8008282:	4b2d      	ldr	r3, [pc, #180]	@ (8008338 <get_Temperature+0xf8>)
 8008284:	f993 3000 	ldrsb.w	r3, [r3]
 8008288:	461a      	mov	r2, r3
 800828a:	4613      	mov	r3, r2
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	461a      	mov	r2, r3
 8008294:	4b28      	ldr	r3, [pc, #160]	@ (8008338 <get_Temperature+0xf8>)
 8008296:	785b      	ldrb	r3, [r3, #1]
 8008298:	4413      	add	r3, r2
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082a2:	4b23      	ldr	r3, [pc, #140]	@ (8008330 <get_Temperature+0xf0>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80082aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80082ae:	4a23      	ldr	r2, [pc, #140]	@ (800833c <get_Temperature+0xfc>)
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	edc3 7a00 	vstr	s15, [r3]
			break;
 80082b8:	e02b      	b.n	8008312 <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80082ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008330 <get_Temperature+0xf0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	00db      	lsls	r3, r3, #3
 80082c0:	4a1c      	ldr	r2, [pc, #112]	@ (8008334 <get_Temperature+0xf4>)
 80082c2:	4413      	add	r3, r2
 80082c4:	2201      	movs	r2, #1
 80082c6:	4619      	mov	r1, r3
 80082c8:	481a      	ldr	r0, [pc, #104]	@ (8008334 <get_Temperature+0xf4>)
 80082ca:	f7ff fe8e 	bl	8007fea <readTemperature>
 80082ce:	4603      	mov	r3, r0
 80082d0:	4a19      	ldr	r2, [pc, #100]	@ (8008338 <get_Temperature+0xf8>)
 80082d2:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 80082d4:	4b18      	ldr	r3, [pc, #96]	@ (8008338 <get_Temperature+0xf8>)
 80082d6:	f993 3000 	ldrsb.w	r3, [r3]
 80082da:	461a      	mov	r2, r3
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	461a      	mov	r2, r3
 80082e6:	4b14      	ldr	r3, [pc, #80]	@ (8008338 <get_Temperature+0xf8>)
 80082e8:	785b      	ldrb	r3, [r3, #1]
 80082ea:	4413      	add	r3, r2
 80082ec:	ee07 3a90 	vmov	s15, r3
 80082f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008330 <get_Temperature+0xf0>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80082fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008300:	4a0e      	ldr	r2, [pc, #56]	@ (800833c <get_Temperature+0xfc>)
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	edc3 7a00 	vstr	s15, [r3]
			break;
 800830a:	e002      	b.n	8008312 <get_Temperature+0xd2>
			break;
 800830c:	bf00      	nop
 800830e:	e000      	b.n	8008312 <get_Temperature+0xd2>
			break;
 8008310:	bf00      	nop
	for (; i < devices; i++) {
 8008312:	4b07      	ldr	r3, [pc, #28]	@ (8008330 <get_Temperature+0xf0>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	3301      	adds	r3, #1
 8008318:	4a05      	ldr	r2, [pc, #20]	@ (8008330 <get_Temperature+0xf0>)
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	4b08      	ldr	r3, [pc, #32]	@ (8008340 <get_Temperature+0x100>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	461a      	mov	r2, r3
 8008322:	4b03      	ldr	r3, [pc, #12]	@ (8008330 <get_Temperature+0xf0>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d890      	bhi.n	800824c <get_Temperature+0xc>
		}
	}

}
 800832a:	bf00      	nop
 800832c:	bf00      	nop
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20005a6c 	.word	0x20005a6c
 8008334:	20005a58 	.word	0x20005a58
 8008338:	20005a70 	.word	0x20005a70
 800833c:	20005a50 	.word	0x20005a50
 8008340:	20005a54 	.word	0x20005a54

08008344 <__cvt>:
 8008344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	ec57 6b10 	vmov	r6, r7, d0
 800834c:	2f00      	cmp	r7, #0
 800834e:	460c      	mov	r4, r1
 8008350:	4619      	mov	r1, r3
 8008352:	463b      	mov	r3, r7
 8008354:	bfbb      	ittet	lt
 8008356:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800835a:	461f      	movlt	r7, r3
 800835c:	2300      	movge	r3, #0
 800835e:	232d      	movlt	r3, #45	@ 0x2d
 8008360:	700b      	strb	r3, [r1, #0]
 8008362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008364:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008368:	4691      	mov	r9, r2
 800836a:	f023 0820 	bic.w	r8, r3, #32
 800836e:	bfbc      	itt	lt
 8008370:	4632      	movlt	r2, r6
 8008372:	4616      	movlt	r6, r2
 8008374:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008378:	d005      	beq.n	8008386 <__cvt+0x42>
 800837a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800837e:	d100      	bne.n	8008382 <__cvt+0x3e>
 8008380:	3401      	adds	r4, #1
 8008382:	2102      	movs	r1, #2
 8008384:	e000      	b.n	8008388 <__cvt+0x44>
 8008386:	2103      	movs	r1, #3
 8008388:	ab03      	add	r3, sp, #12
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	ab02      	add	r3, sp, #8
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	ec47 6b10 	vmov	d0, r6, r7
 8008394:	4653      	mov	r3, sl
 8008396:	4622      	mov	r2, r4
 8008398:	f000 fe5a 	bl	8009050 <_dtoa_r>
 800839c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80083a0:	4605      	mov	r5, r0
 80083a2:	d119      	bne.n	80083d8 <__cvt+0x94>
 80083a4:	f019 0f01 	tst.w	r9, #1
 80083a8:	d00e      	beq.n	80083c8 <__cvt+0x84>
 80083aa:	eb00 0904 	add.w	r9, r0, r4
 80083ae:	2200      	movs	r2, #0
 80083b0:	2300      	movs	r3, #0
 80083b2:	4630      	mov	r0, r6
 80083b4:	4639      	mov	r1, r7
 80083b6:	f7f8 fbb7 	bl	8000b28 <__aeabi_dcmpeq>
 80083ba:	b108      	cbz	r0, 80083c0 <__cvt+0x7c>
 80083bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80083c0:	2230      	movs	r2, #48	@ 0x30
 80083c2:	9b03      	ldr	r3, [sp, #12]
 80083c4:	454b      	cmp	r3, r9
 80083c6:	d31e      	bcc.n	8008406 <__cvt+0xc2>
 80083c8:	9b03      	ldr	r3, [sp, #12]
 80083ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80083cc:	1b5b      	subs	r3, r3, r5
 80083ce:	4628      	mov	r0, r5
 80083d0:	6013      	str	r3, [r2, #0]
 80083d2:	b004      	add	sp, #16
 80083d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083dc:	eb00 0904 	add.w	r9, r0, r4
 80083e0:	d1e5      	bne.n	80083ae <__cvt+0x6a>
 80083e2:	7803      	ldrb	r3, [r0, #0]
 80083e4:	2b30      	cmp	r3, #48	@ 0x30
 80083e6:	d10a      	bne.n	80083fe <__cvt+0xba>
 80083e8:	2200      	movs	r2, #0
 80083ea:	2300      	movs	r3, #0
 80083ec:	4630      	mov	r0, r6
 80083ee:	4639      	mov	r1, r7
 80083f0:	f7f8 fb9a 	bl	8000b28 <__aeabi_dcmpeq>
 80083f4:	b918      	cbnz	r0, 80083fe <__cvt+0xba>
 80083f6:	f1c4 0401 	rsb	r4, r4, #1
 80083fa:	f8ca 4000 	str.w	r4, [sl]
 80083fe:	f8da 3000 	ldr.w	r3, [sl]
 8008402:	4499      	add	r9, r3
 8008404:	e7d3      	b.n	80083ae <__cvt+0x6a>
 8008406:	1c59      	adds	r1, r3, #1
 8008408:	9103      	str	r1, [sp, #12]
 800840a:	701a      	strb	r2, [r3, #0]
 800840c:	e7d9      	b.n	80083c2 <__cvt+0x7e>

0800840e <__exponent>:
 800840e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008410:	2900      	cmp	r1, #0
 8008412:	bfba      	itte	lt
 8008414:	4249      	neglt	r1, r1
 8008416:	232d      	movlt	r3, #45	@ 0x2d
 8008418:	232b      	movge	r3, #43	@ 0x2b
 800841a:	2909      	cmp	r1, #9
 800841c:	7002      	strb	r2, [r0, #0]
 800841e:	7043      	strb	r3, [r0, #1]
 8008420:	dd29      	ble.n	8008476 <__exponent+0x68>
 8008422:	f10d 0307 	add.w	r3, sp, #7
 8008426:	461d      	mov	r5, r3
 8008428:	270a      	movs	r7, #10
 800842a:	461a      	mov	r2, r3
 800842c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008430:	fb07 1416 	mls	r4, r7, r6, r1
 8008434:	3430      	adds	r4, #48	@ 0x30
 8008436:	f802 4c01 	strb.w	r4, [r2, #-1]
 800843a:	460c      	mov	r4, r1
 800843c:	2c63      	cmp	r4, #99	@ 0x63
 800843e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008442:	4631      	mov	r1, r6
 8008444:	dcf1      	bgt.n	800842a <__exponent+0x1c>
 8008446:	3130      	adds	r1, #48	@ 0x30
 8008448:	1e94      	subs	r4, r2, #2
 800844a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800844e:	1c41      	adds	r1, r0, #1
 8008450:	4623      	mov	r3, r4
 8008452:	42ab      	cmp	r3, r5
 8008454:	d30a      	bcc.n	800846c <__exponent+0x5e>
 8008456:	f10d 0309 	add.w	r3, sp, #9
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	42ac      	cmp	r4, r5
 800845e:	bf88      	it	hi
 8008460:	2300      	movhi	r3, #0
 8008462:	3302      	adds	r3, #2
 8008464:	4403      	add	r3, r0
 8008466:	1a18      	subs	r0, r3, r0
 8008468:	b003      	add	sp, #12
 800846a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800846c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008470:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008474:	e7ed      	b.n	8008452 <__exponent+0x44>
 8008476:	2330      	movs	r3, #48	@ 0x30
 8008478:	3130      	adds	r1, #48	@ 0x30
 800847a:	7083      	strb	r3, [r0, #2]
 800847c:	70c1      	strb	r1, [r0, #3]
 800847e:	1d03      	adds	r3, r0, #4
 8008480:	e7f1      	b.n	8008466 <__exponent+0x58>
	...

08008484 <_printf_float>:
 8008484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008488:	b08d      	sub	sp, #52	@ 0x34
 800848a:	460c      	mov	r4, r1
 800848c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008490:	4616      	mov	r6, r2
 8008492:	461f      	mov	r7, r3
 8008494:	4605      	mov	r5, r0
 8008496:	f000 fcdb 	bl	8008e50 <_localeconv_r>
 800849a:	6803      	ldr	r3, [r0, #0]
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7f7 ff16 	bl	80002d0 <strlen>
 80084a4:	2300      	movs	r3, #0
 80084a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80084a8:	f8d8 3000 	ldr.w	r3, [r8]
 80084ac:	9005      	str	r0, [sp, #20]
 80084ae:	3307      	adds	r3, #7
 80084b0:	f023 0307 	bic.w	r3, r3, #7
 80084b4:	f103 0208 	add.w	r2, r3, #8
 80084b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80084bc:	f8d4 b000 	ldr.w	fp, [r4]
 80084c0:	f8c8 2000 	str.w	r2, [r8]
 80084c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80084cc:	9307      	str	r3, [sp, #28]
 80084ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80084d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80084d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084da:	4b9c      	ldr	r3, [pc, #624]	@ (800874c <_printf_float+0x2c8>)
 80084dc:	f04f 32ff 	mov.w	r2, #4294967295
 80084e0:	f7f8 fb54 	bl	8000b8c <__aeabi_dcmpun>
 80084e4:	bb70      	cbnz	r0, 8008544 <_printf_float+0xc0>
 80084e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ea:	4b98      	ldr	r3, [pc, #608]	@ (800874c <_printf_float+0x2c8>)
 80084ec:	f04f 32ff 	mov.w	r2, #4294967295
 80084f0:	f7f8 fb2e 	bl	8000b50 <__aeabi_dcmple>
 80084f4:	bb30      	cbnz	r0, 8008544 <_printf_float+0xc0>
 80084f6:	2200      	movs	r2, #0
 80084f8:	2300      	movs	r3, #0
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	f7f8 fb1d 	bl	8000b3c <__aeabi_dcmplt>
 8008502:	b110      	cbz	r0, 800850a <_printf_float+0x86>
 8008504:	232d      	movs	r3, #45	@ 0x2d
 8008506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800850a:	4a91      	ldr	r2, [pc, #580]	@ (8008750 <_printf_float+0x2cc>)
 800850c:	4b91      	ldr	r3, [pc, #580]	@ (8008754 <_printf_float+0x2d0>)
 800850e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008512:	bf94      	ite	ls
 8008514:	4690      	movls	r8, r2
 8008516:	4698      	movhi	r8, r3
 8008518:	2303      	movs	r3, #3
 800851a:	6123      	str	r3, [r4, #16]
 800851c:	f02b 0304 	bic.w	r3, fp, #4
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	f04f 0900 	mov.w	r9, #0
 8008526:	9700      	str	r7, [sp, #0]
 8008528:	4633      	mov	r3, r6
 800852a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800852c:	4621      	mov	r1, r4
 800852e:	4628      	mov	r0, r5
 8008530:	f000 f9d2 	bl	80088d8 <_printf_common>
 8008534:	3001      	adds	r0, #1
 8008536:	f040 808d 	bne.w	8008654 <_printf_float+0x1d0>
 800853a:	f04f 30ff 	mov.w	r0, #4294967295
 800853e:	b00d      	add	sp, #52	@ 0x34
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008544:	4642      	mov	r2, r8
 8008546:	464b      	mov	r3, r9
 8008548:	4640      	mov	r0, r8
 800854a:	4649      	mov	r1, r9
 800854c:	f7f8 fb1e 	bl	8000b8c <__aeabi_dcmpun>
 8008550:	b140      	cbz	r0, 8008564 <_printf_float+0xe0>
 8008552:	464b      	mov	r3, r9
 8008554:	2b00      	cmp	r3, #0
 8008556:	bfbc      	itt	lt
 8008558:	232d      	movlt	r3, #45	@ 0x2d
 800855a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800855e:	4a7e      	ldr	r2, [pc, #504]	@ (8008758 <_printf_float+0x2d4>)
 8008560:	4b7e      	ldr	r3, [pc, #504]	@ (800875c <_printf_float+0x2d8>)
 8008562:	e7d4      	b.n	800850e <_printf_float+0x8a>
 8008564:	6863      	ldr	r3, [r4, #4]
 8008566:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800856a:	9206      	str	r2, [sp, #24]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	d13b      	bne.n	80085e8 <_printf_float+0x164>
 8008570:	2306      	movs	r3, #6
 8008572:	6063      	str	r3, [r4, #4]
 8008574:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008578:	2300      	movs	r3, #0
 800857a:	6022      	str	r2, [r4, #0]
 800857c:	9303      	str	r3, [sp, #12]
 800857e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008580:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008584:	ab09      	add	r3, sp, #36	@ 0x24
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	6861      	ldr	r1, [r4, #4]
 800858a:	ec49 8b10 	vmov	d0, r8, r9
 800858e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008592:	4628      	mov	r0, r5
 8008594:	f7ff fed6 	bl	8008344 <__cvt>
 8008598:	9b06      	ldr	r3, [sp, #24]
 800859a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800859c:	2b47      	cmp	r3, #71	@ 0x47
 800859e:	4680      	mov	r8, r0
 80085a0:	d129      	bne.n	80085f6 <_printf_float+0x172>
 80085a2:	1cc8      	adds	r0, r1, #3
 80085a4:	db02      	blt.n	80085ac <_printf_float+0x128>
 80085a6:	6863      	ldr	r3, [r4, #4]
 80085a8:	4299      	cmp	r1, r3
 80085aa:	dd41      	ble.n	8008630 <_printf_float+0x1ac>
 80085ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80085b0:	fa5f fa8a 	uxtb.w	sl, sl
 80085b4:	3901      	subs	r1, #1
 80085b6:	4652      	mov	r2, sl
 80085b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80085bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80085be:	f7ff ff26 	bl	800840e <__exponent>
 80085c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085c4:	1813      	adds	r3, r2, r0
 80085c6:	2a01      	cmp	r2, #1
 80085c8:	4681      	mov	r9, r0
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	dc02      	bgt.n	80085d4 <_printf_float+0x150>
 80085ce:	6822      	ldr	r2, [r4, #0]
 80085d0:	07d2      	lsls	r2, r2, #31
 80085d2:	d501      	bpl.n	80085d8 <_printf_float+0x154>
 80085d4:	3301      	adds	r3, #1
 80085d6:	6123      	str	r3, [r4, #16]
 80085d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d0a2      	beq.n	8008526 <_printf_float+0xa2>
 80085e0:	232d      	movs	r3, #45	@ 0x2d
 80085e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085e6:	e79e      	b.n	8008526 <_printf_float+0xa2>
 80085e8:	9a06      	ldr	r2, [sp, #24]
 80085ea:	2a47      	cmp	r2, #71	@ 0x47
 80085ec:	d1c2      	bne.n	8008574 <_printf_float+0xf0>
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d1c0      	bne.n	8008574 <_printf_float+0xf0>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e7bd      	b.n	8008572 <_printf_float+0xee>
 80085f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80085fa:	d9db      	bls.n	80085b4 <_printf_float+0x130>
 80085fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008600:	d118      	bne.n	8008634 <_printf_float+0x1b0>
 8008602:	2900      	cmp	r1, #0
 8008604:	6863      	ldr	r3, [r4, #4]
 8008606:	dd0b      	ble.n	8008620 <_printf_float+0x19c>
 8008608:	6121      	str	r1, [r4, #16]
 800860a:	b913      	cbnz	r3, 8008612 <_printf_float+0x18e>
 800860c:	6822      	ldr	r2, [r4, #0]
 800860e:	07d0      	lsls	r0, r2, #31
 8008610:	d502      	bpl.n	8008618 <_printf_float+0x194>
 8008612:	3301      	adds	r3, #1
 8008614:	440b      	add	r3, r1
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	65a1      	str	r1, [r4, #88]	@ 0x58
 800861a:	f04f 0900 	mov.w	r9, #0
 800861e:	e7db      	b.n	80085d8 <_printf_float+0x154>
 8008620:	b913      	cbnz	r3, 8008628 <_printf_float+0x1a4>
 8008622:	6822      	ldr	r2, [r4, #0]
 8008624:	07d2      	lsls	r2, r2, #31
 8008626:	d501      	bpl.n	800862c <_printf_float+0x1a8>
 8008628:	3302      	adds	r3, #2
 800862a:	e7f4      	b.n	8008616 <_printf_float+0x192>
 800862c:	2301      	movs	r3, #1
 800862e:	e7f2      	b.n	8008616 <_printf_float+0x192>
 8008630:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008636:	4299      	cmp	r1, r3
 8008638:	db05      	blt.n	8008646 <_printf_float+0x1c2>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	6121      	str	r1, [r4, #16]
 800863e:	07d8      	lsls	r0, r3, #31
 8008640:	d5ea      	bpl.n	8008618 <_printf_float+0x194>
 8008642:	1c4b      	adds	r3, r1, #1
 8008644:	e7e7      	b.n	8008616 <_printf_float+0x192>
 8008646:	2900      	cmp	r1, #0
 8008648:	bfd4      	ite	le
 800864a:	f1c1 0202 	rsble	r2, r1, #2
 800864e:	2201      	movgt	r2, #1
 8008650:	4413      	add	r3, r2
 8008652:	e7e0      	b.n	8008616 <_printf_float+0x192>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	055a      	lsls	r2, r3, #21
 8008658:	d407      	bmi.n	800866a <_printf_float+0x1e6>
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	4642      	mov	r2, r8
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	47b8      	blx	r7
 8008664:	3001      	adds	r0, #1
 8008666:	d12b      	bne.n	80086c0 <_printf_float+0x23c>
 8008668:	e767      	b.n	800853a <_printf_float+0xb6>
 800866a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800866e:	f240 80dd 	bls.w	800882c <_printf_float+0x3a8>
 8008672:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008676:	2200      	movs	r2, #0
 8008678:	2300      	movs	r3, #0
 800867a:	f7f8 fa55 	bl	8000b28 <__aeabi_dcmpeq>
 800867e:	2800      	cmp	r0, #0
 8008680:	d033      	beq.n	80086ea <_printf_float+0x266>
 8008682:	4a37      	ldr	r2, [pc, #220]	@ (8008760 <_printf_float+0x2dc>)
 8008684:	2301      	movs	r3, #1
 8008686:	4631      	mov	r1, r6
 8008688:	4628      	mov	r0, r5
 800868a:	47b8      	blx	r7
 800868c:	3001      	adds	r0, #1
 800868e:	f43f af54 	beq.w	800853a <_printf_float+0xb6>
 8008692:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008696:	4543      	cmp	r3, r8
 8008698:	db02      	blt.n	80086a0 <_printf_float+0x21c>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	07d8      	lsls	r0, r3, #31
 800869e:	d50f      	bpl.n	80086c0 <_printf_float+0x23c>
 80086a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a4:	4631      	mov	r1, r6
 80086a6:	4628      	mov	r0, r5
 80086a8:	47b8      	blx	r7
 80086aa:	3001      	adds	r0, #1
 80086ac:	f43f af45 	beq.w	800853a <_printf_float+0xb6>
 80086b0:	f04f 0900 	mov.w	r9, #0
 80086b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80086b8:	f104 0a1a 	add.w	sl, r4, #26
 80086bc:	45c8      	cmp	r8, r9
 80086be:	dc09      	bgt.n	80086d4 <_printf_float+0x250>
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	079b      	lsls	r3, r3, #30
 80086c4:	f100 8103 	bmi.w	80088ce <_printf_float+0x44a>
 80086c8:	68e0      	ldr	r0, [r4, #12]
 80086ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086cc:	4298      	cmp	r0, r3
 80086ce:	bfb8      	it	lt
 80086d0:	4618      	movlt	r0, r3
 80086d2:	e734      	b.n	800853e <_printf_float+0xba>
 80086d4:	2301      	movs	r3, #1
 80086d6:	4652      	mov	r2, sl
 80086d8:	4631      	mov	r1, r6
 80086da:	4628      	mov	r0, r5
 80086dc:	47b8      	blx	r7
 80086de:	3001      	adds	r0, #1
 80086e0:	f43f af2b 	beq.w	800853a <_printf_float+0xb6>
 80086e4:	f109 0901 	add.w	r9, r9, #1
 80086e8:	e7e8      	b.n	80086bc <_printf_float+0x238>
 80086ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	dc39      	bgt.n	8008764 <_printf_float+0x2e0>
 80086f0:	4a1b      	ldr	r2, [pc, #108]	@ (8008760 <_printf_float+0x2dc>)
 80086f2:	2301      	movs	r3, #1
 80086f4:	4631      	mov	r1, r6
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b8      	blx	r7
 80086fa:	3001      	adds	r0, #1
 80086fc:	f43f af1d 	beq.w	800853a <_printf_float+0xb6>
 8008700:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008704:	ea59 0303 	orrs.w	r3, r9, r3
 8008708:	d102      	bne.n	8008710 <_printf_float+0x28c>
 800870a:	6823      	ldr	r3, [r4, #0]
 800870c:	07d9      	lsls	r1, r3, #31
 800870e:	d5d7      	bpl.n	80086c0 <_printf_float+0x23c>
 8008710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008714:	4631      	mov	r1, r6
 8008716:	4628      	mov	r0, r5
 8008718:	47b8      	blx	r7
 800871a:	3001      	adds	r0, #1
 800871c:	f43f af0d 	beq.w	800853a <_printf_float+0xb6>
 8008720:	f04f 0a00 	mov.w	sl, #0
 8008724:	f104 0b1a 	add.w	fp, r4, #26
 8008728:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872a:	425b      	negs	r3, r3
 800872c:	4553      	cmp	r3, sl
 800872e:	dc01      	bgt.n	8008734 <_printf_float+0x2b0>
 8008730:	464b      	mov	r3, r9
 8008732:	e793      	b.n	800865c <_printf_float+0x1d8>
 8008734:	2301      	movs	r3, #1
 8008736:	465a      	mov	r2, fp
 8008738:	4631      	mov	r1, r6
 800873a:	4628      	mov	r0, r5
 800873c:	47b8      	blx	r7
 800873e:	3001      	adds	r0, #1
 8008740:	f43f aefb 	beq.w	800853a <_printf_float+0xb6>
 8008744:	f10a 0a01 	add.w	sl, sl, #1
 8008748:	e7ee      	b.n	8008728 <_printf_float+0x2a4>
 800874a:	bf00      	nop
 800874c:	7fefffff 	.word	0x7fefffff
 8008750:	0800fce8 	.word	0x0800fce8
 8008754:	0800fcec 	.word	0x0800fcec
 8008758:	0800fcf0 	.word	0x0800fcf0
 800875c:	0800fcf4 	.word	0x0800fcf4
 8008760:	0800fcf8 	.word	0x0800fcf8
 8008764:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008766:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800876a:	4553      	cmp	r3, sl
 800876c:	bfa8      	it	ge
 800876e:	4653      	movge	r3, sl
 8008770:	2b00      	cmp	r3, #0
 8008772:	4699      	mov	r9, r3
 8008774:	dc36      	bgt.n	80087e4 <_printf_float+0x360>
 8008776:	f04f 0b00 	mov.w	fp, #0
 800877a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800877e:	f104 021a 	add.w	r2, r4, #26
 8008782:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008784:	9306      	str	r3, [sp, #24]
 8008786:	eba3 0309 	sub.w	r3, r3, r9
 800878a:	455b      	cmp	r3, fp
 800878c:	dc31      	bgt.n	80087f2 <_printf_float+0x36e>
 800878e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008790:	459a      	cmp	sl, r3
 8008792:	dc3a      	bgt.n	800880a <_printf_float+0x386>
 8008794:	6823      	ldr	r3, [r4, #0]
 8008796:	07da      	lsls	r2, r3, #31
 8008798:	d437      	bmi.n	800880a <_printf_float+0x386>
 800879a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800879c:	ebaa 0903 	sub.w	r9, sl, r3
 80087a0:	9b06      	ldr	r3, [sp, #24]
 80087a2:	ebaa 0303 	sub.w	r3, sl, r3
 80087a6:	4599      	cmp	r9, r3
 80087a8:	bfa8      	it	ge
 80087aa:	4699      	movge	r9, r3
 80087ac:	f1b9 0f00 	cmp.w	r9, #0
 80087b0:	dc33      	bgt.n	800881a <_printf_float+0x396>
 80087b2:	f04f 0800 	mov.w	r8, #0
 80087b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087ba:	f104 0b1a 	add.w	fp, r4, #26
 80087be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087c0:	ebaa 0303 	sub.w	r3, sl, r3
 80087c4:	eba3 0309 	sub.w	r3, r3, r9
 80087c8:	4543      	cmp	r3, r8
 80087ca:	f77f af79 	ble.w	80086c0 <_printf_float+0x23c>
 80087ce:	2301      	movs	r3, #1
 80087d0:	465a      	mov	r2, fp
 80087d2:	4631      	mov	r1, r6
 80087d4:	4628      	mov	r0, r5
 80087d6:	47b8      	blx	r7
 80087d8:	3001      	adds	r0, #1
 80087da:	f43f aeae 	beq.w	800853a <_printf_float+0xb6>
 80087de:	f108 0801 	add.w	r8, r8, #1
 80087e2:	e7ec      	b.n	80087be <_printf_float+0x33a>
 80087e4:	4642      	mov	r2, r8
 80087e6:	4631      	mov	r1, r6
 80087e8:	4628      	mov	r0, r5
 80087ea:	47b8      	blx	r7
 80087ec:	3001      	adds	r0, #1
 80087ee:	d1c2      	bne.n	8008776 <_printf_float+0x2f2>
 80087f0:	e6a3      	b.n	800853a <_printf_float+0xb6>
 80087f2:	2301      	movs	r3, #1
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	9206      	str	r2, [sp, #24]
 80087fa:	47b8      	blx	r7
 80087fc:	3001      	adds	r0, #1
 80087fe:	f43f ae9c 	beq.w	800853a <_printf_float+0xb6>
 8008802:	9a06      	ldr	r2, [sp, #24]
 8008804:	f10b 0b01 	add.w	fp, fp, #1
 8008808:	e7bb      	b.n	8008782 <_printf_float+0x2fe>
 800880a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800880e:	4631      	mov	r1, r6
 8008810:	4628      	mov	r0, r5
 8008812:	47b8      	blx	r7
 8008814:	3001      	adds	r0, #1
 8008816:	d1c0      	bne.n	800879a <_printf_float+0x316>
 8008818:	e68f      	b.n	800853a <_printf_float+0xb6>
 800881a:	9a06      	ldr	r2, [sp, #24]
 800881c:	464b      	mov	r3, r9
 800881e:	4442      	add	r2, r8
 8008820:	4631      	mov	r1, r6
 8008822:	4628      	mov	r0, r5
 8008824:	47b8      	blx	r7
 8008826:	3001      	adds	r0, #1
 8008828:	d1c3      	bne.n	80087b2 <_printf_float+0x32e>
 800882a:	e686      	b.n	800853a <_printf_float+0xb6>
 800882c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008830:	f1ba 0f01 	cmp.w	sl, #1
 8008834:	dc01      	bgt.n	800883a <_printf_float+0x3b6>
 8008836:	07db      	lsls	r3, r3, #31
 8008838:	d536      	bpl.n	80088a8 <_printf_float+0x424>
 800883a:	2301      	movs	r3, #1
 800883c:	4642      	mov	r2, r8
 800883e:	4631      	mov	r1, r6
 8008840:	4628      	mov	r0, r5
 8008842:	47b8      	blx	r7
 8008844:	3001      	adds	r0, #1
 8008846:	f43f ae78 	beq.w	800853a <_printf_float+0xb6>
 800884a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800884e:	4631      	mov	r1, r6
 8008850:	4628      	mov	r0, r5
 8008852:	47b8      	blx	r7
 8008854:	3001      	adds	r0, #1
 8008856:	f43f ae70 	beq.w	800853a <_printf_float+0xb6>
 800885a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800885e:	2200      	movs	r2, #0
 8008860:	2300      	movs	r3, #0
 8008862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008866:	f7f8 f95f 	bl	8000b28 <__aeabi_dcmpeq>
 800886a:	b9c0      	cbnz	r0, 800889e <_printf_float+0x41a>
 800886c:	4653      	mov	r3, sl
 800886e:	f108 0201 	add.w	r2, r8, #1
 8008872:	4631      	mov	r1, r6
 8008874:	4628      	mov	r0, r5
 8008876:	47b8      	blx	r7
 8008878:	3001      	adds	r0, #1
 800887a:	d10c      	bne.n	8008896 <_printf_float+0x412>
 800887c:	e65d      	b.n	800853a <_printf_float+0xb6>
 800887e:	2301      	movs	r3, #1
 8008880:	465a      	mov	r2, fp
 8008882:	4631      	mov	r1, r6
 8008884:	4628      	mov	r0, r5
 8008886:	47b8      	blx	r7
 8008888:	3001      	adds	r0, #1
 800888a:	f43f ae56 	beq.w	800853a <_printf_float+0xb6>
 800888e:	f108 0801 	add.w	r8, r8, #1
 8008892:	45d0      	cmp	r8, sl
 8008894:	dbf3      	blt.n	800887e <_printf_float+0x3fa>
 8008896:	464b      	mov	r3, r9
 8008898:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800889c:	e6df      	b.n	800865e <_printf_float+0x1da>
 800889e:	f04f 0800 	mov.w	r8, #0
 80088a2:	f104 0b1a 	add.w	fp, r4, #26
 80088a6:	e7f4      	b.n	8008892 <_printf_float+0x40e>
 80088a8:	2301      	movs	r3, #1
 80088aa:	4642      	mov	r2, r8
 80088ac:	e7e1      	b.n	8008872 <_printf_float+0x3ee>
 80088ae:	2301      	movs	r3, #1
 80088b0:	464a      	mov	r2, r9
 80088b2:	4631      	mov	r1, r6
 80088b4:	4628      	mov	r0, r5
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	f43f ae3e 	beq.w	800853a <_printf_float+0xb6>
 80088be:	f108 0801 	add.w	r8, r8, #1
 80088c2:	68e3      	ldr	r3, [r4, #12]
 80088c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088c6:	1a5b      	subs	r3, r3, r1
 80088c8:	4543      	cmp	r3, r8
 80088ca:	dcf0      	bgt.n	80088ae <_printf_float+0x42a>
 80088cc:	e6fc      	b.n	80086c8 <_printf_float+0x244>
 80088ce:	f04f 0800 	mov.w	r8, #0
 80088d2:	f104 0919 	add.w	r9, r4, #25
 80088d6:	e7f4      	b.n	80088c2 <_printf_float+0x43e>

080088d8 <_printf_common>:
 80088d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088dc:	4616      	mov	r6, r2
 80088de:	4698      	mov	r8, r3
 80088e0:	688a      	ldr	r2, [r1, #8]
 80088e2:	690b      	ldr	r3, [r1, #16]
 80088e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088e8:	4293      	cmp	r3, r2
 80088ea:	bfb8      	it	lt
 80088ec:	4613      	movlt	r3, r2
 80088ee:	6033      	str	r3, [r6, #0]
 80088f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088f4:	4607      	mov	r7, r0
 80088f6:	460c      	mov	r4, r1
 80088f8:	b10a      	cbz	r2, 80088fe <_printf_common+0x26>
 80088fa:	3301      	adds	r3, #1
 80088fc:	6033      	str	r3, [r6, #0]
 80088fe:	6823      	ldr	r3, [r4, #0]
 8008900:	0699      	lsls	r1, r3, #26
 8008902:	bf42      	ittt	mi
 8008904:	6833      	ldrmi	r3, [r6, #0]
 8008906:	3302      	addmi	r3, #2
 8008908:	6033      	strmi	r3, [r6, #0]
 800890a:	6825      	ldr	r5, [r4, #0]
 800890c:	f015 0506 	ands.w	r5, r5, #6
 8008910:	d106      	bne.n	8008920 <_printf_common+0x48>
 8008912:	f104 0a19 	add.w	sl, r4, #25
 8008916:	68e3      	ldr	r3, [r4, #12]
 8008918:	6832      	ldr	r2, [r6, #0]
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	42ab      	cmp	r3, r5
 800891e:	dc26      	bgt.n	800896e <_printf_common+0x96>
 8008920:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008924:	6822      	ldr	r2, [r4, #0]
 8008926:	3b00      	subs	r3, #0
 8008928:	bf18      	it	ne
 800892a:	2301      	movne	r3, #1
 800892c:	0692      	lsls	r2, r2, #26
 800892e:	d42b      	bmi.n	8008988 <_printf_common+0xb0>
 8008930:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008934:	4641      	mov	r1, r8
 8008936:	4638      	mov	r0, r7
 8008938:	47c8      	blx	r9
 800893a:	3001      	adds	r0, #1
 800893c:	d01e      	beq.n	800897c <_printf_common+0xa4>
 800893e:	6823      	ldr	r3, [r4, #0]
 8008940:	6922      	ldr	r2, [r4, #16]
 8008942:	f003 0306 	and.w	r3, r3, #6
 8008946:	2b04      	cmp	r3, #4
 8008948:	bf02      	ittt	eq
 800894a:	68e5      	ldreq	r5, [r4, #12]
 800894c:	6833      	ldreq	r3, [r6, #0]
 800894e:	1aed      	subeq	r5, r5, r3
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	bf0c      	ite	eq
 8008954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008958:	2500      	movne	r5, #0
 800895a:	4293      	cmp	r3, r2
 800895c:	bfc4      	itt	gt
 800895e:	1a9b      	subgt	r3, r3, r2
 8008960:	18ed      	addgt	r5, r5, r3
 8008962:	2600      	movs	r6, #0
 8008964:	341a      	adds	r4, #26
 8008966:	42b5      	cmp	r5, r6
 8008968:	d11a      	bne.n	80089a0 <_printf_common+0xc8>
 800896a:	2000      	movs	r0, #0
 800896c:	e008      	b.n	8008980 <_printf_common+0xa8>
 800896e:	2301      	movs	r3, #1
 8008970:	4652      	mov	r2, sl
 8008972:	4641      	mov	r1, r8
 8008974:	4638      	mov	r0, r7
 8008976:	47c8      	blx	r9
 8008978:	3001      	adds	r0, #1
 800897a:	d103      	bne.n	8008984 <_printf_common+0xac>
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008984:	3501      	adds	r5, #1
 8008986:	e7c6      	b.n	8008916 <_printf_common+0x3e>
 8008988:	18e1      	adds	r1, r4, r3
 800898a:	1c5a      	adds	r2, r3, #1
 800898c:	2030      	movs	r0, #48	@ 0x30
 800898e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008992:	4422      	add	r2, r4
 8008994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008998:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800899c:	3302      	adds	r3, #2
 800899e:	e7c7      	b.n	8008930 <_printf_common+0x58>
 80089a0:	2301      	movs	r3, #1
 80089a2:	4622      	mov	r2, r4
 80089a4:	4641      	mov	r1, r8
 80089a6:	4638      	mov	r0, r7
 80089a8:	47c8      	blx	r9
 80089aa:	3001      	adds	r0, #1
 80089ac:	d0e6      	beq.n	800897c <_printf_common+0xa4>
 80089ae:	3601      	adds	r6, #1
 80089b0:	e7d9      	b.n	8008966 <_printf_common+0x8e>
	...

080089b4 <_printf_i>:
 80089b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089b8:	7e0f      	ldrb	r7, [r1, #24]
 80089ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089bc:	2f78      	cmp	r7, #120	@ 0x78
 80089be:	4691      	mov	r9, r2
 80089c0:	4680      	mov	r8, r0
 80089c2:	460c      	mov	r4, r1
 80089c4:	469a      	mov	sl, r3
 80089c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80089ca:	d807      	bhi.n	80089dc <_printf_i+0x28>
 80089cc:	2f62      	cmp	r7, #98	@ 0x62
 80089ce:	d80a      	bhi.n	80089e6 <_printf_i+0x32>
 80089d0:	2f00      	cmp	r7, #0
 80089d2:	f000 80d2 	beq.w	8008b7a <_printf_i+0x1c6>
 80089d6:	2f58      	cmp	r7, #88	@ 0x58
 80089d8:	f000 80b9 	beq.w	8008b4e <_printf_i+0x19a>
 80089dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089e4:	e03a      	b.n	8008a5c <_printf_i+0xa8>
 80089e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089ea:	2b15      	cmp	r3, #21
 80089ec:	d8f6      	bhi.n	80089dc <_printf_i+0x28>
 80089ee:	a101      	add	r1, pc, #4	@ (adr r1, 80089f4 <_printf_i+0x40>)
 80089f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089f4:	08008a4d 	.word	0x08008a4d
 80089f8:	08008a61 	.word	0x08008a61
 80089fc:	080089dd 	.word	0x080089dd
 8008a00:	080089dd 	.word	0x080089dd
 8008a04:	080089dd 	.word	0x080089dd
 8008a08:	080089dd 	.word	0x080089dd
 8008a0c:	08008a61 	.word	0x08008a61
 8008a10:	080089dd 	.word	0x080089dd
 8008a14:	080089dd 	.word	0x080089dd
 8008a18:	080089dd 	.word	0x080089dd
 8008a1c:	080089dd 	.word	0x080089dd
 8008a20:	08008b61 	.word	0x08008b61
 8008a24:	08008a8b 	.word	0x08008a8b
 8008a28:	08008b1b 	.word	0x08008b1b
 8008a2c:	080089dd 	.word	0x080089dd
 8008a30:	080089dd 	.word	0x080089dd
 8008a34:	08008b83 	.word	0x08008b83
 8008a38:	080089dd 	.word	0x080089dd
 8008a3c:	08008a8b 	.word	0x08008a8b
 8008a40:	080089dd 	.word	0x080089dd
 8008a44:	080089dd 	.word	0x080089dd
 8008a48:	08008b23 	.word	0x08008b23
 8008a4c:	6833      	ldr	r3, [r6, #0]
 8008a4e:	1d1a      	adds	r2, r3, #4
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6032      	str	r2, [r6, #0]
 8008a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e09d      	b.n	8008b9c <_printf_i+0x1e8>
 8008a60:	6833      	ldr	r3, [r6, #0]
 8008a62:	6820      	ldr	r0, [r4, #0]
 8008a64:	1d19      	adds	r1, r3, #4
 8008a66:	6031      	str	r1, [r6, #0]
 8008a68:	0606      	lsls	r6, r0, #24
 8008a6a:	d501      	bpl.n	8008a70 <_printf_i+0xbc>
 8008a6c:	681d      	ldr	r5, [r3, #0]
 8008a6e:	e003      	b.n	8008a78 <_printf_i+0xc4>
 8008a70:	0645      	lsls	r5, r0, #25
 8008a72:	d5fb      	bpl.n	8008a6c <_printf_i+0xb8>
 8008a74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	da03      	bge.n	8008a84 <_printf_i+0xd0>
 8008a7c:	232d      	movs	r3, #45	@ 0x2d
 8008a7e:	426d      	negs	r5, r5
 8008a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a84:	4859      	ldr	r0, [pc, #356]	@ (8008bec <_printf_i+0x238>)
 8008a86:	230a      	movs	r3, #10
 8008a88:	e011      	b.n	8008aae <_printf_i+0xfa>
 8008a8a:	6821      	ldr	r1, [r4, #0]
 8008a8c:	6833      	ldr	r3, [r6, #0]
 8008a8e:	0608      	lsls	r0, r1, #24
 8008a90:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a94:	d402      	bmi.n	8008a9c <_printf_i+0xe8>
 8008a96:	0649      	lsls	r1, r1, #25
 8008a98:	bf48      	it	mi
 8008a9a:	b2ad      	uxthmi	r5, r5
 8008a9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a9e:	4853      	ldr	r0, [pc, #332]	@ (8008bec <_printf_i+0x238>)
 8008aa0:	6033      	str	r3, [r6, #0]
 8008aa2:	bf14      	ite	ne
 8008aa4:	230a      	movne	r3, #10
 8008aa6:	2308      	moveq	r3, #8
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008aae:	6866      	ldr	r6, [r4, #4]
 8008ab0:	60a6      	str	r6, [r4, #8]
 8008ab2:	2e00      	cmp	r6, #0
 8008ab4:	bfa2      	ittt	ge
 8008ab6:	6821      	ldrge	r1, [r4, #0]
 8008ab8:	f021 0104 	bicge.w	r1, r1, #4
 8008abc:	6021      	strge	r1, [r4, #0]
 8008abe:	b90d      	cbnz	r5, 8008ac4 <_printf_i+0x110>
 8008ac0:	2e00      	cmp	r6, #0
 8008ac2:	d04b      	beq.n	8008b5c <_printf_i+0x1a8>
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008aca:	fb03 5711 	mls	r7, r3, r1, r5
 8008ace:	5dc7      	ldrb	r7, [r0, r7]
 8008ad0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008ad4:	462f      	mov	r7, r5
 8008ad6:	42bb      	cmp	r3, r7
 8008ad8:	460d      	mov	r5, r1
 8008ada:	d9f4      	bls.n	8008ac6 <_printf_i+0x112>
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	d10b      	bne.n	8008af8 <_printf_i+0x144>
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	07df      	lsls	r7, r3, #31
 8008ae4:	d508      	bpl.n	8008af8 <_printf_i+0x144>
 8008ae6:	6923      	ldr	r3, [r4, #16]
 8008ae8:	6861      	ldr	r1, [r4, #4]
 8008aea:	4299      	cmp	r1, r3
 8008aec:	bfde      	ittt	le
 8008aee:	2330      	movle	r3, #48	@ 0x30
 8008af0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008af4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008af8:	1b92      	subs	r2, r2, r6
 8008afa:	6122      	str	r2, [r4, #16]
 8008afc:	f8cd a000 	str.w	sl, [sp]
 8008b00:	464b      	mov	r3, r9
 8008b02:	aa03      	add	r2, sp, #12
 8008b04:	4621      	mov	r1, r4
 8008b06:	4640      	mov	r0, r8
 8008b08:	f7ff fee6 	bl	80088d8 <_printf_common>
 8008b0c:	3001      	adds	r0, #1
 8008b0e:	d14a      	bne.n	8008ba6 <_printf_i+0x1f2>
 8008b10:	f04f 30ff 	mov.w	r0, #4294967295
 8008b14:	b004      	add	sp, #16
 8008b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1a:	6823      	ldr	r3, [r4, #0]
 8008b1c:	f043 0320 	orr.w	r3, r3, #32
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	4833      	ldr	r0, [pc, #204]	@ (8008bf0 <_printf_i+0x23c>)
 8008b24:	2778      	movs	r7, #120	@ 0x78
 8008b26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008b2a:	6823      	ldr	r3, [r4, #0]
 8008b2c:	6831      	ldr	r1, [r6, #0]
 8008b2e:	061f      	lsls	r7, r3, #24
 8008b30:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b34:	d402      	bmi.n	8008b3c <_printf_i+0x188>
 8008b36:	065f      	lsls	r7, r3, #25
 8008b38:	bf48      	it	mi
 8008b3a:	b2ad      	uxthmi	r5, r5
 8008b3c:	6031      	str	r1, [r6, #0]
 8008b3e:	07d9      	lsls	r1, r3, #31
 8008b40:	bf44      	itt	mi
 8008b42:	f043 0320 	orrmi.w	r3, r3, #32
 8008b46:	6023      	strmi	r3, [r4, #0]
 8008b48:	b11d      	cbz	r5, 8008b52 <_printf_i+0x19e>
 8008b4a:	2310      	movs	r3, #16
 8008b4c:	e7ac      	b.n	8008aa8 <_printf_i+0xf4>
 8008b4e:	4827      	ldr	r0, [pc, #156]	@ (8008bec <_printf_i+0x238>)
 8008b50:	e7e9      	b.n	8008b26 <_printf_i+0x172>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	f023 0320 	bic.w	r3, r3, #32
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	e7f6      	b.n	8008b4a <_printf_i+0x196>
 8008b5c:	4616      	mov	r6, r2
 8008b5e:	e7bd      	b.n	8008adc <_printf_i+0x128>
 8008b60:	6833      	ldr	r3, [r6, #0]
 8008b62:	6825      	ldr	r5, [r4, #0]
 8008b64:	6961      	ldr	r1, [r4, #20]
 8008b66:	1d18      	adds	r0, r3, #4
 8008b68:	6030      	str	r0, [r6, #0]
 8008b6a:	062e      	lsls	r6, r5, #24
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	d501      	bpl.n	8008b74 <_printf_i+0x1c0>
 8008b70:	6019      	str	r1, [r3, #0]
 8008b72:	e002      	b.n	8008b7a <_printf_i+0x1c6>
 8008b74:	0668      	lsls	r0, r5, #25
 8008b76:	d5fb      	bpl.n	8008b70 <_printf_i+0x1bc>
 8008b78:	8019      	strh	r1, [r3, #0]
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	6123      	str	r3, [r4, #16]
 8008b7e:	4616      	mov	r6, r2
 8008b80:	e7bc      	b.n	8008afc <_printf_i+0x148>
 8008b82:	6833      	ldr	r3, [r6, #0]
 8008b84:	1d1a      	adds	r2, r3, #4
 8008b86:	6032      	str	r2, [r6, #0]
 8008b88:	681e      	ldr	r6, [r3, #0]
 8008b8a:	6862      	ldr	r2, [r4, #4]
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7f7 fb4e 	bl	8000230 <memchr>
 8008b94:	b108      	cbz	r0, 8008b9a <_printf_i+0x1e6>
 8008b96:	1b80      	subs	r0, r0, r6
 8008b98:	6060      	str	r0, [r4, #4]
 8008b9a:	6863      	ldr	r3, [r4, #4]
 8008b9c:	6123      	str	r3, [r4, #16]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ba4:	e7aa      	b.n	8008afc <_printf_i+0x148>
 8008ba6:	6923      	ldr	r3, [r4, #16]
 8008ba8:	4632      	mov	r2, r6
 8008baa:	4649      	mov	r1, r9
 8008bac:	4640      	mov	r0, r8
 8008bae:	47d0      	blx	sl
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d0ad      	beq.n	8008b10 <_printf_i+0x15c>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	079b      	lsls	r3, r3, #30
 8008bb8:	d413      	bmi.n	8008be2 <_printf_i+0x22e>
 8008bba:	68e0      	ldr	r0, [r4, #12]
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	4298      	cmp	r0, r3
 8008bc0:	bfb8      	it	lt
 8008bc2:	4618      	movlt	r0, r3
 8008bc4:	e7a6      	b.n	8008b14 <_printf_i+0x160>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	4632      	mov	r2, r6
 8008bca:	4649      	mov	r1, r9
 8008bcc:	4640      	mov	r0, r8
 8008bce:	47d0      	blx	sl
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d09d      	beq.n	8008b10 <_printf_i+0x15c>
 8008bd4:	3501      	adds	r5, #1
 8008bd6:	68e3      	ldr	r3, [r4, #12]
 8008bd8:	9903      	ldr	r1, [sp, #12]
 8008bda:	1a5b      	subs	r3, r3, r1
 8008bdc:	42ab      	cmp	r3, r5
 8008bde:	dcf2      	bgt.n	8008bc6 <_printf_i+0x212>
 8008be0:	e7eb      	b.n	8008bba <_printf_i+0x206>
 8008be2:	2500      	movs	r5, #0
 8008be4:	f104 0619 	add.w	r6, r4, #25
 8008be8:	e7f5      	b.n	8008bd6 <_printf_i+0x222>
 8008bea:	bf00      	nop
 8008bec:	0800fcfa 	.word	0x0800fcfa
 8008bf0:	0800fd0b 	.word	0x0800fd0b

08008bf4 <std>:
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	b510      	push	{r4, lr}
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8008bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c02:	6083      	str	r3, [r0, #8]
 8008c04:	8181      	strh	r1, [r0, #12]
 8008c06:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c08:	81c2      	strh	r2, [r0, #14]
 8008c0a:	6183      	str	r3, [r0, #24]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	2208      	movs	r2, #8
 8008c10:	305c      	adds	r0, #92	@ 0x5c
 8008c12:	f000 f914 	bl	8008e3e <memset>
 8008c16:	4b0d      	ldr	r3, [pc, #52]	@ (8008c4c <std+0x58>)
 8008c18:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008c50 <std+0x5c>)
 8008c1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c54 <std+0x60>)
 8008c20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008c22:	4b0d      	ldr	r3, [pc, #52]	@ (8008c58 <std+0x64>)
 8008c24:	6323      	str	r3, [r4, #48]	@ 0x30
 8008c26:	4b0d      	ldr	r3, [pc, #52]	@ (8008c5c <std+0x68>)
 8008c28:	6224      	str	r4, [r4, #32]
 8008c2a:	429c      	cmp	r4, r3
 8008c2c:	d006      	beq.n	8008c3c <std+0x48>
 8008c2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008c32:	4294      	cmp	r4, r2
 8008c34:	d002      	beq.n	8008c3c <std+0x48>
 8008c36:	33d0      	adds	r3, #208	@ 0xd0
 8008c38:	429c      	cmp	r4, r3
 8008c3a:	d105      	bne.n	8008c48 <std+0x54>
 8008c3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c44:	f000 b978 	b.w	8008f38 <__retarget_lock_init_recursive>
 8008c48:	bd10      	pop	{r4, pc}
 8008c4a:	bf00      	nop
 8008c4c:	08008db9 	.word	0x08008db9
 8008c50:	08008ddb 	.word	0x08008ddb
 8008c54:	08008e13 	.word	0x08008e13
 8008c58:	08008e37 	.word	0x08008e37
 8008c5c:	20005a9c 	.word	0x20005a9c

08008c60 <stdio_exit_handler>:
 8008c60:	4a02      	ldr	r2, [pc, #8]	@ (8008c6c <stdio_exit_handler+0xc>)
 8008c62:	4903      	ldr	r1, [pc, #12]	@ (8008c70 <stdio_exit_handler+0x10>)
 8008c64:	4803      	ldr	r0, [pc, #12]	@ (8008c74 <stdio_exit_handler+0x14>)
 8008c66:	f000 b869 	b.w	8008d3c <_fwalk_sglue>
 8008c6a:	bf00      	nop
 8008c6c:	2000368c 	.word	0x2000368c
 8008c70:	0800a895 	.word	0x0800a895
 8008c74:	2000369c 	.word	0x2000369c

08008c78 <cleanup_stdio>:
 8008c78:	6841      	ldr	r1, [r0, #4]
 8008c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8008cac <cleanup_stdio+0x34>)
 8008c7c:	4299      	cmp	r1, r3
 8008c7e:	b510      	push	{r4, lr}
 8008c80:	4604      	mov	r4, r0
 8008c82:	d001      	beq.n	8008c88 <cleanup_stdio+0x10>
 8008c84:	f001 fe06 	bl	800a894 <_fflush_r>
 8008c88:	68a1      	ldr	r1, [r4, #8]
 8008c8a:	4b09      	ldr	r3, [pc, #36]	@ (8008cb0 <cleanup_stdio+0x38>)
 8008c8c:	4299      	cmp	r1, r3
 8008c8e:	d002      	beq.n	8008c96 <cleanup_stdio+0x1e>
 8008c90:	4620      	mov	r0, r4
 8008c92:	f001 fdff 	bl	800a894 <_fflush_r>
 8008c96:	68e1      	ldr	r1, [r4, #12]
 8008c98:	4b06      	ldr	r3, [pc, #24]	@ (8008cb4 <cleanup_stdio+0x3c>)
 8008c9a:	4299      	cmp	r1, r3
 8008c9c:	d004      	beq.n	8008ca8 <cleanup_stdio+0x30>
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ca4:	f001 bdf6 	b.w	800a894 <_fflush_r>
 8008ca8:	bd10      	pop	{r4, pc}
 8008caa:	bf00      	nop
 8008cac:	20005a9c 	.word	0x20005a9c
 8008cb0:	20005b04 	.word	0x20005b04
 8008cb4:	20005b6c 	.word	0x20005b6c

08008cb8 <global_stdio_init.part.0>:
 8008cb8:	b510      	push	{r4, lr}
 8008cba:	4b0b      	ldr	r3, [pc, #44]	@ (8008ce8 <global_stdio_init.part.0+0x30>)
 8008cbc:	4c0b      	ldr	r4, [pc, #44]	@ (8008cec <global_stdio_init.part.0+0x34>)
 8008cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8008cf0 <global_stdio_init.part.0+0x38>)
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	2104      	movs	r1, #4
 8008cc8:	f7ff ff94 	bl	8008bf4 <std>
 8008ccc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	2109      	movs	r1, #9
 8008cd4:	f7ff ff8e 	bl	8008bf4 <std>
 8008cd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008cdc:	2202      	movs	r2, #2
 8008cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ce2:	2112      	movs	r1, #18
 8008ce4:	f7ff bf86 	b.w	8008bf4 <std>
 8008ce8:	20005bd4 	.word	0x20005bd4
 8008cec:	20005a9c 	.word	0x20005a9c
 8008cf0:	08008c61 	.word	0x08008c61

08008cf4 <__sfp_lock_acquire>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	@ (8008cfc <__sfp_lock_acquire+0x8>)
 8008cf6:	f000 b920 	b.w	8008f3a <__retarget_lock_acquire_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	20005bdd 	.word	0x20005bdd

08008d00 <__sfp_lock_release>:
 8008d00:	4801      	ldr	r0, [pc, #4]	@ (8008d08 <__sfp_lock_release+0x8>)
 8008d02:	f000 b91b 	b.w	8008f3c <__retarget_lock_release_recursive>
 8008d06:	bf00      	nop
 8008d08:	20005bdd 	.word	0x20005bdd

08008d0c <__sinit>:
 8008d0c:	b510      	push	{r4, lr}
 8008d0e:	4604      	mov	r4, r0
 8008d10:	f7ff fff0 	bl	8008cf4 <__sfp_lock_acquire>
 8008d14:	6a23      	ldr	r3, [r4, #32]
 8008d16:	b11b      	cbz	r3, 8008d20 <__sinit+0x14>
 8008d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d1c:	f7ff bff0 	b.w	8008d00 <__sfp_lock_release>
 8008d20:	4b04      	ldr	r3, [pc, #16]	@ (8008d34 <__sinit+0x28>)
 8008d22:	6223      	str	r3, [r4, #32]
 8008d24:	4b04      	ldr	r3, [pc, #16]	@ (8008d38 <__sinit+0x2c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1f5      	bne.n	8008d18 <__sinit+0xc>
 8008d2c:	f7ff ffc4 	bl	8008cb8 <global_stdio_init.part.0>
 8008d30:	e7f2      	b.n	8008d18 <__sinit+0xc>
 8008d32:	bf00      	nop
 8008d34:	08008c79 	.word	0x08008c79
 8008d38:	20005bd4 	.word	0x20005bd4

08008d3c <_fwalk_sglue>:
 8008d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d40:	4607      	mov	r7, r0
 8008d42:	4688      	mov	r8, r1
 8008d44:	4614      	mov	r4, r2
 8008d46:	2600      	movs	r6, #0
 8008d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8008d50:	d505      	bpl.n	8008d5e <_fwalk_sglue+0x22>
 8008d52:	6824      	ldr	r4, [r4, #0]
 8008d54:	2c00      	cmp	r4, #0
 8008d56:	d1f7      	bne.n	8008d48 <_fwalk_sglue+0xc>
 8008d58:	4630      	mov	r0, r6
 8008d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d5e:	89ab      	ldrh	r3, [r5, #12]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d907      	bls.n	8008d74 <_fwalk_sglue+0x38>
 8008d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	d003      	beq.n	8008d74 <_fwalk_sglue+0x38>
 8008d6c:	4629      	mov	r1, r5
 8008d6e:	4638      	mov	r0, r7
 8008d70:	47c0      	blx	r8
 8008d72:	4306      	orrs	r6, r0
 8008d74:	3568      	adds	r5, #104	@ 0x68
 8008d76:	e7e9      	b.n	8008d4c <_fwalk_sglue+0x10>

08008d78 <siprintf>:
 8008d78:	b40e      	push	{r1, r2, r3}
 8008d7a:	b500      	push	{lr}
 8008d7c:	b09c      	sub	sp, #112	@ 0x70
 8008d7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008d80:	9002      	str	r0, [sp, #8]
 8008d82:	9006      	str	r0, [sp, #24]
 8008d84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008d88:	4809      	ldr	r0, [pc, #36]	@ (8008db0 <siprintf+0x38>)
 8008d8a:	9107      	str	r1, [sp, #28]
 8008d8c:	9104      	str	r1, [sp, #16]
 8008d8e:	4909      	ldr	r1, [pc, #36]	@ (8008db4 <siprintf+0x3c>)
 8008d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d94:	9105      	str	r1, [sp, #20]
 8008d96:	6800      	ldr	r0, [r0, #0]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	a902      	add	r1, sp, #8
 8008d9c:	f001 fbfa 	bl	800a594 <_svfiprintf_r>
 8008da0:	9b02      	ldr	r3, [sp, #8]
 8008da2:	2200      	movs	r2, #0
 8008da4:	701a      	strb	r2, [r3, #0]
 8008da6:	b01c      	add	sp, #112	@ 0x70
 8008da8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dac:	b003      	add	sp, #12
 8008dae:	4770      	bx	lr
 8008db0:	20003698 	.word	0x20003698
 8008db4:	ffff0208 	.word	0xffff0208

08008db8 <__sread>:
 8008db8:	b510      	push	{r4, lr}
 8008dba:	460c      	mov	r4, r1
 8008dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc0:	f000 f86c 	bl	8008e9c <_read_r>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	bfab      	itete	ge
 8008dc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008dca:	89a3      	ldrhlt	r3, [r4, #12]
 8008dcc:	181b      	addge	r3, r3, r0
 8008dce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008dd2:	bfac      	ite	ge
 8008dd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008dd6:	81a3      	strhlt	r3, [r4, #12]
 8008dd8:	bd10      	pop	{r4, pc}

08008dda <__swrite>:
 8008dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dde:	461f      	mov	r7, r3
 8008de0:	898b      	ldrh	r3, [r1, #12]
 8008de2:	05db      	lsls	r3, r3, #23
 8008de4:	4605      	mov	r5, r0
 8008de6:	460c      	mov	r4, r1
 8008de8:	4616      	mov	r6, r2
 8008dea:	d505      	bpl.n	8008df8 <__swrite+0x1e>
 8008dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df0:	2302      	movs	r3, #2
 8008df2:	2200      	movs	r2, #0
 8008df4:	f000 f840 	bl	8008e78 <_lseek_r>
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	4632      	mov	r2, r6
 8008e06:	463b      	mov	r3, r7
 8008e08:	4628      	mov	r0, r5
 8008e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0e:	f000 b857 	b.w	8008ec0 <_write_r>

08008e12 <__sseek>:
 8008e12:	b510      	push	{r4, lr}
 8008e14:	460c      	mov	r4, r1
 8008e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e1a:	f000 f82d 	bl	8008e78 <_lseek_r>
 8008e1e:	1c43      	adds	r3, r0, #1
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	bf15      	itete	ne
 8008e24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008e26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008e2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008e2e:	81a3      	strheq	r3, [r4, #12]
 8008e30:	bf18      	it	ne
 8008e32:	81a3      	strhne	r3, [r4, #12]
 8008e34:	bd10      	pop	{r4, pc}

08008e36 <__sclose>:
 8008e36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e3a:	f000 b80d 	b.w	8008e58 <_close_r>

08008e3e <memset>:
 8008e3e:	4402      	add	r2, r0
 8008e40:	4603      	mov	r3, r0
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d100      	bne.n	8008e48 <memset+0xa>
 8008e46:	4770      	bx	lr
 8008e48:	f803 1b01 	strb.w	r1, [r3], #1
 8008e4c:	e7f9      	b.n	8008e42 <memset+0x4>
	...

08008e50 <_localeconv_r>:
 8008e50:	4800      	ldr	r0, [pc, #0]	@ (8008e54 <_localeconv_r+0x4>)
 8008e52:	4770      	bx	lr
 8008e54:	200037d8 	.word	0x200037d8

08008e58 <_close_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4d06      	ldr	r5, [pc, #24]	@ (8008e74 <_close_r+0x1c>)
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	602b      	str	r3, [r5, #0]
 8008e64:	f7f8 fff7 	bl	8001e56 <_close>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_close_r+0x1a>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_close_r+0x1a>
 8008e70:	6023      	str	r3, [r4, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	20005bd8 	.word	0x20005bd8

08008e78 <_lseek_r>:
 8008e78:	b538      	push	{r3, r4, r5, lr}
 8008e7a:	4d07      	ldr	r5, [pc, #28]	@ (8008e98 <_lseek_r+0x20>)
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	4608      	mov	r0, r1
 8008e80:	4611      	mov	r1, r2
 8008e82:	2200      	movs	r2, #0
 8008e84:	602a      	str	r2, [r5, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	f7f9 f80c 	bl	8001ea4 <_lseek>
 8008e8c:	1c43      	adds	r3, r0, #1
 8008e8e:	d102      	bne.n	8008e96 <_lseek_r+0x1e>
 8008e90:	682b      	ldr	r3, [r5, #0]
 8008e92:	b103      	cbz	r3, 8008e96 <_lseek_r+0x1e>
 8008e94:	6023      	str	r3, [r4, #0]
 8008e96:	bd38      	pop	{r3, r4, r5, pc}
 8008e98:	20005bd8 	.word	0x20005bd8

08008e9c <_read_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4d07      	ldr	r5, [pc, #28]	@ (8008ebc <_read_r+0x20>)
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	4608      	mov	r0, r1
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	602a      	str	r2, [r5, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f7f8 ff9a 	bl	8001de4 <_read>
 8008eb0:	1c43      	adds	r3, r0, #1
 8008eb2:	d102      	bne.n	8008eba <_read_r+0x1e>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b103      	cbz	r3, 8008eba <_read_r+0x1e>
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	bd38      	pop	{r3, r4, r5, pc}
 8008ebc:	20005bd8 	.word	0x20005bd8

08008ec0 <_write_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d07      	ldr	r5, [pc, #28]	@ (8008ee0 <_write_r+0x20>)
 8008ec4:	4604      	mov	r4, r0
 8008ec6:	4608      	mov	r0, r1
 8008ec8:	4611      	mov	r1, r2
 8008eca:	2200      	movs	r2, #0
 8008ecc:	602a      	str	r2, [r5, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f7f8 ffa5 	bl	8001e1e <_write>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d102      	bne.n	8008ede <_write_r+0x1e>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	b103      	cbz	r3, 8008ede <_write_r+0x1e>
 8008edc:	6023      	str	r3, [r4, #0]
 8008ede:	bd38      	pop	{r3, r4, r5, pc}
 8008ee0:	20005bd8 	.word	0x20005bd8

08008ee4 <__errno>:
 8008ee4:	4b01      	ldr	r3, [pc, #4]	@ (8008eec <__errno+0x8>)
 8008ee6:	6818      	ldr	r0, [r3, #0]
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	20003698 	.word	0x20003698

08008ef0 <__libc_init_array>:
 8008ef0:	b570      	push	{r4, r5, r6, lr}
 8008ef2:	4d0d      	ldr	r5, [pc, #52]	@ (8008f28 <__libc_init_array+0x38>)
 8008ef4:	4c0d      	ldr	r4, [pc, #52]	@ (8008f2c <__libc_init_array+0x3c>)
 8008ef6:	1b64      	subs	r4, r4, r5
 8008ef8:	10a4      	asrs	r4, r4, #2
 8008efa:	2600      	movs	r6, #0
 8008efc:	42a6      	cmp	r6, r4
 8008efe:	d109      	bne.n	8008f14 <__libc_init_array+0x24>
 8008f00:	4d0b      	ldr	r5, [pc, #44]	@ (8008f30 <__libc_init_array+0x40>)
 8008f02:	4c0c      	ldr	r4, [pc, #48]	@ (8008f34 <__libc_init_array+0x44>)
 8008f04:	f002 f864 	bl	800afd0 <_init>
 8008f08:	1b64      	subs	r4, r4, r5
 8008f0a:	10a4      	asrs	r4, r4, #2
 8008f0c:	2600      	movs	r6, #0
 8008f0e:	42a6      	cmp	r6, r4
 8008f10:	d105      	bne.n	8008f1e <__libc_init_array+0x2e>
 8008f12:	bd70      	pop	{r4, r5, r6, pc}
 8008f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f18:	4798      	blx	r3
 8008f1a:	3601      	adds	r6, #1
 8008f1c:	e7ee      	b.n	8008efc <__libc_init_array+0xc>
 8008f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f22:	4798      	blx	r3
 8008f24:	3601      	adds	r6, #1
 8008f26:	e7f2      	b.n	8008f0e <__libc_init_array+0x1e>
 8008f28:	08010060 	.word	0x08010060
 8008f2c:	08010060 	.word	0x08010060
 8008f30:	08010060 	.word	0x08010060
 8008f34:	08010064 	.word	0x08010064

08008f38 <__retarget_lock_init_recursive>:
 8008f38:	4770      	bx	lr

08008f3a <__retarget_lock_acquire_recursive>:
 8008f3a:	4770      	bx	lr

08008f3c <__retarget_lock_release_recursive>:
 8008f3c:	4770      	bx	lr

08008f3e <quorem>:
 8008f3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f42:	6903      	ldr	r3, [r0, #16]
 8008f44:	690c      	ldr	r4, [r1, #16]
 8008f46:	42a3      	cmp	r3, r4
 8008f48:	4607      	mov	r7, r0
 8008f4a:	db7e      	blt.n	800904a <quorem+0x10c>
 8008f4c:	3c01      	subs	r4, #1
 8008f4e:	f101 0814 	add.w	r8, r1, #20
 8008f52:	00a3      	lsls	r3, r4, #2
 8008f54:	f100 0514 	add.w	r5, r0, #20
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f5e:	9301      	str	r3, [sp, #4]
 8008f60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f70:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f74:	d32e      	bcc.n	8008fd4 <quorem+0x96>
 8008f76:	f04f 0a00 	mov.w	sl, #0
 8008f7a:	46c4      	mov	ip, r8
 8008f7c:	46ae      	mov	lr, r5
 8008f7e:	46d3      	mov	fp, sl
 8008f80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f84:	b298      	uxth	r0, r3
 8008f86:	fb06 a000 	mla	r0, r6, r0, sl
 8008f8a:	0c02      	lsrs	r2, r0, #16
 8008f8c:	0c1b      	lsrs	r3, r3, #16
 8008f8e:	fb06 2303 	mla	r3, r6, r3, r2
 8008f92:	f8de 2000 	ldr.w	r2, [lr]
 8008f96:	b280      	uxth	r0, r0
 8008f98:	b292      	uxth	r2, r2
 8008f9a:	1a12      	subs	r2, r2, r0
 8008f9c:	445a      	add	r2, fp
 8008f9e:	f8de 0000 	ldr.w	r0, [lr]
 8008fa2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008fac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008fb0:	b292      	uxth	r2, r2
 8008fb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008fb6:	45e1      	cmp	r9, ip
 8008fb8:	f84e 2b04 	str.w	r2, [lr], #4
 8008fbc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008fc0:	d2de      	bcs.n	8008f80 <quorem+0x42>
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	58eb      	ldr	r3, [r5, r3]
 8008fc6:	b92b      	cbnz	r3, 8008fd4 <quorem+0x96>
 8008fc8:	9b01      	ldr	r3, [sp, #4]
 8008fca:	3b04      	subs	r3, #4
 8008fcc:	429d      	cmp	r5, r3
 8008fce:	461a      	mov	r2, r3
 8008fd0:	d32f      	bcc.n	8009032 <quorem+0xf4>
 8008fd2:	613c      	str	r4, [r7, #16]
 8008fd4:	4638      	mov	r0, r7
 8008fd6:	f001 f979 	bl	800a2cc <__mcmp>
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	db25      	blt.n	800902a <quorem+0xec>
 8008fde:	4629      	mov	r1, r5
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fe6:	f8d1 c000 	ldr.w	ip, [r1]
 8008fea:	fa1f fe82 	uxth.w	lr, r2
 8008fee:	fa1f f38c 	uxth.w	r3, ip
 8008ff2:	eba3 030e 	sub.w	r3, r3, lr
 8008ff6:	4403      	add	r3, r0
 8008ff8:	0c12      	lsrs	r2, r2, #16
 8008ffa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008ffe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009002:	b29b      	uxth	r3, r3
 8009004:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009008:	45c1      	cmp	r9, r8
 800900a:	f841 3b04 	str.w	r3, [r1], #4
 800900e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009012:	d2e6      	bcs.n	8008fe2 <quorem+0xa4>
 8009014:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009018:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800901c:	b922      	cbnz	r2, 8009028 <quorem+0xea>
 800901e:	3b04      	subs	r3, #4
 8009020:	429d      	cmp	r5, r3
 8009022:	461a      	mov	r2, r3
 8009024:	d30b      	bcc.n	800903e <quorem+0x100>
 8009026:	613c      	str	r4, [r7, #16]
 8009028:	3601      	adds	r6, #1
 800902a:	4630      	mov	r0, r6
 800902c:	b003      	add	sp, #12
 800902e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009032:	6812      	ldr	r2, [r2, #0]
 8009034:	3b04      	subs	r3, #4
 8009036:	2a00      	cmp	r2, #0
 8009038:	d1cb      	bne.n	8008fd2 <quorem+0x94>
 800903a:	3c01      	subs	r4, #1
 800903c:	e7c6      	b.n	8008fcc <quorem+0x8e>
 800903e:	6812      	ldr	r2, [r2, #0]
 8009040:	3b04      	subs	r3, #4
 8009042:	2a00      	cmp	r2, #0
 8009044:	d1ef      	bne.n	8009026 <quorem+0xe8>
 8009046:	3c01      	subs	r4, #1
 8009048:	e7ea      	b.n	8009020 <quorem+0xe2>
 800904a:	2000      	movs	r0, #0
 800904c:	e7ee      	b.n	800902c <quorem+0xee>
	...

08009050 <_dtoa_r>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	69c7      	ldr	r7, [r0, #28]
 8009056:	b099      	sub	sp, #100	@ 0x64
 8009058:	ed8d 0b02 	vstr	d0, [sp, #8]
 800905c:	ec55 4b10 	vmov	r4, r5, d0
 8009060:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009062:	9109      	str	r1, [sp, #36]	@ 0x24
 8009064:	4683      	mov	fp, r0
 8009066:	920e      	str	r2, [sp, #56]	@ 0x38
 8009068:	9313      	str	r3, [sp, #76]	@ 0x4c
 800906a:	b97f      	cbnz	r7, 800908c <_dtoa_r+0x3c>
 800906c:	2010      	movs	r0, #16
 800906e:	f000 fdfd 	bl	8009c6c <malloc>
 8009072:	4602      	mov	r2, r0
 8009074:	f8cb 001c 	str.w	r0, [fp, #28]
 8009078:	b920      	cbnz	r0, 8009084 <_dtoa_r+0x34>
 800907a:	4ba7      	ldr	r3, [pc, #668]	@ (8009318 <_dtoa_r+0x2c8>)
 800907c:	21ef      	movs	r1, #239	@ 0xef
 800907e:	48a7      	ldr	r0, [pc, #668]	@ (800931c <_dtoa_r+0x2cc>)
 8009080:	f001 fc68 	bl	800a954 <__assert_func>
 8009084:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009088:	6007      	str	r7, [r0, #0]
 800908a:	60c7      	str	r7, [r0, #12]
 800908c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009090:	6819      	ldr	r1, [r3, #0]
 8009092:	b159      	cbz	r1, 80090ac <_dtoa_r+0x5c>
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	604a      	str	r2, [r1, #4]
 8009098:	2301      	movs	r3, #1
 800909a:	4093      	lsls	r3, r2
 800909c:	608b      	str	r3, [r1, #8]
 800909e:	4658      	mov	r0, fp
 80090a0:	f000 feda 	bl	8009e58 <_Bfree>
 80090a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090a8:	2200      	movs	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	1e2b      	subs	r3, r5, #0
 80090ae:	bfb9      	ittee	lt
 80090b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80090b4:	9303      	strlt	r3, [sp, #12]
 80090b6:	2300      	movge	r3, #0
 80090b8:	6033      	strge	r3, [r6, #0]
 80090ba:	9f03      	ldr	r7, [sp, #12]
 80090bc:	4b98      	ldr	r3, [pc, #608]	@ (8009320 <_dtoa_r+0x2d0>)
 80090be:	bfbc      	itt	lt
 80090c0:	2201      	movlt	r2, #1
 80090c2:	6032      	strlt	r2, [r6, #0]
 80090c4:	43bb      	bics	r3, r7
 80090c6:	d112      	bne.n	80090ee <_dtoa_r+0x9e>
 80090c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80090ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80090ce:	6013      	str	r3, [r2, #0]
 80090d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80090d4:	4323      	orrs	r3, r4
 80090d6:	f000 854d 	beq.w	8009b74 <_dtoa_r+0xb24>
 80090da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009334 <_dtoa_r+0x2e4>
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 854f 	beq.w	8009b84 <_dtoa_r+0xb34>
 80090e6:	f10a 0303 	add.w	r3, sl, #3
 80090ea:	f000 bd49 	b.w	8009b80 <_dtoa_r+0xb30>
 80090ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090f2:	2200      	movs	r2, #0
 80090f4:	ec51 0b17 	vmov	r0, r1, d7
 80090f8:	2300      	movs	r3, #0
 80090fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80090fe:	f7f7 fd13 	bl	8000b28 <__aeabi_dcmpeq>
 8009102:	4680      	mov	r8, r0
 8009104:	b158      	cbz	r0, 800911e <_dtoa_r+0xce>
 8009106:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009108:	2301      	movs	r3, #1
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800910e:	b113      	cbz	r3, 8009116 <_dtoa_r+0xc6>
 8009110:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009112:	4b84      	ldr	r3, [pc, #528]	@ (8009324 <_dtoa_r+0x2d4>)
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009338 <_dtoa_r+0x2e8>
 800911a:	f000 bd33 	b.w	8009b84 <_dtoa_r+0xb34>
 800911e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009122:	aa16      	add	r2, sp, #88	@ 0x58
 8009124:	a917      	add	r1, sp, #92	@ 0x5c
 8009126:	4658      	mov	r0, fp
 8009128:	f001 f980 	bl	800a42c <__d2b>
 800912c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009130:	4681      	mov	r9, r0
 8009132:	2e00      	cmp	r6, #0
 8009134:	d077      	beq.n	8009226 <_dtoa_r+0x1d6>
 8009136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009138:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800913c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009144:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009148:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800914c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009150:	4619      	mov	r1, r3
 8009152:	2200      	movs	r2, #0
 8009154:	4b74      	ldr	r3, [pc, #464]	@ (8009328 <_dtoa_r+0x2d8>)
 8009156:	f7f7 f8c7 	bl	80002e8 <__aeabi_dsub>
 800915a:	a369      	add	r3, pc, #420	@ (adr r3, 8009300 <_dtoa_r+0x2b0>)
 800915c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009160:	f7f7 fa7a 	bl	8000658 <__aeabi_dmul>
 8009164:	a368      	add	r3, pc, #416	@ (adr r3, 8009308 <_dtoa_r+0x2b8>)
 8009166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800916a:	f7f7 f8bf 	bl	80002ec <__adddf3>
 800916e:	4604      	mov	r4, r0
 8009170:	4630      	mov	r0, r6
 8009172:	460d      	mov	r5, r1
 8009174:	f7f7 fa06 	bl	8000584 <__aeabi_i2d>
 8009178:	a365      	add	r3, pc, #404	@ (adr r3, 8009310 <_dtoa_r+0x2c0>)
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	f7f7 fa6b 	bl	8000658 <__aeabi_dmul>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4620      	mov	r0, r4
 8009188:	4629      	mov	r1, r5
 800918a:	f7f7 f8af 	bl	80002ec <__adddf3>
 800918e:	4604      	mov	r4, r0
 8009190:	460d      	mov	r5, r1
 8009192:	f7f7 fd11 	bl	8000bb8 <__aeabi_d2iz>
 8009196:	2200      	movs	r2, #0
 8009198:	4607      	mov	r7, r0
 800919a:	2300      	movs	r3, #0
 800919c:	4620      	mov	r0, r4
 800919e:	4629      	mov	r1, r5
 80091a0:	f7f7 fccc 	bl	8000b3c <__aeabi_dcmplt>
 80091a4:	b140      	cbz	r0, 80091b8 <_dtoa_r+0x168>
 80091a6:	4638      	mov	r0, r7
 80091a8:	f7f7 f9ec 	bl	8000584 <__aeabi_i2d>
 80091ac:	4622      	mov	r2, r4
 80091ae:	462b      	mov	r3, r5
 80091b0:	f7f7 fcba 	bl	8000b28 <__aeabi_dcmpeq>
 80091b4:	b900      	cbnz	r0, 80091b8 <_dtoa_r+0x168>
 80091b6:	3f01      	subs	r7, #1
 80091b8:	2f16      	cmp	r7, #22
 80091ba:	d851      	bhi.n	8009260 <_dtoa_r+0x210>
 80091bc:	4b5b      	ldr	r3, [pc, #364]	@ (800932c <_dtoa_r+0x2dc>)
 80091be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091ca:	f7f7 fcb7 	bl	8000b3c <__aeabi_dcmplt>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	d048      	beq.n	8009264 <_dtoa_r+0x214>
 80091d2:	3f01      	subs	r7, #1
 80091d4:	2300      	movs	r3, #0
 80091d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80091d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80091da:	1b9b      	subs	r3, r3, r6
 80091dc:	1e5a      	subs	r2, r3, #1
 80091de:	bf44      	itt	mi
 80091e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80091e4:	2300      	movmi	r3, #0
 80091e6:	9208      	str	r2, [sp, #32]
 80091e8:	bf54      	ite	pl
 80091ea:	f04f 0800 	movpl.w	r8, #0
 80091ee:	9308      	strmi	r3, [sp, #32]
 80091f0:	2f00      	cmp	r7, #0
 80091f2:	db39      	blt.n	8009268 <_dtoa_r+0x218>
 80091f4:	9b08      	ldr	r3, [sp, #32]
 80091f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80091f8:	443b      	add	r3, r7
 80091fa:	9308      	str	r3, [sp, #32]
 80091fc:	2300      	movs	r3, #0
 80091fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009202:	2b09      	cmp	r3, #9
 8009204:	d864      	bhi.n	80092d0 <_dtoa_r+0x280>
 8009206:	2b05      	cmp	r3, #5
 8009208:	bfc4      	itt	gt
 800920a:	3b04      	subgt	r3, #4
 800920c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800920e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009210:	f1a3 0302 	sub.w	r3, r3, #2
 8009214:	bfcc      	ite	gt
 8009216:	2400      	movgt	r4, #0
 8009218:	2401      	movle	r4, #1
 800921a:	2b03      	cmp	r3, #3
 800921c:	d863      	bhi.n	80092e6 <_dtoa_r+0x296>
 800921e:	e8df f003 	tbb	[pc, r3]
 8009222:	372a      	.short	0x372a
 8009224:	5535      	.short	0x5535
 8009226:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800922a:	441e      	add	r6, r3
 800922c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009230:	2b20      	cmp	r3, #32
 8009232:	bfc1      	itttt	gt
 8009234:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009238:	409f      	lslgt	r7, r3
 800923a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800923e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009242:	bfd6      	itet	le
 8009244:	f1c3 0320 	rsble	r3, r3, #32
 8009248:	ea47 0003 	orrgt.w	r0, r7, r3
 800924c:	fa04 f003 	lslle.w	r0, r4, r3
 8009250:	f7f7 f988 	bl	8000564 <__aeabi_ui2d>
 8009254:	2201      	movs	r2, #1
 8009256:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800925a:	3e01      	subs	r6, #1
 800925c:	9214      	str	r2, [sp, #80]	@ 0x50
 800925e:	e777      	b.n	8009150 <_dtoa_r+0x100>
 8009260:	2301      	movs	r3, #1
 8009262:	e7b8      	b.n	80091d6 <_dtoa_r+0x186>
 8009264:	9012      	str	r0, [sp, #72]	@ 0x48
 8009266:	e7b7      	b.n	80091d8 <_dtoa_r+0x188>
 8009268:	427b      	negs	r3, r7
 800926a:	930a      	str	r3, [sp, #40]	@ 0x28
 800926c:	2300      	movs	r3, #0
 800926e:	eba8 0807 	sub.w	r8, r8, r7
 8009272:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009274:	e7c4      	b.n	8009200 <_dtoa_r+0x1b0>
 8009276:	2300      	movs	r3, #0
 8009278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800927a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800927c:	2b00      	cmp	r3, #0
 800927e:	dc35      	bgt.n	80092ec <_dtoa_r+0x29c>
 8009280:	2301      	movs	r3, #1
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	9307      	str	r3, [sp, #28]
 8009286:	461a      	mov	r2, r3
 8009288:	920e      	str	r2, [sp, #56]	@ 0x38
 800928a:	e00b      	b.n	80092a4 <_dtoa_r+0x254>
 800928c:	2301      	movs	r3, #1
 800928e:	e7f3      	b.n	8009278 <_dtoa_r+0x228>
 8009290:	2300      	movs	r3, #0
 8009292:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009296:	18fb      	adds	r3, r7, r3
 8009298:	9300      	str	r3, [sp, #0]
 800929a:	3301      	adds	r3, #1
 800929c:	2b01      	cmp	r3, #1
 800929e:	9307      	str	r3, [sp, #28]
 80092a0:	bfb8      	it	lt
 80092a2:	2301      	movlt	r3, #1
 80092a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80092a8:	2100      	movs	r1, #0
 80092aa:	2204      	movs	r2, #4
 80092ac:	f102 0514 	add.w	r5, r2, #20
 80092b0:	429d      	cmp	r5, r3
 80092b2:	d91f      	bls.n	80092f4 <_dtoa_r+0x2a4>
 80092b4:	6041      	str	r1, [r0, #4]
 80092b6:	4658      	mov	r0, fp
 80092b8:	f000 fd8e 	bl	8009dd8 <_Balloc>
 80092bc:	4682      	mov	sl, r0
 80092be:	2800      	cmp	r0, #0
 80092c0:	d13c      	bne.n	800933c <_dtoa_r+0x2ec>
 80092c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009330 <_dtoa_r+0x2e0>)
 80092c4:	4602      	mov	r2, r0
 80092c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80092ca:	e6d8      	b.n	800907e <_dtoa_r+0x2e>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e7e0      	b.n	8009292 <_dtoa_r+0x242>
 80092d0:	2401      	movs	r4, #1
 80092d2:	2300      	movs	r3, #0
 80092d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80092d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	9307      	str	r3, [sp, #28]
 80092e0:	2200      	movs	r2, #0
 80092e2:	2312      	movs	r3, #18
 80092e4:	e7d0      	b.n	8009288 <_dtoa_r+0x238>
 80092e6:	2301      	movs	r3, #1
 80092e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092ea:	e7f5      	b.n	80092d8 <_dtoa_r+0x288>
 80092ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	9307      	str	r3, [sp, #28]
 80092f2:	e7d7      	b.n	80092a4 <_dtoa_r+0x254>
 80092f4:	3101      	adds	r1, #1
 80092f6:	0052      	lsls	r2, r2, #1
 80092f8:	e7d8      	b.n	80092ac <_dtoa_r+0x25c>
 80092fa:	bf00      	nop
 80092fc:	f3af 8000 	nop.w
 8009300:	636f4361 	.word	0x636f4361
 8009304:	3fd287a7 	.word	0x3fd287a7
 8009308:	8b60c8b3 	.word	0x8b60c8b3
 800930c:	3fc68a28 	.word	0x3fc68a28
 8009310:	509f79fb 	.word	0x509f79fb
 8009314:	3fd34413 	.word	0x3fd34413
 8009318:	0800fd29 	.word	0x0800fd29
 800931c:	0800fd40 	.word	0x0800fd40
 8009320:	7ff00000 	.word	0x7ff00000
 8009324:	0800fcf9 	.word	0x0800fcf9
 8009328:	3ff80000 	.word	0x3ff80000
 800932c:	0800fe38 	.word	0x0800fe38
 8009330:	0800fd98 	.word	0x0800fd98
 8009334:	0800fd25 	.word	0x0800fd25
 8009338:	0800fcf8 	.word	0x0800fcf8
 800933c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009340:	6018      	str	r0, [r3, #0]
 8009342:	9b07      	ldr	r3, [sp, #28]
 8009344:	2b0e      	cmp	r3, #14
 8009346:	f200 80a4 	bhi.w	8009492 <_dtoa_r+0x442>
 800934a:	2c00      	cmp	r4, #0
 800934c:	f000 80a1 	beq.w	8009492 <_dtoa_r+0x442>
 8009350:	2f00      	cmp	r7, #0
 8009352:	dd33      	ble.n	80093bc <_dtoa_r+0x36c>
 8009354:	4bad      	ldr	r3, [pc, #692]	@ (800960c <_dtoa_r+0x5bc>)
 8009356:	f007 020f 	and.w	r2, r7, #15
 800935a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800935e:	ed93 7b00 	vldr	d7, [r3]
 8009362:	05f8      	lsls	r0, r7, #23
 8009364:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009368:	ea4f 1427 	mov.w	r4, r7, asr #4
 800936c:	d516      	bpl.n	800939c <_dtoa_r+0x34c>
 800936e:	4ba8      	ldr	r3, [pc, #672]	@ (8009610 <_dtoa_r+0x5c0>)
 8009370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009378:	f7f7 fa98 	bl	80008ac <__aeabi_ddiv>
 800937c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009380:	f004 040f 	and.w	r4, r4, #15
 8009384:	2603      	movs	r6, #3
 8009386:	4da2      	ldr	r5, [pc, #648]	@ (8009610 <_dtoa_r+0x5c0>)
 8009388:	b954      	cbnz	r4, 80093a0 <_dtoa_r+0x350>
 800938a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800938e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009392:	f7f7 fa8b 	bl	80008ac <__aeabi_ddiv>
 8009396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800939a:	e028      	b.n	80093ee <_dtoa_r+0x39e>
 800939c:	2602      	movs	r6, #2
 800939e:	e7f2      	b.n	8009386 <_dtoa_r+0x336>
 80093a0:	07e1      	lsls	r1, r4, #31
 80093a2:	d508      	bpl.n	80093b6 <_dtoa_r+0x366>
 80093a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80093ac:	f7f7 f954 	bl	8000658 <__aeabi_dmul>
 80093b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093b4:	3601      	adds	r6, #1
 80093b6:	1064      	asrs	r4, r4, #1
 80093b8:	3508      	adds	r5, #8
 80093ba:	e7e5      	b.n	8009388 <_dtoa_r+0x338>
 80093bc:	f000 80d2 	beq.w	8009564 <_dtoa_r+0x514>
 80093c0:	427c      	negs	r4, r7
 80093c2:	4b92      	ldr	r3, [pc, #584]	@ (800960c <_dtoa_r+0x5bc>)
 80093c4:	4d92      	ldr	r5, [pc, #584]	@ (8009610 <_dtoa_r+0x5c0>)
 80093c6:	f004 020f 	and.w	r2, r4, #15
 80093ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093d6:	f7f7 f93f 	bl	8000658 <__aeabi_dmul>
 80093da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093de:	1124      	asrs	r4, r4, #4
 80093e0:	2300      	movs	r3, #0
 80093e2:	2602      	movs	r6, #2
 80093e4:	2c00      	cmp	r4, #0
 80093e6:	f040 80b2 	bne.w	800954e <_dtoa_r+0x4fe>
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1d3      	bne.n	8009396 <_dtoa_r+0x346>
 80093ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80b7 	beq.w	8009568 <_dtoa_r+0x518>
 80093fa:	4b86      	ldr	r3, [pc, #536]	@ (8009614 <_dtoa_r+0x5c4>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	4620      	mov	r0, r4
 8009400:	4629      	mov	r1, r5
 8009402:	f7f7 fb9b 	bl	8000b3c <__aeabi_dcmplt>
 8009406:	2800      	cmp	r0, #0
 8009408:	f000 80ae 	beq.w	8009568 <_dtoa_r+0x518>
 800940c:	9b07      	ldr	r3, [sp, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f000 80aa 	beq.w	8009568 <_dtoa_r+0x518>
 8009414:	9b00      	ldr	r3, [sp, #0]
 8009416:	2b00      	cmp	r3, #0
 8009418:	dd37      	ble.n	800948a <_dtoa_r+0x43a>
 800941a:	1e7b      	subs	r3, r7, #1
 800941c:	9304      	str	r3, [sp, #16]
 800941e:	4620      	mov	r0, r4
 8009420:	4b7d      	ldr	r3, [pc, #500]	@ (8009618 <_dtoa_r+0x5c8>)
 8009422:	2200      	movs	r2, #0
 8009424:	4629      	mov	r1, r5
 8009426:	f7f7 f917 	bl	8000658 <__aeabi_dmul>
 800942a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800942e:	9c00      	ldr	r4, [sp, #0]
 8009430:	3601      	adds	r6, #1
 8009432:	4630      	mov	r0, r6
 8009434:	f7f7 f8a6 	bl	8000584 <__aeabi_i2d>
 8009438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800943c:	f7f7 f90c 	bl	8000658 <__aeabi_dmul>
 8009440:	4b76      	ldr	r3, [pc, #472]	@ (800961c <_dtoa_r+0x5cc>)
 8009442:	2200      	movs	r2, #0
 8009444:	f7f6 ff52 	bl	80002ec <__adddf3>
 8009448:	4605      	mov	r5, r0
 800944a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800944e:	2c00      	cmp	r4, #0
 8009450:	f040 808d 	bne.w	800956e <_dtoa_r+0x51e>
 8009454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009458:	4b71      	ldr	r3, [pc, #452]	@ (8009620 <_dtoa_r+0x5d0>)
 800945a:	2200      	movs	r2, #0
 800945c:	f7f6 ff44 	bl	80002e8 <__aeabi_dsub>
 8009460:	4602      	mov	r2, r0
 8009462:	460b      	mov	r3, r1
 8009464:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009468:	462a      	mov	r2, r5
 800946a:	4633      	mov	r3, r6
 800946c:	f7f7 fb84 	bl	8000b78 <__aeabi_dcmpgt>
 8009470:	2800      	cmp	r0, #0
 8009472:	f040 828b 	bne.w	800998c <_dtoa_r+0x93c>
 8009476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800947a:	462a      	mov	r2, r5
 800947c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009480:	f7f7 fb5c 	bl	8000b3c <__aeabi_dcmplt>
 8009484:	2800      	cmp	r0, #0
 8009486:	f040 8128 	bne.w	80096da <_dtoa_r+0x68a>
 800948a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800948e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009492:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009494:	2b00      	cmp	r3, #0
 8009496:	f2c0 815a 	blt.w	800974e <_dtoa_r+0x6fe>
 800949a:	2f0e      	cmp	r7, #14
 800949c:	f300 8157 	bgt.w	800974e <_dtoa_r+0x6fe>
 80094a0:	4b5a      	ldr	r3, [pc, #360]	@ (800960c <_dtoa_r+0x5bc>)
 80094a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80094a6:	ed93 7b00 	vldr	d7, [r3]
 80094aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	ed8d 7b00 	vstr	d7, [sp]
 80094b2:	da03      	bge.n	80094bc <_dtoa_r+0x46c>
 80094b4:	9b07      	ldr	r3, [sp, #28]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f340 8101 	ble.w	80096be <_dtoa_r+0x66e>
 80094bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80094c0:	4656      	mov	r6, sl
 80094c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094c6:	4620      	mov	r0, r4
 80094c8:	4629      	mov	r1, r5
 80094ca:	f7f7 f9ef 	bl	80008ac <__aeabi_ddiv>
 80094ce:	f7f7 fb73 	bl	8000bb8 <__aeabi_d2iz>
 80094d2:	4680      	mov	r8, r0
 80094d4:	f7f7 f856 	bl	8000584 <__aeabi_i2d>
 80094d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094dc:	f7f7 f8bc 	bl	8000658 <__aeabi_dmul>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4620      	mov	r0, r4
 80094e6:	4629      	mov	r1, r5
 80094e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80094ec:	f7f6 fefc 	bl	80002e8 <__aeabi_dsub>
 80094f0:	f806 4b01 	strb.w	r4, [r6], #1
 80094f4:	9d07      	ldr	r5, [sp, #28]
 80094f6:	eba6 040a 	sub.w	r4, r6, sl
 80094fa:	42a5      	cmp	r5, r4
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	f040 8117 	bne.w	8009732 <_dtoa_r+0x6e2>
 8009504:	f7f6 fef2 	bl	80002ec <__adddf3>
 8009508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800950c:	4604      	mov	r4, r0
 800950e:	460d      	mov	r5, r1
 8009510:	f7f7 fb32 	bl	8000b78 <__aeabi_dcmpgt>
 8009514:	2800      	cmp	r0, #0
 8009516:	f040 80f9 	bne.w	800970c <_dtoa_r+0x6bc>
 800951a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800951e:	4620      	mov	r0, r4
 8009520:	4629      	mov	r1, r5
 8009522:	f7f7 fb01 	bl	8000b28 <__aeabi_dcmpeq>
 8009526:	b118      	cbz	r0, 8009530 <_dtoa_r+0x4e0>
 8009528:	f018 0f01 	tst.w	r8, #1
 800952c:	f040 80ee 	bne.w	800970c <_dtoa_r+0x6bc>
 8009530:	4649      	mov	r1, r9
 8009532:	4658      	mov	r0, fp
 8009534:	f000 fc90 	bl	8009e58 <_Bfree>
 8009538:	2300      	movs	r3, #0
 800953a:	7033      	strb	r3, [r6, #0]
 800953c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800953e:	3701      	adds	r7, #1
 8009540:	601f      	str	r7, [r3, #0]
 8009542:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 831d 	beq.w	8009b84 <_dtoa_r+0xb34>
 800954a:	601e      	str	r6, [r3, #0]
 800954c:	e31a      	b.n	8009b84 <_dtoa_r+0xb34>
 800954e:	07e2      	lsls	r2, r4, #31
 8009550:	d505      	bpl.n	800955e <_dtoa_r+0x50e>
 8009552:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009556:	f7f7 f87f 	bl	8000658 <__aeabi_dmul>
 800955a:	3601      	adds	r6, #1
 800955c:	2301      	movs	r3, #1
 800955e:	1064      	asrs	r4, r4, #1
 8009560:	3508      	adds	r5, #8
 8009562:	e73f      	b.n	80093e4 <_dtoa_r+0x394>
 8009564:	2602      	movs	r6, #2
 8009566:	e742      	b.n	80093ee <_dtoa_r+0x39e>
 8009568:	9c07      	ldr	r4, [sp, #28]
 800956a:	9704      	str	r7, [sp, #16]
 800956c:	e761      	b.n	8009432 <_dtoa_r+0x3e2>
 800956e:	4b27      	ldr	r3, [pc, #156]	@ (800960c <_dtoa_r+0x5bc>)
 8009570:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009572:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009576:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800957a:	4454      	add	r4, sl
 800957c:	2900      	cmp	r1, #0
 800957e:	d053      	beq.n	8009628 <_dtoa_r+0x5d8>
 8009580:	4928      	ldr	r1, [pc, #160]	@ (8009624 <_dtoa_r+0x5d4>)
 8009582:	2000      	movs	r0, #0
 8009584:	f7f7 f992 	bl	80008ac <__aeabi_ddiv>
 8009588:	4633      	mov	r3, r6
 800958a:	462a      	mov	r2, r5
 800958c:	f7f6 feac 	bl	80002e8 <__aeabi_dsub>
 8009590:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009594:	4656      	mov	r6, sl
 8009596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800959a:	f7f7 fb0d 	bl	8000bb8 <__aeabi_d2iz>
 800959e:	4605      	mov	r5, r0
 80095a0:	f7f6 fff0 	bl	8000584 <__aeabi_i2d>
 80095a4:	4602      	mov	r2, r0
 80095a6:	460b      	mov	r3, r1
 80095a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095ac:	f7f6 fe9c 	bl	80002e8 <__aeabi_dsub>
 80095b0:	3530      	adds	r5, #48	@ 0x30
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095ba:	f806 5b01 	strb.w	r5, [r6], #1
 80095be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095c2:	f7f7 fabb 	bl	8000b3c <__aeabi_dcmplt>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	d171      	bne.n	80096ae <_dtoa_r+0x65e>
 80095ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095ce:	4911      	ldr	r1, [pc, #68]	@ (8009614 <_dtoa_r+0x5c4>)
 80095d0:	2000      	movs	r0, #0
 80095d2:	f7f6 fe89 	bl	80002e8 <__aeabi_dsub>
 80095d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095da:	f7f7 faaf 	bl	8000b3c <__aeabi_dcmplt>
 80095de:	2800      	cmp	r0, #0
 80095e0:	f040 8095 	bne.w	800970e <_dtoa_r+0x6be>
 80095e4:	42a6      	cmp	r6, r4
 80095e6:	f43f af50 	beq.w	800948a <_dtoa_r+0x43a>
 80095ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80095ee:	4b0a      	ldr	r3, [pc, #40]	@ (8009618 <_dtoa_r+0x5c8>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	f7f7 f831 	bl	8000658 <__aeabi_dmul>
 80095f6:	4b08      	ldr	r3, [pc, #32]	@ (8009618 <_dtoa_r+0x5c8>)
 80095f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095fc:	2200      	movs	r2, #0
 80095fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009602:	f7f7 f829 	bl	8000658 <__aeabi_dmul>
 8009606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800960a:	e7c4      	b.n	8009596 <_dtoa_r+0x546>
 800960c:	0800fe38 	.word	0x0800fe38
 8009610:	0800fe10 	.word	0x0800fe10
 8009614:	3ff00000 	.word	0x3ff00000
 8009618:	40240000 	.word	0x40240000
 800961c:	401c0000 	.word	0x401c0000
 8009620:	40140000 	.word	0x40140000
 8009624:	3fe00000 	.word	0x3fe00000
 8009628:	4631      	mov	r1, r6
 800962a:	4628      	mov	r0, r5
 800962c:	f7f7 f814 	bl	8000658 <__aeabi_dmul>
 8009630:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009634:	9415      	str	r4, [sp, #84]	@ 0x54
 8009636:	4656      	mov	r6, sl
 8009638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800963c:	f7f7 fabc 	bl	8000bb8 <__aeabi_d2iz>
 8009640:	4605      	mov	r5, r0
 8009642:	f7f6 ff9f 	bl	8000584 <__aeabi_i2d>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800964e:	f7f6 fe4b 	bl	80002e8 <__aeabi_dsub>
 8009652:	3530      	adds	r5, #48	@ 0x30
 8009654:	f806 5b01 	strb.w	r5, [r6], #1
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	42a6      	cmp	r6, r4
 800965e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009662:	f04f 0200 	mov.w	r2, #0
 8009666:	d124      	bne.n	80096b2 <_dtoa_r+0x662>
 8009668:	4bac      	ldr	r3, [pc, #688]	@ (800991c <_dtoa_r+0x8cc>)
 800966a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800966e:	f7f6 fe3d 	bl	80002ec <__adddf3>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800967a:	f7f7 fa7d 	bl	8000b78 <__aeabi_dcmpgt>
 800967e:	2800      	cmp	r0, #0
 8009680:	d145      	bne.n	800970e <_dtoa_r+0x6be>
 8009682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009686:	49a5      	ldr	r1, [pc, #660]	@ (800991c <_dtoa_r+0x8cc>)
 8009688:	2000      	movs	r0, #0
 800968a:	f7f6 fe2d 	bl	80002e8 <__aeabi_dsub>
 800968e:	4602      	mov	r2, r0
 8009690:	460b      	mov	r3, r1
 8009692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009696:	f7f7 fa51 	bl	8000b3c <__aeabi_dcmplt>
 800969a:	2800      	cmp	r0, #0
 800969c:	f43f aef5 	beq.w	800948a <_dtoa_r+0x43a>
 80096a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80096a2:	1e73      	subs	r3, r6, #1
 80096a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80096a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80096aa:	2b30      	cmp	r3, #48	@ 0x30
 80096ac:	d0f8      	beq.n	80096a0 <_dtoa_r+0x650>
 80096ae:	9f04      	ldr	r7, [sp, #16]
 80096b0:	e73e      	b.n	8009530 <_dtoa_r+0x4e0>
 80096b2:	4b9b      	ldr	r3, [pc, #620]	@ (8009920 <_dtoa_r+0x8d0>)
 80096b4:	f7f6 ffd0 	bl	8000658 <__aeabi_dmul>
 80096b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096bc:	e7bc      	b.n	8009638 <_dtoa_r+0x5e8>
 80096be:	d10c      	bne.n	80096da <_dtoa_r+0x68a>
 80096c0:	4b98      	ldr	r3, [pc, #608]	@ (8009924 <_dtoa_r+0x8d4>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096c8:	f7f6 ffc6 	bl	8000658 <__aeabi_dmul>
 80096cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096d0:	f7f7 fa48 	bl	8000b64 <__aeabi_dcmpge>
 80096d4:	2800      	cmp	r0, #0
 80096d6:	f000 8157 	beq.w	8009988 <_dtoa_r+0x938>
 80096da:	2400      	movs	r4, #0
 80096dc:	4625      	mov	r5, r4
 80096de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096e0:	43db      	mvns	r3, r3
 80096e2:	9304      	str	r3, [sp, #16]
 80096e4:	4656      	mov	r6, sl
 80096e6:	2700      	movs	r7, #0
 80096e8:	4621      	mov	r1, r4
 80096ea:	4658      	mov	r0, fp
 80096ec:	f000 fbb4 	bl	8009e58 <_Bfree>
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	d0dc      	beq.n	80096ae <_dtoa_r+0x65e>
 80096f4:	b12f      	cbz	r7, 8009702 <_dtoa_r+0x6b2>
 80096f6:	42af      	cmp	r7, r5
 80096f8:	d003      	beq.n	8009702 <_dtoa_r+0x6b2>
 80096fa:	4639      	mov	r1, r7
 80096fc:	4658      	mov	r0, fp
 80096fe:	f000 fbab 	bl	8009e58 <_Bfree>
 8009702:	4629      	mov	r1, r5
 8009704:	4658      	mov	r0, fp
 8009706:	f000 fba7 	bl	8009e58 <_Bfree>
 800970a:	e7d0      	b.n	80096ae <_dtoa_r+0x65e>
 800970c:	9704      	str	r7, [sp, #16]
 800970e:	4633      	mov	r3, r6
 8009710:	461e      	mov	r6, r3
 8009712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009716:	2a39      	cmp	r2, #57	@ 0x39
 8009718:	d107      	bne.n	800972a <_dtoa_r+0x6da>
 800971a:	459a      	cmp	sl, r3
 800971c:	d1f8      	bne.n	8009710 <_dtoa_r+0x6c0>
 800971e:	9a04      	ldr	r2, [sp, #16]
 8009720:	3201      	adds	r2, #1
 8009722:	9204      	str	r2, [sp, #16]
 8009724:	2230      	movs	r2, #48	@ 0x30
 8009726:	f88a 2000 	strb.w	r2, [sl]
 800972a:	781a      	ldrb	r2, [r3, #0]
 800972c:	3201      	adds	r2, #1
 800972e:	701a      	strb	r2, [r3, #0]
 8009730:	e7bd      	b.n	80096ae <_dtoa_r+0x65e>
 8009732:	4b7b      	ldr	r3, [pc, #492]	@ (8009920 <_dtoa_r+0x8d0>)
 8009734:	2200      	movs	r2, #0
 8009736:	f7f6 ff8f 	bl	8000658 <__aeabi_dmul>
 800973a:	2200      	movs	r2, #0
 800973c:	2300      	movs	r3, #0
 800973e:	4604      	mov	r4, r0
 8009740:	460d      	mov	r5, r1
 8009742:	f7f7 f9f1 	bl	8000b28 <__aeabi_dcmpeq>
 8009746:	2800      	cmp	r0, #0
 8009748:	f43f aebb 	beq.w	80094c2 <_dtoa_r+0x472>
 800974c:	e6f0      	b.n	8009530 <_dtoa_r+0x4e0>
 800974e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009750:	2a00      	cmp	r2, #0
 8009752:	f000 80db 	beq.w	800990c <_dtoa_r+0x8bc>
 8009756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009758:	2a01      	cmp	r2, #1
 800975a:	f300 80bf 	bgt.w	80098dc <_dtoa_r+0x88c>
 800975e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009760:	2a00      	cmp	r2, #0
 8009762:	f000 80b7 	beq.w	80098d4 <_dtoa_r+0x884>
 8009766:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800976a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800976c:	4646      	mov	r6, r8
 800976e:	9a08      	ldr	r2, [sp, #32]
 8009770:	2101      	movs	r1, #1
 8009772:	441a      	add	r2, r3
 8009774:	4658      	mov	r0, fp
 8009776:	4498      	add	r8, r3
 8009778:	9208      	str	r2, [sp, #32]
 800977a:	f000 fc21 	bl	8009fc0 <__i2b>
 800977e:	4605      	mov	r5, r0
 8009780:	b15e      	cbz	r6, 800979a <_dtoa_r+0x74a>
 8009782:	9b08      	ldr	r3, [sp, #32]
 8009784:	2b00      	cmp	r3, #0
 8009786:	dd08      	ble.n	800979a <_dtoa_r+0x74a>
 8009788:	42b3      	cmp	r3, r6
 800978a:	9a08      	ldr	r2, [sp, #32]
 800978c:	bfa8      	it	ge
 800978e:	4633      	movge	r3, r6
 8009790:	eba8 0803 	sub.w	r8, r8, r3
 8009794:	1af6      	subs	r6, r6, r3
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	9308      	str	r3, [sp, #32]
 800979a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800979c:	b1f3      	cbz	r3, 80097dc <_dtoa_r+0x78c>
 800979e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 80b7 	beq.w	8009914 <_dtoa_r+0x8c4>
 80097a6:	b18c      	cbz	r4, 80097cc <_dtoa_r+0x77c>
 80097a8:	4629      	mov	r1, r5
 80097aa:	4622      	mov	r2, r4
 80097ac:	4658      	mov	r0, fp
 80097ae:	f000 fcc7 	bl	800a140 <__pow5mult>
 80097b2:	464a      	mov	r2, r9
 80097b4:	4601      	mov	r1, r0
 80097b6:	4605      	mov	r5, r0
 80097b8:	4658      	mov	r0, fp
 80097ba:	f000 fc17 	bl	8009fec <__multiply>
 80097be:	4649      	mov	r1, r9
 80097c0:	9004      	str	r0, [sp, #16]
 80097c2:	4658      	mov	r0, fp
 80097c4:	f000 fb48 	bl	8009e58 <_Bfree>
 80097c8:	9b04      	ldr	r3, [sp, #16]
 80097ca:	4699      	mov	r9, r3
 80097cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ce:	1b1a      	subs	r2, r3, r4
 80097d0:	d004      	beq.n	80097dc <_dtoa_r+0x78c>
 80097d2:	4649      	mov	r1, r9
 80097d4:	4658      	mov	r0, fp
 80097d6:	f000 fcb3 	bl	800a140 <__pow5mult>
 80097da:	4681      	mov	r9, r0
 80097dc:	2101      	movs	r1, #1
 80097de:	4658      	mov	r0, fp
 80097e0:	f000 fbee 	bl	8009fc0 <__i2b>
 80097e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097e6:	4604      	mov	r4, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 81cf 	beq.w	8009b8c <_dtoa_r+0xb3c>
 80097ee:	461a      	mov	r2, r3
 80097f0:	4601      	mov	r1, r0
 80097f2:	4658      	mov	r0, fp
 80097f4:	f000 fca4 	bl	800a140 <__pow5mult>
 80097f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	4604      	mov	r4, r0
 80097fe:	f300 8095 	bgt.w	800992c <_dtoa_r+0x8dc>
 8009802:	9b02      	ldr	r3, [sp, #8]
 8009804:	2b00      	cmp	r3, #0
 8009806:	f040 8087 	bne.w	8009918 <_dtoa_r+0x8c8>
 800980a:	9b03      	ldr	r3, [sp, #12]
 800980c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009810:	2b00      	cmp	r3, #0
 8009812:	f040 8089 	bne.w	8009928 <_dtoa_r+0x8d8>
 8009816:	9b03      	ldr	r3, [sp, #12]
 8009818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800981c:	0d1b      	lsrs	r3, r3, #20
 800981e:	051b      	lsls	r3, r3, #20
 8009820:	b12b      	cbz	r3, 800982e <_dtoa_r+0x7de>
 8009822:	9b08      	ldr	r3, [sp, #32]
 8009824:	3301      	adds	r3, #1
 8009826:	9308      	str	r3, [sp, #32]
 8009828:	f108 0801 	add.w	r8, r8, #1
 800982c:	2301      	movs	r3, #1
 800982e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009832:	2b00      	cmp	r3, #0
 8009834:	f000 81b0 	beq.w	8009b98 <_dtoa_r+0xb48>
 8009838:	6923      	ldr	r3, [r4, #16]
 800983a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800983e:	6918      	ldr	r0, [r3, #16]
 8009840:	f000 fb72 	bl	8009f28 <__hi0bits>
 8009844:	f1c0 0020 	rsb	r0, r0, #32
 8009848:	9b08      	ldr	r3, [sp, #32]
 800984a:	4418      	add	r0, r3
 800984c:	f010 001f 	ands.w	r0, r0, #31
 8009850:	d077      	beq.n	8009942 <_dtoa_r+0x8f2>
 8009852:	f1c0 0320 	rsb	r3, r0, #32
 8009856:	2b04      	cmp	r3, #4
 8009858:	dd6b      	ble.n	8009932 <_dtoa_r+0x8e2>
 800985a:	9b08      	ldr	r3, [sp, #32]
 800985c:	f1c0 001c 	rsb	r0, r0, #28
 8009860:	4403      	add	r3, r0
 8009862:	4480      	add	r8, r0
 8009864:	4406      	add	r6, r0
 8009866:	9308      	str	r3, [sp, #32]
 8009868:	f1b8 0f00 	cmp.w	r8, #0
 800986c:	dd05      	ble.n	800987a <_dtoa_r+0x82a>
 800986e:	4649      	mov	r1, r9
 8009870:	4642      	mov	r2, r8
 8009872:	4658      	mov	r0, fp
 8009874:	f000 fcbe 	bl	800a1f4 <__lshift>
 8009878:	4681      	mov	r9, r0
 800987a:	9b08      	ldr	r3, [sp, #32]
 800987c:	2b00      	cmp	r3, #0
 800987e:	dd05      	ble.n	800988c <_dtoa_r+0x83c>
 8009880:	4621      	mov	r1, r4
 8009882:	461a      	mov	r2, r3
 8009884:	4658      	mov	r0, fp
 8009886:	f000 fcb5 	bl	800a1f4 <__lshift>
 800988a:	4604      	mov	r4, r0
 800988c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800988e:	2b00      	cmp	r3, #0
 8009890:	d059      	beq.n	8009946 <_dtoa_r+0x8f6>
 8009892:	4621      	mov	r1, r4
 8009894:	4648      	mov	r0, r9
 8009896:	f000 fd19 	bl	800a2cc <__mcmp>
 800989a:	2800      	cmp	r0, #0
 800989c:	da53      	bge.n	8009946 <_dtoa_r+0x8f6>
 800989e:	1e7b      	subs	r3, r7, #1
 80098a0:	9304      	str	r3, [sp, #16]
 80098a2:	4649      	mov	r1, r9
 80098a4:	2300      	movs	r3, #0
 80098a6:	220a      	movs	r2, #10
 80098a8:	4658      	mov	r0, fp
 80098aa:	f000 faf7 	bl	8009e9c <__multadd>
 80098ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098b0:	4681      	mov	r9, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f000 8172 	beq.w	8009b9c <_dtoa_r+0xb4c>
 80098b8:	2300      	movs	r3, #0
 80098ba:	4629      	mov	r1, r5
 80098bc:	220a      	movs	r2, #10
 80098be:	4658      	mov	r0, fp
 80098c0:	f000 faec 	bl	8009e9c <__multadd>
 80098c4:	9b00      	ldr	r3, [sp, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	4605      	mov	r5, r0
 80098ca:	dc67      	bgt.n	800999c <_dtoa_r+0x94c>
 80098cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	dc41      	bgt.n	8009956 <_dtoa_r+0x906>
 80098d2:	e063      	b.n	800999c <_dtoa_r+0x94c>
 80098d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80098da:	e746      	b.n	800976a <_dtoa_r+0x71a>
 80098dc:	9b07      	ldr	r3, [sp, #28]
 80098de:	1e5c      	subs	r4, r3, #1
 80098e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098e2:	42a3      	cmp	r3, r4
 80098e4:	bfbf      	itttt	lt
 80098e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80098e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80098ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80098ec:	1ae3      	sublt	r3, r4, r3
 80098ee:	bfb4      	ite	lt
 80098f0:	18d2      	addlt	r2, r2, r3
 80098f2:	1b1c      	subge	r4, r3, r4
 80098f4:	9b07      	ldr	r3, [sp, #28]
 80098f6:	bfbc      	itt	lt
 80098f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80098fa:	2400      	movlt	r4, #0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	bfb5      	itete	lt
 8009900:	eba8 0603 	sublt.w	r6, r8, r3
 8009904:	9b07      	ldrge	r3, [sp, #28]
 8009906:	2300      	movlt	r3, #0
 8009908:	4646      	movge	r6, r8
 800990a:	e730      	b.n	800976e <_dtoa_r+0x71e>
 800990c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800990e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009910:	4646      	mov	r6, r8
 8009912:	e735      	b.n	8009780 <_dtoa_r+0x730>
 8009914:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009916:	e75c      	b.n	80097d2 <_dtoa_r+0x782>
 8009918:	2300      	movs	r3, #0
 800991a:	e788      	b.n	800982e <_dtoa_r+0x7de>
 800991c:	3fe00000 	.word	0x3fe00000
 8009920:	40240000 	.word	0x40240000
 8009924:	40140000 	.word	0x40140000
 8009928:	9b02      	ldr	r3, [sp, #8]
 800992a:	e780      	b.n	800982e <_dtoa_r+0x7de>
 800992c:	2300      	movs	r3, #0
 800992e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009930:	e782      	b.n	8009838 <_dtoa_r+0x7e8>
 8009932:	d099      	beq.n	8009868 <_dtoa_r+0x818>
 8009934:	9a08      	ldr	r2, [sp, #32]
 8009936:	331c      	adds	r3, #28
 8009938:	441a      	add	r2, r3
 800993a:	4498      	add	r8, r3
 800993c:	441e      	add	r6, r3
 800993e:	9208      	str	r2, [sp, #32]
 8009940:	e792      	b.n	8009868 <_dtoa_r+0x818>
 8009942:	4603      	mov	r3, r0
 8009944:	e7f6      	b.n	8009934 <_dtoa_r+0x8e4>
 8009946:	9b07      	ldr	r3, [sp, #28]
 8009948:	9704      	str	r7, [sp, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	dc20      	bgt.n	8009990 <_dtoa_r+0x940>
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009952:	2b02      	cmp	r3, #2
 8009954:	dd1e      	ble.n	8009994 <_dtoa_r+0x944>
 8009956:	9b00      	ldr	r3, [sp, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f47f aec0 	bne.w	80096de <_dtoa_r+0x68e>
 800995e:	4621      	mov	r1, r4
 8009960:	2205      	movs	r2, #5
 8009962:	4658      	mov	r0, fp
 8009964:	f000 fa9a 	bl	8009e9c <__multadd>
 8009968:	4601      	mov	r1, r0
 800996a:	4604      	mov	r4, r0
 800996c:	4648      	mov	r0, r9
 800996e:	f000 fcad 	bl	800a2cc <__mcmp>
 8009972:	2800      	cmp	r0, #0
 8009974:	f77f aeb3 	ble.w	80096de <_dtoa_r+0x68e>
 8009978:	4656      	mov	r6, sl
 800997a:	2331      	movs	r3, #49	@ 0x31
 800997c:	f806 3b01 	strb.w	r3, [r6], #1
 8009980:	9b04      	ldr	r3, [sp, #16]
 8009982:	3301      	adds	r3, #1
 8009984:	9304      	str	r3, [sp, #16]
 8009986:	e6ae      	b.n	80096e6 <_dtoa_r+0x696>
 8009988:	9c07      	ldr	r4, [sp, #28]
 800998a:	9704      	str	r7, [sp, #16]
 800998c:	4625      	mov	r5, r4
 800998e:	e7f3      	b.n	8009978 <_dtoa_r+0x928>
 8009990:	9b07      	ldr	r3, [sp, #28]
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009996:	2b00      	cmp	r3, #0
 8009998:	f000 8104 	beq.w	8009ba4 <_dtoa_r+0xb54>
 800999c:	2e00      	cmp	r6, #0
 800999e:	dd05      	ble.n	80099ac <_dtoa_r+0x95c>
 80099a0:	4629      	mov	r1, r5
 80099a2:	4632      	mov	r2, r6
 80099a4:	4658      	mov	r0, fp
 80099a6:	f000 fc25 	bl	800a1f4 <__lshift>
 80099aa:	4605      	mov	r5, r0
 80099ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d05a      	beq.n	8009a68 <_dtoa_r+0xa18>
 80099b2:	6869      	ldr	r1, [r5, #4]
 80099b4:	4658      	mov	r0, fp
 80099b6:	f000 fa0f 	bl	8009dd8 <_Balloc>
 80099ba:	4606      	mov	r6, r0
 80099bc:	b928      	cbnz	r0, 80099ca <_dtoa_r+0x97a>
 80099be:	4b84      	ldr	r3, [pc, #528]	@ (8009bd0 <_dtoa_r+0xb80>)
 80099c0:	4602      	mov	r2, r0
 80099c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80099c6:	f7ff bb5a 	b.w	800907e <_dtoa_r+0x2e>
 80099ca:	692a      	ldr	r2, [r5, #16]
 80099cc:	3202      	adds	r2, #2
 80099ce:	0092      	lsls	r2, r2, #2
 80099d0:	f105 010c 	add.w	r1, r5, #12
 80099d4:	300c      	adds	r0, #12
 80099d6:	f000 ffaf 	bl	800a938 <memcpy>
 80099da:	2201      	movs	r2, #1
 80099dc:	4631      	mov	r1, r6
 80099de:	4658      	mov	r0, fp
 80099e0:	f000 fc08 	bl	800a1f4 <__lshift>
 80099e4:	f10a 0301 	add.w	r3, sl, #1
 80099e8:	9307      	str	r3, [sp, #28]
 80099ea:	9b00      	ldr	r3, [sp, #0]
 80099ec:	4453      	add	r3, sl
 80099ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099f0:	9b02      	ldr	r3, [sp, #8]
 80099f2:	f003 0301 	and.w	r3, r3, #1
 80099f6:	462f      	mov	r7, r5
 80099f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80099fa:	4605      	mov	r5, r0
 80099fc:	9b07      	ldr	r3, [sp, #28]
 80099fe:	4621      	mov	r1, r4
 8009a00:	3b01      	subs	r3, #1
 8009a02:	4648      	mov	r0, r9
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	f7ff fa9a 	bl	8008f3e <quorem>
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	9002      	str	r0, [sp, #8]
 8009a0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009a12:	4648      	mov	r0, r9
 8009a14:	f000 fc5a 	bl	800a2cc <__mcmp>
 8009a18:	462a      	mov	r2, r5
 8009a1a:	9008      	str	r0, [sp, #32]
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	4658      	mov	r0, fp
 8009a20:	f000 fc70 	bl	800a304 <__mdiff>
 8009a24:	68c2      	ldr	r2, [r0, #12]
 8009a26:	4606      	mov	r6, r0
 8009a28:	bb02      	cbnz	r2, 8009a6c <_dtoa_r+0xa1c>
 8009a2a:	4601      	mov	r1, r0
 8009a2c:	4648      	mov	r0, r9
 8009a2e:	f000 fc4d 	bl	800a2cc <__mcmp>
 8009a32:	4602      	mov	r2, r0
 8009a34:	4631      	mov	r1, r6
 8009a36:	4658      	mov	r0, fp
 8009a38:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a3a:	f000 fa0d 	bl	8009e58 <_Bfree>
 8009a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a42:	9e07      	ldr	r6, [sp, #28]
 8009a44:	ea43 0102 	orr.w	r1, r3, r2
 8009a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a4a:	4319      	orrs	r1, r3
 8009a4c:	d110      	bne.n	8009a70 <_dtoa_r+0xa20>
 8009a4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a52:	d029      	beq.n	8009aa8 <_dtoa_r+0xa58>
 8009a54:	9b08      	ldr	r3, [sp, #32]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	dd02      	ble.n	8009a60 <_dtoa_r+0xa10>
 8009a5a:	9b02      	ldr	r3, [sp, #8]
 8009a5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009a60:	9b00      	ldr	r3, [sp, #0]
 8009a62:	f883 8000 	strb.w	r8, [r3]
 8009a66:	e63f      	b.n	80096e8 <_dtoa_r+0x698>
 8009a68:	4628      	mov	r0, r5
 8009a6a:	e7bb      	b.n	80099e4 <_dtoa_r+0x994>
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	e7e1      	b.n	8009a34 <_dtoa_r+0x9e4>
 8009a70:	9b08      	ldr	r3, [sp, #32]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	db04      	blt.n	8009a80 <_dtoa_r+0xa30>
 8009a76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a78:	430b      	orrs	r3, r1
 8009a7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a7c:	430b      	orrs	r3, r1
 8009a7e:	d120      	bne.n	8009ac2 <_dtoa_r+0xa72>
 8009a80:	2a00      	cmp	r2, #0
 8009a82:	dded      	ble.n	8009a60 <_dtoa_r+0xa10>
 8009a84:	4649      	mov	r1, r9
 8009a86:	2201      	movs	r2, #1
 8009a88:	4658      	mov	r0, fp
 8009a8a:	f000 fbb3 	bl	800a1f4 <__lshift>
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4681      	mov	r9, r0
 8009a92:	f000 fc1b 	bl	800a2cc <__mcmp>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	dc03      	bgt.n	8009aa2 <_dtoa_r+0xa52>
 8009a9a:	d1e1      	bne.n	8009a60 <_dtoa_r+0xa10>
 8009a9c:	f018 0f01 	tst.w	r8, #1
 8009aa0:	d0de      	beq.n	8009a60 <_dtoa_r+0xa10>
 8009aa2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009aa6:	d1d8      	bne.n	8009a5a <_dtoa_r+0xa0a>
 8009aa8:	9a00      	ldr	r2, [sp, #0]
 8009aaa:	2339      	movs	r3, #57	@ 0x39
 8009aac:	7013      	strb	r3, [r2, #0]
 8009aae:	4633      	mov	r3, r6
 8009ab0:	461e      	mov	r6, r3
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ab8:	2a39      	cmp	r2, #57	@ 0x39
 8009aba:	d052      	beq.n	8009b62 <_dtoa_r+0xb12>
 8009abc:	3201      	adds	r2, #1
 8009abe:	701a      	strb	r2, [r3, #0]
 8009ac0:	e612      	b.n	80096e8 <_dtoa_r+0x698>
 8009ac2:	2a00      	cmp	r2, #0
 8009ac4:	dd07      	ble.n	8009ad6 <_dtoa_r+0xa86>
 8009ac6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009aca:	d0ed      	beq.n	8009aa8 <_dtoa_r+0xa58>
 8009acc:	9a00      	ldr	r2, [sp, #0]
 8009ace:	f108 0301 	add.w	r3, r8, #1
 8009ad2:	7013      	strb	r3, [r2, #0]
 8009ad4:	e608      	b.n	80096e8 <_dtoa_r+0x698>
 8009ad6:	9b07      	ldr	r3, [sp, #28]
 8009ad8:	9a07      	ldr	r2, [sp, #28]
 8009ada:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d028      	beq.n	8009b36 <_dtoa_r+0xae6>
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	220a      	movs	r2, #10
 8009aea:	4658      	mov	r0, fp
 8009aec:	f000 f9d6 	bl	8009e9c <__multadd>
 8009af0:	42af      	cmp	r7, r5
 8009af2:	4681      	mov	r9, r0
 8009af4:	f04f 0300 	mov.w	r3, #0
 8009af8:	f04f 020a 	mov.w	r2, #10
 8009afc:	4639      	mov	r1, r7
 8009afe:	4658      	mov	r0, fp
 8009b00:	d107      	bne.n	8009b12 <_dtoa_r+0xac2>
 8009b02:	f000 f9cb 	bl	8009e9c <__multadd>
 8009b06:	4607      	mov	r7, r0
 8009b08:	4605      	mov	r5, r0
 8009b0a:	9b07      	ldr	r3, [sp, #28]
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	9307      	str	r3, [sp, #28]
 8009b10:	e774      	b.n	80099fc <_dtoa_r+0x9ac>
 8009b12:	f000 f9c3 	bl	8009e9c <__multadd>
 8009b16:	4629      	mov	r1, r5
 8009b18:	4607      	mov	r7, r0
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	220a      	movs	r2, #10
 8009b1e:	4658      	mov	r0, fp
 8009b20:	f000 f9bc 	bl	8009e9c <__multadd>
 8009b24:	4605      	mov	r5, r0
 8009b26:	e7f0      	b.n	8009b0a <_dtoa_r+0xaba>
 8009b28:	9b00      	ldr	r3, [sp, #0]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	bfcc      	ite	gt
 8009b2e:	461e      	movgt	r6, r3
 8009b30:	2601      	movle	r6, #1
 8009b32:	4456      	add	r6, sl
 8009b34:	2700      	movs	r7, #0
 8009b36:	4649      	mov	r1, r9
 8009b38:	2201      	movs	r2, #1
 8009b3a:	4658      	mov	r0, fp
 8009b3c:	f000 fb5a 	bl	800a1f4 <__lshift>
 8009b40:	4621      	mov	r1, r4
 8009b42:	4681      	mov	r9, r0
 8009b44:	f000 fbc2 	bl	800a2cc <__mcmp>
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	dcb0      	bgt.n	8009aae <_dtoa_r+0xa5e>
 8009b4c:	d102      	bne.n	8009b54 <_dtoa_r+0xb04>
 8009b4e:	f018 0f01 	tst.w	r8, #1
 8009b52:	d1ac      	bne.n	8009aae <_dtoa_r+0xa5e>
 8009b54:	4633      	mov	r3, r6
 8009b56:	461e      	mov	r6, r3
 8009b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b5c:	2a30      	cmp	r2, #48	@ 0x30
 8009b5e:	d0fa      	beq.n	8009b56 <_dtoa_r+0xb06>
 8009b60:	e5c2      	b.n	80096e8 <_dtoa_r+0x698>
 8009b62:	459a      	cmp	sl, r3
 8009b64:	d1a4      	bne.n	8009ab0 <_dtoa_r+0xa60>
 8009b66:	9b04      	ldr	r3, [sp, #16]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	9304      	str	r3, [sp, #16]
 8009b6c:	2331      	movs	r3, #49	@ 0x31
 8009b6e:	f88a 3000 	strb.w	r3, [sl]
 8009b72:	e5b9      	b.n	80096e8 <_dtoa_r+0x698>
 8009b74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009bd4 <_dtoa_r+0xb84>
 8009b7a:	b11b      	cbz	r3, 8009b84 <_dtoa_r+0xb34>
 8009b7c:	f10a 0308 	add.w	r3, sl, #8
 8009b80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009b82:	6013      	str	r3, [r2, #0]
 8009b84:	4650      	mov	r0, sl
 8009b86:	b019      	add	sp, #100	@ 0x64
 8009b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	f77f ae37 	ble.w	8009802 <_dtoa_r+0x7b2>
 8009b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b98:	2001      	movs	r0, #1
 8009b9a:	e655      	b.n	8009848 <_dtoa_r+0x7f8>
 8009b9c:	9b00      	ldr	r3, [sp, #0]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f77f aed6 	ble.w	8009950 <_dtoa_r+0x900>
 8009ba4:	4656      	mov	r6, sl
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	4648      	mov	r0, r9
 8009baa:	f7ff f9c8 	bl	8008f3e <quorem>
 8009bae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009bb2:	f806 8b01 	strb.w	r8, [r6], #1
 8009bb6:	9b00      	ldr	r3, [sp, #0]
 8009bb8:	eba6 020a 	sub.w	r2, r6, sl
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	ddb3      	ble.n	8009b28 <_dtoa_r+0xad8>
 8009bc0:	4649      	mov	r1, r9
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	220a      	movs	r2, #10
 8009bc6:	4658      	mov	r0, fp
 8009bc8:	f000 f968 	bl	8009e9c <__multadd>
 8009bcc:	4681      	mov	r9, r0
 8009bce:	e7ea      	b.n	8009ba6 <_dtoa_r+0xb56>
 8009bd0:	0800fd98 	.word	0x0800fd98
 8009bd4:	0800fd1c 	.word	0x0800fd1c

08009bd8 <_free_r>:
 8009bd8:	b538      	push	{r3, r4, r5, lr}
 8009bda:	4605      	mov	r5, r0
 8009bdc:	2900      	cmp	r1, #0
 8009bde:	d041      	beq.n	8009c64 <_free_r+0x8c>
 8009be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009be4:	1f0c      	subs	r4, r1, #4
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	bfb8      	it	lt
 8009bea:	18e4      	addlt	r4, r4, r3
 8009bec:	f000 f8e8 	bl	8009dc0 <__malloc_lock>
 8009bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8009c68 <_free_r+0x90>)
 8009bf2:	6813      	ldr	r3, [r2, #0]
 8009bf4:	b933      	cbnz	r3, 8009c04 <_free_r+0x2c>
 8009bf6:	6063      	str	r3, [r4, #4]
 8009bf8:	6014      	str	r4, [r2, #0]
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c00:	f000 b8e4 	b.w	8009dcc <__malloc_unlock>
 8009c04:	42a3      	cmp	r3, r4
 8009c06:	d908      	bls.n	8009c1a <_free_r+0x42>
 8009c08:	6820      	ldr	r0, [r4, #0]
 8009c0a:	1821      	adds	r1, r4, r0
 8009c0c:	428b      	cmp	r3, r1
 8009c0e:	bf01      	itttt	eq
 8009c10:	6819      	ldreq	r1, [r3, #0]
 8009c12:	685b      	ldreq	r3, [r3, #4]
 8009c14:	1809      	addeq	r1, r1, r0
 8009c16:	6021      	streq	r1, [r4, #0]
 8009c18:	e7ed      	b.n	8009bf6 <_free_r+0x1e>
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	b10b      	cbz	r3, 8009c24 <_free_r+0x4c>
 8009c20:	42a3      	cmp	r3, r4
 8009c22:	d9fa      	bls.n	8009c1a <_free_r+0x42>
 8009c24:	6811      	ldr	r1, [r2, #0]
 8009c26:	1850      	adds	r0, r2, r1
 8009c28:	42a0      	cmp	r0, r4
 8009c2a:	d10b      	bne.n	8009c44 <_free_r+0x6c>
 8009c2c:	6820      	ldr	r0, [r4, #0]
 8009c2e:	4401      	add	r1, r0
 8009c30:	1850      	adds	r0, r2, r1
 8009c32:	4283      	cmp	r3, r0
 8009c34:	6011      	str	r1, [r2, #0]
 8009c36:	d1e0      	bne.n	8009bfa <_free_r+0x22>
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	6053      	str	r3, [r2, #4]
 8009c3e:	4408      	add	r0, r1
 8009c40:	6010      	str	r0, [r2, #0]
 8009c42:	e7da      	b.n	8009bfa <_free_r+0x22>
 8009c44:	d902      	bls.n	8009c4c <_free_r+0x74>
 8009c46:	230c      	movs	r3, #12
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	e7d6      	b.n	8009bfa <_free_r+0x22>
 8009c4c:	6820      	ldr	r0, [r4, #0]
 8009c4e:	1821      	adds	r1, r4, r0
 8009c50:	428b      	cmp	r3, r1
 8009c52:	bf04      	itt	eq
 8009c54:	6819      	ldreq	r1, [r3, #0]
 8009c56:	685b      	ldreq	r3, [r3, #4]
 8009c58:	6063      	str	r3, [r4, #4]
 8009c5a:	bf04      	itt	eq
 8009c5c:	1809      	addeq	r1, r1, r0
 8009c5e:	6021      	streq	r1, [r4, #0]
 8009c60:	6054      	str	r4, [r2, #4]
 8009c62:	e7ca      	b.n	8009bfa <_free_r+0x22>
 8009c64:	bd38      	pop	{r3, r4, r5, pc}
 8009c66:	bf00      	nop
 8009c68:	20005be4 	.word	0x20005be4

08009c6c <malloc>:
 8009c6c:	4b02      	ldr	r3, [pc, #8]	@ (8009c78 <malloc+0xc>)
 8009c6e:	4601      	mov	r1, r0
 8009c70:	6818      	ldr	r0, [r3, #0]
 8009c72:	f000 b825 	b.w	8009cc0 <_malloc_r>
 8009c76:	bf00      	nop
 8009c78:	20003698 	.word	0x20003698

08009c7c <sbrk_aligned>:
 8009c7c:	b570      	push	{r4, r5, r6, lr}
 8009c7e:	4e0f      	ldr	r6, [pc, #60]	@ (8009cbc <sbrk_aligned+0x40>)
 8009c80:	460c      	mov	r4, r1
 8009c82:	6831      	ldr	r1, [r6, #0]
 8009c84:	4605      	mov	r5, r0
 8009c86:	b911      	cbnz	r1, 8009c8e <sbrk_aligned+0x12>
 8009c88:	f000 fe46 	bl	800a918 <_sbrk_r>
 8009c8c:	6030      	str	r0, [r6, #0]
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4628      	mov	r0, r5
 8009c92:	f000 fe41 	bl	800a918 <_sbrk_r>
 8009c96:	1c43      	adds	r3, r0, #1
 8009c98:	d103      	bne.n	8009ca2 <sbrk_aligned+0x26>
 8009c9a:	f04f 34ff 	mov.w	r4, #4294967295
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	bd70      	pop	{r4, r5, r6, pc}
 8009ca2:	1cc4      	adds	r4, r0, #3
 8009ca4:	f024 0403 	bic.w	r4, r4, #3
 8009ca8:	42a0      	cmp	r0, r4
 8009caa:	d0f8      	beq.n	8009c9e <sbrk_aligned+0x22>
 8009cac:	1a21      	subs	r1, r4, r0
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 fe32 	bl	800a918 <_sbrk_r>
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d1f2      	bne.n	8009c9e <sbrk_aligned+0x22>
 8009cb8:	e7ef      	b.n	8009c9a <sbrk_aligned+0x1e>
 8009cba:	bf00      	nop
 8009cbc:	20005be0 	.word	0x20005be0

08009cc0 <_malloc_r>:
 8009cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cc4:	1ccd      	adds	r5, r1, #3
 8009cc6:	f025 0503 	bic.w	r5, r5, #3
 8009cca:	3508      	adds	r5, #8
 8009ccc:	2d0c      	cmp	r5, #12
 8009cce:	bf38      	it	cc
 8009cd0:	250c      	movcc	r5, #12
 8009cd2:	2d00      	cmp	r5, #0
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	db01      	blt.n	8009cdc <_malloc_r+0x1c>
 8009cd8:	42a9      	cmp	r1, r5
 8009cda:	d904      	bls.n	8009ce6 <_malloc_r+0x26>
 8009cdc:	230c      	movs	r3, #12
 8009cde:	6033      	str	r3, [r6, #0]
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ce6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009dbc <_malloc_r+0xfc>
 8009cea:	f000 f869 	bl	8009dc0 <__malloc_lock>
 8009cee:	f8d8 3000 	ldr.w	r3, [r8]
 8009cf2:	461c      	mov	r4, r3
 8009cf4:	bb44      	cbnz	r4, 8009d48 <_malloc_r+0x88>
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	f7ff ffbf 	bl	8009c7c <sbrk_aligned>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	4604      	mov	r4, r0
 8009d02:	d158      	bne.n	8009db6 <_malloc_r+0xf6>
 8009d04:	f8d8 4000 	ldr.w	r4, [r8]
 8009d08:	4627      	mov	r7, r4
 8009d0a:	2f00      	cmp	r7, #0
 8009d0c:	d143      	bne.n	8009d96 <_malloc_r+0xd6>
 8009d0e:	2c00      	cmp	r4, #0
 8009d10:	d04b      	beq.n	8009daa <_malloc_r+0xea>
 8009d12:	6823      	ldr	r3, [r4, #0]
 8009d14:	4639      	mov	r1, r7
 8009d16:	4630      	mov	r0, r6
 8009d18:	eb04 0903 	add.w	r9, r4, r3
 8009d1c:	f000 fdfc 	bl	800a918 <_sbrk_r>
 8009d20:	4581      	cmp	r9, r0
 8009d22:	d142      	bne.n	8009daa <_malloc_r+0xea>
 8009d24:	6821      	ldr	r1, [r4, #0]
 8009d26:	1a6d      	subs	r5, r5, r1
 8009d28:	4629      	mov	r1, r5
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	f7ff ffa6 	bl	8009c7c <sbrk_aligned>
 8009d30:	3001      	adds	r0, #1
 8009d32:	d03a      	beq.n	8009daa <_malloc_r+0xea>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	442b      	add	r3, r5
 8009d38:	6023      	str	r3, [r4, #0]
 8009d3a:	f8d8 3000 	ldr.w	r3, [r8]
 8009d3e:	685a      	ldr	r2, [r3, #4]
 8009d40:	bb62      	cbnz	r2, 8009d9c <_malloc_r+0xdc>
 8009d42:	f8c8 7000 	str.w	r7, [r8]
 8009d46:	e00f      	b.n	8009d68 <_malloc_r+0xa8>
 8009d48:	6822      	ldr	r2, [r4, #0]
 8009d4a:	1b52      	subs	r2, r2, r5
 8009d4c:	d420      	bmi.n	8009d90 <_malloc_r+0xd0>
 8009d4e:	2a0b      	cmp	r2, #11
 8009d50:	d917      	bls.n	8009d82 <_malloc_r+0xc2>
 8009d52:	1961      	adds	r1, r4, r5
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	6025      	str	r5, [r4, #0]
 8009d58:	bf18      	it	ne
 8009d5a:	6059      	strne	r1, [r3, #4]
 8009d5c:	6863      	ldr	r3, [r4, #4]
 8009d5e:	bf08      	it	eq
 8009d60:	f8c8 1000 	streq.w	r1, [r8]
 8009d64:	5162      	str	r2, [r4, r5]
 8009d66:	604b      	str	r3, [r1, #4]
 8009d68:	4630      	mov	r0, r6
 8009d6a:	f000 f82f 	bl	8009dcc <__malloc_unlock>
 8009d6e:	f104 000b 	add.w	r0, r4, #11
 8009d72:	1d23      	adds	r3, r4, #4
 8009d74:	f020 0007 	bic.w	r0, r0, #7
 8009d78:	1ac2      	subs	r2, r0, r3
 8009d7a:	bf1c      	itt	ne
 8009d7c:	1a1b      	subne	r3, r3, r0
 8009d7e:	50a3      	strne	r3, [r4, r2]
 8009d80:	e7af      	b.n	8009ce2 <_malloc_r+0x22>
 8009d82:	6862      	ldr	r2, [r4, #4]
 8009d84:	42a3      	cmp	r3, r4
 8009d86:	bf0c      	ite	eq
 8009d88:	f8c8 2000 	streq.w	r2, [r8]
 8009d8c:	605a      	strne	r2, [r3, #4]
 8009d8e:	e7eb      	b.n	8009d68 <_malloc_r+0xa8>
 8009d90:	4623      	mov	r3, r4
 8009d92:	6864      	ldr	r4, [r4, #4]
 8009d94:	e7ae      	b.n	8009cf4 <_malloc_r+0x34>
 8009d96:	463c      	mov	r4, r7
 8009d98:	687f      	ldr	r7, [r7, #4]
 8009d9a:	e7b6      	b.n	8009d0a <_malloc_r+0x4a>
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	42a3      	cmp	r3, r4
 8009da2:	d1fb      	bne.n	8009d9c <_malloc_r+0xdc>
 8009da4:	2300      	movs	r3, #0
 8009da6:	6053      	str	r3, [r2, #4]
 8009da8:	e7de      	b.n	8009d68 <_malloc_r+0xa8>
 8009daa:	230c      	movs	r3, #12
 8009dac:	6033      	str	r3, [r6, #0]
 8009dae:	4630      	mov	r0, r6
 8009db0:	f000 f80c 	bl	8009dcc <__malloc_unlock>
 8009db4:	e794      	b.n	8009ce0 <_malloc_r+0x20>
 8009db6:	6005      	str	r5, [r0, #0]
 8009db8:	e7d6      	b.n	8009d68 <_malloc_r+0xa8>
 8009dba:	bf00      	nop
 8009dbc:	20005be4 	.word	0x20005be4

08009dc0 <__malloc_lock>:
 8009dc0:	4801      	ldr	r0, [pc, #4]	@ (8009dc8 <__malloc_lock+0x8>)
 8009dc2:	f7ff b8ba 	b.w	8008f3a <__retarget_lock_acquire_recursive>
 8009dc6:	bf00      	nop
 8009dc8:	20005bdc 	.word	0x20005bdc

08009dcc <__malloc_unlock>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	@ (8009dd4 <__malloc_unlock+0x8>)
 8009dce:	f7ff b8b5 	b.w	8008f3c <__retarget_lock_release_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	20005bdc 	.word	0x20005bdc

08009dd8 <_Balloc>:
 8009dd8:	b570      	push	{r4, r5, r6, lr}
 8009dda:	69c6      	ldr	r6, [r0, #28]
 8009ddc:	4604      	mov	r4, r0
 8009dde:	460d      	mov	r5, r1
 8009de0:	b976      	cbnz	r6, 8009e00 <_Balloc+0x28>
 8009de2:	2010      	movs	r0, #16
 8009de4:	f7ff ff42 	bl	8009c6c <malloc>
 8009de8:	4602      	mov	r2, r0
 8009dea:	61e0      	str	r0, [r4, #28]
 8009dec:	b920      	cbnz	r0, 8009df8 <_Balloc+0x20>
 8009dee:	4b18      	ldr	r3, [pc, #96]	@ (8009e50 <_Balloc+0x78>)
 8009df0:	4818      	ldr	r0, [pc, #96]	@ (8009e54 <_Balloc+0x7c>)
 8009df2:	216b      	movs	r1, #107	@ 0x6b
 8009df4:	f000 fdae 	bl	800a954 <__assert_func>
 8009df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dfc:	6006      	str	r6, [r0, #0]
 8009dfe:	60c6      	str	r6, [r0, #12]
 8009e00:	69e6      	ldr	r6, [r4, #28]
 8009e02:	68f3      	ldr	r3, [r6, #12]
 8009e04:	b183      	cbz	r3, 8009e28 <_Balloc+0x50>
 8009e06:	69e3      	ldr	r3, [r4, #28]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e0e:	b9b8      	cbnz	r0, 8009e40 <_Balloc+0x68>
 8009e10:	2101      	movs	r1, #1
 8009e12:	fa01 f605 	lsl.w	r6, r1, r5
 8009e16:	1d72      	adds	r2, r6, #5
 8009e18:	0092      	lsls	r2, r2, #2
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f000 fdb8 	bl	800a990 <_calloc_r>
 8009e20:	b160      	cbz	r0, 8009e3c <_Balloc+0x64>
 8009e22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e26:	e00e      	b.n	8009e46 <_Balloc+0x6e>
 8009e28:	2221      	movs	r2, #33	@ 0x21
 8009e2a:	2104      	movs	r1, #4
 8009e2c:	4620      	mov	r0, r4
 8009e2e:	f000 fdaf 	bl	800a990 <_calloc_r>
 8009e32:	69e3      	ldr	r3, [r4, #28]
 8009e34:	60f0      	str	r0, [r6, #12]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d1e4      	bne.n	8009e06 <_Balloc+0x2e>
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	bd70      	pop	{r4, r5, r6, pc}
 8009e40:	6802      	ldr	r2, [r0, #0]
 8009e42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e46:	2300      	movs	r3, #0
 8009e48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e4c:	e7f7      	b.n	8009e3e <_Balloc+0x66>
 8009e4e:	bf00      	nop
 8009e50:	0800fd29 	.word	0x0800fd29
 8009e54:	0800fda9 	.word	0x0800fda9

08009e58 <_Bfree>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	69c6      	ldr	r6, [r0, #28]
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	b976      	cbnz	r6, 8009e80 <_Bfree+0x28>
 8009e62:	2010      	movs	r0, #16
 8009e64:	f7ff ff02 	bl	8009c6c <malloc>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	61e8      	str	r0, [r5, #28]
 8009e6c:	b920      	cbnz	r0, 8009e78 <_Bfree+0x20>
 8009e6e:	4b09      	ldr	r3, [pc, #36]	@ (8009e94 <_Bfree+0x3c>)
 8009e70:	4809      	ldr	r0, [pc, #36]	@ (8009e98 <_Bfree+0x40>)
 8009e72:	218f      	movs	r1, #143	@ 0x8f
 8009e74:	f000 fd6e 	bl	800a954 <__assert_func>
 8009e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e7c:	6006      	str	r6, [r0, #0]
 8009e7e:	60c6      	str	r6, [r0, #12]
 8009e80:	b13c      	cbz	r4, 8009e92 <_Bfree+0x3a>
 8009e82:	69eb      	ldr	r3, [r5, #28]
 8009e84:	6862      	ldr	r2, [r4, #4]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e8c:	6021      	str	r1, [r4, #0]
 8009e8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e92:	bd70      	pop	{r4, r5, r6, pc}
 8009e94:	0800fd29 	.word	0x0800fd29
 8009e98:	0800fda9 	.word	0x0800fda9

08009e9c <__multadd>:
 8009e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea0:	690d      	ldr	r5, [r1, #16]
 8009ea2:	4607      	mov	r7, r0
 8009ea4:	460c      	mov	r4, r1
 8009ea6:	461e      	mov	r6, r3
 8009ea8:	f101 0c14 	add.w	ip, r1, #20
 8009eac:	2000      	movs	r0, #0
 8009eae:	f8dc 3000 	ldr.w	r3, [ip]
 8009eb2:	b299      	uxth	r1, r3
 8009eb4:	fb02 6101 	mla	r1, r2, r1, r6
 8009eb8:	0c1e      	lsrs	r6, r3, #16
 8009eba:	0c0b      	lsrs	r3, r1, #16
 8009ebc:	fb02 3306 	mla	r3, r2, r6, r3
 8009ec0:	b289      	uxth	r1, r1
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ec8:	4285      	cmp	r5, r0
 8009eca:	f84c 1b04 	str.w	r1, [ip], #4
 8009ece:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ed2:	dcec      	bgt.n	8009eae <__multadd+0x12>
 8009ed4:	b30e      	cbz	r6, 8009f1a <__multadd+0x7e>
 8009ed6:	68a3      	ldr	r3, [r4, #8]
 8009ed8:	42ab      	cmp	r3, r5
 8009eda:	dc19      	bgt.n	8009f10 <__multadd+0x74>
 8009edc:	6861      	ldr	r1, [r4, #4]
 8009ede:	4638      	mov	r0, r7
 8009ee0:	3101      	adds	r1, #1
 8009ee2:	f7ff ff79 	bl	8009dd8 <_Balloc>
 8009ee6:	4680      	mov	r8, r0
 8009ee8:	b928      	cbnz	r0, 8009ef6 <__multadd+0x5a>
 8009eea:	4602      	mov	r2, r0
 8009eec:	4b0c      	ldr	r3, [pc, #48]	@ (8009f20 <__multadd+0x84>)
 8009eee:	480d      	ldr	r0, [pc, #52]	@ (8009f24 <__multadd+0x88>)
 8009ef0:	21ba      	movs	r1, #186	@ 0xba
 8009ef2:	f000 fd2f 	bl	800a954 <__assert_func>
 8009ef6:	6922      	ldr	r2, [r4, #16]
 8009ef8:	3202      	adds	r2, #2
 8009efa:	f104 010c 	add.w	r1, r4, #12
 8009efe:	0092      	lsls	r2, r2, #2
 8009f00:	300c      	adds	r0, #12
 8009f02:	f000 fd19 	bl	800a938 <memcpy>
 8009f06:	4621      	mov	r1, r4
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7ff ffa5 	bl	8009e58 <_Bfree>
 8009f0e:	4644      	mov	r4, r8
 8009f10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f14:	3501      	adds	r5, #1
 8009f16:	615e      	str	r6, [r3, #20]
 8009f18:	6125      	str	r5, [r4, #16]
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f20:	0800fd98 	.word	0x0800fd98
 8009f24:	0800fda9 	.word	0x0800fda9

08009f28 <__hi0bits>:
 8009f28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	bf36      	itet	cc
 8009f30:	0403      	lslcc	r3, r0, #16
 8009f32:	2000      	movcs	r0, #0
 8009f34:	2010      	movcc	r0, #16
 8009f36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f3a:	bf3c      	itt	cc
 8009f3c:	021b      	lslcc	r3, r3, #8
 8009f3e:	3008      	addcc	r0, #8
 8009f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f44:	bf3c      	itt	cc
 8009f46:	011b      	lslcc	r3, r3, #4
 8009f48:	3004      	addcc	r0, #4
 8009f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f4e:	bf3c      	itt	cc
 8009f50:	009b      	lslcc	r3, r3, #2
 8009f52:	3002      	addcc	r0, #2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	db05      	blt.n	8009f64 <__hi0bits+0x3c>
 8009f58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f5c:	f100 0001 	add.w	r0, r0, #1
 8009f60:	bf08      	it	eq
 8009f62:	2020      	moveq	r0, #32
 8009f64:	4770      	bx	lr

08009f66 <__lo0bits>:
 8009f66:	6803      	ldr	r3, [r0, #0]
 8009f68:	4602      	mov	r2, r0
 8009f6a:	f013 0007 	ands.w	r0, r3, #7
 8009f6e:	d00b      	beq.n	8009f88 <__lo0bits+0x22>
 8009f70:	07d9      	lsls	r1, r3, #31
 8009f72:	d421      	bmi.n	8009fb8 <__lo0bits+0x52>
 8009f74:	0798      	lsls	r0, r3, #30
 8009f76:	bf49      	itett	mi
 8009f78:	085b      	lsrmi	r3, r3, #1
 8009f7a:	089b      	lsrpl	r3, r3, #2
 8009f7c:	2001      	movmi	r0, #1
 8009f7e:	6013      	strmi	r3, [r2, #0]
 8009f80:	bf5c      	itt	pl
 8009f82:	6013      	strpl	r3, [r2, #0]
 8009f84:	2002      	movpl	r0, #2
 8009f86:	4770      	bx	lr
 8009f88:	b299      	uxth	r1, r3
 8009f8a:	b909      	cbnz	r1, 8009f90 <__lo0bits+0x2a>
 8009f8c:	0c1b      	lsrs	r3, r3, #16
 8009f8e:	2010      	movs	r0, #16
 8009f90:	b2d9      	uxtb	r1, r3
 8009f92:	b909      	cbnz	r1, 8009f98 <__lo0bits+0x32>
 8009f94:	3008      	adds	r0, #8
 8009f96:	0a1b      	lsrs	r3, r3, #8
 8009f98:	0719      	lsls	r1, r3, #28
 8009f9a:	bf04      	itt	eq
 8009f9c:	091b      	lsreq	r3, r3, #4
 8009f9e:	3004      	addeq	r0, #4
 8009fa0:	0799      	lsls	r1, r3, #30
 8009fa2:	bf04      	itt	eq
 8009fa4:	089b      	lsreq	r3, r3, #2
 8009fa6:	3002      	addeq	r0, #2
 8009fa8:	07d9      	lsls	r1, r3, #31
 8009faa:	d403      	bmi.n	8009fb4 <__lo0bits+0x4e>
 8009fac:	085b      	lsrs	r3, r3, #1
 8009fae:	f100 0001 	add.w	r0, r0, #1
 8009fb2:	d003      	beq.n	8009fbc <__lo0bits+0x56>
 8009fb4:	6013      	str	r3, [r2, #0]
 8009fb6:	4770      	bx	lr
 8009fb8:	2000      	movs	r0, #0
 8009fba:	4770      	bx	lr
 8009fbc:	2020      	movs	r0, #32
 8009fbe:	4770      	bx	lr

08009fc0 <__i2b>:
 8009fc0:	b510      	push	{r4, lr}
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	2101      	movs	r1, #1
 8009fc6:	f7ff ff07 	bl	8009dd8 <_Balloc>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	b928      	cbnz	r0, 8009fda <__i2b+0x1a>
 8009fce:	4b05      	ldr	r3, [pc, #20]	@ (8009fe4 <__i2b+0x24>)
 8009fd0:	4805      	ldr	r0, [pc, #20]	@ (8009fe8 <__i2b+0x28>)
 8009fd2:	f240 1145 	movw	r1, #325	@ 0x145
 8009fd6:	f000 fcbd 	bl	800a954 <__assert_func>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	6144      	str	r4, [r0, #20]
 8009fde:	6103      	str	r3, [r0, #16]
 8009fe0:	bd10      	pop	{r4, pc}
 8009fe2:	bf00      	nop
 8009fe4:	0800fd98 	.word	0x0800fd98
 8009fe8:	0800fda9 	.word	0x0800fda9

08009fec <__multiply>:
 8009fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	690a      	ldr	r2, [r1, #16]
 8009ff4:	6923      	ldr	r3, [r4, #16]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	bfa8      	it	ge
 8009ffa:	4623      	movge	r3, r4
 8009ffc:	460f      	mov	r7, r1
 8009ffe:	bfa4      	itt	ge
 800a000:	460c      	movge	r4, r1
 800a002:	461f      	movge	r7, r3
 800a004:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a008:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a00c:	68a3      	ldr	r3, [r4, #8]
 800a00e:	6861      	ldr	r1, [r4, #4]
 800a010:	eb0a 0609 	add.w	r6, sl, r9
 800a014:	42b3      	cmp	r3, r6
 800a016:	b085      	sub	sp, #20
 800a018:	bfb8      	it	lt
 800a01a:	3101      	addlt	r1, #1
 800a01c:	f7ff fedc 	bl	8009dd8 <_Balloc>
 800a020:	b930      	cbnz	r0, 800a030 <__multiply+0x44>
 800a022:	4602      	mov	r2, r0
 800a024:	4b44      	ldr	r3, [pc, #272]	@ (800a138 <__multiply+0x14c>)
 800a026:	4845      	ldr	r0, [pc, #276]	@ (800a13c <__multiply+0x150>)
 800a028:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a02c:	f000 fc92 	bl	800a954 <__assert_func>
 800a030:	f100 0514 	add.w	r5, r0, #20
 800a034:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a038:	462b      	mov	r3, r5
 800a03a:	2200      	movs	r2, #0
 800a03c:	4543      	cmp	r3, r8
 800a03e:	d321      	bcc.n	800a084 <__multiply+0x98>
 800a040:	f107 0114 	add.w	r1, r7, #20
 800a044:	f104 0214 	add.w	r2, r4, #20
 800a048:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a04c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a050:	9302      	str	r3, [sp, #8]
 800a052:	1b13      	subs	r3, r2, r4
 800a054:	3b15      	subs	r3, #21
 800a056:	f023 0303 	bic.w	r3, r3, #3
 800a05a:	3304      	adds	r3, #4
 800a05c:	f104 0715 	add.w	r7, r4, #21
 800a060:	42ba      	cmp	r2, r7
 800a062:	bf38      	it	cc
 800a064:	2304      	movcc	r3, #4
 800a066:	9301      	str	r3, [sp, #4]
 800a068:	9b02      	ldr	r3, [sp, #8]
 800a06a:	9103      	str	r1, [sp, #12]
 800a06c:	428b      	cmp	r3, r1
 800a06e:	d80c      	bhi.n	800a08a <__multiply+0x9e>
 800a070:	2e00      	cmp	r6, #0
 800a072:	dd03      	ble.n	800a07c <__multiply+0x90>
 800a074:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d05b      	beq.n	800a134 <__multiply+0x148>
 800a07c:	6106      	str	r6, [r0, #16]
 800a07e:	b005      	add	sp, #20
 800a080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a084:	f843 2b04 	str.w	r2, [r3], #4
 800a088:	e7d8      	b.n	800a03c <__multiply+0x50>
 800a08a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a08e:	f1ba 0f00 	cmp.w	sl, #0
 800a092:	d024      	beq.n	800a0de <__multiply+0xf2>
 800a094:	f104 0e14 	add.w	lr, r4, #20
 800a098:	46a9      	mov	r9, r5
 800a09a:	f04f 0c00 	mov.w	ip, #0
 800a09e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0a2:	f8d9 3000 	ldr.w	r3, [r9]
 800a0a6:	fa1f fb87 	uxth.w	fp, r7
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	fb0a 330b 	mla	r3, sl, fp, r3
 800a0b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a0b4:	f8d9 7000 	ldr.w	r7, [r9]
 800a0b8:	4463      	add	r3, ip
 800a0ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0be:	fb0a c70b 	mla	r7, sl, fp, ip
 800a0c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0cc:	4572      	cmp	r2, lr
 800a0ce:	f849 3b04 	str.w	r3, [r9], #4
 800a0d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0d6:	d8e2      	bhi.n	800a09e <__multiply+0xb2>
 800a0d8:	9b01      	ldr	r3, [sp, #4]
 800a0da:	f845 c003 	str.w	ip, [r5, r3]
 800a0de:	9b03      	ldr	r3, [sp, #12]
 800a0e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a0e4:	3104      	adds	r1, #4
 800a0e6:	f1b9 0f00 	cmp.w	r9, #0
 800a0ea:	d021      	beq.n	800a130 <__multiply+0x144>
 800a0ec:	682b      	ldr	r3, [r5, #0]
 800a0ee:	f104 0c14 	add.w	ip, r4, #20
 800a0f2:	46ae      	mov	lr, r5
 800a0f4:	f04f 0a00 	mov.w	sl, #0
 800a0f8:	f8bc b000 	ldrh.w	fp, [ip]
 800a0fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a100:	fb09 770b 	mla	r7, r9, fp, r7
 800a104:	4457      	add	r7, sl
 800a106:	b29b      	uxth	r3, r3
 800a108:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a10c:	f84e 3b04 	str.w	r3, [lr], #4
 800a110:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a114:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a118:	f8be 3000 	ldrh.w	r3, [lr]
 800a11c:	fb09 330a 	mla	r3, r9, sl, r3
 800a120:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a124:	4562      	cmp	r2, ip
 800a126:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a12a:	d8e5      	bhi.n	800a0f8 <__multiply+0x10c>
 800a12c:	9f01      	ldr	r7, [sp, #4]
 800a12e:	51eb      	str	r3, [r5, r7]
 800a130:	3504      	adds	r5, #4
 800a132:	e799      	b.n	800a068 <__multiply+0x7c>
 800a134:	3e01      	subs	r6, #1
 800a136:	e79b      	b.n	800a070 <__multiply+0x84>
 800a138:	0800fd98 	.word	0x0800fd98
 800a13c:	0800fda9 	.word	0x0800fda9

0800a140 <__pow5mult>:
 800a140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a144:	4615      	mov	r5, r2
 800a146:	f012 0203 	ands.w	r2, r2, #3
 800a14a:	4607      	mov	r7, r0
 800a14c:	460e      	mov	r6, r1
 800a14e:	d007      	beq.n	800a160 <__pow5mult+0x20>
 800a150:	4c25      	ldr	r4, [pc, #148]	@ (800a1e8 <__pow5mult+0xa8>)
 800a152:	3a01      	subs	r2, #1
 800a154:	2300      	movs	r3, #0
 800a156:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a15a:	f7ff fe9f 	bl	8009e9c <__multadd>
 800a15e:	4606      	mov	r6, r0
 800a160:	10ad      	asrs	r5, r5, #2
 800a162:	d03d      	beq.n	800a1e0 <__pow5mult+0xa0>
 800a164:	69fc      	ldr	r4, [r7, #28]
 800a166:	b97c      	cbnz	r4, 800a188 <__pow5mult+0x48>
 800a168:	2010      	movs	r0, #16
 800a16a:	f7ff fd7f 	bl	8009c6c <malloc>
 800a16e:	4602      	mov	r2, r0
 800a170:	61f8      	str	r0, [r7, #28]
 800a172:	b928      	cbnz	r0, 800a180 <__pow5mult+0x40>
 800a174:	4b1d      	ldr	r3, [pc, #116]	@ (800a1ec <__pow5mult+0xac>)
 800a176:	481e      	ldr	r0, [pc, #120]	@ (800a1f0 <__pow5mult+0xb0>)
 800a178:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a17c:	f000 fbea 	bl	800a954 <__assert_func>
 800a180:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a184:	6004      	str	r4, [r0, #0]
 800a186:	60c4      	str	r4, [r0, #12]
 800a188:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a18c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a190:	b94c      	cbnz	r4, 800a1a6 <__pow5mult+0x66>
 800a192:	f240 2171 	movw	r1, #625	@ 0x271
 800a196:	4638      	mov	r0, r7
 800a198:	f7ff ff12 	bl	8009fc0 <__i2b>
 800a19c:	2300      	movs	r3, #0
 800a19e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	6003      	str	r3, [r0, #0]
 800a1a6:	f04f 0900 	mov.w	r9, #0
 800a1aa:	07eb      	lsls	r3, r5, #31
 800a1ac:	d50a      	bpl.n	800a1c4 <__pow5mult+0x84>
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4622      	mov	r2, r4
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	f7ff ff1a 	bl	8009fec <__multiply>
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4680      	mov	r8, r0
 800a1bc:	4638      	mov	r0, r7
 800a1be:	f7ff fe4b 	bl	8009e58 <_Bfree>
 800a1c2:	4646      	mov	r6, r8
 800a1c4:	106d      	asrs	r5, r5, #1
 800a1c6:	d00b      	beq.n	800a1e0 <__pow5mult+0xa0>
 800a1c8:	6820      	ldr	r0, [r4, #0]
 800a1ca:	b938      	cbnz	r0, 800a1dc <__pow5mult+0x9c>
 800a1cc:	4622      	mov	r2, r4
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	f7ff ff0b 	bl	8009fec <__multiply>
 800a1d6:	6020      	str	r0, [r4, #0]
 800a1d8:	f8c0 9000 	str.w	r9, [r0]
 800a1dc:	4604      	mov	r4, r0
 800a1de:	e7e4      	b.n	800a1aa <__pow5mult+0x6a>
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1e6:	bf00      	nop
 800a1e8:	0800fe04 	.word	0x0800fe04
 800a1ec:	0800fd29 	.word	0x0800fd29
 800a1f0:	0800fda9 	.word	0x0800fda9

0800a1f4 <__lshift>:
 800a1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f8:	460c      	mov	r4, r1
 800a1fa:	6849      	ldr	r1, [r1, #4]
 800a1fc:	6923      	ldr	r3, [r4, #16]
 800a1fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a202:	68a3      	ldr	r3, [r4, #8]
 800a204:	4607      	mov	r7, r0
 800a206:	4691      	mov	r9, r2
 800a208:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a20c:	f108 0601 	add.w	r6, r8, #1
 800a210:	42b3      	cmp	r3, r6
 800a212:	db0b      	blt.n	800a22c <__lshift+0x38>
 800a214:	4638      	mov	r0, r7
 800a216:	f7ff fddf 	bl	8009dd8 <_Balloc>
 800a21a:	4605      	mov	r5, r0
 800a21c:	b948      	cbnz	r0, 800a232 <__lshift+0x3e>
 800a21e:	4602      	mov	r2, r0
 800a220:	4b28      	ldr	r3, [pc, #160]	@ (800a2c4 <__lshift+0xd0>)
 800a222:	4829      	ldr	r0, [pc, #164]	@ (800a2c8 <__lshift+0xd4>)
 800a224:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a228:	f000 fb94 	bl	800a954 <__assert_func>
 800a22c:	3101      	adds	r1, #1
 800a22e:	005b      	lsls	r3, r3, #1
 800a230:	e7ee      	b.n	800a210 <__lshift+0x1c>
 800a232:	2300      	movs	r3, #0
 800a234:	f100 0114 	add.w	r1, r0, #20
 800a238:	f100 0210 	add.w	r2, r0, #16
 800a23c:	4618      	mov	r0, r3
 800a23e:	4553      	cmp	r3, sl
 800a240:	db33      	blt.n	800a2aa <__lshift+0xb6>
 800a242:	6920      	ldr	r0, [r4, #16]
 800a244:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a248:	f104 0314 	add.w	r3, r4, #20
 800a24c:	f019 091f 	ands.w	r9, r9, #31
 800a250:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a254:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a258:	d02b      	beq.n	800a2b2 <__lshift+0xbe>
 800a25a:	f1c9 0e20 	rsb	lr, r9, #32
 800a25e:	468a      	mov	sl, r1
 800a260:	2200      	movs	r2, #0
 800a262:	6818      	ldr	r0, [r3, #0]
 800a264:	fa00 f009 	lsl.w	r0, r0, r9
 800a268:	4310      	orrs	r0, r2
 800a26a:	f84a 0b04 	str.w	r0, [sl], #4
 800a26e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a272:	459c      	cmp	ip, r3
 800a274:	fa22 f20e 	lsr.w	r2, r2, lr
 800a278:	d8f3      	bhi.n	800a262 <__lshift+0x6e>
 800a27a:	ebac 0304 	sub.w	r3, ip, r4
 800a27e:	3b15      	subs	r3, #21
 800a280:	f023 0303 	bic.w	r3, r3, #3
 800a284:	3304      	adds	r3, #4
 800a286:	f104 0015 	add.w	r0, r4, #21
 800a28a:	4584      	cmp	ip, r0
 800a28c:	bf38      	it	cc
 800a28e:	2304      	movcc	r3, #4
 800a290:	50ca      	str	r2, [r1, r3]
 800a292:	b10a      	cbz	r2, 800a298 <__lshift+0xa4>
 800a294:	f108 0602 	add.w	r6, r8, #2
 800a298:	3e01      	subs	r6, #1
 800a29a:	4638      	mov	r0, r7
 800a29c:	612e      	str	r6, [r5, #16]
 800a29e:	4621      	mov	r1, r4
 800a2a0:	f7ff fdda 	bl	8009e58 <_Bfree>
 800a2a4:	4628      	mov	r0, r5
 800a2a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	e7c5      	b.n	800a23e <__lshift+0x4a>
 800a2b2:	3904      	subs	r1, #4
 800a2b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2bc:	459c      	cmp	ip, r3
 800a2be:	d8f9      	bhi.n	800a2b4 <__lshift+0xc0>
 800a2c0:	e7ea      	b.n	800a298 <__lshift+0xa4>
 800a2c2:	bf00      	nop
 800a2c4:	0800fd98 	.word	0x0800fd98
 800a2c8:	0800fda9 	.word	0x0800fda9

0800a2cc <__mcmp>:
 800a2cc:	690a      	ldr	r2, [r1, #16]
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	6900      	ldr	r0, [r0, #16]
 800a2d2:	1a80      	subs	r0, r0, r2
 800a2d4:	b530      	push	{r4, r5, lr}
 800a2d6:	d10e      	bne.n	800a2f6 <__mcmp+0x2a>
 800a2d8:	3314      	adds	r3, #20
 800a2da:	3114      	adds	r1, #20
 800a2dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a2e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2ec:	4295      	cmp	r5, r2
 800a2ee:	d003      	beq.n	800a2f8 <__mcmp+0x2c>
 800a2f0:	d205      	bcs.n	800a2fe <__mcmp+0x32>
 800a2f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f6:	bd30      	pop	{r4, r5, pc}
 800a2f8:	42a3      	cmp	r3, r4
 800a2fa:	d3f3      	bcc.n	800a2e4 <__mcmp+0x18>
 800a2fc:	e7fb      	b.n	800a2f6 <__mcmp+0x2a>
 800a2fe:	2001      	movs	r0, #1
 800a300:	e7f9      	b.n	800a2f6 <__mcmp+0x2a>
	...

0800a304 <__mdiff>:
 800a304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	4689      	mov	r9, r1
 800a30a:	4606      	mov	r6, r0
 800a30c:	4611      	mov	r1, r2
 800a30e:	4648      	mov	r0, r9
 800a310:	4614      	mov	r4, r2
 800a312:	f7ff ffdb 	bl	800a2cc <__mcmp>
 800a316:	1e05      	subs	r5, r0, #0
 800a318:	d112      	bne.n	800a340 <__mdiff+0x3c>
 800a31a:	4629      	mov	r1, r5
 800a31c:	4630      	mov	r0, r6
 800a31e:	f7ff fd5b 	bl	8009dd8 <_Balloc>
 800a322:	4602      	mov	r2, r0
 800a324:	b928      	cbnz	r0, 800a332 <__mdiff+0x2e>
 800a326:	4b3f      	ldr	r3, [pc, #252]	@ (800a424 <__mdiff+0x120>)
 800a328:	f240 2137 	movw	r1, #567	@ 0x237
 800a32c:	483e      	ldr	r0, [pc, #248]	@ (800a428 <__mdiff+0x124>)
 800a32e:	f000 fb11 	bl	800a954 <__assert_func>
 800a332:	2301      	movs	r3, #1
 800a334:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a338:	4610      	mov	r0, r2
 800a33a:	b003      	add	sp, #12
 800a33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a340:	bfbc      	itt	lt
 800a342:	464b      	movlt	r3, r9
 800a344:	46a1      	movlt	r9, r4
 800a346:	4630      	mov	r0, r6
 800a348:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a34c:	bfba      	itte	lt
 800a34e:	461c      	movlt	r4, r3
 800a350:	2501      	movlt	r5, #1
 800a352:	2500      	movge	r5, #0
 800a354:	f7ff fd40 	bl	8009dd8 <_Balloc>
 800a358:	4602      	mov	r2, r0
 800a35a:	b918      	cbnz	r0, 800a364 <__mdiff+0x60>
 800a35c:	4b31      	ldr	r3, [pc, #196]	@ (800a424 <__mdiff+0x120>)
 800a35e:	f240 2145 	movw	r1, #581	@ 0x245
 800a362:	e7e3      	b.n	800a32c <__mdiff+0x28>
 800a364:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a368:	6926      	ldr	r6, [r4, #16]
 800a36a:	60c5      	str	r5, [r0, #12]
 800a36c:	f109 0310 	add.w	r3, r9, #16
 800a370:	f109 0514 	add.w	r5, r9, #20
 800a374:	f104 0e14 	add.w	lr, r4, #20
 800a378:	f100 0b14 	add.w	fp, r0, #20
 800a37c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a380:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a384:	9301      	str	r3, [sp, #4]
 800a386:	46d9      	mov	r9, fp
 800a388:	f04f 0c00 	mov.w	ip, #0
 800a38c:	9b01      	ldr	r3, [sp, #4]
 800a38e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a392:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a396:	9301      	str	r3, [sp, #4]
 800a398:	fa1f f38a 	uxth.w	r3, sl
 800a39c:	4619      	mov	r1, r3
 800a39e:	b283      	uxth	r3, r0
 800a3a0:	1acb      	subs	r3, r1, r3
 800a3a2:	0c00      	lsrs	r0, r0, #16
 800a3a4:	4463      	add	r3, ip
 800a3a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a3aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a3b4:	4576      	cmp	r6, lr
 800a3b6:	f849 3b04 	str.w	r3, [r9], #4
 800a3ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3be:	d8e5      	bhi.n	800a38c <__mdiff+0x88>
 800a3c0:	1b33      	subs	r3, r6, r4
 800a3c2:	3b15      	subs	r3, #21
 800a3c4:	f023 0303 	bic.w	r3, r3, #3
 800a3c8:	3415      	adds	r4, #21
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	42a6      	cmp	r6, r4
 800a3ce:	bf38      	it	cc
 800a3d0:	2304      	movcc	r3, #4
 800a3d2:	441d      	add	r5, r3
 800a3d4:	445b      	add	r3, fp
 800a3d6:	461e      	mov	r6, r3
 800a3d8:	462c      	mov	r4, r5
 800a3da:	4544      	cmp	r4, r8
 800a3dc:	d30e      	bcc.n	800a3fc <__mdiff+0xf8>
 800a3de:	f108 0103 	add.w	r1, r8, #3
 800a3e2:	1b49      	subs	r1, r1, r5
 800a3e4:	f021 0103 	bic.w	r1, r1, #3
 800a3e8:	3d03      	subs	r5, #3
 800a3ea:	45a8      	cmp	r8, r5
 800a3ec:	bf38      	it	cc
 800a3ee:	2100      	movcc	r1, #0
 800a3f0:	440b      	add	r3, r1
 800a3f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3f6:	b191      	cbz	r1, 800a41e <__mdiff+0x11a>
 800a3f8:	6117      	str	r7, [r2, #16]
 800a3fa:	e79d      	b.n	800a338 <__mdiff+0x34>
 800a3fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a400:	46e6      	mov	lr, ip
 800a402:	0c08      	lsrs	r0, r1, #16
 800a404:	fa1c fc81 	uxtah	ip, ip, r1
 800a408:	4471      	add	r1, lr
 800a40a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a40e:	b289      	uxth	r1, r1
 800a410:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a414:	f846 1b04 	str.w	r1, [r6], #4
 800a418:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a41c:	e7dd      	b.n	800a3da <__mdiff+0xd6>
 800a41e:	3f01      	subs	r7, #1
 800a420:	e7e7      	b.n	800a3f2 <__mdiff+0xee>
 800a422:	bf00      	nop
 800a424:	0800fd98 	.word	0x0800fd98
 800a428:	0800fda9 	.word	0x0800fda9

0800a42c <__d2b>:
 800a42c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a430:	460f      	mov	r7, r1
 800a432:	2101      	movs	r1, #1
 800a434:	ec59 8b10 	vmov	r8, r9, d0
 800a438:	4616      	mov	r6, r2
 800a43a:	f7ff fccd 	bl	8009dd8 <_Balloc>
 800a43e:	4604      	mov	r4, r0
 800a440:	b930      	cbnz	r0, 800a450 <__d2b+0x24>
 800a442:	4602      	mov	r2, r0
 800a444:	4b23      	ldr	r3, [pc, #140]	@ (800a4d4 <__d2b+0xa8>)
 800a446:	4824      	ldr	r0, [pc, #144]	@ (800a4d8 <__d2b+0xac>)
 800a448:	f240 310f 	movw	r1, #783	@ 0x30f
 800a44c:	f000 fa82 	bl	800a954 <__assert_func>
 800a450:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a454:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a458:	b10d      	cbz	r5, 800a45e <__d2b+0x32>
 800a45a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a45e:	9301      	str	r3, [sp, #4]
 800a460:	f1b8 0300 	subs.w	r3, r8, #0
 800a464:	d023      	beq.n	800a4ae <__d2b+0x82>
 800a466:	4668      	mov	r0, sp
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	f7ff fd7c 	bl	8009f66 <__lo0bits>
 800a46e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a472:	b1d0      	cbz	r0, 800a4aa <__d2b+0x7e>
 800a474:	f1c0 0320 	rsb	r3, r0, #32
 800a478:	fa02 f303 	lsl.w	r3, r2, r3
 800a47c:	430b      	orrs	r3, r1
 800a47e:	40c2      	lsrs	r2, r0
 800a480:	6163      	str	r3, [r4, #20]
 800a482:	9201      	str	r2, [sp, #4]
 800a484:	9b01      	ldr	r3, [sp, #4]
 800a486:	61a3      	str	r3, [r4, #24]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	bf0c      	ite	eq
 800a48c:	2201      	moveq	r2, #1
 800a48e:	2202      	movne	r2, #2
 800a490:	6122      	str	r2, [r4, #16]
 800a492:	b1a5      	cbz	r5, 800a4be <__d2b+0x92>
 800a494:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a498:	4405      	add	r5, r0
 800a49a:	603d      	str	r5, [r7, #0]
 800a49c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a4a0:	6030      	str	r0, [r6, #0]
 800a4a2:	4620      	mov	r0, r4
 800a4a4:	b003      	add	sp, #12
 800a4a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4aa:	6161      	str	r1, [r4, #20]
 800a4ac:	e7ea      	b.n	800a484 <__d2b+0x58>
 800a4ae:	a801      	add	r0, sp, #4
 800a4b0:	f7ff fd59 	bl	8009f66 <__lo0bits>
 800a4b4:	9b01      	ldr	r3, [sp, #4]
 800a4b6:	6163      	str	r3, [r4, #20]
 800a4b8:	3020      	adds	r0, #32
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	e7e8      	b.n	800a490 <__d2b+0x64>
 800a4be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a4c6:	6038      	str	r0, [r7, #0]
 800a4c8:	6918      	ldr	r0, [r3, #16]
 800a4ca:	f7ff fd2d 	bl	8009f28 <__hi0bits>
 800a4ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a4d2:	e7e5      	b.n	800a4a0 <__d2b+0x74>
 800a4d4:	0800fd98 	.word	0x0800fd98
 800a4d8:	0800fda9 	.word	0x0800fda9

0800a4dc <__ssputs_r>:
 800a4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4e0:	688e      	ldr	r6, [r1, #8]
 800a4e2:	461f      	mov	r7, r3
 800a4e4:	42be      	cmp	r6, r7
 800a4e6:	680b      	ldr	r3, [r1, #0]
 800a4e8:	4682      	mov	sl, r0
 800a4ea:	460c      	mov	r4, r1
 800a4ec:	4690      	mov	r8, r2
 800a4ee:	d82d      	bhi.n	800a54c <__ssputs_r+0x70>
 800a4f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a4f8:	d026      	beq.n	800a548 <__ssputs_r+0x6c>
 800a4fa:	6965      	ldr	r5, [r4, #20]
 800a4fc:	6909      	ldr	r1, [r1, #16]
 800a4fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a502:	eba3 0901 	sub.w	r9, r3, r1
 800a506:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a50a:	1c7b      	adds	r3, r7, #1
 800a50c:	444b      	add	r3, r9
 800a50e:	106d      	asrs	r5, r5, #1
 800a510:	429d      	cmp	r5, r3
 800a512:	bf38      	it	cc
 800a514:	461d      	movcc	r5, r3
 800a516:	0553      	lsls	r3, r2, #21
 800a518:	d527      	bpl.n	800a56a <__ssputs_r+0x8e>
 800a51a:	4629      	mov	r1, r5
 800a51c:	f7ff fbd0 	bl	8009cc0 <_malloc_r>
 800a520:	4606      	mov	r6, r0
 800a522:	b360      	cbz	r0, 800a57e <__ssputs_r+0xa2>
 800a524:	6921      	ldr	r1, [r4, #16]
 800a526:	464a      	mov	r2, r9
 800a528:	f000 fa06 	bl	800a938 <memcpy>
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	6126      	str	r6, [r4, #16]
 800a53a:	6165      	str	r5, [r4, #20]
 800a53c:	444e      	add	r6, r9
 800a53e:	eba5 0509 	sub.w	r5, r5, r9
 800a542:	6026      	str	r6, [r4, #0]
 800a544:	60a5      	str	r5, [r4, #8]
 800a546:	463e      	mov	r6, r7
 800a548:	42be      	cmp	r6, r7
 800a54a:	d900      	bls.n	800a54e <__ssputs_r+0x72>
 800a54c:	463e      	mov	r6, r7
 800a54e:	6820      	ldr	r0, [r4, #0]
 800a550:	4632      	mov	r2, r6
 800a552:	4641      	mov	r1, r8
 800a554:	f000 f9c6 	bl	800a8e4 <memmove>
 800a558:	68a3      	ldr	r3, [r4, #8]
 800a55a:	1b9b      	subs	r3, r3, r6
 800a55c:	60a3      	str	r3, [r4, #8]
 800a55e:	6823      	ldr	r3, [r4, #0]
 800a560:	4433      	add	r3, r6
 800a562:	6023      	str	r3, [r4, #0]
 800a564:	2000      	movs	r0, #0
 800a566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a56a:	462a      	mov	r2, r5
 800a56c:	f000 fa36 	bl	800a9dc <_realloc_r>
 800a570:	4606      	mov	r6, r0
 800a572:	2800      	cmp	r0, #0
 800a574:	d1e0      	bne.n	800a538 <__ssputs_r+0x5c>
 800a576:	6921      	ldr	r1, [r4, #16]
 800a578:	4650      	mov	r0, sl
 800a57a:	f7ff fb2d 	bl	8009bd8 <_free_r>
 800a57e:	230c      	movs	r3, #12
 800a580:	f8ca 3000 	str.w	r3, [sl]
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a58a:	81a3      	strh	r3, [r4, #12]
 800a58c:	f04f 30ff 	mov.w	r0, #4294967295
 800a590:	e7e9      	b.n	800a566 <__ssputs_r+0x8a>
	...

0800a594 <_svfiprintf_r>:
 800a594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a598:	4698      	mov	r8, r3
 800a59a:	898b      	ldrh	r3, [r1, #12]
 800a59c:	061b      	lsls	r3, r3, #24
 800a59e:	b09d      	sub	sp, #116	@ 0x74
 800a5a0:	4607      	mov	r7, r0
 800a5a2:	460d      	mov	r5, r1
 800a5a4:	4614      	mov	r4, r2
 800a5a6:	d510      	bpl.n	800a5ca <_svfiprintf_r+0x36>
 800a5a8:	690b      	ldr	r3, [r1, #16]
 800a5aa:	b973      	cbnz	r3, 800a5ca <_svfiprintf_r+0x36>
 800a5ac:	2140      	movs	r1, #64	@ 0x40
 800a5ae:	f7ff fb87 	bl	8009cc0 <_malloc_r>
 800a5b2:	6028      	str	r0, [r5, #0]
 800a5b4:	6128      	str	r0, [r5, #16]
 800a5b6:	b930      	cbnz	r0, 800a5c6 <_svfiprintf_r+0x32>
 800a5b8:	230c      	movs	r3, #12
 800a5ba:	603b      	str	r3, [r7, #0]
 800a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c0:	b01d      	add	sp, #116	@ 0x74
 800a5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c6:	2340      	movs	r3, #64	@ 0x40
 800a5c8:	616b      	str	r3, [r5, #20]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5ce:	2320      	movs	r3, #32
 800a5d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5d8:	2330      	movs	r3, #48	@ 0x30
 800a5da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a778 <_svfiprintf_r+0x1e4>
 800a5de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5e2:	f04f 0901 	mov.w	r9, #1
 800a5e6:	4623      	mov	r3, r4
 800a5e8:	469a      	mov	sl, r3
 800a5ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ee:	b10a      	cbz	r2, 800a5f4 <_svfiprintf_r+0x60>
 800a5f0:	2a25      	cmp	r2, #37	@ 0x25
 800a5f2:	d1f9      	bne.n	800a5e8 <_svfiprintf_r+0x54>
 800a5f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a5f8:	d00b      	beq.n	800a612 <_svfiprintf_r+0x7e>
 800a5fa:	465b      	mov	r3, fp
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	4629      	mov	r1, r5
 800a600:	4638      	mov	r0, r7
 800a602:	f7ff ff6b 	bl	800a4dc <__ssputs_r>
 800a606:	3001      	adds	r0, #1
 800a608:	f000 80a7 	beq.w	800a75a <_svfiprintf_r+0x1c6>
 800a60c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a60e:	445a      	add	r2, fp
 800a610:	9209      	str	r2, [sp, #36]	@ 0x24
 800a612:	f89a 3000 	ldrb.w	r3, [sl]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 809f 	beq.w	800a75a <_svfiprintf_r+0x1c6>
 800a61c:	2300      	movs	r3, #0
 800a61e:	f04f 32ff 	mov.w	r2, #4294967295
 800a622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a626:	f10a 0a01 	add.w	sl, sl, #1
 800a62a:	9304      	str	r3, [sp, #16]
 800a62c:	9307      	str	r3, [sp, #28]
 800a62e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a632:	931a      	str	r3, [sp, #104]	@ 0x68
 800a634:	4654      	mov	r4, sl
 800a636:	2205      	movs	r2, #5
 800a638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63c:	484e      	ldr	r0, [pc, #312]	@ (800a778 <_svfiprintf_r+0x1e4>)
 800a63e:	f7f5 fdf7 	bl	8000230 <memchr>
 800a642:	9a04      	ldr	r2, [sp, #16]
 800a644:	b9d8      	cbnz	r0, 800a67e <_svfiprintf_r+0xea>
 800a646:	06d0      	lsls	r0, r2, #27
 800a648:	bf44      	itt	mi
 800a64a:	2320      	movmi	r3, #32
 800a64c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a650:	0711      	lsls	r1, r2, #28
 800a652:	bf44      	itt	mi
 800a654:	232b      	movmi	r3, #43	@ 0x2b
 800a656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a65a:	f89a 3000 	ldrb.w	r3, [sl]
 800a65e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a660:	d015      	beq.n	800a68e <_svfiprintf_r+0xfa>
 800a662:	9a07      	ldr	r2, [sp, #28]
 800a664:	4654      	mov	r4, sl
 800a666:	2000      	movs	r0, #0
 800a668:	f04f 0c0a 	mov.w	ip, #10
 800a66c:	4621      	mov	r1, r4
 800a66e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a672:	3b30      	subs	r3, #48	@ 0x30
 800a674:	2b09      	cmp	r3, #9
 800a676:	d94b      	bls.n	800a710 <_svfiprintf_r+0x17c>
 800a678:	b1b0      	cbz	r0, 800a6a8 <_svfiprintf_r+0x114>
 800a67a:	9207      	str	r2, [sp, #28]
 800a67c:	e014      	b.n	800a6a8 <_svfiprintf_r+0x114>
 800a67e:	eba0 0308 	sub.w	r3, r0, r8
 800a682:	fa09 f303 	lsl.w	r3, r9, r3
 800a686:	4313      	orrs	r3, r2
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	46a2      	mov	sl, r4
 800a68c:	e7d2      	b.n	800a634 <_svfiprintf_r+0xa0>
 800a68e:	9b03      	ldr	r3, [sp, #12]
 800a690:	1d19      	adds	r1, r3, #4
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	9103      	str	r1, [sp, #12]
 800a696:	2b00      	cmp	r3, #0
 800a698:	bfbb      	ittet	lt
 800a69a:	425b      	neglt	r3, r3
 800a69c:	f042 0202 	orrlt.w	r2, r2, #2
 800a6a0:	9307      	strge	r3, [sp, #28]
 800a6a2:	9307      	strlt	r3, [sp, #28]
 800a6a4:	bfb8      	it	lt
 800a6a6:	9204      	strlt	r2, [sp, #16]
 800a6a8:	7823      	ldrb	r3, [r4, #0]
 800a6aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6ac:	d10a      	bne.n	800a6c4 <_svfiprintf_r+0x130>
 800a6ae:	7863      	ldrb	r3, [r4, #1]
 800a6b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6b2:	d132      	bne.n	800a71a <_svfiprintf_r+0x186>
 800a6b4:	9b03      	ldr	r3, [sp, #12]
 800a6b6:	1d1a      	adds	r2, r3, #4
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	9203      	str	r2, [sp, #12]
 800a6bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6c0:	3402      	adds	r4, #2
 800a6c2:	9305      	str	r3, [sp, #20]
 800a6c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a788 <_svfiprintf_r+0x1f4>
 800a6c8:	7821      	ldrb	r1, [r4, #0]
 800a6ca:	2203      	movs	r2, #3
 800a6cc:	4650      	mov	r0, sl
 800a6ce:	f7f5 fdaf 	bl	8000230 <memchr>
 800a6d2:	b138      	cbz	r0, 800a6e4 <_svfiprintf_r+0x150>
 800a6d4:	9b04      	ldr	r3, [sp, #16]
 800a6d6:	eba0 000a 	sub.w	r0, r0, sl
 800a6da:	2240      	movs	r2, #64	@ 0x40
 800a6dc:	4082      	lsls	r2, r0
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	3401      	adds	r4, #1
 800a6e2:	9304      	str	r3, [sp, #16]
 800a6e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6e8:	4824      	ldr	r0, [pc, #144]	@ (800a77c <_svfiprintf_r+0x1e8>)
 800a6ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6ee:	2206      	movs	r2, #6
 800a6f0:	f7f5 fd9e 	bl	8000230 <memchr>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d036      	beq.n	800a766 <_svfiprintf_r+0x1d2>
 800a6f8:	4b21      	ldr	r3, [pc, #132]	@ (800a780 <_svfiprintf_r+0x1ec>)
 800a6fa:	bb1b      	cbnz	r3, 800a744 <_svfiprintf_r+0x1b0>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
 800a6fe:	3307      	adds	r3, #7
 800a700:	f023 0307 	bic.w	r3, r3, #7
 800a704:	3308      	adds	r3, #8
 800a706:	9303      	str	r3, [sp, #12]
 800a708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a70a:	4433      	add	r3, r6
 800a70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a70e:	e76a      	b.n	800a5e6 <_svfiprintf_r+0x52>
 800a710:	fb0c 3202 	mla	r2, ip, r2, r3
 800a714:	460c      	mov	r4, r1
 800a716:	2001      	movs	r0, #1
 800a718:	e7a8      	b.n	800a66c <_svfiprintf_r+0xd8>
 800a71a:	2300      	movs	r3, #0
 800a71c:	3401      	adds	r4, #1
 800a71e:	9305      	str	r3, [sp, #20]
 800a720:	4619      	mov	r1, r3
 800a722:	f04f 0c0a 	mov.w	ip, #10
 800a726:	4620      	mov	r0, r4
 800a728:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a72c:	3a30      	subs	r2, #48	@ 0x30
 800a72e:	2a09      	cmp	r2, #9
 800a730:	d903      	bls.n	800a73a <_svfiprintf_r+0x1a6>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d0c6      	beq.n	800a6c4 <_svfiprintf_r+0x130>
 800a736:	9105      	str	r1, [sp, #20]
 800a738:	e7c4      	b.n	800a6c4 <_svfiprintf_r+0x130>
 800a73a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a73e:	4604      	mov	r4, r0
 800a740:	2301      	movs	r3, #1
 800a742:	e7f0      	b.n	800a726 <_svfiprintf_r+0x192>
 800a744:	ab03      	add	r3, sp, #12
 800a746:	9300      	str	r3, [sp, #0]
 800a748:	462a      	mov	r2, r5
 800a74a:	4b0e      	ldr	r3, [pc, #56]	@ (800a784 <_svfiprintf_r+0x1f0>)
 800a74c:	a904      	add	r1, sp, #16
 800a74e:	4638      	mov	r0, r7
 800a750:	f7fd fe98 	bl	8008484 <_printf_float>
 800a754:	1c42      	adds	r2, r0, #1
 800a756:	4606      	mov	r6, r0
 800a758:	d1d6      	bne.n	800a708 <_svfiprintf_r+0x174>
 800a75a:	89ab      	ldrh	r3, [r5, #12]
 800a75c:	065b      	lsls	r3, r3, #25
 800a75e:	f53f af2d 	bmi.w	800a5bc <_svfiprintf_r+0x28>
 800a762:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a764:	e72c      	b.n	800a5c0 <_svfiprintf_r+0x2c>
 800a766:	ab03      	add	r3, sp, #12
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	462a      	mov	r2, r5
 800a76c:	4b05      	ldr	r3, [pc, #20]	@ (800a784 <_svfiprintf_r+0x1f0>)
 800a76e:	a904      	add	r1, sp, #16
 800a770:	4638      	mov	r0, r7
 800a772:	f7fe f91f 	bl	80089b4 <_printf_i>
 800a776:	e7ed      	b.n	800a754 <_svfiprintf_r+0x1c0>
 800a778:	0800ff00 	.word	0x0800ff00
 800a77c:	0800ff0a 	.word	0x0800ff0a
 800a780:	08008485 	.word	0x08008485
 800a784:	0800a4dd 	.word	0x0800a4dd
 800a788:	0800ff06 	.word	0x0800ff06

0800a78c <__sflush_r>:
 800a78c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a794:	0716      	lsls	r6, r2, #28
 800a796:	4605      	mov	r5, r0
 800a798:	460c      	mov	r4, r1
 800a79a:	d454      	bmi.n	800a846 <__sflush_r+0xba>
 800a79c:	684b      	ldr	r3, [r1, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	dc02      	bgt.n	800a7a8 <__sflush_r+0x1c>
 800a7a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dd48      	ble.n	800a83a <__sflush_r+0xae>
 800a7a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7aa:	2e00      	cmp	r6, #0
 800a7ac:	d045      	beq.n	800a83a <__sflush_r+0xae>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a7b4:	682f      	ldr	r7, [r5, #0]
 800a7b6:	6a21      	ldr	r1, [r4, #32]
 800a7b8:	602b      	str	r3, [r5, #0]
 800a7ba:	d030      	beq.n	800a81e <__sflush_r+0x92>
 800a7bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a7be:	89a3      	ldrh	r3, [r4, #12]
 800a7c0:	0759      	lsls	r1, r3, #29
 800a7c2:	d505      	bpl.n	800a7d0 <__sflush_r+0x44>
 800a7c4:	6863      	ldr	r3, [r4, #4]
 800a7c6:	1ad2      	subs	r2, r2, r3
 800a7c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a7ca:	b10b      	cbz	r3, 800a7d0 <__sflush_r+0x44>
 800a7cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a7ce:	1ad2      	subs	r2, r2, r3
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7d4:	6a21      	ldr	r1, [r4, #32]
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	47b0      	blx	r6
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	89a3      	ldrh	r3, [r4, #12]
 800a7de:	d106      	bne.n	800a7ee <__sflush_r+0x62>
 800a7e0:	6829      	ldr	r1, [r5, #0]
 800a7e2:	291d      	cmp	r1, #29
 800a7e4:	d82b      	bhi.n	800a83e <__sflush_r+0xb2>
 800a7e6:	4a2a      	ldr	r2, [pc, #168]	@ (800a890 <__sflush_r+0x104>)
 800a7e8:	410a      	asrs	r2, r1
 800a7ea:	07d6      	lsls	r6, r2, #31
 800a7ec:	d427      	bmi.n	800a83e <__sflush_r+0xb2>
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	6062      	str	r2, [r4, #4]
 800a7f2:	04d9      	lsls	r1, r3, #19
 800a7f4:	6922      	ldr	r2, [r4, #16]
 800a7f6:	6022      	str	r2, [r4, #0]
 800a7f8:	d504      	bpl.n	800a804 <__sflush_r+0x78>
 800a7fa:	1c42      	adds	r2, r0, #1
 800a7fc:	d101      	bne.n	800a802 <__sflush_r+0x76>
 800a7fe:	682b      	ldr	r3, [r5, #0]
 800a800:	b903      	cbnz	r3, 800a804 <__sflush_r+0x78>
 800a802:	6560      	str	r0, [r4, #84]	@ 0x54
 800a804:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a806:	602f      	str	r7, [r5, #0]
 800a808:	b1b9      	cbz	r1, 800a83a <__sflush_r+0xae>
 800a80a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a80e:	4299      	cmp	r1, r3
 800a810:	d002      	beq.n	800a818 <__sflush_r+0x8c>
 800a812:	4628      	mov	r0, r5
 800a814:	f7ff f9e0 	bl	8009bd8 <_free_r>
 800a818:	2300      	movs	r3, #0
 800a81a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a81c:	e00d      	b.n	800a83a <__sflush_r+0xae>
 800a81e:	2301      	movs	r3, #1
 800a820:	4628      	mov	r0, r5
 800a822:	47b0      	blx	r6
 800a824:	4602      	mov	r2, r0
 800a826:	1c50      	adds	r0, r2, #1
 800a828:	d1c9      	bne.n	800a7be <__sflush_r+0x32>
 800a82a:	682b      	ldr	r3, [r5, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0c6      	beq.n	800a7be <__sflush_r+0x32>
 800a830:	2b1d      	cmp	r3, #29
 800a832:	d001      	beq.n	800a838 <__sflush_r+0xac>
 800a834:	2b16      	cmp	r3, #22
 800a836:	d11e      	bne.n	800a876 <__sflush_r+0xea>
 800a838:	602f      	str	r7, [r5, #0]
 800a83a:	2000      	movs	r0, #0
 800a83c:	e022      	b.n	800a884 <__sflush_r+0xf8>
 800a83e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a842:	b21b      	sxth	r3, r3
 800a844:	e01b      	b.n	800a87e <__sflush_r+0xf2>
 800a846:	690f      	ldr	r7, [r1, #16]
 800a848:	2f00      	cmp	r7, #0
 800a84a:	d0f6      	beq.n	800a83a <__sflush_r+0xae>
 800a84c:	0793      	lsls	r3, r2, #30
 800a84e:	680e      	ldr	r6, [r1, #0]
 800a850:	bf08      	it	eq
 800a852:	694b      	ldreq	r3, [r1, #20]
 800a854:	600f      	str	r7, [r1, #0]
 800a856:	bf18      	it	ne
 800a858:	2300      	movne	r3, #0
 800a85a:	eba6 0807 	sub.w	r8, r6, r7
 800a85e:	608b      	str	r3, [r1, #8]
 800a860:	f1b8 0f00 	cmp.w	r8, #0
 800a864:	dde9      	ble.n	800a83a <__sflush_r+0xae>
 800a866:	6a21      	ldr	r1, [r4, #32]
 800a868:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a86a:	4643      	mov	r3, r8
 800a86c:	463a      	mov	r2, r7
 800a86e:	4628      	mov	r0, r5
 800a870:	47b0      	blx	r6
 800a872:	2800      	cmp	r0, #0
 800a874:	dc08      	bgt.n	800a888 <__sflush_r+0xfc>
 800a876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a87a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	f04f 30ff 	mov.w	r0, #4294967295
 800a884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a888:	4407      	add	r7, r0
 800a88a:	eba8 0800 	sub.w	r8, r8, r0
 800a88e:	e7e7      	b.n	800a860 <__sflush_r+0xd4>
 800a890:	dfbffffe 	.word	0xdfbffffe

0800a894 <_fflush_r>:
 800a894:	b538      	push	{r3, r4, r5, lr}
 800a896:	690b      	ldr	r3, [r1, #16]
 800a898:	4605      	mov	r5, r0
 800a89a:	460c      	mov	r4, r1
 800a89c:	b913      	cbnz	r3, 800a8a4 <_fflush_r+0x10>
 800a89e:	2500      	movs	r5, #0
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
 800a8a4:	b118      	cbz	r0, 800a8ae <_fflush_r+0x1a>
 800a8a6:	6a03      	ldr	r3, [r0, #32]
 800a8a8:	b90b      	cbnz	r3, 800a8ae <_fflush_r+0x1a>
 800a8aa:	f7fe fa2f 	bl	8008d0c <__sinit>
 800a8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0f3      	beq.n	800a89e <_fflush_r+0xa>
 800a8b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a8b8:	07d0      	lsls	r0, r2, #31
 800a8ba:	d404      	bmi.n	800a8c6 <_fflush_r+0x32>
 800a8bc:	0599      	lsls	r1, r3, #22
 800a8be:	d402      	bmi.n	800a8c6 <_fflush_r+0x32>
 800a8c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8c2:	f7fe fb3a 	bl	8008f3a <__retarget_lock_acquire_recursive>
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	4621      	mov	r1, r4
 800a8ca:	f7ff ff5f 	bl	800a78c <__sflush_r>
 800a8ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a8d0:	07da      	lsls	r2, r3, #31
 800a8d2:	4605      	mov	r5, r0
 800a8d4:	d4e4      	bmi.n	800a8a0 <_fflush_r+0xc>
 800a8d6:	89a3      	ldrh	r3, [r4, #12]
 800a8d8:	059b      	lsls	r3, r3, #22
 800a8da:	d4e1      	bmi.n	800a8a0 <_fflush_r+0xc>
 800a8dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a8de:	f7fe fb2d 	bl	8008f3c <__retarget_lock_release_recursive>
 800a8e2:	e7dd      	b.n	800a8a0 <_fflush_r+0xc>

0800a8e4 <memmove>:
 800a8e4:	4288      	cmp	r0, r1
 800a8e6:	b510      	push	{r4, lr}
 800a8e8:	eb01 0402 	add.w	r4, r1, r2
 800a8ec:	d902      	bls.n	800a8f4 <memmove+0x10>
 800a8ee:	4284      	cmp	r4, r0
 800a8f0:	4623      	mov	r3, r4
 800a8f2:	d807      	bhi.n	800a904 <memmove+0x20>
 800a8f4:	1e43      	subs	r3, r0, #1
 800a8f6:	42a1      	cmp	r1, r4
 800a8f8:	d008      	beq.n	800a90c <memmove+0x28>
 800a8fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a902:	e7f8      	b.n	800a8f6 <memmove+0x12>
 800a904:	4402      	add	r2, r0
 800a906:	4601      	mov	r1, r0
 800a908:	428a      	cmp	r2, r1
 800a90a:	d100      	bne.n	800a90e <memmove+0x2a>
 800a90c:	bd10      	pop	{r4, pc}
 800a90e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a916:	e7f7      	b.n	800a908 <memmove+0x24>

0800a918 <_sbrk_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4d06      	ldr	r5, [pc, #24]	@ (800a934 <_sbrk_r+0x1c>)
 800a91c:	2300      	movs	r3, #0
 800a91e:	4604      	mov	r4, r0
 800a920:	4608      	mov	r0, r1
 800a922:	602b      	str	r3, [r5, #0]
 800a924:	f7f7 facc 	bl	8001ec0 <_sbrk>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d102      	bne.n	800a932 <_sbrk_r+0x1a>
 800a92c:	682b      	ldr	r3, [r5, #0]
 800a92e:	b103      	cbz	r3, 800a932 <_sbrk_r+0x1a>
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd38      	pop	{r3, r4, r5, pc}
 800a934:	20005bd8 	.word	0x20005bd8

0800a938 <memcpy>:
 800a938:	440a      	add	r2, r1
 800a93a:	4291      	cmp	r1, r2
 800a93c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a940:	d100      	bne.n	800a944 <memcpy+0xc>
 800a942:	4770      	bx	lr
 800a944:	b510      	push	{r4, lr}
 800a946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a94a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a94e:	4291      	cmp	r1, r2
 800a950:	d1f9      	bne.n	800a946 <memcpy+0xe>
 800a952:	bd10      	pop	{r4, pc}

0800a954 <__assert_func>:
 800a954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a956:	4614      	mov	r4, r2
 800a958:	461a      	mov	r2, r3
 800a95a:	4b09      	ldr	r3, [pc, #36]	@ (800a980 <__assert_func+0x2c>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4605      	mov	r5, r0
 800a960:	68d8      	ldr	r0, [r3, #12]
 800a962:	b954      	cbnz	r4, 800a97a <__assert_func+0x26>
 800a964:	4b07      	ldr	r3, [pc, #28]	@ (800a984 <__assert_func+0x30>)
 800a966:	461c      	mov	r4, r3
 800a968:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a96c:	9100      	str	r1, [sp, #0]
 800a96e:	462b      	mov	r3, r5
 800a970:	4905      	ldr	r1, [pc, #20]	@ (800a988 <__assert_func+0x34>)
 800a972:	f000 f86f 	bl	800aa54 <fiprintf>
 800a976:	f000 f87f 	bl	800aa78 <abort>
 800a97a:	4b04      	ldr	r3, [pc, #16]	@ (800a98c <__assert_func+0x38>)
 800a97c:	e7f4      	b.n	800a968 <__assert_func+0x14>
 800a97e:	bf00      	nop
 800a980:	20003698 	.word	0x20003698
 800a984:	0800ff56 	.word	0x0800ff56
 800a988:	0800ff28 	.word	0x0800ff28
 800a98c:	0800ff1b 	.word	0x0800ff1b

0800a990 <_calloc_r>:
 800a990:	b570      	push	{r4, r5, r6, lr}
 800a992:	fba1 5402 	umull	r5, r4, r1, r2
 800a996:	b93c      	cbnz	r4, 800a9a8 <_calloc_r+0x18>
 800a998:	4629      	mov	r1, r5
 800a99a:	f7ff f991 	bl	8009cc0 <_malloc_r>
 800a99e:	4606      	mov	r6, r0
 800a9a0:	b928      	cbnz	r0, 800a9ae <_calloc_r+0x1e>
 800a9a2:	2600      	movs	r6, #0
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}
 800a9a8:	220c      	movs	r2, #12
 800a9aa:	6002      	str	r2, [r0, #0]
 800a9ac:	e7f9      	b.n	800a9a2 <_calloc_r+0x12>
 800a9ae:	462a      	mov	r2, r5
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	f7fe fa44 	bl	8008e3e <memset>
 800a9b6:	e7f5      	b.n	800a9a4 <_calloc_r+0x14>

0800a9b8 <__ascii_mbtowc>:
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	b901      	cbnz	r1, 800a9be <__ascii_mbtowc+0x6>
 800a9bc:	a901      	add	r1, sp, #4
 800a9be:	b142      	cbz	r2, 800a9d2 <__ascii_mbtowc+0x1a>
 800a9c0:	b14b      	cbz	r3, 800a9d6 <__ascii_mbtowc+0x1e>
 800a9c2:	7813      	ldrb	r3, [r2, #0]
 800a9c4:	600b      	str	r3, [r1, #0]
 800a9c6:	7812      	ldrb	r2, [r2, #0]
 800a9c8:	1e10      	subs	r0, r2, #0
 800a9ca:	bf18      	it	ne
 800a9cc:	2001      	movne	r0, #1
 800a9ce:	b002      	add	sp, #8
 800a9d0:	4770      	bx	lr
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	e7fb      	b.n	800a9ce <__ascii_mbtowc+0x16>
 800a9d6:	f06f 0001 	mvn.w	r0, #1
 800a9da:	e7f8      	b.n	800a9ce <__ascii_mbtowc+0x16>

0800a9dc <_realloc_r>:
 800a9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e0:	4680      	mov	r8, r0
 800a9e2:	4615      	mov	r5, r2
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	b921      	cbnz	r1, 800a9f2 <_realloc_r+0x16>
 800a9e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ec:	4611      	mov	r1, r2
 800a9ee:	f7ff b967 	b.w	8009cc0 <_malloc_r>
 800a9f2:	b92a      	cbnz	r2, 800aa00 <_realloc_r+0x24>
 800a9f4:	f7ff f8f0 	bl	8009bd8 <_free_r>
 800a9f8:	2400      	movs	r4, #0
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa00:	f000 f841 	bl	800aa86 <_malloc_usable_size_r>
 800aa04:	4285      	cmp	r5, r0
 800aa06:	4606      	mov	r6, r0
 800aa08:	d802      	bhi.n	800aa10 <_realloc_r+0x34>
 800aa0a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aa0e:	d8f4      	bhi.n	800a9fa <_realloc_r+0x1e>
 800aa10:	4629      	mov	r1, r5
 800aa12:	4640      	mov	r0, r8
 800aa14:	f7ff f954 	bl	8009cc0 <_malloc_r>
 800aa18:	4607      	mov	r7, r0
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	d0ec      	beq.n	800a9f8 <_realloc_r+0x1c>
 800aa1e:	42b5      	cmp	r5, r6
 800aa20:	462a      	mov	r2, r5
 800aa22:	4621      	mov	r1, r4
 800aa24:	bf28      	it	cs
 800aa26:	4632      	movcs	r2, r6
 800aa28:	f7ff ff86 	bl	800a938 <memcpy>
 800aa2c:	4621      	mov	r1, r4
 800aa2e:	4640      	mov	r0, r8
 800aa30:	f7ff f8d2 	bl	8009bd8 <_free_r>
 800aa34:	463c      	mov	r4, r7
 800aa36:	e7e0      	b.n	800a9fa <_realloc_r+0x1e>

0800aa38 <__ascii_wctomb>:
 800aa38:	4603      	mov	r3, r0
 800aa3a:	4608      	mov	r0, r1
 800aa3c:	b141      	cbz	r1, 800aa50 <__ascii_wctomb+0x18>
 800aa3e:	2aff      	cmp	r2, #255	@ 0xff
 800aa40:	d904      	bls.n	800aa4c <__ascii_wctomb+0x14>
 800aa42:	228a      	movs	r2, #138	@ 0x8a
 800aa44:	601a      	str	r2, [r3, #0]
 800aa46:	f04f 30ff 	mov.w	r0, #4294967295
 800aa4a:	4770      	bx	lr
 800aa4c:	700a      	strb	r2, [r1, #0]
 800aa4e:	2001      	movs	r0, #1
 800aa50:	4770      	bx	lr
	...

0800aa54 <fiprintf>:
 800aa54:	b40e      	push	{r1, r2, r3}
 800aa56:	b503      	push	{r0, r1, lr}
 800aa58:	4601      	mov	r1, r0
 800aa5a:	ab03      	add	r3, sp, #12
 800aa5c:	4805      	ldr	r0, [pc, #20]	@ (800aa74 <fiprintf+0x20>)
 800aa5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa62:	6800      	ldr	r0, [r0, #0]
 800aa64:	9301      	str	r3, [sp, #4]
 800aa66:	f000 f83f 	bl	800aae8 <_vfiprintf_r>
 800aa6a:	b002      	add	sp, #8
 800aa6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa70:	b003      	add	sp, #12
 800aa72:	4770      	bx	lr
 800aa74:	20003698 	.word	0x20003698

0800aa78 <abort>:
 800aa78:	b508      	push	{r3, lr}
 800aa7a:	2006      	movs	r0, #6
 800aa7c:	f000 fa08 	bl	800ae90 <raise>
 800aa80:	2001      	movs	r0, #1
 800aa82:	f7f7 f9a4 	bl	8001dce <_exit>

0800aa86 <_malloc_usable_size_r>:
 800aa86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa8a:	1f18      	subs	r0, r3, #4
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bfbc      	itt	lt
 800aa90:	580b      	ldrlt	r3, [r1, r0]
 800aa92:	18c0      	addlt	r0, r0, r3
 800aa94:	4770      	bx	lr

0800aa96 <__sfputc_r>:
 800aa96:	6893      	ldr	r3, [r2, #8]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	b410      	push	{r4}
 800aa9e:	6093      	str	r3, [r2, #8]
 800aaa0:	da08      	bge.n	800aab4 <__sfputc_r+0x1e>
 800aaa2:	6994      	ldr	r4, [r2, #24]
 800aaa4:	42a3      	cmp	r3, r4
 800aaa6:	db01      	blt.n	800aaac <__sfputc_r+0x16>
 800aaa8:	290a      	cmp	r1, #10
 800aaaa:	d103      	bne.n	800aab4 <__sfputc_r+0x1e>
 800aaac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aab0:	f000 b932 	b.w	800ad18 <__swbuf_r>
 800aab4:	6813      	ldr	r3, [r2, #0]
 800aab6:	1c58      	adds	r0, r3, #1
 800aab8:	6010      	str	r0, [r2, #0]
 800aaba:	7019      	strb	r1, [r3, #0]
 800aabc:	4608      	mov	r0, r1
 800aabe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <__sfputs_r>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	4606      	mov	r6, r0
 800aac8:	460f      	mov	r7, r1
 800aaca:	4614      	mov	r4, r2
 800aacc:	18d5      	adds	r5, r2, r3
 800aace:	42ac      	cmp	r4, r5
 800aad0:	d101      	bne.n	800aad6 <__sfputs_r+0x12>
 800aad2:	2000      	movs	r0, #0
 800aad4:	e007      	b.n	800aae6 <__sfputs_r+0x22>
 800aad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aada:	463a      	mov	r2, r7
 800aadc:	4630      	mov	r0, r6
 800aade:	f7ff ffda 	bl	800aa96 <__sfputc_r>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d1f3      	bne.n	800aace <__sfputs_r+0xa>
 800aae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aae8 <_vfiprintf_r>:
 800aae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaec:	460d      	mov	r5, r1
 800aaee:	b09d      	sub	sp, #116	@ 0x74
 800aaf0:	4614      	mov	r4, r2
 800aaf2:	4698      	mov	r8, r3
 800aaf4:	4606      	mov	r6, r0
 800aaf6:	b118      	cbz	r0, 800ab00 <_vfiprintf_r+0x18>
 800aaf8:	6a03      	ldr	r3, [r0, #32]
 800aafa:	b90b      	cbnz	r3, 800ab00 <_vfiprintf_r+0x18>
 800aafc:	f7fe f906 	bl	8008d0c <__sinit>
 800ab00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab02:	07d9      	lsls	r1, r3, #31
 800ab04:	d405      	bmi.n	800ab12 <_vfiprintf_r+0x2a>
 800ab06:	89ab      	ldrh	r3, [r5, #12]
 800ab08:	059a      	lsls	r2, r3, #22
 800ab0a:	d402      	bmi.n	800ab12 <_vfiprintf_r+0x2a>
 800ab0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab0e:	f7fe fa14 	bl	8008f3a <__retarget_lock_acquire_recursive>
 800ab12:	89ab      	ldrh	r3, [r5, #12]
 800ab14:	071b      	lsls	r3, r3, #28
 800ab16:	d501      	bpl.n	800ab1c <_vfiprintf_r+0x34>
 800ab18:	692b      	ldr	r3, [r5, #16]
 800ab1a:	b99b      	cbnz	r3, 800ab44 <_vfiprintf_r+0x5c>
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f000 f938 	bl	800ad94 <__swsetup_r>
 800ab24:	b170      	cbz	r0, 800ab44 <_vfiprintf_r+0x5c>
 800ab26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab28:	07dc      	lsls	r4, r3, #31
 800ab2a:	d504      	bpl.n	800ab36 <_vfiprintf_r+0x4e>
 800ab2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab30:	b01d      	add	sp, #116	@ 0x74
 800ab32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab36:	89ab      	ldrh	r3, [r5, #12]
 800ab38:	0598      	lsls	r0, r3, #22
 800ab3a:	d4f7      	bmi.n	800ab2c <_vfiprintf_r+0x44>
 800ab3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab3e:	f7fe f9fd 	bl	8008f3c <__retarget_lock_release_recursive>
 800ab42:	e7f3      	b.n	800ab2c <_vfiprintf_r+0x44>
 800ab44:	2300      	movs	r3, #0
 800ab46:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab48:	2320      	movs	r3, #32
 800ab4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab4e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab52:	2330      	movs	r3, #48	@ 0x30
 800ab54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad04 <_vfiprintf_r+0x21c>
 800ab58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab5c:	f04f 0901 	mov.w	r9, #1
 800ab60:	4623      	mov	r3, r4
 800ab62:	469a      	mov	sl, r3
 800ab64:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab68:	b10a      	cbz	r2, 800ab6e <_vfiprintf_r+0x86>
 800ab6a:	2a25      	cmp	r2, #37	@ 0x25
 800ab6c:	d1f9      	bne.n	800ab62 <_vfiprintf_r+0x7a>
 800ab6e:	ebba 0b04 	subs.w	fp, sl, r4
 800ab72:	d00b      	beq.n	800ab8c <_vfiprintf_r+0xa4>
 800ab74:	465b      	mov	r3, fp
 800ab76:	4622      	mov	r2, r4
 800ab78:	4629      	mov	r1, r5
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f7ff ffa2 	bl	800aac4 <__sfputs_r>
 800ab80:	3001      	adds	r0, #1
 800ab82:	f000 80a7 	beq.w	800acd4 <_vfiprintf_r+0x1ec>
 800ab86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab88:	445a      	add	r2, fp
 800ab8a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 809f 	beq.w	800acd4 <_vfiprintf_r+0x1ec>
 800ab96:	2300      	movs	r3, #0
 800ab98:	f04f 32ff 	mov.w	r2, #4294967295
 800ab9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aba0:	f10a 0a01 	add.w	sl, sl, #1
 800aba4:	9304      	str	r3, [sp, #16]
 800aba6:	9307      	str	r3, [sp, #28]
 800aba8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abac:	931a      	str	r3, [sp, #104]	@ 0x68
 800abae:	4654      	mov	r4, sl
 800abb0:	2205      	movs	r2, #5
 800abb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb6:	4853      	ldr	r0, [pc, #332]	@ (800ad04 <_vfiprintf_r+0x21c>)
 800abb8:	f7f5 fb3a 	bl	8000230 <memchr>
 800abbc:	9a04      	ldr	r2, [sp, #16]
 800abbe:	b9d8      	cbnz	r0, 800abf8 <_vfiprintf_r+0x110>
 800abc0:	06d1      	lsls	r1, r2, #27
 800abc2:	bf44      	itt	mi
 800abc4:	2320      	movmi	r3, #32
 800abc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abca:	0713      	lsls	r3, r2, #28
 800abcc:	bf44      	itt	mi
 800abce:	232b      	movmi	r3, #43	@ 0x2b
 800abd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abd4:	f89a 3000 	ldrb.w	r3, [sl]
 800abd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800abda:	d015      	beq.n	800ac08 <_vfiprintf_r+0x120>
 800abdc:	9a07      	ldr	r2, [sp, #28]
 800abde:	4654      	mov	r4, sl
 800abe0:	2000      	movs	r0, #0
 800abe2:	f04f 0c0a 	mov.w	ip, #10
 800abe6:	4621      	mov	r1, r4
 800abe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800abec:	3b30      	subs	r3, #48	@ 0x30
 800abee:	2b09      	cmp	r3, #9
 800abf0:	d94b      	bls.n	800ac8a <_vfiprintf_r+0x1a2>
 800abf2:	b1b0      	cbz	r0, 800ac22 <_vfiprintf_r+0x13a>
 800abf4:	9207      	str	r2, [sp, #28]
 800abf6:	e014      	b.n	800ac22 <_vfiprintf_r+0x13a>
 800abf8:	eba0 0308 	sub.w	r3, r0, r8
 800abfc:	fa09 f303 	lsl.w	r3, r9, r3
 800ac00:	4313      	orrs	r3, r2
 800ac02:	9304      	str	r3, [sp, #16]
 800ac04:	46a2      	mov	sl, r4
 800ac06:	e7d2      	b.n	800abae <_vfiprintf_r+0xc6>
 800ac08:	9b03      	ldr	r3, [sp, #12]
 800ac0a:	1d19      	adds	r1, r3, #4
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	9103      	str	r1, [sp, #12]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	bfbb      	ittet	lt
 800ac14:	425b      	neglt	r3, r3
 800ac16:	f042 0202 	orrlt.w	r2, r2, #2
 800ac1a:	9307      	strge	r3, [sp, #28]
 800ac1c:	9307      	strlt	r3, [sp, #28]
 800ac1e:	bfb8      	it	lt
 800ac20:	9204      	strlt	r2, [sp, #16]
 800ac22:	7823      	ldrb	r3, [r4, #0]
 800ac24:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac26:	d10a      	bne.n	800ac3e <_vfiprintf_r+0x156>
 800ac28:	7863      	ldrb	r3, [r4, #1]
 800ac2a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac2c:	d132      	bne.n	800ac94 <_vfiprintf_r+0x1ac>
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	1d1a      	adds	r2, r3, #4
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	9203      	str	r2, [sp, #12]
 800ac36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac3a:	3402      	adds	r4, #2
 800ac3c:	9305      	str	r3, [sp, #20]
 800ac3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad14 <_vfiprintf_r+0x22c>
 800ac42:	7821      	ldrb	r1, [r4, #0]
 800ac44:	2203      	movs	r2, #3
 800ac46:	4650      	mov	r0, sl
 800ac48:	f7f5 faf2 	bl	8000230 <memchr>
 800ac4c:	b138      	cbz	r0, 800ac5e <_vfiprintf_r+0x176>
 800ac4e:	9b04      	ldr	r3, [sp, #16]
 800ac50:	eba0 000a 	sub.w	r0, r0, sl
 800ac54:	2240      	movs	r2, #64	@ 0x40
 800ac56:	4082      	lsls	r2, r0
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	3401      	adds	r4, #1
 800ac5c:	9304      	str	r3, [sp, #16]
 800ac5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac62:	4829      	ldr	r0, [pc, #164]	@ (800ad08 <_vfiprintf_r+0x220>)
 800ac64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac68:	2206      	movs	r2, #6
 800ac6a:	f7f5 fae1 	bl	8000230 <memchr>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d03f      	beq.n	800acf2 <_vfiprintf_r+0x20a>
 800ac72:	4b26      	ldr	r3, [pc, #152]	@ (800ad0c <_vfiprintf_r+0x224>)
 800ac74:	bb1b      	cbnz	r3, 800acbe <_vfiprintf_r+0x1d6>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	3307      	adds	r3, #7
 800ac7a:	f023 0307 	bic.w	r3, r3, #7
 800ac7e:	3308      	adds	r3, #8
 800ac80:	9303      	str	r3, [sp, #12]
 800ac82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac84:	443b      	add	r3, r7
 800ac86:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac88:	e76a      	b.n	800ab60 <_vfiprintf_r+0x78>
 800ac8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac8e:	460c      	mov	r4, r1
 800ac90:	2001      	movs	r0, #1
 800ac92:	e7a8      	b.n	800abe6 <_vfiprintf_r+0xfe>
 800ac94:	2300      	movs	r3, #0
 800ac96:	3401      	adds	r4, #1
 800ac98:	9305      	str	r3, [sp, #20]
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f04f 0c0a 	mov.w	ip, #10
 800aca0:	4620      	mov	r0, r4
 800aca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aca6:	3a30      	subs	r2, #48	@ 0x30
 800aca8:	2a09      	cmp	r2, #9
 800acaa:	d903      	bls.n	800acb4 <_vfiprintf_r+0x1cc>
 800acac:	2b00      	cmp	r3, #0
 800acae:	d0c6      	beq.n	800ac3e <_vfiprintf_r+0x156>
 800acb0:	9105      	str	r1, [sp, #20]
 800acb2:	e7c4      	b.n	800ac3e <_vfiprintf_r+0x156>
 800acb4:	fb0c 2101 	mla	r1, ip, r1, r2
 800acb8:	4604      	mov	r4, r0
 800acba:	2301      	movs	r3, #1
 800acbc:	e7f0      	b.n	800aca0 <_vfiprintf_r+0x1b8>
 800acbe:	ab03      	add	r3, sp, #12
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	462a      	mov	r2, r5
 800acc4:	4b12      	ldr	r3, [pc, #72]	@ (800ad10 <_vfiprintf_r+0x228>)
 800acc6:	a904      	add	r1, sp, #16
 800acc8:	4630      	mov	r0, r6
 800acca:	f7fd fbdb 	bl	8008484 <_printf_float>
 800acce:	4607      	mov	r7, r0
 800acd0:	1c78      	adds	r0, r7, #1
 800acd2:	d1d6      	bne.n	800ac82 <_vfiprintf_r+0x19a>
 800acd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acd6:	07d9      	lsls	r1, r3, #31
 800acd8:	d405      	bmi.n	800ace6 <_vfiprintf_r+0x1fe>
 800acda:	89ab      	ldrh	r3, [r5, #12]
 800acdc:	059a      	lsls	r2, r3, #22
 800acde:	d402      	bmi.n	800ace6 <_vfiprintf_r+0x1fe>
 800ace0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ace2:	f7fe f92b 	bl	8008f3c <__retarget_lock_release_recursive>
 800ace6:	89ab      	ldrh	r3, [r5, #12]
 800ace8:	065b      	lsls	r3, r3, #25
 800acea:	f53f af1f 	bmi.w	800ab2c <_vfiprintf_r+0x44>
 800acee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800acf0:	e71e      	b.n	800ab30 <_vfiprintf_r+0x48>
 800acf2:	ab03      	add	r3, sp, #12
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	462a      	mov	r2, r5
 800acf8:	4b05      	ldr	r3, [pc, #20]	@ (800ad10 <_vfiprintf_r+0x228>)
 800acfa:	a904      	add	r1, sp, #16
 800acfc:	4630      	mov	r0, r6
 800acfe:	f7fd fe59 	bl	80089b4 <_printf_i>
 800ad02:	e7e4      	b.n	800acce <_vfiprintf_r+0x1e6>
 800ad04:	0800ff00 	.word	0x0800ff00
 800ad08:	0800ff0a 	.word	0x0800ff0a
 800ad0c:	08008485 	.word	0x08008485
 800ad10:	0800aac5 	.word	0x0800aac5
 800ad14:	0800ff06 	.word	0x0800ff06

0800ad18 <__swbuf_r>:
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad1a:	460e      	mov	r6, r1
 800ad1c:	4614      	mov	r4, r2
 800ad1e:	4605      	mov	r5, r0
 800ad20:	b118      	cbz	r0, 800ad2a <__swbuf_r+0x12>
 800ad22:	6a03      	ldr	r3, [r0, #32]
 800ad24:	b90b      	cbnz	r3, 800ad2a <__swbuf_r+0x12>
 800ad26:	f7fd fff1 	bl	8008d0c <__sinit>
 800ad2a:	69a3      	ldr	r3, [r4, #24]
 800ad2c:	60a3      	str	r3, [r4, #8]
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	071a      	lsls	r2, r3, #28
 800ad32:	d501      	bpl.n	800ad38 <__swbuf_r+0x20>
 800ad34:	6923      	ldr	r3, [r4, #16]
 800ad36:	b943      	cbnz	r3, 800ad4a <__swbuf_r+0x32>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4628      	mov	r0, r5
 800ad3c:	f000 f82a 	bl	800ad94 <__swsetup_r>
 800ad40:	b118      	cbz	r0, 800ad4a <__swbuf_r+0x32>
 800ad42:	f04f 37ff 	mov.w	r7, #4294967295
 800ad46:	4638      	mov	r0, r7
 800ad48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	6922      	ldr	r2, [r4, #16]
 800ad4e:	1a98      	subs	r0, r3, r2
 800ad50:	6963      	ldr	r3, [r4, #20]
 800ad52:	b2f6      	uxtb	r6, r6
 800ad54:	4283      	cmp	r3, r0
 800ad56:	4637      	mov	r7, r6
 800ad58:	dc05      	bgt.n	800ad66 <__swbuf_r+0x4e>
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4628      	mov	r0, r5
 800ad5e:	f7ff fd99 	bl	800a894 <_fflush_r>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d1ed      	bne.n	800ad42 <__swbuf_r+0x2a>
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	60a3      	str	r3, [r4, #8]
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	6022      	str	r2, [r4, #0]
 800ad72:	701e      	strb	r6, [r3, #0]
 800ad74:	6962      	ldr	r2, [r4, #20]
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d004      	beq.n	800ad86 <__swbuf_r+0x6e>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	07db      	lsls	r3, r3, #31
 800ad80:	d5e1      	bpl.n	800ad46 <__swbuf_r+0x2e>
 800ad82:	2e0a      	cmp	r6, #10
 800ad84:	d1df      	bne.n	800ad46 <__swbuf_r+0x2e>
 800ad86:	4621      	mov	r1, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f7ff fd83 	bl	800a894 <_fflush_r>
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d0d9      	beq.n	800ad46 <__swbuf_r+0x2e>
 800ad92:	e7d6      	b.n	800ad42 <__swbuf_r+0x2a>

0800ad94 <__swsetup_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4b29      	ldr	r3, [pc, #164]	@ (800ae3c <__swsetup_r+0xa8>)
 800ad98:	4605      	mov	r5, r0
 800ad9a:	6818      	ldr	r0, [r3, #0]
 800ad9c:	460c      	mov	r4, r1
 800ad9e:	b118      	cbz	r0, 800ada8 <__swsetup_r+0x14>
 800ada0:	6a03      	ldr	r3, [r0, #32]
 800ada2:	b90b      	cbnz	r3, 800ada8 <__swsetup_r+0x14>
 800ada4:	f7fd ffb2 	bl	8008d0c <__sinit>
 800ada8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adac:	0719      	lsls	r1, r3, #28
 800adae:	d422      	bmi.n	800adf6 <__swsetup_r+0x62>
 800adb0:	06da      	lsls	r2, r3, #27
 800adb2:	d407      	bmi.n	800adc4 <__swsetup_r+0x30>
 800adb4:	2209      	movs	r2, #9
 800adb6:	602a      	str	r2, [r5, #0]
 800adb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adbc:	81a3      	strh	r3, [r4, #12]
 800adbe:	f04f 30ff 	mov.w	r0, #4294967295
 800adc2:	e033      	b.n	800ae2c <__swsetup_r+0x98>
 800adc4:	0758      	lsls	r0, r3, #29
 800adc6:	d512      	bpl.n	800adee <__swsetup_r+0x5a>
 800adc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adca:	b141      	cbz	r1, 800adde <__swsetup_r+0x4a>
 800adcc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800add0:	4299      	cmp	r1, r3
 800add2:	d002      	beq.n	800adda <__swsetup_r+0x46>
 800add4:	4628      	mov	r0, r5
 800add6:	f7fe feff 	bl	8009bd8 <_free_r>
 800adda:	2300      	movs	r3, #0
 800addc:	6363      	str	r3, [r4, #52]	@ 0x34
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ade4:	81a3      	strh	r3, [r4, #12]
 800ade6:	2300      	movs	r3, #0
 800ade8:	6063      	str	r3, [r4, #4]
 800adea:	6923      	ldr	r3, [r4, #16]
 800adec:	6023      	str	r3, [r4, #0]
 800adee:	89a3      	ldrh	r3, [r4, #12]
 800adf0:	f043 0308 	orr.w	r3, r3, #8
 800adf4:	81a3      	strh	r3, [r4, #12]
 800adf6:	6923      	ldr	r3, [r4, #16]
 800adf8:	b94b      	cbnz	r3, 800ae0e <__swsetup_r+0x7a>
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae04:	d003      	beq.n	800ae0e <__swsetup_r+0x7a>
 800ae06:	4621      	mov	r1, r4
 800ae08:	4628      	mov	r0, r5
 800ae0a:	f000 f883 	bl	800af14 <__smakebuf_r>
 800ae0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae12:	f013 0201 	ands.w	r2, r3, #1
 800ae16:	d00a      	beq.n	800ae2e <__swsetup_r+0x9a>
 800ae18:	2200      	movs	r2, #0
 800ae1a:	60a2      	str	r2, [r4, #8]
 800ae1c:	6962      	ldr	r2, [r4, #20]
 800ae1e:	4252      	negs	r2, r2
 800ae20:	61a2      	str	r2, [r4, #24]
 800ae22:	6922      	ldr	r2, [r4, #16]
 800ae24:	b942      	cbnz	r2, 800ae38 <__swsetup_r+0xa4>
 800ae26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ae2a:	d1c5      	bne.n	800adb8 <__swsetup_r+0x24>
 800ae2c:	bd38      	pop	{r3, r4, r5, pc}
 800ae2e:	0799      	lsls	r1, r3, #30
 800ae30:	bf58      	it	pl
 800ae32:	6962      	ldrpl	r2, [r4, #20]
 800ae34:	60a2      	str	r2, [r4, #8]
 800ae36:	e7f4      	b.n	800ae22 <__swsetup_r+0x8e>
 800ae38:	2000      	movs	r0, #0
 800ae3a:	e7f7      	b.n	800ae2c <__swsetup_r+0x98>
 800ae3c:	20003698 	.word	0x20003698

0800ae40 <_raise_r>:
 800ae40:	291f      	cmp	r1, #31
 800ae42:	b538      	push	{r3, r4, r5, lr}
 800ae44:	4605      	mov	r5, r0
 800ae46:	460c      	mov	r4, r1
 800ae48:	d904      	bls.n	800ae54 <_raise_r+0x14>
 800ae4a:	2316      	movs	r3, #22
 800ae4c:	6003      	str	r3, [r0, #0]
 800ae4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae52:	bd38      	pop	{r3, r4, r5, pc}
 800ae54:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae56:	b112      	cbz	r2, 800ae5e <_raise_r+0x1e>
 800ae58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae5c:	b94b      	cbnz	r3, 800ae72 <_raise_r+0x32>
 800ae5e:	4628      	mov	r0, r5
 800ae60:	f000 f830 	bl	800aec4 <_getpid_r>
 800ae64:	4622      	mov	r2, r4
 800ae66:	4601      	mov	r1, r0
 800ae68:	4628      	mov	r0, r5
 800ae6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae6e:	f000 b817 	b.w	800aea0 <_kill_r>
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d00a      	beq.n	800ae8c <_raise_r+0x4c>
 800ae76:	1c59      	adds	r1, r3, #1
 800ae78:	d103      	bne.n	800ae82 <_raise_r+0x42>
 800ae7a:	2316      	movs	r3, #22
 800ae7c:	6003      	str	r3, [r0, #0]
 800ae7e:	2001      	movs	r0, #1
 800ae80:	e7e7      	b.n	800ae52 <_raise_r+0x12>
 800ae82:	2100      	movs	r1, #0
 800ae84:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae88:	4620      	mov	r0, r4
 800ae8a:	4798      	blx	r3
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	e7e0      	b.n	800ae52 <_raise_r+0x12>

0800ae90 <raise>:
 800ae90:	4b02      	ldr	r3, [pc, #8]	@ (800ae9c <raise+0xc>)
 800ae92:	4601      	mov	r1, r0
 800ae94:	6818      	ldr	r0, [r3, #0]
 800ae96:	f7ff bfd3 	b.w	800ae40 <_raise_r>
 800ae9a:	bf00      	nop
 800ae9c:	20003698 	.word	0x20003698

0800aea0 <_kill_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d07      	ldr	r5, [pc, #28]	@ (800aec0 <_kill_r+0x20>)
 800aea4:	2300      	movs	r3, #0
 800aea6:	4604      	mov	r4, r0
 800aea8:	4608      	mov	r0, r1
 800aeaa:	4611      	mov	r1, r2
 800aeac:	602b      	str	r3, [r5, #0]
 800aeae:	f7f6 ff7e 	bl	8001dae <_kill>
 800aeb2:	1c43      	adds	r3, r0, #1
 800aeb4:	d102      	bne.n	800aebc <_kill_r+0x1c>
 800aeb6:	682b      	ldr	r3, [r5, #0]
 800aeb8:	b103      	cbz	r3, 800aebc <_kill_r+0x1c>
 800aeba:	6023      	str	r3, [r4, #0]
 800aebc:	bd38      	pop	{r3, r4, r5, pc}
 800aebe:	bf00      	nop
 800aec0:	20005bd8 	.word	0x20005bd8

0800aec4 <_getpid_r>:
 800aec4:	f7f6 bf6b 	b.w	8001d9e <_getpid>

0800aec8 <__swhatbuf_r>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	460c      	mov	r4, r1
 800aecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed0:	2900      	cmp	r1, #0
 800aed2:	b096      	sub	sp, #88	@ 0x58
 800aed4:	4615      	mov	r5, r2
 800aed6:	461e      	mov	r6, r3
 800aed8:	da0d      	bge.n	800aef6 <__swhatbuf_r+0x2e>
 800aeda:	89a3      	ldrh	r3, [r4, #12]
 800aedc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aee0:	f04f 0100 	mov.w	r1, #0
 800aee4:	bf14      	ite	ne
 800aee6:	2340      	movne	r3, #64	@ 0x40
 800aee8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aeec:	2000      	movs	r0, #0
 800aeee:	6031      	str	r1, [r6, #0]
 800aef0:	602b      	str	r3, [r5, #0]
 800aef2:	b016      	add	sp, #88	@ 0x58
 800aef4:	bd70      	pop	{r4, r5, r6, pc}
 800aef6:	466a      	mov	r2, sp
 800aef8:	f000 f848 	bl	800af8c <_fstat_r>
 800aefc:	2800      	cmp	r0, #0
 800aefe:	dbec      	blt.n	800aeda <__swhatbuf_r+0x12>
 800af00:	9901      	ldr	r1, [sp, #4]
 800af02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af0a:	4259      	negs	r1, r3
 800af0c:	4159      	adcs	r1, r3
 800af0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af12:	e7eb      	b.n	800aeec <__swhatbuf_r+0x24>

0800af14 <__smakebuf_r>:
 800af14:	898b      	ldrh	r3, [r1, #12]
 800af16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af18:	079d      	lsls	r5, r3, #30
 800af1a:	4606      	mov	r6, r0
 800af1c:	460c      	mov	r4, r1
 800af1e:	d507      	bpl.n	800af30 <__smakebuf_r+0x1c>
 800af20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	6123      	str	r3, [r4, #16]
 800af28:	2301      	movs	r3, #1
 800af2a:	6163      	str	r3, [r4, #20]
 800af2c:	b003      	add	sp, #12
 800af2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af30:	ab01      	add	r3, sp, #4
 800af32:	466a      	mov	r2, sp
 800af34:	f7ff ffc8 	bl	800aec8 <__swhatbuf_r>
 800af38:	9f00      	ldr	r7, [sp, #0]
 800af3a:	4605      	mov	r5, r0
 800af3c:	4639      	mov	r1, r7
 800af3e:	4630      	mov	r0, r6
 800af40:	f7fe febe 	bl	8009cc0 <_malloc_r>
 800af44:	b948      	cbnz	r0, 800af5a <__smakebuf_r+0x46>
 800af46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af4a:	059a      	lsls	r2, r3, #22
 800af4c:	d4ee      	bmi.n	800af2c <__smakebuf_r+0x18>
 800af4e:	f023 0303 	bic.w	r3, r3, #3
 800af52:	f043 0302 	orr.w	r3, r3, #2
 800af56:	81a3      	strh	r3, [r4, #12]
 800af58:	e7e2      	b.n	800af20 <__smakebuf_r+0xc>
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	6020      	str	r0, [r4, #0]
 800af5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af62:	81a3      	strh	r3, [r4, #12]
 800af64:	9b01      	ldr	r3, [sp, #4]
 800af66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af6a:	b15b      	cbz	r3, 800af84 <__smakebuf_r+0x70>
 800af6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af70:	4630      	mov	r0, r6
 800af72:	f000 f81d 	bl	800afb0 <_isatty_r>
 800af76:	b128      	cbz	r0, 800af84 <__smakebuf_r+0x70>
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	f023 0303 	bic.w	r3, r3, #3
 800af7e:	f043 0301 	orr.w	r3, r3, #1
 800af82:	81a3      	strh	r3, [r4, #12]
 800af84:	89a3      	ldrh	r3, [r4, #12]
 800af86:	431d      	orrs	r5, r3
 800af88:	81a5      	strh	r5, [r4, #12]
 800af8a:	e7cf      	b.n	800af2c <__smakebuf_r+0x18>

0800af8c <_fstat_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d07      	ldr	r5, [pc, #28]	@ (800afac <_fstat_r+0x20>)
 800af90:	2300      	movs	r3, #0
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	4611      	mov	r1, r2
 800af98:	602b      	str	r3, [r5, #0]
 800af9a:	f7f6 ff68 	bl	8001e6e <_fstat>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	d102      	bne.n	800afa8 <_fstat_r+0x1c>
 800afa2:	682b      	ldr	r3, [r5, #0]
 800afa4:	b103      	cbz	r3, 800afa8 <_fstat_r+0x1c>
 800afa6:	6023      	str	r3, [r4, #0]
 800afa8:	bd38      	pop	{r3, r4, r5, pc}
 800afaa:	bf00      	nop
 800afac:	20005bd8 	.word	0x20005bd8

0800afb0 <_isatty_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d06      	ldr	r5, [pc, #24]	@ (800afcc <_isatty_r+0x1c>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	4604      	mov	r4, r0
 800afb8:	4608      	mov	r0, r1
 800afba:	602b      	str	r3, [r5, #0]
 800afbc:	f7f6 ff67 	bl	8001e8e <_isatty>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d102      	bne.n	800afca <_isatty_r+0x1a>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b103      	cbz	r3, 800afca <_isatty_r+0x1a>
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	20005bd8 	.word	0x20005bd8

0800afd0 <_init>:
 800afd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afd2:	bf00      	nop
 800afd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afd6:	bc08      	pop	{r3}
 800afd8:	469e      	mov	lr, r3
 800afda:	4770      	bx	lr

0800afdc <_fini>:
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afde:	bf00      	nop
 800afe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afe2:	bc08      	pop	{r3}
 800afe4:	469e      	mov	lr, r3
 800afe6:	4770      	bx	lr
