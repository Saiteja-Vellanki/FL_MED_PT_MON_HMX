
FL_MED_PT_MON_HMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5b0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005060  0800a780  0800a780  0000b780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7e0  0800f7e0  00014854  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7e0  0800f7e0  000107e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7e8  0800f7e8  00014854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7e8  0800f7e8  000107e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f7ec  0800f7ec  000107ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00003854  20000000  0800f7f0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000234c  20003854  08013044  00014854  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005ba0  08013044  00014ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014854  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013561  00000000  00000000  00014884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a2  00000000  00000000  00027de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  0002b388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db3  00000000  00000000  0002c570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180c4  00000000  00000000  0002d323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185f9  00000000  00000000  000453e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000853c4  00000000  00000000  0005d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2da4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000590c  00000000  00000000  000e2de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e86f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20003854 	.word	0x20003854
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a768 	.word	0x0800a768

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20003858 	.word	0x20003858
 800020c:	0800a768 	.word	0x0800a768

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Display_app_init>:
char day_data[20];

uint8_t tx_buf[256 * 64 / 2];

void Display_app_init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	 Display_init();
 8000efc:	f005 fc21 	bl	8006742 <Display_init>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <Set_Display_buffsize>:

void Set_Display_buffsize(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	 set_buffer_size(256, 64);
 8000f08:	2140      	movs	r1, #64	@ 0x40
 8000f0a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f0e:	f005 fce7 	bl	80068e0 <set_buffer_size>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <Display_refresh>:

void Display_refresh(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	 Set_Display_buffsize();
 8000f1c:	f7ff fff2 	bl	8000f04 <Set_Display_buffsize>
	 fill_buffer(tx_buf, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	4807      	ldr	r0, [pc, #28]	@ (8000f40 <Display_refresh+0x28>)
 8000f24:	f005 fcf0 	bl	8006908 <fill_buffer>
	 send_buffer_to_OLED(tx_buf, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <Display_refresh+0x28>)
 8000f2e:	f005 fef5 	bl	8006d1c <send_buffer_to_OLED>
     //HAL_Delay(10);
     fill_buffer(tx_buf, 0);
 8000f32:	2100      	movs	r1, #0
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <Display_refresh+0x28>)
 8000f36:	f005 fce7 	bl	8006908 <fill_buffer>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20003900 	.word	0x20003900

08000f44 <Display_company_name>:
	send_buffer_to_OLED(tx_buf, 0, 0);
	HAL_Delay(5000);

}
void Display_company_name(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af02      	add	r7, sp, #8
	select_font(&FreeMonoBold12pt7b);
 8000f4a:	4814      	ldr	r0, [pc, #80]	@ (8000f9c <Display_company_name+0x58>)
 8000f4c:	f005 fdb6 	bl	8006abc <select_font>
	draw_bitmap_4bpp(tx_buf, matrix, 0, 0, 32, 43);
 8000f50:	232b      	movs	r3, #43	@ 0x2b
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	2320      	movs	r3, #32
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4910      	ldr	r1, [pc, #64]	@ (8000fa0 <Display_company_name+0x5c>)
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <Display_company_name+0x60>)
 8000f60:	f005 fe88 	bl	8006c74 <draw_bitmap_4bpp>
    draw_text(tx_buf, "HEALOMEX BIO", 32, 20, 15);
 8000f64:	230f      	movs	r3, #15
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2314      	movs	r3, #20
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	490e      	ldr	r1, [pc, #56]	@ (8000fa8 <Display_company_name+0x64>)
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <Display_company_name+0x60>)
 8000f70:	f005 fe4c 	bl	8006c0c <draw_text>
    draw_text(tx_buf, "SCIENCES PVT LTD", 32, 45, 15);
 8000f74:	230f      	movs	r3, #15
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	232d      	movs	r3, #45	@ 0x2d
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	490b      	ldr	r1, [pc, #44]	@ (8000fac <Display_company_name+0x68>)
 8000f7e:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <Display_company_name+0x60>)
 8000f80:	f005 fe44 	bl	8006c0c <draw_text>
    send_buffer_to_OLED(tx_buf, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <Display_company_name+0x60>)
 8000f8a:	f005 fec7 	bl	8006d1c <send_buffer_to_OLED>
	HAL_Delay(5000);
 8000f8e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f92:	f001 fbb5 	bl	8002700 <HAL_Delay>

}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	0800b240 	.word	0x0800b240
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20003900 	.word	0x20003900
 8000fa8:	0800a780 	.word	0x0800a780
 8000fac:	0800a790 	.word	0x0800a790

08000fb0 <Display_contct_num>:
void Display_contct_num(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af02      	add	r7, sp, #8
	select_font(&FreeMonoBold12pt7b);
 8000fb6:	480f      	ldr	r0, [pc, #60]	@ (8000ff4 <Display_contct_num+0x44>)
 8000fb8:	f005 fd80 	bl	8006abc <select_font>
    draw_text(tx_buf, "CONTACT", 10, 20, 15);
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2314      	movs	r3, #20
 8000fc2:	220a      	movs	r2, #10
 8000fc4:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <Display_contct_num+0x48>)
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fc8:	f005 fe20 	bl	8006c0c <draw_text>
	draw_text(tx_buf, "+91 9603966993", 10, 45, 15);
 8000fcc:	230f      	movs	r3, #15
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	232d      	movs	r3, #45	@ 0x2d
 8000fd2:	220a      	movs	r2, #10
 8000fd4:	490a      	ldr	r1, [pc, #40]	@ (8001000 <Display_contct_num+0x50>)
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fd8:	f005 fe18 	bl	8006c0c <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fe2:	f005 fe9b 	bl	8006d1c <send_buffer_to_OLED>
    HAL_Delay(2000);
 8000fe6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fea:	f001 fb89 	bl	8002700 <HAL_Delay>
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0800b240 	.word	0x0800b240
 8000ff8:	0800a7a4 	.word	0x0800a7a4
 8000ffc:	20003900 	.word	0x20003900
 8001000:	0800a7ac 	.word	0x0800a7ac

08001004 <Display_Managmnt_sys>:
void Display_Managmnt_sys(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af02      	add	r7, sp, #8
	select_font(&FreeMono9pt7b);
 800100a:	481b      	ldr	r0, [pc, #108]	@ (8001078 <Display_Managmnt_sys+0x74>)
 800100c:	f005 fd56 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMPERATURE", 10, 20, 15);
 8001010:	230f      	movs	r3, #15
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2314      	movs	r3, #20
 8001016:	220a      	movs	r2, #10
 8001018:	4918      	ldr	r1, [pc, #96]	@ (800107c <Display_Managmnt_sys+0x78>)
 800101a:	4819      	ldr	r0, [pc, #100]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 800101c:	f005 fdf6 	bl	8006c0c <draw_text>
	draw_bitmap_4bpp(tx_buf, p_warm, 200, 10, 40, 42);
 8001020:	232a      	movs	r3, #42	@ 0x2a
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	2328      	movs	r3, #40	@ 0x28
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	230a      	movs	r3, #10
 800102a:	22c8      	movs	r2, #200	@ 0xc8
 800102c:	4915      	ldr	r1, [pc, #84]	@ (8001084 <Display_Managmnt_sys+0x80>)
 800102e:	4814      	ldr	r0, [pc, #80]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001030:	f005 fe20 	bl	8006c74 <draw_bitmap_4bpp>
	select_font(&Font5x7FixedMono);
 8001034:	4814      	ldr	r0, [pc, #80]	@ (8001088 <Display_Managmnt_sys+0x84>)
 8001036:	f005 fd41 	bl	8006abc <select_font>
	draw_text(tx_buf, "HMX-V01", 150, 20, 15);
 800103a:	230f      	movs	r3, #15
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2314      	movs	r3, #20
 8001040:	2296      	movs	r2, #150	@ 0x96
 8001042:	4912      	ldr	r1, [pc, #72]	@ (800108c <Display_Managmnt_sys+0x88>)
 8001044:	480e      	ldr	r0, [pc, #56]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001046:	f005 fde1 	bl	8006c0c <draw_text>
	select_font(&FreeMono9pt7b);
 800104a:	480b      	ldr	r0, [pc, #44]	@ (8001078 <Display_Managmnt_sys+0x74>)
 800104c:	f005 fd36 	bl	8006abc <select_font>
	draw_text(tx_buf, "MANAGEMENT SYSTEM", 10, 45, 15);
 8001050:	230f      	movs	r3, #15
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	232d      	movs	r3, #45	@ 0x2d
 8001056:	220a      	movs	r2, #10
 8001058:	490d      	ldr	r1, [pc, #52]	@ (8001090 <Display_Managmnt_sys+0x8c>)
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 800105c:	f005 fdd6 	bl	8006c0c <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	4806      	ldr	r0, [pc, #24]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001066:	f005 fe59 	bl	8006d1c <send_buffer_to_OLED>
	HAL_Delay(5000);
 800106a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800106e:	f001 fb47 	bl	8002700 <HAL_Delay>
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	0800bd1c 	.word	0x0800bd1c
 800107c:	0800a7bc 	.word	0x0800a7bc
 8001080:	20003900 	.word	0x20003900
 8001084:	200032b0 	.word	0x200032b0
 8001088:	0800b6c8 	.word	0x0800b6c8
 800108c:	0800a7c8 	.word	0x0800a7c8
 8001090:	0800a7d0 	.word	0x0800a7d0

08001094 <fan_Hspeed>:

void fan_Hspeed()
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af02      	add	r7, sp, #8
	select_font(&Font5x7FixedMono);
 800109a:	48bc      	ldr	r0, [pc, #752]	@ (800138c <fan_Hspeed+0x2f8>)
 800109c:	f005 fd0e 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80010a0:	230f      	movs	r3, #15
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	230a      	movs	r3, #10
 80010a6:	220a      	movs	r2, #10
 80010a8:	49b9      	ldr	r1, [pc, #740]	@ (8001390 <fan_Hspeed+0x2fc>)
 80010aa:	48ba      	ldr	r0, [pc, #744]	@ (8001394 <fan_Hspeed+0x300>)
 80010ac:	f005 fdae 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 80010b0:	48b9      	ldr	r0, [pc, #740]	@ (8001398 <fan_Hspeed+0x304>)
 80010b2:	f005 fd03 	bl	8006abc <select_font>
	sprintf(data,"%.1f%.f",Temp[0],Temp[1]);
 80010b6:	4bb9      	ldr	r3, [pc, #740]	@ (800139c <fan_Hspeed+0x308>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa74 	bl	80005a8 <__aeabi_f2d>
 80010c0:	4604      	mov	r4, r0
 80010c2:	460d      	mov	r5, r1
 80010c4:	4bb5      	ldr	r3, [pc, #724]	@ (800139c <fan_Hspeed+0x308>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa6d 	bl	80005a8 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	e9cd 2300 	strd	r2, r3, [sp]
 80010d6:	4622      	mov	r2, r4
 80010d8:	462b      	mov	r3, r5
 80010da:	49b1      	ldr	r1, [pc, #708]	@ (80013a0 <fan_Hspeed+0x30c>)
 80010dc:	48b1      	ldr	r0, [pc, #708]	@ (80013a4 <fan_Hspeed+0x310>)
 80010de:	f007 fa15 	bl	800850c <siprintf>
	draw_text(tx_buf, data, 5, 55, 15);
 80010e2:	230f      	movs	r3, #15
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2337      	movs	r3, #55	@ 0x37
 80010e8:	2205      	movs	r2, #5
 80010ea:	49ae      	ldr	r1, [pc, #696]	@ (80013a4 <fan_Hspeed+0x310>)
 80010ec:	48a9      	ldr	r0, [pc, #676]	@ (8001394 <fan_Hspeed+0x300>)
 80010ee:	f005 fd8d 	bl	8006c0c <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 80010f2:	48ad      	ldr	r0, [pc, #692]	@ (80013a8 <fan_Hspeed+0x314>)
 80010f4:	f005 fce2 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80010f8:	230f      	movs	r3, #15
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2337      	movs	r3, #55	@ 0x37
 80010fe:	2294      	movs	r2, #148	@ 0x94
 8001100:	49aa      	ldr	r1, [pc, #680]	@ (80013ac <fan_Hspeed+0x318>)
 8001102:	48a4      	ldr	r0, [pc, #656]	@ (8001394 <fan_Hspeed+0x300>)
 8001104:	f005 fd82 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_off, 200, 0, 40, 42);
	select_font(&Font5x7FixedMono);
 8001108:	48a0      	ldr	r0, [pc, #640]	@ (800138c <fan_Hspeed+0x2f8>)
 800110a:	f005 fcd7 	bl	8006abc <select_font>
//    draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_1gif,145,0, 64, 64);
 800110e:	2340      	movs	r3, #64	@ 0x40
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	2340      	movs	r3, #64	@ 0x40
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	2291      	movs	r2, #145	@ 0x91
 800111a:	49a5      	ldr	r1, [pc, #660]	@ (80013b0 <fan_Hspeed+0x31c>)
 800111c:	489d      	ldr	r0, [pc, #628]	@ (8001394 <fan_Hspeed+0x300>)
 800111e:	f005 fda9 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001122:	2310      	movs	r3, #16
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	2310      	movs	r3, #16
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2300      	movs	r3, #0
 800112c:	228e      	movs	r2, #142	@ 0x8e
 800112e:	49a1      	ldr	r1, [pc, #644]	@ (80013b4 <fan_Hspeed+0x320>)
 8001130:	4898      	ldr	r0, [pc, #608]	@ (8001394 <fan_Hspeed+0x300>)
 8001132:	f005 fd9f 	bl	8006c74 <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 180, 0, 16, 16);
	Display_RTC_clock();
 8001136:	f000 fdd3 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 800113a:	2200      	movs	r2, #0
 800113c:	2100      	movs	r1, #0
 800113e:	4895      	ldr	r0, [pc, #596]	@ (8001394 <fan_Hspeed+0x300>)
 8001140:	f005 fdec 	bl	8006d1c <send_buffer_to_OLED>
//	HAL_Delay(2000);

	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001144:	2300      	movs	r3, #0
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	2340      	movs	r3, #64	@ 0x40
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	488f      	ldr	r0, [pc, #572]	@ (8001394 <fan_Hspeed+0x300>)
 8001156:	f005 fc83 	bl	8006a60 <draw_rect_filled>

//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 800115a:	488c      	ldr	r0, [pc, #560]	@ (800138c <fan_Hspeed+0x2f8>)
 800115c:	f005 fcae 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001160:	230f      	movs	r3, #15
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	230a      	movs	r3, #10
 8001166:	220a      	movs	r2, #10
 8001168:	4989      	ldr	r1, [pc, #548]	@ (8001390 <fan_Hspeed+0x2fc>)
 800116a:	488a      	ldr	r0, [pc, #552]	@ (8001394 <fan_Hspeed+0x300>)
 800116c:	f005 fd4e 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001170:	4889      	ldr	r0, [pc, #548]	@ (8001398 <fan_Hspeed+0x304>)
 8001172:	f005 fca3 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001176:	230f      	movs	r3, #15
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2337      	movs	r3, #55	@ 0x37
 800117c:	2205      	movs	r2, #5
 800117e:	4989      	ldr	r1, [pc, #548]	@ (80013a4 <fan_Hspeed+0x310>)
 8001180:	4884      	ldr	r0, [pc, #528]	@ (8001394 <fan_Hspeed+0x300>)
 8001182:	f005 fd43 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 8001186:	4881      	ldr	r0, [pc, #516]	@ (800138c <fan_Hspeed+0x2f8>)
 8001188:	f005 fc98 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800118c:	230f      	movs	r3, #15
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2337      	movs	r3, #55	@ 0x37
 8001192:	2294      	movs	r2, #148	@ 0x94
 8001194:	4985      	ldr	r1, [pc, #532]	@ (80013ac <fan_Hspeed+0x318>)
 8001196:	487f      	ldr	r0, [pc, #508]	@ (8001394 <fan_Hspeed+0x300>)
 8001198:	f005 fd38 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_alert, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_2gif, 145, 0, 64, 64);
 800119c:	2340      	movs	r3, #64	@ 0x40
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2340      	movs	r3, #64	@ 0x40
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2300      	movs	r3, #0
 80011a6:	2291      	movs	r2, #145	@ 0x91
 80011a8:	4983      	ldr	r1, [pc, #524]	@ (80013b8 <fan_Hspeed+0x324>)
 80011aa:	487a      	ldr	r0, [pc, #488]	@ (8001394 <fan_Hspeed+0x300>)
 80011ac:	f005 fd62 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 80011b0:	2310      	movs	r3, #16
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	2310      	movs	r3, #16
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2300      	movs	r3, #0
 80011ba:	228e      	movs	r2, #142	@ 0x8e
 80011bc:	497d      	ldr	r1, [pc, #500]	@ (80013b4 <fan_Hspeed+0x320>)
 80011be:	4875      	ldr	r0, [pc, #468]	@ (8001394 <fan_Hspeed+0x300>)
 80011c0:	f005 fd58 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 80011c4:	f000 fd8c 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2100      	movs	r1, #0
 80011cc:	4871      	ldr	r0, [pc, #452]	@ (8001394 <fan_Hspeed+0x300>)
 80011ce:	f005 fda5 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80011d2:	2300      	movs	r3, #0
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	2340      	movs	r3, #64	@ 0x40
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	486c      	ldr	r0, [pc, #432]	@ (8001394 <fan_Hspeed+0x300>)
 80011e4:	f005 fc3c 	bl	8006a60 <draw_rect_filled>
//	Display_refresh();
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 80011e8:	4868      	ldr	r0, [pc, #416]	@ (800138c <fan_Hspeed+0x2f8>)
 80011ea:	f005 fc67 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80011ee:	230f      	movs	r3, #15
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	230a      	movs	r3, #10
 80011f4:	220a      	movs	r2, #10
 80011f6:	4966      	ldr	r1, [pc, #408]	@ (8001390 <fan_Hspeed+0x2fc>)
 80011f8:	4866      	ldr	r0, [pc, #408]	@ (8001394 <fan_Hspeed+0x300>)
 80011fa:	f005 fd07 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 80011fe:	4866      	ldr	r0, [pc, #408]	@ (8001398 <fan_Hspeed+0x304>)
 8001200:	f005 fc5c 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001204:	230f      	movs	r3, #15
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2337      	movs	r3, #55	@ 0x37
 800120a:	2205      	movs	r2, #5
 800120c:	4965      	ldr	r1, [pc, #404]	@ (80013a4 <fan_Hspeed+0x310>)
 800120e:	4861      	ldr	r0, [pc, #388]	@ (8001394 <fan_Hspeed+0x300>)
 8001210:	f005 fcfc 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 8001214:	485d      	ldr	r0, [pc, #372]	@ (800138c <fan_Hspeed+0x2f8>)
 8001216:	f005 fc51 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800121a:	230f      	movs	r3, #15
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2337      	movs	r3, #55	@ 0x37
 8001220:	2294      	movs	r2, #148	@ 0x94
 8001222:	4962      	ldr	r1, [pc, #392]	@ (80013ac <fan_Hspeed+0x318>)
 8001224:	485b      	ldr	r0, [pc, #364]	@ (8001394 <fan_Hspeed+0x300>)
 8001226:	f005 fcf1 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_low, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_3gif, 145, 0, 64, 64);
 800122a:	2340      	movs	r3, #64	@ 0x40
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2340      	movs	r3, #64	@ 0x40
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	2291      	movs	r2, #145	@ 0x91
 8001236:	4961      	ldr	r1, [pc, #388]	@ (80013bc <fan_Hspeed+0x328>)
 8001238:	4856      	ldr	r0, [pc, #344]	@ (8001394 <fan_Hspeed+0x300>)
 800123a:	f005 fd1b 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 800123e:	2310      	movs	r3, #16
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	2310      	movs	r3, #16
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2300      	movs	r3, #0
 8001248:	228e      	movs	r2, #142	@ 0x8e
 800124a:	495a      	ldr	r1, [pc, #360]	@ (80013b4 <fan_Hspeed+0x320>)
 800124c:	4851      	ldr	r0, [pc, #324]	@ (8001394 <fan_Hspeed+0x300>)
 800124e:	f005 fd11 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001252:	f000 fd45 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	484e      	ldr	r0, [pc, #312]	@ (8001394 <fan_Hspeed+0x300>)
 800125c:	f005 fd5e 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001260:	2300      	movs	r3, #0
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	2340      	movs	r3, #64	@ 0x40
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126c:	2200      	movs	r2, #0
 800126e:	2100      	movs	r1, #0
 8001270:	4848      	ldr	r0, [pc, #288]	@ (8001394 <fan_Hspeed+0x300>)
 8001272:	f005 fbf5 	bl	8006a60 <draw_rect_filled>

//    Display_refresh();
//    draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 8001276:	4845      	ldr	r0, [pc, #276]	@ (800138c <fan_Hspeed+0x2f8>)
 8001278:	f005 fc20 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800127c:	230f      	movs	r3, #15
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	230a      	movs	r3, #10
 8001282:	220a      	movs	r2, #10
 8001284:	4942      	ldr	r1, [pc, #264]	@ (8001390 <fan_Hspeed+0x2fc>)
 8001286:	4843      	ldr	r0, [pc, #268]	@ (8001394 <fan_Hspeed+0x300>)
 8001288:	f005 fcc0 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 800128c:	4842      	ldr	r0, [pc, #264]	@ (8001398 <fan_Hspeed+0x304>)
 800128e:	f005 fc15 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001292:	230f      	movs	r3, #15
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2337      	movs	r3, #55	@ 0x37
 8001298:	2205      	movs	r2, #5
 800129a:	4942      	ldr	r1, [pc, #264]	@ (80013a4 <fan_Hspeed+0x310>)
 800129c:	483d      	ldr	r0, [pc, #244]	@ (8001394 <fan_Hspeed+0x300>)
 800129e:	f005 fcb5 	bl	8006c0c <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 80012a2:	4841      	ldr	r0, [pc, #260]	@ (80013a8 <fan_Hspeed+0x314>)
 80012a4:	f005 fc0a 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80012a8:	230f      	movs	r3, #15
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2337      	movs	r3, #55	@ 0x37
 80012ae:	2294      	movs	r2, #148	@ 0x94
 80012b0:	493e      	ldr	r1, [pc, #248]	@ (80013ac <fan_Hspeed+0x318>)
 80012b2:	4838      	ldr	r0, [pc, #224]	@ (8001394 <fan_Hspeed+0x300>)
 80012b4:	f005 fcaa 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_mid, 200, 0, 40, 42);
	select_font(&Font5x7FixedMono);
 80012b8:	4834      	ldr	r0, [pc, #208]	@ (800138c <fan_Hspeed+0x2f8>)
 80012ba:	f005 fbff 	bl	8006abc <select_font>
//    draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_4gif, 145, 0, 64, 64);
 80012be:	2340      	movs	r3, #64	@ 0x40
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	2340      	movs	r3, #64	@ 0x40
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2300      	movs	r3, #0
 80012c8:	2291      	movs	r2, #145	@ 0x91
 80012ca:	493d      	ldr	r1, [pc, #244]	@ (80013c0 <fan_Hspeed+0x32c>)
 80012cc:	4831      	ldr	r0, [pc, #196]	@ (8001394 <fan_Hspeed+0x300>)
 80012ce:	f005 fcd1 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 80012d2:	2310      	movs	r3, #16
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	2310      	movs	r3, #16
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2300      	movs	r3, #0
 80012dc:	228e      	movs	r2, #142	@ 0x8e
 80012de:	4935      	ldr	r1, [pc, #212]	@ (80013b4 <fan_Hspeed+0x320>)
 80012e0:	482c      	ldr	r0, [pc, #176]	@ (8001394 <fan_Hspeed+0x300>)
 80012e2:	f005 fcc7 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 80012e6:	f000 fcfb 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	4829      	ldr	r0, [pc, #164]	@ (8001394 <fan_Hspeed+0x300>)
 80012f0:	f005 fd14 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80012f4:	2300      	movs	r3, #0
 80012f6:	9301      	str	r3, [sp, #4]
 80012f8:	2340      	movs	r3, #64	@ 0x40
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	4823      	ldr	r0, [pc, #140]	@ (8001394 <fan_Hspeed+0x300>)
 8001306:	f005 fbab 	bl	8006a60 <draw_rect_filled>
//	Display_refresh();
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 800130a:	4820      	ldr	r0, [pc, #128]	@ (800138c <fan_Hspeed+0x2f8>)
 800130c:	f005 fbd6 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001310:	230f      	movs	r3, #15
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	230a      	movs	r3, #10
 8001316:	220a      	movs	r2, #10
 8001318:	491d      	ldr	r1, [pc, #116]	@ (8001390 <fan_Hspeed+0x2fc>)
 800131a:	481e      	ldr	r0, [pc, #120]	@ (8001394 <fan_Hspeed+0x300>)
 800131c:	f005 fc76 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001320:	481d      	ldr	r0, [pc, #116]	@ (8001398 <fan_Hspeed+0x304>)
 8001322:	f005 fbcb 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001326:	230f      	movs	r3, #15
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2337      	movs	r3, #55	@ 0x37
 800132c:	2205      	movs	r2, #5
 800132e:	491d      	ldr	r1, [pc, #116]	@ (80013a4 <fan_Hspeed+0x310>)
 8001330:	4818      	ldr	r0, [pc, #96]	@ (8001394 <fan_Hspeed+0x300>)
 8001332:	f005 fc6b 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 8001336:	4815      	ldr	r0, [pc, #84]	@ (800138c <fan_Hspeed+0x2f8>)
 8001338:	f005 fbc0 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800133c:	230f      	movs	r3, #15
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2337      	movs	r3, #55	@ 0x37
 8001342:	2294      	movs	r2, #148	@ 0x94
 8001344:	4919      	ldr	r1, [pc, #100]	@ (80013ac <fan_Hspeed+0x318>)
 8001346:	4813      	ldr	r0, [pc, #76]	@ (8001394 <fan_Hspeed+0x300>)
 8001348:	f005 fc60 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_high, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_5gif, 145, 0, 64, 64);
 800134c:	2340      	movs	r3, #64	@ 0x40
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	2340      	movs	r3, #64	@ 0x40
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2300      	movs	r3, #0
 8001356:	2291      	movs	r2, #145	@ 0x91
 8001358:	491a      	ldr	r1, [pc, #104]	@ (80013c4 <fan_Hspeed+0x330>)
 800135a:	480e      	ldr	r0, [pc, #56]	@ (8001394 <fan_Hspeed+0x300>)
 800135c:	f005 fc8a 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001360:	2310      	movs	r3, #16
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	2310      	movs	r3, #16
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2300      	movs	r3, #0
 800136a:	228e      	movs	r2, #142	@ 0x8e
 800136c:	4911      	ldr	r1, [pc, #68]	@ (80013b4 <fan_Hspeed+0x320>)
 800136e:	4809      	ldr	r0, [pc, #36]	@ (8001394 <fan_Hspeed+0x300>)
 8001370:	f005 fc80 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001374:	f000 fcb4 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <fan_Hspeed+0x300>)
 800137e:	f005 fccd 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001382:	2300      	movs	r3, #0
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	2340      	movs	r3, #64	@ 0x40
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	e01d      	b.n	80013c8 <fan_Hspeed+0x334>
 800138c:	0800b6c8 	.word	0x0800b6c8
 8001390:	0800a7e4 	.word	0x0800a7e4
 8001394:	20003900 	.word	0x20003900
 8001398:	0800f444 	.word	0x0800f444
 800139c:	20005a08 	.word	0x20005a08
 80013a0:	0800a7ec 	.word	0x0800a7ec
 80013a4:	200038cc 	.word	0x200038cc
 80013a8:	0800c53c 	.word	0x0800c53c
 80013ac:	0800a7f4 	.word	0x0800a7f4
 80013b0:	200002b0 	.word	0x200002b0
 80013b4:	200035f8 	.word	0x200035f8
 80013b8:	20000ab0 	.word	0x20000ab0
 80013bc:	200012b0 	.word	0x200012b0
 80013c0:	20001ab0 	.word	0x20001ab0
 80013c4:	200022b0 	.word	0x200022b0
 80013c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	4827      	ldr	r0, [pc, #156]	@ (8001470 <fan_Hspeed+0x3dc>)
 80013d2:	f005 fb45 	bl	8006a60 <draw_rect_filled>
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
//	draw_text(tx_buf, data, 80, 20, 15);
//	draw_bitmap_4bpp(tx_buf, notify, 180, 0, 16, 16);
//	send_buffer_to_OLED(tx_buf, 0, 0);
//	HAL_Delay(1000);
	select_font(&Font5x7FixedMono);
 80013d6:	4827      	ldr	r0, [pc, #156]	@ (8001474 <fan_Hspeed+0x3e0>)
 80013d8:	f005 fb70 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80013dc:	230f      	movs	r3, #15
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	230a      	movs	r3, #10
 80013e2:	220a      	movs	r2, #10
 80013e4:	4924      	ldr	r1, [pc, #144]	@ (8001478 <fan_Hspeed+0x3e4>)
 80013e6:	4822      	ldr	r0, [pc, #136]	@ (8001470 <fan_Hspeed+0x3dc>)
 80013e8:	f005 fc10 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 80013ec:	4823      	ldr	r0, [pc, #140]	@ (800147c <fan_Hspeed+0x3e8>)
 80013ee:	f005 fb65 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 80013f2:	230f      	movs	r3, #15
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2337      	movs	r3, #55	@ 0x37
 80013f8:	2205      	movs	r2, #5
 80013fa:	4921      	ldr	r1, [pc, #132]	@ (8001480 <fan_Hspeed+0x3ec>)
 80013fc:	481c      	ldr	r0, [pc, #112]	@ (8001470 <fan_Hspeed+0x3dc>)
 80013fe:	f005 fc05 	bl	8006c0c <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 8001402:	4820      	ldr	r0, [pc, #128]	@ (8001484 <fan_Hspeed+0x3f0>)
 8001404:	f005 fb5a 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001408:	230f      	movs	r3, #15
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2337      	movs	r3, #55	@ 0x37
 800140e:	2294      	movs	r2, #148	@ 0x94
 8001410:	491d      	ldr	r1, [pc, #116]	@ (8001488 <fan_Hspeed+0x3f4>)
 8001412:	4817      	ldr	r0, [pc, #92]	@ (8001470 <fan_Hspeed+0x3dc>)
 8001414:	f005 fbfa 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_high, 200, 0, 40, 42);
	select_font(&Font5x7FixedMono);
 8001418:	4816      	ldr	r0, [pc, #88]	@ (8001474 <fan_Hspeed+0x3e0>)
 800141a:	f005 fb4f 	bl	8006abc <select_font>
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_6gif, 145, 0, 64, 64);
 800141e:	2340      	movs	r3, #64	@ 0x40
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	2340      	movs	r3, #64	@ 0x40
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2300      	movs	r3, #0
 8001428:	2291      	movs	r2, #145	@ 0x91
 800142a:	4918      	ldr	r1, [pc, #96]	@ (800148c <fan_Hspeed+0x3f8>)
 800142c:	4810      	ldr	r0, [pc, #64]	@ (8001470 <fan_Hspeed+0x3dc>)
 800142e:	f005 fc21 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001432:	2310      	movs	r3, #16
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	2310      	movs	r3, #16
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	228e      	movs	r2, #142	@ 0x8e
 800143e:	4914      	ldr	r1, [pc, #80]	@ (8001490 <fan_Hspeed+0x3fc>)
 8001440:	480b      	ldr	r0, [pc, #44]	@ (8001470 <fan_Hspeed+0x3dc>)
 8001442:	f005 fc17 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001446:	f000 fc4b 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	4808      	ldr	r0, [pc, #32]	@ (8001470 <fan_Hspeed+0x3dc>)
 8001450:	f005 fc64 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001454:	2300      	movs	r3, #0
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	2340      	movs	r3, #64	@ 0x40
 800145a:	9300      	str	r3, [sp, #0]
 800145c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	4802      	ldr	r0, [pc, #8]	@ (8001470 <fan_Hspeed+0x3dc>)
 8001466:	f005 fafb 	bl	8006a60 <draw_rect_filled>



}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	bdb0      	pop	{r4, r5, r7, pc}
 8001470:	20003900 	.word	0x20003900
 8001474:	0800b6c8 	.word	0x0800b6c8
 8001478:	0800a7e4 	.word	0x0800a7e4
 800147c:	0800f444 	.word	0x0800f444
 8001480:	200038cc 	.word	0x200038cc
 8001484:	0800c53c 	.word	0x0800c53c
 8001488:	0800a7f4 	.word	0x0800a7f4
 800148c:	20002ab0 	.word	0x20002ab0
 8001490:	200035f8 	.word	0x200035f8

08001494 <fan_Mspeed>:

void fan_Mspeed()
{
 8001494:	b5b0      	push	{r4, r5, r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af02      	add	r7, sp, #8
	select_font(&Font5x7FixedMono);
 800149a:	48bd      	ldr	r0, [pc, #756]	@ (8001790 <fan_Mspeed+0x2fc>)
 800149c:	f005 fb0e 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80014a0:	230f      	movs	r3, #15
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	230a      	movs	r3, #10
 80014a6:	220a      	movs	r2, #10
 80014a8:	49ba      	ldr	r1, [pc, #744]	@ (8001794 <fan_Mspeed+0x300>)
 80014aa:	48bb      	ldr	r0, [pc, #748]	@ (8001798 <fan_Mspeed+0x304>)
 80014ac:	f005 fbae 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 80014b0:	48ba      	ldr	r0, [pc, #744]	@ (800179c <fan_Mspeed+0x308>)
 80014b2:	f005 fb03 	bl	8006abc <select_font>
	sprintf(data,"%.1f%.f",Temp[0],Temp[1]);
 80014b6:	4bba      	ldr	r3, [pc, #744]	@ (80017a0 <fan_Mspeed+0x30c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f874 	bl	80005a8 <__aeabi_f2d>
 80014c0:	4604      	mov	r4, r0
 80014c2:	460d      	mov	r5, r1
 80014c4:	4bb6      	ldr	r3, [pc, #728]	@ (80017a0 <fan_Mspeed+0x30c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f86d 	bl	80005a8 <__aeabi_f2d>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	e9cd 2300 	strd	r2, r3, [sp]
 80014d6:	4622      	mov	r2, r4
 80014d8:	462b      	mov	r3, r5
 80014da:	49b2      	ldr	r1, [pc, #712]	@ (80017a4 <fan_Mspeed+0x310>)
 80014dc:	48b2      	ldr	r0, [pc, #712]	@ (80017a8 <fan_Mspeed+0x314>)
 80014de:	f007 f815 	bl	800850c <siprintf>
	draw_text(tx_buf, data, 5, 55, 15);
 80014e2:	230f      	movs	r3, #15
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2337      	movs	r3, #55	@ 0x37
 80014e8:	2205      	movs	r2, #5
 80014ea:	49af      	ldr	r1, [pc, #700]	@ (80017a8 <fan_Mspeed+0x314>)
 80014ec:	48aa      	ldr	r0, [pc, #680]	@ (8001798 <fan_Mspeed+0x304>)
 80014ee:	f005 fb8d 	bl	8006c0c <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 80014f2:	48ae      	ldr	r0, [pc, #696]	@ (80017ac <fan_Mspeed+0x318>)
 80014f4:	f005 fae2 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80014f8:	230f      	movs	r3, #15
 80014fa:	9300      	str	r3, [sp, #0]
 80014fc:	2337      	movs	r3, #55	@ 0x37
 80014fe:	2294      	movs	r2, #148	@ 0x94
 8001500:	49ab      	ldr	r1, [pc, #684]	@ (80017b0 <fan_Mspeed+0x31c>)
 8001502:	48a5      	ldr	r0, [pc, #660]	@ (8001798 <fan_Mspeed+0x304>)
 8001504:	f005 fb82 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_off, 200, 0, 40, 42);
	select_font(&Font5x7FixedMono);
 8001508:	48a1      	ldr	r0, [pc, #644]	@ (8001790 <fan_Mspeed+0x2fc>)
 800150a:	f005 fad7 	bl	8006abc <select_font>
//    draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_1gif,145,0, 64, 64);
 800150e:	2340      	movs	r3, #64	@ 0x40
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	2340      	movs	r3, #64	@ 0x40
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	2300      	movs	r3, #0
 8001518:	2291      	movs	r2, #145	@ 0x91
 800151a:	49a6      	ldr	r1, [pc, #664]	@ (80017b4 <fan_Mspeed+0x320>)
 800151c:	489e      	ldr	r0, [pc, #632]	@ (8001798 <fan_Mspeed+0x304>)
 800151e:	f005 fba9 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001522:	2310      	movs	r3, #16
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2310      	movs	r3, #16
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2300      	movs	r3, #0
 800152c:	228e      	movs	r2, #142	@ 0x8e
 800152e:	49a2      	ldr	r1, [pc, #648]	@ (80017b8 <fan_Mspeed+0x324>)
 8001530:	4899      	ldr	r0, [pc, #612]	@ (8001798 <fan_Mspeed+0x304>)
 8001532:	f005 fb9f 	bl	8006c74 <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 180, 0, 16, 16);
	Display_RTC_clock();
 8001536:	f000 fbd3 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	4896      	ldr	r0, [pc, #600]	@ (8001798 <fan_Mspeed+0x304>)
 8001540:	f005 fbec 	bl	8006d1c <send_buffer_to_OLED>
//	HAL_Delay(2000);

	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001544:	2300      	movs	r3, #0
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	2340      	movs	r3, #64	@ 0x40
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001550:	2200      	movs	r2, #0
 8001552:	2100      	movs	r1, #0
 8001554:	4890      	ldr	r0, [pc, #576]	@ (8001798 <fan_Mspeed+0x304>)
 8001556:	f005 fa83 	bl	8006a60 <draw_rect_filled>
	HAL_Delay(50);
 800155a:	2032      	movs	r0, #50	@ 0x32
 800155c:	f001 f8d0 	bl	8002700 <HAL_Delay>

//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 8001560:	488b      	ldr	r0, [pc, #556]	@ (8001790 <fan_Mspeed+0x2fc>)
 8001562:	f005 faab 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001566:	230f      	movs	r3, #15
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	230a      	movs	r3, #10
 800156c:	220a      	movs	r2, #10
 800156e:	4989      	ldr	r1, [pc, #548]	@ (8001794 <fan_Mspeed+0x300>)
 8001570:	4889      	ldr	r0, [pc, #548]	@ (8001798 <fan_Mspeed+0x304>)
 8001572:	f005 fb4b 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001576:	4889      	ldr	r0, [pc, #548]	@ (800179c <fan_Mspeed+0x308>)
 8001578:	f005 faa0 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 800157c:	230f      	movs	r3, #15
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2337      	movs	r3, #55	@ 0x37
 8001582:	2205      	movs	r2, #5
 8001584:	4988      	ldr	r1, [pc, #544]	@ (80017a8 <fan_Mspeed+0x314>)
 8001586:	4884      	ldr	r0, [pc, #528]	@ (8001798 <fan_Mspeed+0x304>)
 8001588:	f005 fb40 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 800158c:	4880      	ldr	r0, [pc, #512]	@ (8001790 <fan_Mspeed+0x2fc>)
 800158e:	f005 fa95 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001592:	230f      	movs	r3, #15
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2337      	movs	r3, #55	@ 0x37
 8001598:	2294      	movs	r2, #148	@ 0x94
 800159a:	4985      	ldr	r1, [pc, #532]	@ (80017b0 <fan_Mspeed+0x31c>)
 800159c:	487e      	ldr	r0, [pc, #504]	@ (8001798 <fan_Mspeed+0x304>)
 800159e:	f005 fb35 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_alert, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_2gif, 145, 0, 64, 64);
 80015a2:	2340      	movs	r3, #64	@ 0x40
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	2340      	movs	r3, #64	@ 0x40
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	2291      	movs	r2, #145	@ 0x91
 80015ae:	4983      	ldr	r1, [pc, #524]	@ (80017bc <fan_Mspeed+0x328>)
 80015b0:	4879      	ldr	r0, [pc, #484]	@ (8001798 <fan_Mspeed+0x304>)
 80015b2:	f005 fb5f 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 80015b6:	2310      	movs	r3, #16
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	2310      	movs	r3, #16
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	228e      	movs	r2, #142	@ 0x8e
 80015c2:	497d      	ldr	r1, [pc, #500]	@ (80017b8 <fan_Mspeed+0x324>)
 80015c4:	4874      	ldr	r0, [pc, #464]	@ (8001798 <fan_Mspeed+0x304>)
 80015c6:	f005 fb55 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 80015ca:	f000 fb89 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	4871      	ldr	r0, [pc, #452]	@ (8001798 <fan_Mspeed+0x304>)
 80015d4:	f005 fba2 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80015d8:	2300      	movs	r3, #0
 80015da:	9301      	str	r3, [sp, #4]
 80015dc:	2340      	movs	r3, #64	@ 0x40
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	486b      	ldr	r0, [pc, #428]	@ (8001798 <fan_Mspeed+0x304>)
 80015ea:	f005 fa39 	bl	8006a60 <draw_rect_filled>
	HAL_Delay(50);
 80015ee:	2032      	movs	r0, #50	@ 0x32
 80015f0:	f001 f886 	bl	8002700 <HAL_Delay>
//	Display_refresh();
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 80015f4:	4866      	ldr	r0, [pc, #408]	@ (8001790 <fan_Mspeed+0x2fc>)
 80015f6:	f005 fa61 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80015fa:	230f      	movs	r3, #15
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	230a      	movs	r3, #10
 8001600:	220a      	movs	r2, #10
 8001602:	4964      	ldr	r1, [pc, #400]	@ (8001794 <fan_Mspeed+0x300>)
 8001604:	4864      	ldr	r0, [pc, #400]	@ (8001798 <fan_Mspeed+0x304>)
 8001606:	f005 fb01 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 800160a:	4864      	ldr	r0, [pc, #400]	@ (800179c <fan_Mspeed+0x308>)
 800160c:	f005 fa56 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001610:	230f      	movs	r3, #15
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	2337      	movs	r3, #55	@ 0x37
 8001616:	2205      	movs	r2, #5
 8001618:	4963      	ldr	r1, [pc, #396]	@ (80017a8 <fan_Mspeed+0x314>)
 800161a:	485f      	ldr	r0, [pc, #380]	@ (8001798 <fan_Mspeed+0x304>)
 800161c:	f005 faf6 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 8001620:	485b      	ldr	r0, [pc, #364]	@ (8001790 <fan_Mspeed+0x2fc>)
 8001622:	f005 fa4b 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001626:	230f      	movs	r3, #15
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2337      	movs	r3, #55	@ 0x37
 800162c:	2294      	movs	r2, #148	@ 0x94
 800162e:	4960      	ldr	r1, [pc, #384]	@ (80017b0 <fan_Mspeed+0x31c>)
 8001630:	4859      	ldr	r0, [pc, #356]	@ (8001798 <fan_Mspeed+0x304>)
 8001632:	f005 faeb 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_low, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_3gif, 145, 0, 64, 64);
 8001636:	2340      	movs	r3, #64	@ 0x40
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	2340      	movs	r3, #64	@ 0x40
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2300      	movs	r3, #0
 8001640:	2291      	movs	r2, #145	@ 0x91
 8001642:	495f      	ldr	r1, [pc, #380]	@ (80017c0 <fan_Mspeed+0x32c>)
 8001644:	4854      	ldr	r0, [pc, #336]	@ (8001798 <fan_Mspeed+0x304>)
 8001646:	f005 fb15 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 800164a:	2310      	movs	r3, #16
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	2310      	movs	r3, #16
 8001650:	9300      	str	r3, [sp, #0]
 8001652:	2300      	movs	r3, #0
 8001654:	228e      	movs	r2, #142	@ 0x8e
 8001656:	4958      	ldr	r1, [pc, #352]	@ (80017b8 <fan_Mspeed+0x324>)
 8001658:	484f      	ldr	r0, [pc, #316]	@ (8001798 <fan_Mspeed+0x304>)
 800165a:	f005 fb0b 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 800165e:	f000 fb3f 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2100      	movs	r1, #0
 8001666:	484c      	ldr	r0, [pc, #304]	@ (8001798 <fan_Mspeed+0x304>)
 8001668:	f005 fb58 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 800166c:	2300      	movs	r3, #0
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	2340      	movs	r3, #64	@ 0x40
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	4846      	ldr	r0, [pc, #280]	@ (8001798 <fan_Mspeed+0x304>)
 800167e:	f005 f9ef 	bl	8006a60 <draw_rect_filled>

	HAL_Delay(50);
 8001682:	2032      	movs	r0, #50	@ 0x32
 8001684:	f001 f83c 	bl	8002700 <HAL_Delay>
//    Display_refresh();
//    draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 8001688:	4841      	ldr	r0, [pc, #260]	@ (8001790 <fan_Mspeed+0x2fc>)
 800168a:	f005 fa17 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800168e:	230f      	movs	r3, #15
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	230a      	movs	r3, #10
 8001694:	220a      	movs	r2, #10
 8001696:	493f      	ldr	r1, [pc, #252]	@ (8001794 <fan_Mspeed+0x300>)
 8001698:	483f      	ldr	r0, [pc, #252]	@ (8001798 <fan_Mspeed+0x304>)
 800169a:	f005 fab7 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 800169e:	483f      	ldr	r0, [pc, #252]	@ (800179c <fan_Mspeed+0x308>)
 80016a0:	f005 fa0c 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 80016a4:	230f      	movs	r3, #15
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	2337      	movs	r3, #55	@ 0x37
 80016aa:	2205      	movs	r2, #5
 80016ac:	493e      	ldr	r1, [pc, #248]	@ (80017a8 <fan_Mspeed+0x314>)
 80016ae:	483a      	ldr	r0, [pc, #232]	@ (8001798 <fan_Mspeed+0x304>)
 80016b0:	f005 faac 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 80016b4:	4836      	ldr	r0, [pc, #216]	@ (8001790 <fan_Mspeed+0x2fc>)
 80016b6:	f005 fa01 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80016ba:	230f      	movs	r3, #15
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2337      	movs	r3, #55	@ 0x37
 80016c0:	2294      	movs	r2, #148	@ 0x94
 80016c2:	493b      	ldr	r1, [pc, #236]	@ (80017b0 <fan_Mspeed+0x31c>)
 80016c4:	4834      	ldr	r0, [pc, #208]	@ (8001798 <fan_Mspeed+0x304>)
 80016c6:	f005 faa1 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_mid, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//    draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_4gif, 145, 0, 64, 64);
 80016ca:	2340      	movs	r3, #64	@ 0x40
 80016cc:	9301      	str	r3, [sp, #4]
 80016ce:	2340      	movs	r3, #64	@ 0x40
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	2300      	movs	r3, #0
 80016d4:	2291      	movs	r2, #145	@ 0x91
 80016d6:	493b      	ldr	r1, [pc, #236]	@ (80017c4 <fan_Mspeed+0x330>)
 80016d8:	482f      	ldr	r0, [pc, #188]	@ (8001798 <fan_Mspeed+0x304>)
 80016da:	f005 facb 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 80016de:	2310      	movs	r3, #16
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	2310      	movs	r3, #16
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2300      	movs	r3, #0
 80016e8:	228e      	movs	r2, #142	@ 0x8e
 80016ea:	4933      	ldr	r1, [pc, #204]	@ (80017b8 <fan_Mspeed+0x324>)
 80016ec:	482a      	ldr	r0, [pc, #168]	@ (8001798 <fan_Mspeed+0x304>)
 80016ee:	f005 fac1 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 80016f2:	f000 faf5 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	4827      	ldr	r0, [pc, #156]	@ (8001798 <fan_Mspeed+0x304>)
 80016fc:	f005 fb0e 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001700:	2300      	movs	r3, #0
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2340      	movs	r3, #64	@ 0x40
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800170c:	2200      	movs	r2, #0
 800170e:	2100      	movs	r1, #0
 8001710:	4821      	ldr	r0, [pc, #132]	@ (8001798 <fan_Mspeed+0x304>)
 8001712:	f005 f9a5 	bl	8006a60 <draw_rect_filled>
	HAL_Delay(50);
 8001716:	2032      	movs	r0, #50	@ 0x32
 8001718:	f000 fff2 	bl	8002700 <HAL_Delay>
//	Display_refresh();
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 800171c:	481c      	ldr	r0, [pc, #112]	@ (8001790 <fan_Mspeed+0x2fc>)
 800171e:	f005 f9cd 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001722:	230f      	movs	r3, #15
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	230a      	movs	r3, #10
 8001728:	220a      	movs	r2, #10
 800172a:	491a      	ldr	r1, [pc, #104]	@ (8001794 <fan_Mspeed+0x300>)
 800172c:	481a      	ldr	r0, [pc, #104]	@ (8001798 <fan_Mspeed+0x304>)
 800172e:	f005 fa6d 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001732:	481a      	ldr	r0, [pc, #104]	@ (800179c <fan_Mspeed+0x308>)
 8001734:	f005 f9c2 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001738:	230f      	movs	r3, #15
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2337      	movs	r3, #55	@ 0x37
 800173e:	2205      	movs	r2, #5
 8001740:	4919      	ldr	r1, [pc, #100]	@ (80017a8 <fan_Mspeed+0x314>)
 8001742:	4815      	ldr	r0, [pc, #84]	@ (8001798 <fan_Mspeed+0x304>)
 8001744:	f005 fa62 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 8001748:	4811      	ldr	r0, [pc, #68]	@ (8001790 <fan_Mspeed+0x2fc>)
 800174a:	f005 f9b7 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800174e:	230f      	movs	r3, #15
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2337      	movs	r3, #55	@ 0x37
 8001754:	2294      	movs	r2, #148	@ 0x94
 8001756:	4916      	ldr	r1, [pc, #88]	@ (80017b0 <fan_Mspeed+0x31c>)
 8001758:	480f      	ldr	r0, [pc, #60]	@ (8001798 <fan_Mspeed+0x304>)
 800175a:	f005 fa57 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_high, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_5gif, 145, 0, 64, 64);
 800175e:	2340      	movs	r3, #64	@ 0x40
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	2340      	movs	r3, #64	@ 0x40
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	2300      	movs	r3, #0
 8001768:	2291      	movs	r2, #145	@ 0x91
 800176a:	4917      	ldr	r1, [pc, #92]	@ (80017c8 <fan_Mspeed+0x334>)
 800176c:	480a      	ldr	r0, [pc, #40]	@ (8001798 <fan_Mspeed+0x304>)
 800176e:	f005 fa81 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001772:	2310      	movs	r3, #16
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	2310      	movs	r3, #16
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2300      	movs	r3, #0
 800177c:	228e      	movs	r2, #142	@ 0x8e
 800177e:	490e      	ldr	r1, [pc, #56]	@ (80017b8 <fan_Mspeed+0x324>)
 8001780:	4805      	ldr	r0, [pc, #20]	@ (8001798 <fan_Mspeed+0x304>)
 8001782:	f005 fa77 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001786:	f000 faab 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	e01d      	b.n	80017cc <fan_Mspeed+0x338>
 8001790:	0800b6c8 	.word	0x0800b6c8
 8001794:	0800a7e4 	.word	0x0800a7e4
 8001798:	20003900 	.word	0x20003900
 800179c:	0800f444 	.word	0x0800f444
 80017a0:	20005a08 	.word	0x20005a08
 80017a4:	0800a7ec 	.word	0x0800a7ec
 80017a8:	200038cc 	.word	0x200038cc
 80017ac:	0800c53c 	.word	0x0800c53c
 80017b0:	0800a7f4 	.word	0x0800a7f4
 80017b4:	200002b0 	.word	0x200002b0
 80017b8:	200035f8 	.word	0x200035f8
 80017bc:	20000ab0 	.word	0x20000ab0
 80017c0:	200012b0 	.word	0x200012b0
 80017c4:	20001ab0 	.word	0x20001ab0
 80017c8:	200022b0 	.word	0x200022b0
 80017cc:	482e      	ldr	r0, [pc, #184]	@ (8001888 <fan_Mspeed+0x3f4>)
 80017ce:	f005 faa5 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80017d2:	2300      	movs	r3, #0
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	2340      	movs	r3, #64	@ 0x40
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	4829      	ldr	r0, [pc, #164]	@ (8001888 <fan_Mspeed+0x3f4>)
 80017e4:	f005 f93c 	bl	8006a60 <draw_rect_filled>
	HAL_Delay(50);
 80017e8:	2032      	movs	r0, #50	@ 0x32
 80017ea:	f000 ff89 	bl	8002700 <HAL_Delay>
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
//	draw_text(tx_buf, data, 80, 20, 15);
//	draw_bitmap_4bpp(tx_buf, notify, 180, 0, 16, 16);
//	send_buffer_to_OLED(tx_buf, 0, 0);
//	HAL_Delay(1000);
	select_font(&Font5x7FixedMono);
 80017ee:	4827      	ldr	r0, [pc, #156]	@ (800188c <fan_Mspeed+0x3f8>)
 80017f0:	f005 f964 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80017f4:	230f      	movs	r3, #15
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	230a      	movs	r3, #10
 80017fa:	220a      	movs	r2, #10
 80017fc:	4924      	ldr	r1, [pc, #144]	@ (8001890 <fan_Mspeed+0x3fc>)
 80017fe:	4822      	ldr	r0, [pc, #136]	@ (8001888 <fan_Mspeed+0x3f4>)
 8001800:	f005 fa04 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001804:	4823      	ldr	r0, [pc, #140]	@ (8001894 <fan_Mspeed+0x400>)
 8001806:	f005 f959 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 800180a:	230f      	movs	r3, #15
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	2337      	movs	r3, #55	@ 0x37
 8001810:	2205      	movs	r2, #5
 8001812:	4921      	ldr	r1, [pc, #132]	@ (8001898 <fan_Mspeed+0x404>)
 8001814:	481c      	ldr	r0, [pc, #112]	@ (8001888 <fan_Mspeed+0x3f4>)
 8001816:	f005 f9f9 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 800181a:	481c      	ldr	r0, [pc, #112]	@ (800188c <fan_Mspeed+0x3f8>)
 800181c:	f005 f94e 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001820:	230f      	movs	r3, #15
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2337      	movs	r3, #55	@ 0x37
 8001826:	2294      	movs	r2, #148	@ 0x94
 8001828:	491c      	ldr	r1, [pc, #112]	@ (800189c <fan_Mspeed+0x408>)
 800182a:	4817      	ldr	r0, [pc, #92]	@ (8001888 <fan_Mspeed+0x3f4>)
 800182c:	f005 f9ee 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_high, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_6gif, 145, 0, 64, 64);
 8001830:	2340      	movs	r3, #64	@ 0x40
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	2340      	movs	r3, #64	@ 0x40
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2300      	movs	r3, #0
 800183a:	2291      	movs	r2, #145	@ 0x91
 800183c:	4918      	ldr	r1, [pc, #96]	@ (80018a0 <fan_Mspeed+0x40c>)
 800183e:	4812      	ldr	r0, [pc, #72]	@ (8001888 <fan_Mspeed+0x3f4>)
 8001840:	f005 fa18 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001844:	2310      	movs	r3, #16
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	2310      	movs	r3, #16
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2300      	movs	r3, #0
 800184e:	228e      	movs	r2, #142	@ 0x8e
 8001850:	4914      	ldr	r1, [pc, #80]	@ (80018a4 <fan_Mspeed+0x410>)
 8001852:	480d      	ldr	r0, [pc, #52]	@ (8001888 <fan_Mspeed+0x3f4>)
 8001854:	f005 fa0e 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001858:	f000 fa42 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	4809      	ldr	r0, [pc, #36]	@ (8001888 <fan_Mspeed+0x3f4>)
 8001862:	f005 fa5b 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001866:	2300      	movs	r3, #0
 8001868:	9301      	str	r3, [sp, #4]
 800186a:	2340      	movs	r3, #64	@ 0x40
 800186c:	9300      	str	r3, [sp, #0]
 800186e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	4804      	ldr	r0, [pc, #16]	@ (8001888 <fan_Mspeed+0x3f4>)
 8001878:	f005 f8f2 	bl	8006a60 <draw_rect_filled>
	HAL_Delay(50);
 800187c:	2032      	movs	r0, #50	@ 0x32
 800187e:	f000 ff3f 	bl	8002700 <HAL_Delay>


}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bdb0      	pop	{r4, r5, r7, pc}
 8001888:	20003900 	.word	0x20003900
 800188c:	0800b6c8 	.word	0x0800b6c8
 8001890:	0800a7e4 	.word	0x0800a7e4
 8001894:	0800f444 	.word	0x0800f444
 8001898:	200038cc 	.word	0x200038cc
 800189c:	0800a7f4 	.word	0x0800a7f4
 80018a0:	20002ab0 	.word	0x20002ab0
 80018a4:	200035f8 	.word	0x200035f8

080018a8 <fan_Lspeed>:

void fan_Lspeed()
{
 80018a8:	b5b0      	push	{r4, r5, r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af02      	add	r7, sp, #8
	select_font(&Font5x7FixedMono);
 80018ae:	48be      	ldr	r0, [pc, #760]	@ (8001ba8 <fan_Lspeed+0x300>)
 80018b0:	f005 f904 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80018b4:	230f      	movs	r3, #15
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	230a      	movs	r3, #10
 80018ba:	220a      	movs	r2, #10
 80018bc:	49bb      	ldr	r1, [pc, #748]	@ (8001bac <fan_Lspeed+0x304>)
 80018be:	48bc      	ldr	r0, [pc, #752]	@ (8001bb0 <fan_Lspeed+0x308>)
 80018c0:	f005 f9a4 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 80018c4:	48bb      	ldr	r0, [pc, #748]	@ (8001bb4 <fan_Lspeed+0x30c>)
 80018c6:	f005 f8f9 	bl	8006abc <select_font>
	sprintf(data,"%.1f%.f",Temp[0],Temp[1]);
 80018ca:	4bbb      	ldr	r3, [pc, #748]	@ (8001bb8 <fan_Lspeed+0x310>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fe6a 	bl	80005a8 <__aeabi_f2d>
 80018d4:	4604      	mov	r4, r0
 80018d6:	460d      	mov	r5, r1
 80018d8:	4bb7      	ldr	r3, [pc, #732]	@ (8001bb8 <fan_Lspeed+0x310>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe63 	bl	80005a8 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9cd 2300 	strd	r2, r3, [sp]
 80018ea:	4622      	mov	r2, r4
 80018ec:	462b      	mov	r3, r5
 80018ee:	49b3      	ldr	r1, [pc, #716]	@ (8001bbc <fan_Lspeed+0x314>)
 80018f0:	48b3      	ldr	r0, [pc, #716]	@ (8001bc0 <fan_Lspeed+0x318>)
 80018f2:	f006 fe0b 	bl	800850c <siprintf>
	draw_text(tx_buf, data, 5, 55, 15);
 80018f6:	230f      	movs	r3, #15
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	2337      	movs	r3, #55	@ 0x37
 80018fc:	2205      	movs	r2, #5
 80018fe:	49b0      	ldr	r1, [pc, #704]	@ (8001bc0 <fan_Lspeed+0x318>)
 8001900:	48ab      	ldr	r0, [pc, #684]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001902:	f005 f983 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 8001906:	48a8      	ldr	r0, [pc, #672]	@ (8001ba8 <fan_Lspeed+0x300>)
 8001908:	f005 f8d8 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800190c:	230f      	movs	r3, #15
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2337      	movs	r3, #55	@ 0x37
 8001912:	2294      	movs	r2, #148	@ 0x94
 8001914:	49ab      	ldr	r1, [pc, #684]	@ (8001bc4 <fan_Lspeed+0x31c>)
 8001916:	48a6      	ldr	r0, [pc, #664]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001918:	f005 f978 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_off, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//    draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_1gif,145,0, 64, 64);
 800191c:	2340      	movs	r3, #64	@ 0x40
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	2340      	movs	r3, #64	@ 0x40
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2300      	movs	r3, #0
 8001926:	2291      	movs	r2, #145	@ 0x91
 8001928:	49a7      	ldr	r1, [pc, #668]	@ (8001bc8 <fan_Lspeed+0x320>)
 800192a:	48a1      	ldr	r0, [pc, #644]	@ (8001bb0 <fan_Lspeed+0x308>)
 800192c:	f005 f9a2 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001930:	2310      	movs	r3, #16
 8001932:	9301      	str	r3, [sp, #4]
 8001934:	2310      	movs	r3, #16
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	228e      	movs	r2, #142	@ 0x8e
 800193c:	49a3      	ldr	r1, [pc, #652]	@ (8001bcc <fan_Lspeed+0x324>)
 800193e:	489c      	ldr	r0, [pc, #624]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001940:	f005 f998 	bl	8006c74 <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 180, 0, 16, 16);
	Display_RTC_clock();
 8001944:	f000 f9cc 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	4898      	ldr	r0, [pc, #608]	@ (8001bb0 <fan_Lspeed+0x308>)
 800194e:	f005 f9e5 	bl	8006d1c <send_buffer_to_OLED>
//	HAL_Delay(2000);

	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001952:	2300      	movs	r3, #0
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	2340      	movs	r3, #64	@ 0x40
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	4893      	ldr	r0, [pc, #588]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001964:	f005 f87c 	bl	8006a60 <draw_rect_filled>
	HAL_Delay(100);
 8001968:	2064      	movs	r0, #100	@ 0x64
 800196a:	f000 fec9 	bl	8002700 <HAL_Delay>

//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 800196e:	488e      	ldr	r0, [pc, #568]	@ (8001ba8 <fan_Lspeed+0x300>)
 8001970:	f005 f8a4 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001974:	230f      	movs	r3, #15
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	230a      	movs	r3, #10
 800197a:	220a      	movs	r2, #10
 800197c:	498b      	ldr	r1, [pc, #556]	@ (8001bac <fan_Lspeed+0x304>)
 800197e:	488c      	ldr	r0, [pc, #560]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001980:	f005 f944 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001984:	488b      	ldr	r0, [pc, #556]	@ (8001bb4 <fan_Lspeed+0x30c>)
 8001986:	f005 f899 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 800198a:	230f      	movs	r3, #15
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2337      	movs	r3, #55	@ 0x37
 8001990:	2205      	movs	r2, #5
 8001992:	498b      	ldr	r1, [pc, #556]	@ (8001bc0 <fan_Lspeed+0x318>)
 8001994:	4886      	ldr	r0, [pc, #536]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001996:	f005 f939 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 800199a:	4883      	ldr	r0, [pc, #524]	@ (8001ba8 <fan_Lspeed+0x300>)
 800199c:	f005 f88e 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80019a0:	230f      	movs	r3, #15
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2337      	movs	r3, #55	@ 0x37
 80019a6:	2294      	movs	r2, #148	@ 0x94
 80019a8:	4986      	ldr	r1, [pc, #536]	@ (8001bc4 <fan_Lspeed+0x31c>)
 80019aa:	4881      	ldr	r0, [pc, #516]	@ (8001bb0 <fan_Lspeed+0x308>)
 80019ac:	f005 f92e 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_alert, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_2gif, 145, 0, 64, 64);
 80019b0:	2340      	movs	r3, #64	@ 0x40
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2340      	movs	r3, #64	@ 0x40
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2300      	movs	r3, #0
 80019ba:	2291      	movs	r2, #145	@ 0x91
 80019bc:	4984      	ldr	r1, [pc, #528]	@ (8001bd0 <fan_Lspeed+0x328>)
 80019be:	487c      	ldr	r0, [pc, #496]	@ (8001bb0 <fan_Lspeed+0x308>)
 80019c0:	f005 f958 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 80019c4:	2310      	movs	r3, #16
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	2310      	movs	r3, #16
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2300      	movs	r3, #0
 80019ce:	228e      	movs	r2, #142	@ 0x8e
 80019d0:	497e      	ldr	r1, [pc, #504]	@ (8001bcc <fan_Lspeed+0x324>)
 80019d2:	4877      	ldr	r0, [pc, #476]	@ (8001bb0 <fan_Lspeed+0x308>)
 80019d4:	f005 f94e 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 80019d8:	f000 f982 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	4873      	ldr	r0, [pc, #460]	@ (8001bb0 <fan_Lspeed+0x308>)
 80019e2:	f005 f99b 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80019e6:	2300      	movs	r3, #0
 80019e8:	9301      	str	r3, [sp, #4]
 80019ea:	2340      	movs	r3, #64	@ 0x40
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	486e      	ldr	r0, [pc, #440]	@ (8001bb0 <fan_Lspeed+0x308>)
 80019f8:	f005 f832 	bl	8006a60 <draw_rect_filled>
	HAL_Delay(100);
 80019fc:	2064      	movs	r0, #100	@ 0x64
 80019fe:	f000 fe7f 	bl	8002700 <HAL_Delay>
//	Display_refresh();
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 8001a02:	4869      	ldr	r0, [pc, #420]	@ (8001ba8 <fan_Lspeed+0x300>)
 8001a04:	f005 f85a 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001a08:	230f      	movs	r3, #15
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	220a      	movs	r2, #10
 8001a10:	4966      	ldr	r1, [pc, #408]	@ (8001bac <fan_Lspeed+0x304>)
 8001a12:	4867      	ldr	r0, [pc, #412]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001a14:	f005 f8fa 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001a18:	4866      	ldr	r0, [pc, #408]	@ (8001bb4 <fan_Lspeed+0x30c>)
 8001a1a:	f005 f84f 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001a1e:	230f      	movs	r3, #15
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2337      	movs	r3, #55	@ 0x37
 8001a24:	2205      	movs	r2, #5
 8001a26:	4966      	ldr	r1, [pc, #408]	@ (8001bc0 <fan_Lspeed+0x318>)
 8001a28:	4861      	ldr	r0, [pc, #388]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001a2a:	f005 f8ef 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 8001a2e:	485e      	ldr	r0, [pc, #376]	@ (8001ba8 <fan_Lspeed+0x300>)
 8001a30:	f005 f844 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001a34:	230f      	movs	r3, #15
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	2337      	movs	r3, #55	@ 0x37
 8001a3a:	2294      	movs	r2, #148	@ 0x94
 8001a3c:	4961      	ldr	r1, [pc, #388]	@ (8001bc4 <fan_Lspeed+0x31c>)
 8001a3e:	485c      	ldr	r0, [pc, #368]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001a40:	f005 f8e4 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_low, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_3gif, 145, 0, 64, 64);
 8001a44:	2340      	movs	r3, #64	@ 0x40
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	2340      	movs	r3, #64	@ 0x40
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2291      	movs	r2, #145	@ 0x91
 8001a50:	4960      	ldr	r1, [pc, #384]	@ (8001bd4 <fan_Lspeed+0x32c>)
 8001a52:	4857      	ldr	r0, [pc, #348]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001a54:	f005 f90e 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001a58:	2310      	movs	r3, #16
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	2310      	movs	r3, #16
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	2300      	movs	r3, #0
 8001a62:	228e      	movs	r2, #142	@ 0x8e
 8001a64:	4959      	ldr	r1, [pc, #356]	@ (8001bcc <fan_Lspeed+0x324>)
 8001a66:	4852      	ldr	r0, [pc, #328]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001a68:	f005 f904 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001a6c:	f000 f938 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	484e      	ldr	r0, [pc, #312]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001a76:	f005 f951 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2340      	movs	r3, #64	@ 0x40
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4849      	ldr	r0, [pc, #292]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001a8c:	f004 ffe8 	bl	8006a60 <draw_rect_filled>

	HAL_Delay(100);
 8001a90:	2064      	movs	r0, #100	@ 0x64
 8001a92:	f000 fe35 	bl	8002700 <HAL_Delay>
//    Display_refresh();
//    draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 8001a96:	4844      	ldr	r0, [pc, #272]	@ (8001ba8 <fan_Lspeed+0x300>)
 8001a98:	f005 f810 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	220a      	movs	r2, #10
 8001aa4:	4941      	ldr	r1, [pc, #260]	@ (8001bac <fan_Lspeed+0x304>)
 8001aa6:	4842      	ldr	r0, [pc, #264]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001aa8:	f005 f8b0 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001aac:	4841      	ldr	r0, [pc, #260]	@ (8001bb4 <fan_Lspeed+0x30c>)
 8001aae:	f005 f805 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2337      	movs	r3, #55	@ 0x37
 8001ab8:	2205      	movs	r2, #5
 8001aba:	4941      	ldr	r1, [pc, #260]	@ (8001bc0 <fan_Lspeed+0x318>)
 8001abc:	483c      	ldr	r0, [pc, #240]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001abe:	f005 f8a5 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 8001ac2:	4839      	ldr	r0, [pc, #228]	@ (8001ba8 <fan_Lspeed+0x300>)
 8001ac4:	f004 fffa 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001ac8:	230f      	movs	r3, #15
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	2337      	movs	r3, #55	@ 0x37
 8001ace:	2294      	movs	r2, #148	@ 0x94
 8001ad0:	493c      	ldr	r1, [pc, #240]	@ (8001bc4 <fan_Lspeed+0x31c>)
 8001ad2:	4837      	ldr	r0, [pc, #220]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001ad4:	f005 f89a 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_mid, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//    draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_4gif, 145, 0, 64, 64);
 8001ad8:	2340      	movs	r3, #64	@ 0x40
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2340      	movs	r3, #64	@ 0x40
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2291      	movs	r2, #145	@ 0x91
 8001ae4:	493c      	ldr	r1, [pc, #240]	@ (8001bd8 <fan_Lspeed+0x330>)
 8001ae6:	4832      	ldr	r0, [pc, #200]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001ae8:	f005 f8c4 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001aec:	2310      	movs	r3, #16
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2310      	movs	r3, #16
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	2300      	movs	r3, #0
 8001af6:	228e      	movs	r2, #142	@ 0x8e
 8001af8:	4934      	ldr	r1, [pc, #208]	@ (8001bcc <fan_Lspeed+0x324>)
 8001afa:	482d      	ldr	r0, [pc, #180]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001afc:	f005 f8ba 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001b00:	f000 f8ee 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	2100      	movs	r1, #0
 8001b08:	4829      	ldr	r0, [pc, #164]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001b0a:	f005 f907 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001b0e:	2300      	movs	r3, #0
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	2340      	movs	r3, #64	@ 0x40
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4824      	ldr	r0, [pc, #144]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001b20:	f004 ff9e 	bl	8006a60 <draw_rect_filled>
	HAL_Delay(100);
 8001b24:	2064      	movs	r0, #100	@ 0x64
 8001b26:	f000 fdeb 	bl	8002700 <HAL_Delay>
//	Display_refresh();
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 8001b2a:	481f      	ldr	r0, [pc, #124]	@ (8001ba8 <fan_Lspeed+0x300>)
 8001b2c:	f004 ffc6 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001b30:	230f      	movs	r3, #15
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	230a      	movs	r3, #10
 8001b36:	220a      	movs	r2, #10
 8001b38:	491c      	ldr	r1, [pc, #112]	@ (8001bac <fan_Lspeed+0x304>)
 8001b3a:	481d      	ldr	r0, [pc, #116]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001b3c:	f005 f866 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001b40:	481c      	ldr	r0, [pc, #112]	@ (8001bb4 <fan_Lspeed+0x30c>)
 8001b42:	f004 ffbb 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001b46:	230f      	movs	r3, #15
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2337      	movs	r3, #55	@ 0x37
 8001b4c:	2205      	movs	r2, #5
 8001b4e:	491c      	ldr	r1, [pc, #112]	@ (8001bc0 <fan_Lspeed+0x318>)
 8001b50:	4817      	ldr	r0, [pc, #92]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001b52:	f005 f85b 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 8001b56:	4814      	ldr	r0, [pc, #80]	@ (8001ba8 <fan_Lspeed+0x300>)
 8001b58:	f004 ffb0 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2337      	movs	r3, #55	@ 0x37
 8001b62:	2294      	movs	r2, #148	@ 0x94
 8001b64:	4917      	ldr	r1, [pc, #92]	@ (8001bc4 <fan_Lspeed+0x31c>)
 8001b66:	4812      	ldr	r0, [pc, #72]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001b68:	f005 f850 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_high, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_5gif, 145, 0, 64, 64);
 8001b6c:	2340      	movs	r3, #64	@ 0x40
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2340      	movs	r3, #64	@ 0x40
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2300      	movs	r3, #0
 8001b76:	2291      	movs	r2, #145	@ 0x91
 8001b78:	4918      	ldr	r1, [pc, #96]	@ (8001bdc <fan_Lspeed+0x334>)
 8001b7a:	480d      	ldr	r0, [pc, #52]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001b7c:	f005 f87a 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001b80:	2310      	movs	r3, #16
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	2310      	movs	r3, #16
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	228e      	movs	r2, #142	@ 0x8e
 8001b8c:	490f      	ldr	r1, [pc, #60]	@ (8001bcc <fan_Lspeed+0x324>)
 8001b8e:	4808      	ldr	r0, [pc, #32]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001b90:	f005 f870 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001b94:	f000 f8a4 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4804      	ldr	r0, [pc, #16]	@ (8001bb0 <fan_Lspeed+0x308>)
 8001b9e:	f005 f8bd 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	e01b      	b.n	8001be0 <fan_Lspeed+0x338>
 8001ba8:	0800b6c8 	.word	0x0800b6c8
 8001bac:	0800a7e4 	.word	0x0800a7e4
 8001bb0:	20003900 	.word	0x20003900
 8001bb4:	0800f444 	.word	0x0800f444
 8001bb8:	20005a08 	.word	0x20005a08
 8001bbc:	0800a7ec 	.word	0x0800a7ec
 8001bc0:	200038cc 	.word	0x200038cc
 8001bc4:	0800a7f4 	.word	0x0800a7f4
 8001bc8:	200002b0 	.word	0x200002b0
 8001bcc:	200035f8 	.word	0x200035f8
 8001bd0:	20000ab0 	.word	0x20000ab0
 8001bd4:	200012b0 	.word	0x200012b0
 8001bd8:	20001ab0 	.word	0x20001ab0
 8001bdc:	200022b0 	.word	0x200022b0
 8001be0:	2340      	movs	r3, #64	@ 0x40
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	4829      	ldr	r0, [pc, #164]	@ (8001c94 <fan_Lspeed+0x3ec>)
 8001bee:	f004 ff37 	bl	8006a60 <draw_rect_filled>
	HAL_Delay(100);
 8001bf2:	2064      	movs	r0, #100	@ 0x64
 8001bf4:	f000 fd84 	bl	8002700 <HAL_Delay>
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
//	draw_text(tx_buf, data, 80, 20, 15);
//	draw_bitmap_4bpp(tx_buf, notify, 180, 0, 16, 16);
//	send_buffer_to_OLED(tx_buf, 0, 0);
//	HAL_Delay(1000);
	select_font(&Font5x7FixedMono);
 8001bf8:	4827      	ldr	r0, [pc, #156]	@ (8001c98 <fan_Lspeed+0x3f0>)
 8001bfa:	f004 ff5f 	bl	8006abc <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001bfe:	230f      	movs	r3, #15
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	230a      	movs	r3, #10
 8001c04:	220a      	movs	r2, #10
 8001c06:	4925      	ldr	r1, [pc, #148]	@ (8001c9c <fan_Lspeed+0x3f4>)
 8001c08:	4822      	ldr	r0, [pc, #136]	@ (8001c94 <fan_Lspeed+0x3ec>)
 8001c0a:	f004 ffff 	bl	8006c0c <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001c0e:	4824      	ldr	r0, [pc, #144]	@ (8001ca0 <fan_Lspeed+0x3f8>)
 8001c10:	f004 ff54 	bl	8006abc <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001c14:	230f      	movs	r3, #15
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	2337      	movs	r3, #55	@ 0x37
 8001c1a:	2205      	movs	r2, #5
 8001c1c:	4921      	ldr	r1, [pc, #132]	@ (8001ca4 <fan_Lspeed+0x3fc>)
 8001c1e:	481d      	ldr	r0, [pc, #116]	@ (8001c94 <fan_Lspeed+0x3ec>)
 8001c20:	f004 fff4 	bl	8006c0c <draw_text>
	select_font(&Font5x7FixedMono);
 8001c24:	481c      	ldr	r0, [pc, #112]	@ (8001c98 <fan_Lspeed+0x3f0>)
 8001c26:	f004 ff49 	bl	8006abc <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001c2a:	230f      	movs	r3, #15
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	2337      	movs	r3, #55	@ 0x37
 8001c30:	2294      	movs	r2, #148	@ 0x94
 8001c32:	491d      	ldr	r1, [pc, #116]	@ (8001ca8 <fan_Lspeed+0x400>)
 8001c34:	4817      	ldr	r0, [pc, #92]	@ (8001c94 <fan_Lspeed+0x3ec>)
 8001c36:	f004 ffe9 	bl	8006c0c <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_high, 200, 0, 40, 42);
//	select_font(&Font5x7FixedMono);
//	draw_text(tx_buf, "H", 185, 0, 15);
	draw_bitmap_4bpp(tx_buf, fan_6gif, 145, 0, 64, 64);
 8001c3a:	2340      	movs	r3, #64	@ 0x40
 8001c3c:	9301      	str	r3, [sp, #4]
 8001c3e:	2340      	movs	r3, #64	@ 0x40
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	2300      	movs	r3, #0
 8001c44:	2291      	movs	r2, #145	@ 0x91
 8001c46:	4919      	ldr	r1, [pc, #100]	@ (8001cac <fan_Lspeed+0x404>)
 8001c48:	4812      	ldr	r0, [pc, #72]	@ (8001c94 <fan_Lspeed+0x3ec>)
 8001c4a:	f005 f813 	bl	8006c74 <draw_bitmap_4bpp>
	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
 8001c4e:	2310      	movs	r3, #16
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	2310      	movs	r3, #16
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2300      	movs	r3, #0
 8001c58:	228e      	movs	r2, #142	@ 0x8e
 8001c5a:	4915      	ldr	r1, [pc, #84]	@ (8001cb0 <fan_Lspeed+0x408>)
 8001c5c:	480d      	ldr	r0, [pc, #52]	@ (8001c94 <fan_Lspeed+0x3ec>)
 8001c5e:	f005 f809 	bl	8006c74 <draw_bitmap_4bpp>
	Display_RTC_clock();
 8001c62:	f000 f83d 	bl	8001ce0 <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	480a      	ldr	r0, [pc, #40]	@ (8001c94 <fan_Lspeed+0x3ec>)
 8001c6c:	f005 f856 	bl	8006d1c <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2340      	movs	r3, #64	@ 0x40
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4804      	ldr	r0, [pc, #16]	@ (8001c94 <fan_Lspeed+0x3ec>)
 8001c82:	f004 feed 	bl	8006a60 <draw_rect_filled>
	HAL_Delay(100);
 8001c86:	2064      	movs	r0, #100	@ 0x64
 8001c88:	f000 fd3a 	bl	8002700 <HAL_Delay>


}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bdb0      	pop	{r4, r5, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20003900 	.word	0x20003900
 8001c98:	0800b6c8 	.word	0x0800b6c8
 8001c9c:	0800a7e4 	.word	0x0800a7e4
 8001ca0:	0800f444 	.word	0x0800f444
 8001ca4:	200038cc 	.word	0x200038cc
 8001ca8:	0800a7f4 	.word	0x0800a7f4
 8001cac:	20002ab0 	.word	0x20002ab0
 8001cb0:	200035f8 	.word	0x200035f8

08001cb4 <Display_curr_temp>:

void Display_curr_temp(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	fan_Hspeed();
 8001cb8:	f7ff f9ec 	bl	8001094 <fan_Hspeed>
	fan_Mspeed();
 8001cbc:	f7ff fbea 	bl	8001494 <fan_Mspeed>
    fan_Lspeed();
 8001cc0:	f7ff fdf2 	bl	80018a8 <fan_Lspeed>

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <Gpio_Ex_init>:

void Gpio_Ex_init()
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
	Ex_gpio_init();
 8001ccc:	f005 f9ca 	bl	8007064 <Ex_gpio_init>
}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <RTC_init>:

}


void RTC_init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

MX_RTC_Init();
 8001cd8:	f004 fc3c 	bl	8006554 <MX_RTC_Init>
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <Display_RTC_clock>:

void Display_RTC_clock()
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af04      	add	r7, sp, #16
	RTC_interface();
 8001ce6:	f004 fc0d 	bl	8006504 <RTC_interface>
//	select_font(&FreeMono9pt7b);
//	draw_text(tx_buf, "Device Run Time", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 8001cea:	4826      	ldr	r0, [pc, #152]	@ (8001d84 <Display_RTC_clock+0xa4>)
 8001cec:	f004 fee6 	bl	8006abc <select_font>
    draw_text(tx_buf, "HH : MM", 210, 43, 15);
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	232b      	movs	r3, #43	@ 0x2b
 8001cf6:	22d2      	movs	r2, #210	@ 0xd2
 8001cf8:	4923      	ldr	r1, [pc, #140]	@ (8001d88 <Display_RTC_clock+0xa8>)
 8001cfa:	4824      	ldr	r0, [pc, #144]	@ (8001d8c <Display_RTC_clock+0xac>)
 8001cfc:	f004 ff86 	bl	8006c0c <draw_text>
    select_font(&DSEG7_Classic_Bold_16);
 8001d00:	4823      	ldr	r0, [pc, #140]	@ (8001d90 <Display_RTC_clock+0xb0>)
 8001d02:	f004 fedb 	bl	8006abc <select_font>
    sprintf(temp_data,"%c%c%c%c%c",time[0],time[1],time[2],time[3],time[4]);
 8001d06:	4b23      	ldr	r3, [pc, #140]	@ (8001d94 <Display_RTC_clock+0xb4>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <Display_RTC_clock+0xb4>)
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	461c      	mov	r4, r3
 8001d12:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <Display_RTC_clock+0xb4>)
 8001d14:	789b      	ldrb	r3, [r3, #2]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b1e      	ldr	r3, [pc, #120]	@ (8001d94 <Display_RTC_clock+0xb4>)
 8001d1a:	78db      	ldrb	r3, [r3, #3]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001d94 <Display_RTC_clock+0xb4>)
 8001d20:	791b      	ldrb	r3, [r3, #4]
 8001d22:	9302      	str	r3, [sp, #8]
 8001d24:	9101      	str	r1, [sp, #4]
 8001d26:	9200      	str	r2, [sp, #0]
 8001d28:	4623      	mov	r3, r4
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	491a      	ldr	r1, [pc, #104]	@ (8001d98 <Display_RTC_clock+0xb8>)
 8001d2e:	481b      	ldr	r0, [pc, #108]	@ (8001d9c <Display_RTC_clock+0xbc>)
 8001d30:	f006 fbec 	bl	800850c <siprintf>
	draw_text(tx_buf, temp_data, 200, 63, 15);
 8001d34:	230f      	movs	r3, #15
 8001d36:	9300      	str	r3, [sp, #0]
 8001d38:	233f      	movs	r3, #63	@ 0x3f
 8001d3a:	22c8      	movs	r2, #200	@ 0xc8
 8001d3c:	4917      	ldr	r1, [pc, #92]	@ (8001d9c <Display_RTC_clock+0xbc>)
 8001d3e:	4813      	ldr	r0, [pc, #76]	@ (8001d8c <Display_RTC_clock+0xac>)
 8001d40:	f004 ff64 	bl	8006c0c <draw_text>
    sprintf(day_data,"%c%c",time[6],time[7]);
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <Display_RTC_clock+0xb4>)
 8001d46:	799b      	ldrb	r3, [r3, #6]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <Display_RTC_clock+0xb4>)
 8001d4c:	79db      	ldrb	r3, [r3, #7]
 8001d4e:	4914      	ldr	r1, [pc, #80]	@ (8001da0 <Display_RTC_clock+0xc0>)
 8001d50:	4814      	ldr	r0, [pc, #80]	@ (8001da4 <Display_RTC_clock+0xc4>)
 8001d52:	f006 fbdb 	bl	800850c <siprintf>

   select_font(&Font5x7FixedMono);
 8001d56:	480b      	ldr	r0, [pc, #44]	@ (8001d84 <Display_RTC_clock+0xa4>)
 8001d58:	f004 feb0 	bl	8006abc <select_font>
   draw_text(tx_buf, "d",  243, 10, 15);
 8001d5c:	230f      	movs	r3, #15
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	230a      	movs	r3, #10
 8001d62:	22f3      	movs	r2, #243	@ 0xf3
 8001d64:	4910      	ldr	r1, [pc, #64]	@ (8001da8 <Display_RTC_clock+0xc8>)
 8001d66:	4809      	ldr	r0, [pc, #36]	@ (8001d8c <Display_RTC_clock+0xac>)
 8001d68:	f004 ff50 	bl	8006c0c <draw_text>
//       select_font(&DSEG7_Classic_Bold_16);
   draw_text(tx_buf, day_data,  230, 10, 15);
 8001d6c:	230f      	movs	r3, #15
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	230a      	movs	r3, #10
 8001d72:	22e6      	movs	r2, #230	@ 0xe6
 8001d74:	490b      	ldr	r1, [pc, #44]	@ (8001da4 <Display_RTC_clock+0xc4>)
 8001d76:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <Display_RTC_clock+0xac>)
 8001d78:	f004 ff48 	bl	8006c0c <draw_text>
}
 8001d7c:	bf00      	nop
 8001d7e:	3704      	adds	r7, #4
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd90      	pop	{r4, r7, pc}
 8001d84:	0800b6c8 	.word	0x0800b6c8
 8001d88:	0800a7f8 	.word	0x0800a7f8
 8001d8c:	20003900 	.word	0x20003900
 8001d90:	0800c53c 	.word	0x0800c53c
 8001d94:	200038b8 	.word	0x200038b8
 8001d98:	0800a800 	.word	0x0800a800
 8001d9c:	200038d8 	.word	0x200038d8
 8001da0:	0800a80c 	.word	0x0800a80c
 8001da4:	200038ec 	.word	0x200038ec
 8001da8:	0800a814 	.word	0x0800a814

08001dac <MX_USART1_UART_Init>:
/* USER CODE END EV */



void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	@ (8001dfc <MX_USART1_UART_Init+0x50>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db6:	4b10      	ldr	r3, [pc, #64]	@ (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	@ (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	@ (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	@ (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	@ (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001de4:	f003 fc68 	bl	80056b8 <HAL_HalfDuplex_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dee:	f000 f9bb 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20003870 	.word	0x20003870
 8001dfc:	40011000 	.word	0x40011000

08001e00 <USART1_IRQHandler>:
/**
  * @brief This function handles Non maskable interrupt.
  */

void USART1_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	 owReadHandler();
 8001e04:	f005 f9f6 	bl	80071f4 <owReadHandler>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <USART1_IRQHandler+0x14>)
 8001e0a:	f003 fcad 	bl	8005768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20003870 	.word	0x20003870

08001e18 <MX_GPIO_Init>:
 */

#include "gpio.h"

void MX_GPIO_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b43      	ldr	r3, [pc, #268]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a42      	ldr	r2, [pc, #264]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e38:	f043 0304 	orr.w	r3, r3, #4
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b40      	ldr	r3, [pc, #256]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a3b      	ldr	r2, [pc, #236]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	4b35      	ldr	r3, [pc, #212]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a34      	ldr	r2, [pc, #208]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b32      	ldr	r3, [pc, #200]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	4b2e      	ldr	r3, [pc, #184]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e92:	4b2b      	ldr	r3, [pc, #172]	@ (8001f40 <MX_GPIO_Init+0x128>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	607b      	str	r3, [r7, #4]
 8001e9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2130      	movs	r1, #48	@ 0x30
 8001ea2:	4828      	ldr	r0, [pc, #160]	@ (8001f44 <MX_GPIO_Init+0x12c>)
 8001ea4:	f000 ff68 	bl	8002d78 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2110      	movs	r1, #16
 8001eac:	4826      	ldr	r0, [pc, #152]	@ (8001f48 <MX_GPIO_Init+0x130>)
 8001eae:	f000 ff63 	bl	8002d78 <HAL_GPIO_WritePin>
//  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
//


  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001eb2:	2330      	movs	r3, #48	@ 0x30
 8001eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	481e      	ldr	r0, [pc, #120]	@ (8001f44 <MX_GPIO_Init+0x12c>)
 8001eca:	f000 fde1 	bl	8002a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001ece:	f24f 0302 	movw	r3, #61442	@ 0xf002
 8001ed2:	617b      	str	r3, [r7, #20]
                            |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001edc:	f107 0314 	add.w	r3, r7, #20
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	481a      	ldr	r0, [pc, #104]	@ (8001f4c <MX_GPIO_Init+0x134>)
 8001ee4:	f000 fdd4 	bl	8002a90 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ee8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 0314 	add.w	r3, r7, #20
 8001efa:	4619      	mov	r1, r3
 8001efc:	4812      	ldr	r0, [pc, #72]	@ (8001f48 <MX_GPIO_Init+0x130>)
 8001efe:	f000 fdc7 	bl	8002a90 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	480b      	ldr	r0, [pc, #44]	@ (8001f44 <MX_GPIO_Init+0x12c>)
 8001f18:	f000 fdba 	bl	8002a90 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f1c:	2310      	movs	r3, #16
 8001f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f24:	2301      	movs	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <MX_GPIO_Init+0x130>)
 8001f34:	f000 fdac 	bl	8002a90 <HAL_GPIO_Init>

}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	@ 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020000 	.word	0x40020000
 8001f4c:	40020400 	.word	0x40020400

08001f50 <MX_I2C1_Init>:
  * @param None
  * @retval None
  *
  */
void MX_I2C1_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f54:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <MX_I2C1_Init+0x50>)
 8001f56:	4a13      	ldr	r2, [pc, #76]	@ (8001fa4 <MX_I2C1_Init+0x54>)
 8001f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	@ (8001fa0 <MX_I2C1_Init+0x50>)
 8001f5c:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <MX_I2C1_Init+0x58>)
 8001f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <MX_I2C1_Init+0x50>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <MX_I2C1_Init+0x50>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <MX_I2C1_Init+0x50>)
 8001f6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f74:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <MX_I2C1_Init+0x50>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f7a:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <MX_I2C1_Init+0x50>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f80:	4b07      	ldr	r3, [pc, #28]	@ (8001fa0 <MX_I2C1_Init+0x50>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f86:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <MX_I2C1_Init+0x50>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f8c:	4804      	ldr	r0, [pc, #16]	@ (8001fa0 <MX_I2C1_Init+0x50>)
 8001f8e:	f000 ff0d 	bl	8002dac <HAL_I2C_Init>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f98:	f000 f8e6 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000599c 	.word	0x2000599c
 8001fa4:	40005400 	.word	0x40005400
 8001fa8:	000186a0 	.word	0x000186a0

08001fac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a19      	ldr	r2, [pc, #100]	@ (8002030 <HAL_I2C_MspInit+0x84>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d12b      	bne.n	8002026 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <HAL_I2C_MspInit+0x88>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a17      	ldr	r2, [pc, #92]	@ (8002034 <HAL_I2C_MspInit+0x88>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b15      	ldr	r3, [pc, #84]	@ (8002034 <HAL_I2C_MspInit+0x88>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fea:	23c0      	movs	r3, #192	@ 0xc0
 8001fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fee:	2312      	movs	r3, #18
 8001ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffe:	f107 0314 	add.w	r3, r7, #20
 8002002:	4619      	mov	r1, r3
 8002004:	480c      	ldr	r0, [pc, #48]	@ (8002038 <HAL_I2C_MspInit+0x8c>)
 8002006:	f000 fd43 	bl	8002a90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <HAL_I2C_MspInit+0x88>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	4a08      	ldr	r2, [pc, #32]	@ (8002034 <HAL_I2C_MspInit+0x88>)
 8002014:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002018:	6413      	str	r3, [r2, #64]	@ 0x40
 800201a:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_I2C_MspInit+0x88>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002026:	bf00      	nop
 8002028:	3728      	adds	r7, #40	@ 0x28
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40005400 	.word	0x40005400
 8002034:	40023800 	.word	0x40023800
 8002038:	40020400 	.word	0x40020400

0800203c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002040:	f000 faec 	bl	800261c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002044:	f000 f824 	bl	8002090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002048:	f7ff fee6 	bl	8001e18 <MX_GPIO_Init>
  MX_SPI1_Init();
 800204c:	f000 f892 	bl	8002174 <MX_SPI1_Init>
  Display_app_init();
 8002050:	f7fe ff52 	bl	8000ef8 <Display_app_init>
  MX_USART1_UART_Init();
 8002054:	f7ff feaa 	bl	8001dac <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002058:	f7ff ff7a 	bl	8001f50 <MX_I2C1_Init>
  Gpio_Ex_init();
 800205c:	f7ff fe34 	bl	8001cc8 <Gpio_Ex_init>


  /* USER CODE BEGIN 2 */
//  Display_refresh();
//  company_logo();
  Display_refresh();
 8002060:	f7fe ff5a 	bl	8000f18 <Display_refresh>
  Display_company_name();
 8002064:	f7fe ff6e 	bl	8000f44 <Display_company_name>
  Display_refresh();
 8002068:	f7fe ff56 	bl	8000f18 <Display_refresh>
  Display_Managmnt_sys();
 800206c:	f7fe ffca 	bl	8001004 <Display_Managmnt_sys>
  Display_refresh();
 8002070:	f7fe ff52 	bl	8000f18 <Display_refresh>
  Display_contct_num();
 8002074:	f7fe ff9c 	bl	8000fb0 <Display_contct_num>
  Display_refresh();
 8002078:	f7fe ff4e 	bl	8000f18 <Display_refresh>
  get_ROMid();
 800207c:	f005 fbec 	bl	8007858 <get_ROMid>
  RTC_init();
 8002080:	f7ff fe28 	bl	8001cd4 <RTC_init>

  while (1)
  {
//	  Tempset_35();

	get_Temperature();
 8002084:	f005 fca6 	bl	80079d4 <get_Temperature>
//    HAL_Delay(10);
//    Display_refresh();
    Display_curr_temp();
 8002088:	f7ff fe14 	bl	8001cb4 <Display_curr_temp>
	get_Temperature();
 800208c:	bf00      	nop
 800208e:	e7f9      	b.n	8002084 <main+0x48>

08002090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b094      	sub	sp, #80	@ 0x50
 8002094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	2234      	movs	r2, #52	@ 0x34
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f006 fa97 	bl	80085d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	2300      	movs	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	4b29      	ldr	r3, [pc, #164]	@ (8002160 <SystemClock_Config+0xd0>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	4a28      	ldr	r2, [pc, #160]	@ (8002160 <SystemClock_Config+0xd0>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c4:	4b26      	ldr	r3, [pc, #152]	@ (8002160 <SystemClock_Config+0xd0>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d0:	2300      	movs	r3, #0
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	4b23      	ldr	r3, [pc, #140]	@ (8002164 <SystemClock_Config+0xd4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a22      	ldr	r2, [pc, #136]	@ (8002164 <SystemClock_Config+0xd4>)
 80020da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b20      	ldr	r3, [pc, #128]	@ (8002164 <SystemClock_Config+0xd4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80020e8:	603b      	str	r3, [r7, #0]
 80020ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80020ec:	2309      	movs	r3, #9
 80020ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80020f6:	2301      	movs	r3, #1
 80020f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fa:	2302      	movs	r3, #2
 80020fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002102:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002104:	2304      	movs	r3, #4
 8002106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002108:	2332      	movs	r3, #50	@ 0x32
 800210a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800210c:	2302      	movs	r3, #2
 800210e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002110:	2304      	movs	r3, #4
 8002112:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002114:	2302      	movs	r3, #2
 8002116:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	4618      	mov	r0, r3
 800211e:	f002 fa93 	bl	8004648 <HAL_RCC_OscConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002128:	f000 f81e 	bl	8002168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800212c:	230f      	movs	r3, #15
 800212e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002130:	2302      	movs	r3, #2
 8002132:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002138:	2300      	movs	r3, #0
 800213a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800213c:	2300      	movs	r3, #0
 800213e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	2101      	movs	r1, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f001 ff82 	bl	8004050 <HAL_RCC_ClockConfig>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002152:	f000 f809 	bl	8002168 <Error_Handler>
  }
}
 8002156:	bf00      	nop
 8002158:	3750      	adds	r7, #80	@ 0x50
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	40023800 	.word	0x40023800
 8002164:	40007000 	.word	0x40007000

08002168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800216c:	b672      	cpsid	i
}
 800216e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002170:	bf00      	nop
 8002172:	e7fd      	b.n	8002170 <Error_Handler+0x8>

08002174 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002178:	4b17      	ldr	r3, [pc, #92]	@ (80021d8 <MX_SPI1_Init+0x64>)
 800217a:	4a18      	ldr	r2, [pc, #96]	@ (80021dc <MX_SPI1_Init+0x68>)
 800217c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800217e:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <MX_SPI1_Init+0x64>)
 8002180:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002184:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002186:	4b14      	ldr	r3, [pc, #80]	@ (80021d8 <MX_SPI1_Init+0x64>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <MX_SPI1_Init+0x64>)
 800218e:	2200      	movs	r2, #0
 8002190:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002192:	4b11      	ldr	r3, [pc, #68]	@ (80021d8 <MX_SPI1_Init+0x64>)
 8002194:	2202      	movs	r2, #2
 8002196:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002198:	4b0f      	ldr	r3, [pc, #60]	@ (80021d8 <MX_SPI1_Init+0x64>)
 800219a:	2201      	movs	r2, #1
 800219c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800219e:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <MX_SPI1_Init+0x64>)
 80021a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80021a6:	4b0c      	ldr	r3, [pc, #48]	@ (80021d8 <MX_SPI1_Init+0x64>)
 80021a8:	2210      	movs	r2, #16
 80021aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021ac:	4b0a      	ldr	r3, [pc, #40]	@ (80021d8 <MX_SPI1_Init+0x64>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021b2:	4b09      	ldr	r3, [pc, #36]	@ (80021d8 <MX_SPI1_Init+0x64>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021b8:	4b07      	ldr	r3, [pc, #28]	@ (80021d8 <MX_SPI1_Init+0x64>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 15;
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <MX_SPI1_Init+0x64>)
 80021c0:	220f      	movs	r2, #15
 80021c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021c4:	4804      	ldr	r0, [pc, #16]	@ (80021d8 <MX_SPI1_Init+0x64>)
 80021c6:	f002 ffcf 	bl	8005168 <HAL_SPI_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80021d0:	f7ff ffca 	bl	8002168 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	20005900 	.word	0x20005900
 80021dc:	40013000 	.word	0x40013000

080021e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	@ 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_SPI_MspInit+0x84>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12b      	bne.n	800225a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220a:	4a17      	ldr	r2, [pc, #92]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 800220c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002210:	6453      	str	r3, [r2, #68]	@ 0x44
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a10      	ldr	r2, [pc, #64]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b0e      	ldr	r3, [pc, #56]	@ (8002268 <HAL_SPI_MspInit+0x88>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800223a:	23a0      	movs	r3, #160	@ 0xa0
 800223c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223e:	2302      	movs	r3, #2
 8002240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002242:	2300      	movs	r3, #0
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2303      	movs	r3, #3
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800224a:	2305      	movs	r3, #5
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	4805      	ldr	r0, [pc, #20]	@ (800226c <HAL_SPI_MspInit+0x8c>)
 8002256:	f000 fc1b 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	3728      	adds	r7, #40	@ 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40013000 	.word	0x40013000
 8002268:	40023800 	.word	0x40023800
 800226c:	40020000 	.word	0x40020000

08002270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	607b      	str	r3, [r7, #4]
 800227a:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <HAL_MspInit+0x4c>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227e:	4a0f      	ldr	r2, [pc, #60]	@ (80022bc <HAL_MspInit+0x4c>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002284:	6453      	str	r3, [r2, #68]	@ 0x44
 8002286:	4b0d      	ldr	r3, [pc, #52]	@ (80022bc <HAL_MspInit+0x4c>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	4b09      	ldr	r3, [pc, #36]	@ (80022bc <HAL_MspInit+0x4c>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	4a08      	ldr	r2, [pc, #32]	@ (80022bc <HAL_MspInit+0x4c>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022a2:	4b06      	ldr	r3, [pc, #24]	@ (80022bc <HAL_MspInit+0x4c>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80022ae:	2007      	movs	r0, #7
 80022b0:	f000 fb1a 	bl	80028e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800

080022c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c8:	f107 0308 	add.w	r3, r7, #8
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
 80022d8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a0c      	ldr	r2, [pc, #48]	@ (8002310 <HAL_RTC_MspInit+0x50>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d111      	bne.n	8002308 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022e4:	2304      	movs	r3, #4
 80022e6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022ec:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ee:	f107 0308 	add.w	r3, r7, #8
 80022f2:	4618      	mov	r0, r3
 80022f4:	f002 f8cc 	bl	8004490 <HAL_RCCEx_PeriphCLKConfig>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80022fe:	f7ff ff33 	bl	8002168 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <HAL_RTC_MspInit+0x54>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002308:	bf00      	nop
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40002800 	.word	0x40002800
 8002314:	42470e3c 	.word	0x42470e3c

08002318 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1d      	ldr	r2, [pc, #116]	@ (80023ac <HAL_UART_MspInit+0x94>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d134      	bne.n	80023a4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 8002340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002342:	4a1b      	ldr	r2, [pc, #108]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 8002344:	f043 0310 	orr.w	r3, r3, #16
 8002348:	6453      	str	r3, [r2, #68]	@ 0x44
 800234a:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235e:	4a14      	ldr	r2, [pc, #80]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6313      	str	r3, [r2, #48]	@ 0x30
 8002366:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_UART_MspInit+0x98>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002378:	2312      	movs	r3, #18
 800237a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237c:	2300      	movs	r3, #0
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002380:	2303      	movs	r3, #3
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002384:	2307      	movs	r3, #7
 8002386:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	4809      	ldr	r0, [pc, #36]	@ (80023b4 <HAL_UART_MspInit+0x9c>)
 8002390:	f000 fb7e 	bl	8002a90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2100      	movs	r1, #0
 8002398:	2025      	movs	r0, #37	@ 0x25
 800239a:	f000 fab0 	bl	80028fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800239e:	2025      	movs	r0, #37	@ 0x25
 80023a0:	f000 fac9 	bl	8002936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80023a4:	bf00      	nop
 80023a6:	3728      	adds	r7, #40	@ 0x28
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40011000 	.word	0x40011000
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40020000 	.word	0x40020000

080023b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <NMI_Handler+0x4>

080023c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c4:	bf00      	nop
 80023c6:	e7fd      	b.n	80023c4 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	bf00      	nop
 80023ce:	e7fd      	b.n	80023cc <MemManage_Handler+0x4>

080023d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <UsageFault_Handler+0x4>

080023e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240e:	f000 f957 	bl	80026c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}

08002416 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  return 1;
 800241a:	2301      	movs	r3, #1
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <_kill>:

int _kill(int pid, int sig)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	b082      	sub	sp, #8
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002430:	f006 f922 	bl	8008678 <__errno>
 8002434:	4603      	mov	r3, r0
 8002436:	2216      	movs	r2, #22
 8002438:	601a      	str	r2, [r3, #0]
  return -1;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <_exit>:

void _exit (int status)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800244e:	f04f 31ff 	mov.w	r1, #4294967295
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffe7 	bl	8002426 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <_exit+0x12>

0800245c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e00a      	b.n	8002484 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800246e:	f3af 8000 	nop.w
 8002472:	4601      	mov	r1, r0
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	60ba      	str	r2, [r7, #8]
 800247a:	b2ca      	uxtb	r2, r1
 800247c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3301      	adds	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	dbf0      	blt.n	800246e <_read+0x12>
  }

  return len;
 800248c:	687b      	ldr	r3, [r7, #4]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002496:	b580      	push	{r7, lr}
 8002498:	b086      	sub	sp, #24
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	e009      	b.n	80024bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	60ba      	str	r2, [r7, #8]
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	3301      	adds	r3, #1
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	dbf1      	blt.n	80024a8 <_write+0x12>
  }
  return len;
 80024c4:	687b      	ldr	r3, [r7, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <_close>:

int _close(int file)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024da:	4618      	mov	r0, r3
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024f6:	605a      	str	r2, [r3, #4]
  return 0;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <_isatty>:

int _isatty(int file)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800250e:	2301      	movs	r3, #1
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002540:	4a14      	ldr	r2, [pc, #80]	@ (8002594 <_sbrk+0x5c>)
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <_sbrk+0x60>)
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800254c:	4b13      	ldr	r3, [pc, #76]	@ (800259c <_sbrk+0x64>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002554:	4b11      	ldr	r3, [pc, #68]	@ (800259c <_sbrk+0x64>)
 8002556:	4a12      	ldr	r2, [pc, #72]	@ (80025a0 <_sbrk+0x68>)
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800255a:	4b10      	ldr	r3, [pc, #64]	@ (800259c <_sbrk+0x64>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	429a      	cmp	r2, r3
 8002566:	d207      	bcs.n	8002578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002568:	f006 f886 	bl	8008678 <__errno>
 800256c:	4603      	mov	r3, r0
 800256e:	220c      	movs	r2, #12
 8002570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002572:	f04f 33ff 	mov.w	r3, #4294967295
 8002576:	e009      	b.n	800258c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002578:	4b08      	ldr	r3, [pc, #32]	@ (800259c <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800257e:	4b07      	ldr	r3, [pc, #28]	@ (800259c <_sbrk+0x64>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	4a05      	ldr	r2, [pc, #20]	@ (800259c <_sbrk+0x64>)
 8002588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800258a:	68fb      	ldr	r3, [r7, #12]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20008000 	.word	0x20008000
 8002598:	00000400 	.word	0x00000400
 800259c:	20005958 	.word	0x20005958
 80025a0:	20005ba0 	.word	0x20005ba0

080025a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025a8:	4b06      	ldr	r3, [pc, #24]	@ (80025c4 <SystemInit+0x20>)
 80025aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ae:	4a05      	ldr	r2, [pc, #20]	@ (80025c4 <SystemInit+0x20>)
 80025b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80025c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002600 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80025cc:	f7ff ffea 	bl	80025a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d0:	480c      	ldr	r0, [pc, #48]	@ (8002604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025d2:	490d      	ldr	r1, [pc, #52]	@ (8002608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025d4:	4a0d      	ldr	r2, [pc, #52]	@ (800260c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025d8:	e002      	b.n	80025e0 <LoopCopyDataInit>

080025da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025de:	3304      	adds	r3, #4

080025e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e4:	d3f9      	bcc.n	80025da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025ec:	e001      	b.n	80025f2 <LoopFillZerobss>

080025ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f0:	3204      	adds	r2, #4

080025f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f4:	d3fb      	bcc.n	80025ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025f6:	f006 f845 	bl	8008684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025fa:	f7ff fd1f 	bl	800203c <main>
  bx  lr    
 80025fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002600:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002608:	20003854 	.word	0x20003854
  ldr r2, =_sidata
 800260c:	0800f7f0 	.word	0x0800f7f0
  ldr r2, =_sbss
 8002610:	20003854 	.word	0x20003854
  ldr r4, =_ebss
 8002614:	20005ba0 	.word	0x20005ba0

08002618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002618:	e7fe      	b.n	8002618 <ADC_IRQHandler>
	...

0800261c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002620:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_Init+0x40>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0d      	ldr	r2, [pc, #52]	@ (800265c <HAL_Init+0x40>)
 8002626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800262a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800262c:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <HAL_Init+0x40>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0a      	ldr	r2, [pc, #40]	@ (800265c <HAL_Init+0x40>)
 8002632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002638:	4b08      	ldr	r3, [pc, #32]	@ (800265c <HAL_Init+0x40>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a07      	ldr	r2, [pc, #28]	@ (800265c <HAL_Init+0x40>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002644:	2003      	movs	r0, #3
 8002646:	f000 f94f 	bl	80028e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800264a:	2000      	movs	r0, #0
 800264c:	f000 f808 	bl	8002660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002650:	f7ff fe0e 	bl	8002270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40023c00 	.word	0x40023c00

08002660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002668:	4b12      	ldr	r3, [pc, #72]	@ (80026b4 <HAL_InitTick+0x54>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4b12      	ldr	r3, [pc, #72]	@ (80026b8 <HAL_InitTick+0x58>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	4619      	mov	r1, r3
 8002672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002676:	fbb3 f3f1 	udiv	r3, r3, r1
 800267a:	fbb2 f3f3 	udiv	r3, r2, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f967 	bl	8002952 <HAL_SYSTICK_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e00e      	b.n	80026ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b0f      	cmp	r3, #15
 8002692:	d80a      	bhi.n	80026aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002694:	2200      	movs	r2, #0
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	f000 f92f 	bl	80028fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026a0:	4a06      	ldr	r2, [pc, #24]	@ (80026bc <HAL_InitTick+0x5c>)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	e000      	b.n	80026ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	20003678 	.word	0x20003678
 80026b8:	20003680 	.word	0x20003680
 80026bc:	2000367c 	.word	0x2000367c

080026c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026c4:	4b06      	ldr	r3, [pc, #24]	@ (80026e0 <HAL_IncTick+0x20>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	461a      	mov	r2, r3
 80026ca:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <HAL_IncTick+0x24>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4413      	add	r3, r2
 80026d0:	4a04      	ldr	r2, [pc, #16]	@ (80026e4 <HAL_IncTick+0x24>)
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20003680 	.word	0x20003680
 80026e4:	2000595c 	.word	0x2000595c

080026e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026e8:	b480      	push	{r7}
 80026ea:	af00      	add	r7, sp, #0
  return uwTick;
 80026ec:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <HAL_GetTick+0x14>)
 80026ee:	681b      	ldr	r3, [r3, #0]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	2000595c 	.word	0x2000595c

08002700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff ffee 	bl	80026e8 <HAL_GetTick>
 800270c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002718:	d005      	beq.n	8002726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271a:	4b0a      	ldr	r3, [pc, #40]	@ (8002744 <HAL_Delay+0x44>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002726:	bf00      	nop
 8002728:	f7ff ffde 	bl	80026e8 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	429a      	cmp	r2, r3
 8002736:	d8f7      	bhi.n	8002728 <HAL_Delay+0x28>
  {
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20003680 	.word	0x20003680

08002748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f003 0307 	and.w	r3, r3, #7
 8002756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002758:	4b0c      	ldr	r3, [pc, #48]	@ (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002764:	4013      	ands	r3, r2
 8002766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800277a:	4a04      	ldr	r2, [pc, #16]	@ (800278c <__NVIC_SetPriorityGrouping+0x44>)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	60d3      	str	r3, [r2, #12]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002794:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 0307 	and.w	r3, r3, #7
}
 800279e:	4618      	mov	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	db0b      	blt.n	80027d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	f003 021f 	and.w	r2, r3, #31
 80027c4:	4907      	ldr	r1, [pc, #28]	@ (80027e4 <__NVIC_EnableIRQ+0x38>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2001      	movs	r0, #1
 80027ce:	fa00 f202 	lsl.w	r2, r0, r2
 80027d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000e100 	.word	0xe000e100

080027e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	6039      	str	r1, [r7, #0]
 80027f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	db0a      	blt.n	8002812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	490c      	ldr	r1, [pc, #48]	@ (8002834 <__NVIC_SetPriority+0x4c>)
 8002802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002806:	0112      	lsls	r2, r2, #4
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	440b      	add	r3, r1
 800280c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002810:	e00a      	b.n	8002828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4908      	ldr	r1, [pc, #32]	@ (8002838 <__NVIC_SetPriority+0x50>)
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	3b04      	subs	r3, #4
 8002820:	0112      	lsls	r2, r2, #4
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	440b      	add	r3, r1
 8002826:	761a      	strb	r2, [r3, #24]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000e100 	.word	0xe000e100
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800283c:	b480      	push	{r7}
 800283e:	b089      	sub	sp, #36	@ 0x24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f1c3 0307 	rsb	r3, r3, #7
 8002856:	2b04      	cmp	r3, #4
 8002858:	bf28      	it	cs
 800285a:	2304      	movcs	r3, #4
 800285c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3304      	adds	r3, #4
 8002862:	2b06      	cmp	r3, #6
 8002864:	d902      	bls.n	800286c <NVIC_EncodePriority+0x30>
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3b03      	subs	r3, #3
 800286a:	e000      	b.n	800286e <NVIC_EncodePriority+0x32>
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002870:	f04f 32ff 	mov.w	r2, #4294967295
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	43da      	mvns	r2, r3
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	401a      	ands	r2, r3
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002884:	f04f 31ff 	mov.w	r1, #4294967295
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	43d9      	mvns	r1, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	4313      	orrs	r3, r2
         );
}
 8002896:	4618      	mov	r0, r3
 8002898:	3724      	adds	r7, #36	@ 0x24
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028b4:	d301      	bcc.n	80028ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00f      	b.n	80028da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ba:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <SysTick_Config+0x40>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c2:	210f      	movs	r1, #15
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	f7ff ff8e 	bl	80027e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <SysTick_Config+0x40>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d2:	4b04      	ldr	r3, [pc, #16]	@ (80028e4 <SysTick_Config+0x40>)
 80028d4:	2207      	movs	r2, #7
 80028d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	e000e010 	.word	0xe000e010

080028e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7ff ff29 	bl	8002748 <__NVIC_SetPriorityGrouping>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028fe:	b580      	push	{r7, lr}
 8002900:	b086      	sub	sp, #24
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002910:	f7ff ff3e 	bl	8002790 <__NVIC_GetPriorityGrouping>
 8002914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	6978      	ldr	r0, [r7, #20]
 800291c:	f7ff ff8e 	bl	800283c <NVIC_EncodePriority>
 8002920:	4602      	mov	r2, r0
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002926:	4611      	mov	r1, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff ff5d 	bl	80027e8 <__NVIC_SetPriority>
}
 800292e:	bf00      	nop
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	4603      	mov	r3, r0
 800293e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff31 	bl	80027ac <__NVIC_EnableIRQ>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff ffa2 	bl	80028a4 <SysTick_Config>
 8002960:	4603      	mov	r3, r0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002976:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff feb6 	bl	80026e8 <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d008      	beq.n	800299c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2280      	movs	r2, #128	@ 0x80
 800298e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e052      	b.n	8002a42 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0216 	bic.w	r2, r2, #22
 80029aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d103      	bne.n	80029cc <HAL_DMA_Abort+0x62>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0208 	bic.w	r2, r2, #8
 80029da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ec:	e013      	b.n	8002a16 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ee:	f7ff fe7b 	bl	80026e8 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d90c      	bls.n	8002a16 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2220      	movs	r2, #32
 8002a00:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2203      	movs	r2, #3
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e015      	b.n	8002a42 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e4      	bne.n	80029ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a28:	223f      	movs	r2, #63	@ 0x3f
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d004      	beq.n	8002a68 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2280      	movs	r2, #128	@ 0x80
 8002a62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e00c      	b.n	8002a82 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2205      	movs	r2, #5
 8002a6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
	...

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	@ 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
 8002aaa:	e14d      	b.n	8002d48 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aac:	2201      	movs	r2, #1
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4013      	ands	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	f040 813c 	bne.w	8002d42 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d005      	beq.n	8002ae2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d130      	bne.n	8002b44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	68da      	ldr	r2, [r3, #12]
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b18:	2201      	movs	r2, #1
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43db      	mvns	r3, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	091b      	lsrs	r3, r3, #4
 8002b2e:	f003 0201 	and.w	r2, r3, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d017      	beq.n	8002b80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	2203      	movs	r2, #3
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	fa02 f303 	lsl.w	r3, r2, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d123      	bne.n	8002bd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f003 0307 	and.w	r3, r3, #7
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	4013      	ands	r3, r2
 8002bae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	691a      	ldr	r2, [r3, #16]
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	69b9      	ldr	r1, [r7, #24]
 8002bd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	2203      	movs	r2, #3
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 0203 	and.w	r2, r3, #3
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8096 	beq.w	8002d42 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b51      	ldr	r3, [pc, #324]	@ (8002d60 <HAL_GPIO_Init+0x2d0>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1e:	4a50      	ldr	r2, [pc, #320]	@ (8002d60 <HAL_GPIO_Init+0x2d0>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c26:	4b4e      	ldr	r3, [pc, #312]	@ (8002d60 <HAL_GPIO_Init+0x2d0>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c32:	4a4c      	ldr	r2, [pc, #304]	@ (8002d64 <HAL_GPIO_Init+0x2d4>)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a43      	ldr	r2, [pc, #268]	@ (8002d68 <HAL_GPIO_Init+0x2d8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00d      	beq.n	8002c7a <HAL_GPIO_Init+0x1ea>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a42      	ldr	r2, [pc, #264]	@ (8002d6c <HAL_GPIO_Init+0x2dc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <HAL_GPIO_Init+0x1e6>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a41      	ldr	r2, [pc, #260]	@ (8002d70 <HAL_GPIO_Init+0x2e0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_GPIO_Init+0x1e2>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e004      	b.n	8002c7c <HAL_GPIO_Init+0x1ec>
 8002c72:	2307      	movs	r3, #7
 8002c74:	e002      	b.n	8002c7c <HAL_GPIO_Init+0x1ec>
 8002c76:	2301      	movs	r3, #1
 8002c78:	e000      	b.n	8002c7c <HAL_GPIO_Init+0x1ec>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	f002 0203 	and.w	r2, r2, #3
 8002c82:	0092      	lsls	r2, r2, #2
 8002c84:	4093      	lsls	r3, r2
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c8c:	4935      	ldr	r1, [pc, #212]	@ (8002d64 <HAL_GPIO_Init+0x2d4>)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	089b      	lsrs	r3, r3, #2
 8002c92:	3302      	adds	r3, #2
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9a:	4b36      	ldr	r3, [pc, #216]	@ (8002d74 <HAL_GPIO_Init+0x2e4>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002d74 <HAL_GPIO_Init+0x2e4>)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002d74 <HAL_GPIO_Init+0x2e4>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce8:	4a22      	ldr	r2, [pc, #136]	@ (8002d74 <HAL_GPIO_Init+0x2e4>)
 8002cea:	69bb      	ldr	r3, [r7, #24]
 8002cec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cee:	4b21      	ldr	r3, [pc, #132]	@ (8002d74 <HAL_GPIO_Init+0x2e4>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d12:	4a18      	ldr	r2, [pc, #96]	@ (8002d74 <HAL_GPIO_Init+0x2e4>)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d18:	4b16      	ldr	r3, [pc, #88]	@ (8002d74 <HAL_GPIO_Init+0x2e4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d74 <HAL_GPIO_Init+0x2e4>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	3301      	adds	r3, #1
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	2b0f      	cmp	r3, #15
 8002d4c:	f67f aeae 	bls.w	8002aac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3724      	adds	r7, #36	@ 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40013800 	.word	0x40013800
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40020800 	.word	0x40020800
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
 8002d84:	4613      	mov	r3, r2
 8002d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d88:	787b      	ldrb	r3, [r7, #1]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d94:	e003      	b.n	8002d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e12b      	b.n	8003016 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff f8ea 	bl	8001fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	@ 0x24
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e10:	f001 fb16 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 8002e14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4a81      	ldr	r2, [pc, #516]	@ (8003020 <HAL_I2C_Init+0x274>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d807      	bhi.n	8002e30 <HAL_I2C_Init+0x84>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a80      	ldr	r2, [pc, #512]	@ (8003024 <HAL_I2C_Init+0x278>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf94      	ite	ls
 8002e28:	2301      	movls	r3, #1
 8002e2a:	2300      	movhi	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e006      	b.n	8002e3e <HAL_I2C_Init+0x92>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a7d      	ldr	r2, [pc, #500]	@ (8003028 <HAL_I2C_Init+0x27c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	bf94      	ite	ls
 8002e38:	2301      	movls	r3, #1
 8002e3a:	2300      	movhi	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0e7      	b.n	8003016 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4a78      	ldr	r2, [pc, #480]	@ (800302c <HAL_I2C_Init+0x280>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0c9b      	lsrs	r3, r3, #18
 8002e50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a6a      	ldr	r2, [pc, #424]	@ (8003020 <HAL_I2C_Init+0x274>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d802      	bhi.n	8002e80 <HAL_I2C_Init+0xd4>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	e009      	b.n	8002e94 <HAL_I2C_Init+0xe8>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	4a69      	ldr	r2, [pc, #420]	@ (8003030 <HAL_I2C_Init+0x284>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	3301      	adds	r3, #1
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ea6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	495c      	ldr	r1, [pc, #368]	@ (8003020 <HAL_I2C_Init+0x274>)
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	d819      	bhi.n	8002ee8 <HAL_I2C_Init+0x13c>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1e59      	subs	r1, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec2:	1c59      	adds	r1, r3, #1
 8002ec4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ec8:	400b      	ands	r3, r1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_I2C_Init+0x138>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1e59      	subs	r1, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee2:	e051      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	e04f      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d111      	bne.n	8002f14 <HAL_I2C_Init+0x168>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e012      	b.n	8002f3a <HAL_I2C_Init+0x18e>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1e58      	subs	r0, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	0099      	lsls	r1, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Init+0x196>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e022      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10e      	bne.n	8002f68 <HAL_I2C_Init+0x1bc>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1e58      	subs	r0, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	440b      	add	r3, r1
 8002f58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f66:	e00f      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1e58      	subs	r0, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	0099      	lsls	r1, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	6809      	ldr	r1, [r1, #0]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fb6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6911      	ldr	r1, [r2, #16]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	4311      	orrs	r1, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	000186a0 	.word	0x000186a0
 8003024:	001e847f 	.word	0x001e847f
 8003028:	003d08ff 	.word	0x003d08ff
 800302c:	431bde83 	.word	0x431bde83
 8003030:	10624dd3 	.word	0x10624dd3

08003034 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	4608      	mov	r0, r1
 800303e:	4611      	mov	r1, r2
 8003040:	461a      	mov	r2, r3
 8003042:	4603      	mov	r3, r0
 8003044:	817b      	strh	r3, [r7, #10]
 8003046:	460b      	mov	r3, r1
 8003048:	813b      	strh	r3, [r7, #8]
 800304a:	4613      	mov	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800304e:	f7ff fb4b 	bl	80026e8 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b20      	cmp	r3, #32
 800305e:	f040 80d9 	bne.w	8003214 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	2319      	movs	r3, #25
 8003068:	2201      	movs	r2, #1
 800306a:	496d      	ldr	r1, [pc, #436]	@ (8003220 <HAL_I2C_Mem_Write+0x1ec>)
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 fdb9 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003078:	2302      	movs	r3, #2
 800307a:	e0cc      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_I2C_Mem_Write+0x56>
 8003086:	2302      	movs	r3, #2
 8003088:	e0c5      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b01      	cmp	r3, #1
 800309e:	d007      	beq.n	80030b0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2221      	movs	r2, #33	@ 0x21
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2240      	movs	r2, #64	@ 0x40
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a3a      	ldr	r2, [r7, #32]
 80030da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4a4d      	ldr	r2, [pc, #308]	@ (8003224 <HAL_I2C_Mem_Write+0x1f0>)
 80030f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030f2:	88f8      	ldrh	r0, [r7, #6]
 80030f4:	893a      	ldrh	r2, [r7, #8]
 80030f6:	8979      	ldrh	r1, [r7, #10]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	9301      	str	r3, [sp, #4]
 80030fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	4603      	mov	r3, r0
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fbf0 	bl	80038e8 <I2C_RequestMemoryWrite>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d052      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e081      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fe7e 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	2b04      	cmp	r3, #4
 8003128:	d107      	bne.n	800313a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003138:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06b      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003142:	781a      	ldrb	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b04      	cmp	r3, #4
 800317a:	d11b      	bne.n	80031b4 <HAL_I2C_Mem_Write+0x180>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	d017      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003188:	781a      	ldrb	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1aa      	bne.n	8003112 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fe71 	bl	8003ea8 <I2C_WaitOnBTFFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d107      	bne.n	80031e4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e016      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2220      	movs	r2, #32
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	00100002 	.word	0x00100002
 8003224:	ffff0000 	.word	0xffff0000

08003228 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	@ 0x30
 800322c:	af02      	add	r7, sp, #8
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	4608      	mov	r0, r1
 8003232:	4611      	mov	r1, r2
 8003234:	461a      	mov	r2, r3
 8003236:	4603      	mov	r3, r0
 8003238:	817b      	strh	r3, [r7, #10]
 800323a:	460b      	mov	r3, r1
 800323c:	813b      	strh	r3, [r7, #8]
 800323e:	4613      	mov	r3, r2
 8003240:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003242:	f7ff fa51 	bl	80026e8 <HAL_GetTick>
 8003246:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b20      	cmp	r3, #32
 8003252:	f040 8214 	bne.w	800367e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	2319      	movs	r3, #25
 800325c:	2201      	movs	r2, #1
 800325e:	497b      	ldr	r1, [pc, #492]	@ (800344c <HAL_I2C_Mem_Read+0x224>)
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fcbf 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
 800326e:	e207      	b.n	8003680 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_I2C_Mem_Read+0x56>
 800327a:	2302      	movs	r3, #2
 800327c:	e200      	b.n	8003680 <HAL_I2C_Mem_Read+0x458>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b01      	cmp	r3, #1
 8003292:	d007      	beq.n	80032a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0201 	orr.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2222      	movs	r2, #34	@ 0x22
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2240      	movs	r2, #64	@ 0x40
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032da:	b29a      	uxth	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003450 <HAL_I2C_Mem_Read+0x228>)
 80032e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032e6:	88f8      	ldrh	r0, [r7, #6]
 80032e8:	893a      	ldrh	r2, [r7, #8]
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	4603      	mov	r3, r0
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 fb8c 	bl	8003a14 <I2C_RequestMemoryRead>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1bc      	b.n	8003680 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	2b00      	cmp	r3, #0
 800330c:	d113      	bne.n	8003336 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	623b      	str	r3, [r7, #32]
 8003322:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	e190      	b.n	8003658 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333a:	2b01      	cmp	r3, #1
 800333c:	d11b      	bne.n	8003376 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800334c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	61fb      	str	r3, [r7, #28]
 8003362:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	e170      	b.n	8003658 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	2b02      	cmp	r3, #2
 800337c:	d11b      	bne.n	80033b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800338c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800339c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339e:	2300      	movs	r3, #0
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	e150      	b.n	8003658 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b6:	2300      	movs	r3, #0
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033cc:	e144      	b.n	8003658 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d2:	2b03      	cmp	r3, #3
 80033d4:	f200 80f1 	bhi.w	80035ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d123      	bne.n	8003428 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f000 fda7 	bl	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e145      	b.n	8003680 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003426:	e117      	b.n	8003658 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800342c:	2b02      	cmp	r3, #2
 800342e:	d14e      	bne.n	80034ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003436:	2200      	movs	r2, #0
 8003438:	4906      	ldr	r1, [pc, #24]	@ (8003454 <HAL_I2C_Mem_Read+0x22c>)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fbd2 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e11a      	b.n	8003680 <HAL_I2C_Mem_Read+0x458>
 800344a:	bf00      	nop
 800344c:	00100002 	.word	0x00100002
 8003450:	ffff0000 	.word	0xffff0000
 8003454:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a4:	b2d2      	uxtb	r2, r2
 80034a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034cc:	e0c4      	b.n	8003658 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d4:	2200      	movs	r2, #0
 80034d6:	496c      	ldr	r1, [pc, #432]	@ (8003688 <HAL_I2C_Mem_Read+0x460>)
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 fb83 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e0cb      	b.n	8003680 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003530:	2200      	movs	r2, #0
 8003532:	4955      	ldr	r1, [pc, #340]	@ (8003688 <HAL_I2C_Mem_Read+0x460>)
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 fb55 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e09d      	b.n	8003680 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003552:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691a      	ldr	r2, [r3, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	1c5a      	adds	r2, r3, #1
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	3b01      	subs	r3, #1
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b01      	subs	r3, #1
 8003580:	b29a      	uxth	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003590:	b2d2      	uxtb	r2, r2
 8003592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	3b01      	subs	r3, #1
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035b8:	e04e      	b.n	8003658 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fcba 	bl	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e058      	b.n	8003680 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b04      	cmp	r3, #4
 800360c:	d124      	bne.n	8003658 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003612:	2b03      	cmp	r3, #3
 8003614:	d107      	bne.n	8003626 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003624:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	691a      	ldr	r2, [r3, #16]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003638:	1c5a      	adds	r2, r3, #1
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003642:	3b01      	subs	r3, #1
 8003644:	b29a      	uxth	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800364e:	b29b      	uxth	r3, r3
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365c:	2b00      	cmp	r3, #0
 800365e:	f47f aeb6 	bne.w	80033ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	e000      	b.n	8003680 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800367e:	2302      	movs	r3, #2
  }
}
 8003680:	4618      	mov	r0, r3
 8003682:	3728      	adds	r7, #40	@ 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	00010004 	.word	0x00010004

0800368c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	@ 0x28
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	607a      	str	r2, [r7, #4]
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	460b      	mov	r3, r1
 800369a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff f824 	bl	80026e8 <HAL_GetTick>
 80036a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b20      	cmp	r3, #32
 80036b0:	f040 8111 	bne.w	80038d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	2319      	movs	r3, #25
 80036ba:	2201      	movs	r2, #1
 80036bc:	4988      	ldr	r1, [pc, #544]	@ (80038e0 <HAL_I2C_IsDeviceReady+0x254>)
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fa90 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	e104      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_I2C_IsDeviceReady+0x50>
 80036d8:	2302      	movs	r3, #2
 80036da:	e0fd      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d007      	beq.n	8003702 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f042 0201 	orr.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003710:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2224      	movs	r2, #36	@ 0x24
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4a70      	ldr	r2, [pc, #448]	@ (80038e4 <HAL_I2C_IsDeviceReady+0x258>)
 8003724:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003734:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2200      	movs	r2, #0
 800373e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fa4e 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00d      	beq.n	800376a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800375c:	d103      	bne.n	8003766 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003764:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0b6      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003778:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800377a:	f7fe ffb5 	bl	80026e8 <HAL_GetTick>
 800377e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b02      	cmp	r3, #2
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695b      	ldr	r3, [r3, #20]
 800379c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037ae:	e025      	b.n	80037fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037b0:	f7fe ff9a 	bl	80026e8 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d302      	bcc.n	80037c6 <HAL_I2C_IsDeviceReady+0x13a>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	22a0      	movs	r2, #160	@ 0xa0
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037f2:	bf0c      	ite	eq
 80037f4:	2301      	moveq	r3, #1
 80037f6:	2300      	movne	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2ba0      	cmp	r3, #160	@ 0xa0
 8003806:	d005      	beq.n	8003814 <HAL_I2C_IsDeviceReady+0x188>
 8003808:	7dfb      	ldrb	r3, [r7, #23]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d102      	bne.n	8003814 <HAL_I2C_IsDeviceReady+0x188>
 800380e:	7dbb      	ldrb	r3, [r7, #22]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0cd      	beq.n	80037b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b02      	cmp	r3, #2
 8003828:	d129      	bne.n	800387e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003838:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	2319      	movs	r3, #25
 8003856:	2201      	movs	r2, #1
 8003858:	4921      	ldr	r1, [pc, #132]	@ (80038e0 <HAL_I2C_IsDeviceReady+0x254>)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f9c2 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e036      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2220      	movs	r2, #32
 800386e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e02c      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003896:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2319      	movs	r3, #25
 800389e:	2201      	movs	r2, #1
 80038a0:	490f      	ldr	r1, [pc, #60]	@ (80038e0 <HAL_I2C_IsDeviceReady+0x254>)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 f99e 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e012      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	3301      	adds	r3, #1
 80038b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	f4ff af32 	bcc.w	8003726 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3720      	adds	r7, #32
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	00100002 	.word	0x00100002
 80038e4:	ffff0000 	.word	0xffff0000

080038e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	460b      	mov	r3, r1
 80038fc:	813b      	strh	r3, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003910:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	2200      	movs	r2, #0
 800391a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f960 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003938:	d103      	bne.n	8003942 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003940:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e05f      	b.n	8003a06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003946:	897b      	ldrh	r3, [r7, #10]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003954:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	492d      	ldr	r1, [pc, #180]	@ (8003a10 <I2C_RequestMemoryWrite+0x128>)
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f9bb 	bl	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e04c      	b.n	8003a06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	617b      	str	r3, [r7, #20]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003984:	6a39      	ldr	r1, [r7, #32]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 fa46 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	2b04      	cmp	r3, #4
 8003998:	d107      	bne.n	80039aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e02b      	b.n	8003a06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d105      	bne.n	80039c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039b4:	893b      	ldrh	r3, [r7, #8]
 80039b6:	b2da      	uxtb	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	e021      	b.n	8003a04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039c0:	893b      	ldrh	r3, [r7, #8]
 80039c2:	0a1b      	lsrs	r3, r3, #8
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d0:	6a39      	ldr	r1, [r7, #32]
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fa20 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00d      	beq.n	80039fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d107      	bne.n	80039f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e005      	b.n	8003a06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039fa:	893b      	ldrh	r3, [r7, #8]
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	00010002 	.word	0x00010002

08003a14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b088      	sub	sp, #32
 8003a18:	af02      	add	r7, sp, #8
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	4611      	mov	r1, r2
 8003a20:	461a      	mov	r2, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	817b      	strh	r3, [r7, #10]
 8003a26:	460b      	mov	r3, r1
 8003a28:	813b      	strh	r3, [r7, #8]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f8c2 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a74:	d103      	bne.n	8003a7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0aa      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a82:	897b      	ldrh	r3, [r7, #10]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	6a3a      	ldr	r2, [r7, #32]
 8003a96:	4952      	ldr	r1, [pc, #328]	@ (8003be0 <I2C_RequestMemoryRead+0x1cc>)
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f91d 	bl	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e097      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac0:	6a39      	ldr	r1, [r7, #32]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f9a8 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d107      	bne.n	8003ae6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e076      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003af0:	893b      	ldrh	r3, [r7, #8]
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	611a      	str	r2, [r3, #16]
 8003afa:	e021      	b.n	8003b40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003afc:	893b      	ldrh	r3, [r7, #8]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b0c:	6a39      	ldr	r1, [r7, #32]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f982 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d107      	bne.n	8003b32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e050      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b36:	893b      	ldrh	r3, [r7, #8]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b42:	6a39      	ldr	r1, [r7, #32]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f967 	bl	8003e18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00d      	beq.n	8003b6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d107      	bne.n	8003b68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e035      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f82b 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00d      	beq.n	8003bb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ba2:	d103      	bne.n	8003bac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003baa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e013      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003bb0:	897b      	ldrh	r3, [r7, #10]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	b2da      	uxtb	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	6a3a      	ldr	r2, [r7, #32]
 8003bc4:	4906      	ldr	r1, [pc, #24]	@ (8003be0 <I2C_RequestMemoryRead+0x1cc>)
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f886 	bl	8003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e000      	b.n	8003bd8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	00010002 	.word	0x00010002

08003be4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf4:	e048      	b.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfc:	d044      	beq.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfe:	f7fe fd73 	bl	80026e8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d302      	bcc.n	8003c14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d139      	bne.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10d      	bne.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	43da      	mvns	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	e00c      	b.n	8003c54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	43da      	mvns	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d116      	bne.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c74:	f043 0220 	orr.w	r2, r3, #32
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e023      	b.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10d      	bne.n	8003cae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	43da      	mvns	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	e00c      	b.n	8003cc8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d093      	beq.n	8003bf6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ce6:	e071      	b.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf6:	d123      	bne.n	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e067      	b.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d041      	beq.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d48:	f7fe fcce 	bl	80026e8 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d302      	bcc.n	8003d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d136      	bne.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d10c      	bne.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	43da      	mvns	r2, r3
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	4013      	ands	r3, r2
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	bf14      	ite	ne
 8003d7a:	2301      	movne	r3, #1
 8003d7c:	2300      	moveq	r3, #0
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	e00b      	b.n	8003d9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	f043 0220 	orr.w	r2, r3, #32
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e021      	b.n	8003e10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	0c1b      	lsrs	r3, r3, #16
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d10c      	bne.n	8003df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	4013      	ands	r3, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	e00b      	b.n	8003e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	43da      	mvns	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	bf14      	ite	ne
 8003e02:	2301      	movne	r3, #1
 8003e04:	2300      	moveq	r3, #0
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f47f af6d 	bne.w	8003ce8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e24:	e034      	b.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f8e3 	bl	8003ff2 <I2C_IsAcknowledgeFailed>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e034      	b.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d028      	beq.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3e:	f7fe fc53 	bl	80026e8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d302      	bcc.n	8003e54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d11d      	bne.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5e:	2b80      	cmp	r3, #128	@ 0x80
 8003e60:	d016      	beq.n	8003e90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7c:	f043 0220 	orr.w	r2, r3, #32
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e007      	b.n	8003ea0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9a:	2b80      	cmp	r3, #128	@ 0x80
 8003e9c:	d1c3      	bne.n	8003e26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eb4:	e034      	b.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f89b 	bl	8003ff2 <I2C_IsAcknowledgeFailed>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e034      	b.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d028      	beq.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fe fc0b 	bl	80026e8 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d11d      	bne.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d016      	beq.n	8003f20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e007      	b.n	8003f30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d1c3      	bne.n	8003eb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f44:	e049      	b.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0310 	and.w	r3, r3, #16
 8003f50:	2b10      	cmp	r3, #16
 8003f52:	d119      	bne.n	8003f88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0210 	mvn.w	r2, #16
 8003f5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e030      	b.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f88:	f7fe fbae 	bl	80026e8 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d302      	bcc.n	8003f9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d11d      	bne.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa8:	2b40      	cmp	r3, #64	@ 0x40
 8003faa:	d016      	beq.n	8003fda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc6:	f043 0220 	orr.w	r2, r3, #32
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e007      	b.n	8003fea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe4:	2b40      	cmp	r3, #64	@ 0x40
 8003fe6:	d1ae      	bne.n	8003f46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004008:	d11b      	bne.n	8004042 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004012:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	f043 0204 	orr.w	r2, r3, #4
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0cc      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b68      	ldr	r3, [pc, #416]	@ (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d90c      	bls.n	800408c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b65      	ldr	r3, [pc, #404]	@ (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800407a:	4b63      	ldr	r3, [pc, #396]	@ (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0307 	and.w	r3, r3, #7
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e0b8      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d020      	beq.n	80040da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040a4:	4b59      	ldr	r3, [pc, #356]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	4a58      	ldr	r2, [pc, #352]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040bc:	4b53      	ldr	r3, [pc, #332]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a52      	ldr	r2, [pc, #328]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040c8:	4b50      	ldr	r3, [pc, #320]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	494d      	ldr	r1, [pc, #308]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0301 	and.w	r3, r3, #1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d044      	beq.n	8004170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d107      	bne.n	80040fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	4b47      	ldr	r3, [pc, #284]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d119      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e07f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d003      	beq.n	800410e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410a:	2b03      	cmp	r3, #3
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410e:	4b3f      	ldr	r3, [pc, #252]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e06f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	4b3b      	ldr	r3, [pc, #236]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e067      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412e:	4b37      	ldr	r3, [pc, #220]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f023 0203 	bic.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4934      	ldr	r1, [pc, #208]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004140:	f7fe fad2 	bl	80026e8 <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	e00a      	b.n	800415e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7fe face 	bl	80026e8 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e04f      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	4b2b      	ldr	r3, [pc, #172]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 020c 	and.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	429a      	cmp	r2, r3
 800416e:	d1eb      	bne.n	8004148 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004170:	4b25      	ldr	r3, [pc, #148]	@ (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d20c      	bcs.n	8004198 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b22      	ldr	r3, [pc, #136]	@ (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b20      	ldr	r3, [pc, #128]	@ (8004208 <HAL_RCC_ClockConfig+0x1b8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d001      	beq.n	8004198 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e032      	b.n	80041fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a4:	4b19      	ldr	r3, [pc, #100]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4916      	ldr	r1, [pc, #88]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c2:	4b12      	ldr	r3, [pc, #72]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	490e      	ldr	r1, [pc, #56]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041d6:	f000 f821 	bl	800421c <HAL_RCC_GetSysClockFreq>
 80041da:	4602      	mov	r2, r0
 80041dc:	4b0b      	ldr	r3, [pc, #44]	@ (800420c <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	091b      	lsrs	r3, r3, #4
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	490a      	ldr	r1, [pc, #40]	@ (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 80041e8:	5ccb      	ldrb	r3, [r1, r3]
 80041ea:	fa22 f303 	lsr.w	r3, r2, r3
 80041ee:	4a09      	ldr	r2, [pc, #36]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041f2:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fa32 	bl	8002660 <HAL_InitTick>

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023c00 	.word	0x40023c00
 800420c:	40023800 	.word	0x40023800
 8004210:	0800f454 	.word	0x0800f454
 8004214:	20003678 	.word	0x20003678
 8004218:	2000367c 	.word	0x2000367c

0800421c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800421c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004220:	b094      	sub	sp, #80	@ 0x50
 8004222:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	647b      	str	r3, [r7, #68]	@ 0x44
 8004228:	2300      	movs	r3, #0
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	2300      	movs	r3, #0
 800422e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004234:	4b79      	ldr	r3, [pc, #484]	@ (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b08      	cmp	r3, #8
 800423e:	d00d      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x40>
 8004240:	2b08      	cmp	r3, #8
 8004242:	f200 80e1 	bhi.w	8004408 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_RCC_GetSysClockFreq+0x34>
 800424a:	2b04      	cmp	r3, #4
 800424c:	d003      	beq.n	8004256 <HAL_RCC_GetSysClockFreq+0x3a>
 800424e:	e0db      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004250:	4b73      	ldr	r3, [pc, #460]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x204>)
 8004252:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004254:	e0db      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004256:	4b73      	ldr	r3, [pc, #460]	@ (8004424 <HAL_RCC_GetSysClockFreq+0x208>)
 8004258:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800425a:	e0d8      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800425c:	4b6f      	ldr	r3, [pc, #444]	@ (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004264:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004266:	4b6d      	ldr	r3, [pc, #436]	@ (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d063      	beq.n	800433a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004272:	4b6a      	ldr	r3, [pc, #424]	@ (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	2200      	movs	r2, #0
 800427a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800427c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800427e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004284:	633b      	str	r3, [r7, #48]	@ 0x30
 8004286:	2300      	movs	r3, #0
 8004288:	637b      	str	r3, [r7, #52]	@ 0x34
 800428a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800428e:	4622      	mov	r2, r4
 8004290:	462b      	mov	r3, r5
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	0159      	lsls	r1, r3, #5
 800429c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a0:	0150      	lsls	r0, r2, #5
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4621      	mov	r1, r4
 80042a8:	1a51      	subs	r1, r2, r1
 80042aa:	6139      	str	r1, [r7, #16]
 80042ac:	4629      	mov	r1, r5
 80042ae:	eb63 0301 	sbc.w	r3, r3, r1
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042c0:	4659      	mov	r1, fp
 80042c2:	018b      	lsls	r3, r1, #6
 80042c4:	4651      	mov	r1, sl
 80042c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ca:	4651      	mov	r1, sl
 80042cc:	018a      	lsls	r2, r1, #6
 80042ce:	4651      	mov	r1, sl
 80042d0:	ebb2 0801 	subs.w	r8, r2, r1
 80042d4:	4659      	mov	r1, fp
 80042d6:	eb63 0901 	sbc.w	r9, r3, r1
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ee:	4690      	mov	r8, r2
 80042f0:	4699      	mov	r9, r3
 80042f2:	4623      	mov	r3, r4
 80042f4:	eb18 0303 	adds.w	r3, r8, r3
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	462b      	mov	r3, r5
 80042fc:	eb49 0303 	adc.w	r3, r9, r3
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800430e:	4629      	mov	r1, r5
 8004310:	024b      	lsls	r3, r1, #9
 8004312:	4621      	mov	r1, r4
 8004314:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004318:	4621      	mov	r1, r4
 800431a:	024a      	lsls	r2, r1, #9
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004322:	2200      	movs	r2, #0
 8004324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004326:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004328:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800432c:	f7fc fc6c 	bl	8000c08 <__aeabi_uldivmod>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4613      	mov	r3, r2
 8004336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004338:	e058      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800433a:	4b38      	ldr	r3, [pc, #224]	@ (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	099b      	lsrs	r3, r3, #6
 8004340:	2200      	movs	r2, #0
 8004342:	4618      	mov	r0, r3
 8004344:	4611      	mov	r1, r2
 8004346:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800434a:	623b      	str	r3, [r7, #32]
 800434c:	2300      	movs	r3, #0
 800434e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004350:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	f04f 0000 	mov.w	r0, #0
 800435c:	f04f 0100 	mov.w	r1, #0
 8004360:	0159      	lsls	r1, r3, #5
 8004362:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004366:	0150      	lsls	r0, r2, #5
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4641      	mov	r1, r8
 800436e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004372:	4649      	mov	r1, r9
 8004374:	eb63 0b01 	sbc.w	fp, r3, r1
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 0300 	mov.w	r3, #0
 8004380:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004384:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004388:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800438c:	ebb2 040a 	subs.w	r4, r2, sl
 8004390:	eb63 050b 	sbc.w	r5, r3, fp
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	00eb      	lsls	r3, r5, #3
 800439e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043a2:	00e2      	lsls	r2, r4, #3
 80043a4:	4614      	mov	r4, r2
 80043a6:	461d      	mov	r5, r3
 80043a8:	4643      	mov	r3, r8
 80043aa:	18e3      	adds	r3, r4, r3
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	464b      	mov	r3, r9
 80043b0:	eb45 0303 	adc.w	r3, r5, r3
 80043b4:	607b      	str	r3, [r7, #4]
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043c2:	4629      	mov	r1, r5
 80043c4:	028b      	lsls	r3, r1, #10
 80043c6:	4621      	mov	r1, r4
 80043c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043cc:	4621      	mov	r1, r4
 80043ce:	028a      	lsls	r2, r1, #10
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043d6:	2200      	movs	r2, #0
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	61fa      	str	r2, [r7, #28]
 80043dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043e0:	f7fc fc12 	bl	8000c08 <__aeabi_uldivmod>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4613      	mov	r3, r2
 80043ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043ec:	4b0b      	ldr	r3, [pc, #44]	@ (800441c <HAL_RCC_GetSysClockFreq+0x200>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	0c1b      	lsrs	r3, r3, #16
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	3301      	adds	r3, #1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80043fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004406:	e002      	b.n	800440e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <HAL_RCC_GetSysClockFreq+0x204>)
 800440a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800440c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800440e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004410:	4618      	mov	r0, r3
 8004412:	3750      	adds	r7, #80	@ 0x50
 8004414:	46bd      	mov	sp, r7
 8004416:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800
 8004420:	00f42400 	.word	0x00f42400
 8004424:	007a1200 	.word	0x007a1200

08004428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800442c:	4b03      	ldr	r3, [pc, #12]	@ (800443c <HAL_RCC_GetHCLKFreq+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20003678 	.word	0x20003678

08004440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004444:	f7ff fff0 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	0a9b      	lsrs	r3, r3, #10
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4903      	ldr	r1, [pc, #12]	@ (8004464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	0800f464 	.word	0x0800f464

08004468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800446c:	f7ff ffdc 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 8004470:	4602      	mov	r2, r0
 8004472:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	0b5b      	lsrs	r3, r3, #13
 8004478:	f003 0307 	and.w	r3, r3, #7
 800447c:	4903      	ldr	r1, [pc, #12]	@ (800448c <HAL_RCC_GetPCLK2Freq+0x24>)
 800447e:	5ccb      	ldrb	r3, [r1, r3]
 8004480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004484:	4618      	mov	r0, r3
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40023800 	.word	0x40023800
 800448c:	0800f464 	.word	0x0800f464

08004490 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8083 	beq.w	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	4b61      	ldr	r3, [pc, #388]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	4a60      	ldr	r2, [pc, #384]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80044be:	4b5e      	ldr	r3, [pc, #376]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80044ca:	4b5c      	ldr	r3, [pc, #368]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a5b      	ldr	r2, [pc, #364]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044d6:	f7fe f907 	bl	80026e8 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044de:	f7fe f903 	bl	80026e8 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e09f      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80044f0:	4b52      	ldr	r3, [pc, #328]	@ (800463c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x4e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80044fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004504:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d02f      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	429a      	cmp	r2, r3
 8004518:	d028      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xdc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800451a:	4b47      	ldr	r3, [pc, #284]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004522:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004524:	4b46      	ldr	r3, [pc, #280]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004526:	2201      	movs	r2, #1
 8004528:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800452a:	4b45      	ldr	r3, [pc, #276]	@ (8004640 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004530:	4a41      	ldr	r2, [pc, #260]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004536:	4b40      	ldr	r3, [pc, #256]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b01      	cmp	r3, #1
 8004540:	d114      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004542:	f7fe f8d1 	bl	80026e8 <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7fe f8cd 	bl	80026e8 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          {
            return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e067      	b.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	4b35      	ldr	r3, [pc, #212]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ee      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0xba>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004574:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004578:	d10d      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800457a:	4b2f      	ldr	r3, [pc, #188]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800458a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458e:	492a      	ldr	r1, [pc, #168]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]
 8004594:	e005      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004596:	4b28      	ldr	r3, [pc, #160]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	4a27      	ldr	r2, [pc, #156]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800459c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80045a0:	6093      	str	r3, [r2, #8]
 80045a2:	4b25      	ldr	r3, [pc, #148]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ae:	4922      	ldr	r1, [pc, #136]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	7d1a      	ldrb	r2, [r3, #20]
 80045c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80045d4:	4b18      	ldr	r3, [pc, #96]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045da:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	4915      	ldr	r1, [pc, #84]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0310 	and.w	r3, r3, #16
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00a      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045f6:	4b10      	ldr	r3, [pc, #64]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80045f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045fc:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	490c      	ldr	r1, [pc, #48]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }

  /*---------------------------- I2S Configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));

    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
 8004618:	4b07      	ldr	r3, [pc, #28]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800461a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800461e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4904      	ldr	r1, [pc, #16]	@ (8004638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004628:	4313      	orrs	r3, r2
 800462a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3718      	adds	r7, #24
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	40007000 	.word	0x40007000
 8004640:	42470e40 	.word	0x42470e40
 8004644:	424711e0 	.word	0x424711e0

08004648 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e273      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d075      	beq.n	8004752 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004666:	4b88      	ldr	r3, [pc, #544]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b04      	cmp	r3, #4
 8004670:	d00c      	beq.n	800468c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004672:	4b85      	ldr	r3, [pc, #532]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800467a:	2b08      	cmp	r3, #8
 800467c:	d112      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800467e:	4b82      	ldr	r3, [pc, #520]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800468a:	d10b      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800468c:	4b7e      	ldr	r3, [pc, #504]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d05b      	beq.n	8004750 <HAL_RCC_OscConfig+0x108>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d157      	bne.n	8004750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e24e      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ac:	d106      	bne.n	80046bc <HAL_RCC_OscConfig+0x74>
 80046ae:	4b76      	ldr	r3, [pc, #472]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a75      	ldr	r2, [pc, #468]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80046b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b8:	6013      	str	r3, [r2, #0]
 80046ba:	e01d      	b.n	80046f8 <HAL_RCC_OscConfig+0xb0>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046c4:	d10c      	bne.n	80046e0 <HAL_RCC_OscConfig+0x98>
 80046c6:	4b70      	ldr	r3, [pc, #448]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a6f      	ldr	r2, [pc, #444]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80046cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a6c      	ldr	r2, [pc, #432]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80046d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	e00b      	b.n	80046f8 <HAL_RCC_OscConfig+0xb0>
 80046e0:	4b69      	ldr	r3, [pc, #420]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a68      	ldr	r2, [pc, #416]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80046e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b66      	ldr	r3, [pc, #408]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a65      	ldr	r2, [pc, #404]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80046f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d013      	beq.n	8004728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd fff2 	bl	80026e8 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004708:	f7fd ffee 	bl	80026e8 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	@ 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e213      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800471a:	4b5b      	ldr	r3, [pc, #364]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d0f0      	beq.n	8004708 <HAL_RCC_OscConfig+0xc0>
 8004726:	e014      	b.n	8004752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd ffde 	bl	80026e8 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004730:	f7fd ffda 	bl	80026e8 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	@ 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e1ff      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004742:	4b51      	ldr	r3, [pc, #324]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0xe8>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b00      	cmp	r3, #0
 800475c:	d063      	beq.n	8004826 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800475e:	4b4a      	ldr	r3, [pc, #296]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00b      	beq.n	8004782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800476a:	4b47      	ldr	r3, [pc, #284]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004772:	2b08      	cmp	r3, #8
 8004774:	d11c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004776:	4b44      	ldr	r3, [pc, #272]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d116      	bne.n	80047b0 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004782:	4b41      	ldr	r3, [pc, #260]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d005      	beq.n	800479a <HAL_RCC_OscConfig+0x152>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d001      	beq.n	800479a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e1d3      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479a:	4b3b      	ldr	r3, [pc, #236]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4937      	ldr	r1, [pc, #220]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ae:	e03a      	b.n	8004826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d020      	beq.n	80047fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b8:	4b34      	ldr	r3, [pc, #208]	@ (800488c <HAL_RCC_OscConfig+0x244>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fd ff93 	bl	80026e8 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047c6:	f7fd ff8f 	bl	80026e8 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e1b4      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e4:	4b28      	ldr	r3, [pc, #160]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4925      	ldr	r1, [pc, #148]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	600b      	str	r3, [r1, #0]
 80047f8:	e015      	b.n	8004826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fa:	4b24      	ldr	r3, [pc, #144]	@ (800488c <HAL_RCC_OscConfig+0x244>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fd ff72 	bl	80026e8 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004808:	f7fd ff6e 	bl	80026e8 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e193      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481a:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0308 	and.w	r3, r3, #8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d036      	beq.n	80048a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d016      	beq.n	8004868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800483a:	4b15      	ldr	r3, [pc, #84]	@ (8004890 <HAL_RCC_OscConfig+0x248>)
 800483c:	2201      	movs	r2, #1
 800483e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd ff52 	bl	80026e8 <HAL_GetTick>
 8004844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004848:	f7fd ff4e 	bl	80026e8 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e173      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800485a:	4b0b      	ldr	r3, [pc, #44]	@ (8004888 <HAL_RCC_OscConfig+0x240>)
 800485c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0f0      	beq.n	8004848 <HAL_RCC_OscConfig+0x200>
 8004866:	e01b      	b.n	80048a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004868:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <HAL_RCC_OscConfig+0x248>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486e:	f7fd ff3b 	bl	80026e8 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004874:	e00e      	b.n	8004894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004876:	f7fd ff37 	bl	80026e8 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d907      	bls.n	8004894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e15c      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
 8004888:	40023800 	.word	0x40023800
 800488c:	42470000 	.word	0x42470000
 8004890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004894:	4b8a      	ldr	r3, [pc, #552]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ea      	bne.n	8004876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	f000 8097 	beq.w	80049dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048ae:	2300      	movs	r3, #0
 80048b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048b2:	4b83      	ldr	r3, [pc, #524]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d10f      	bne.n	80048de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048be:	2300      	movs	r3, #0
 80048c0:	60bb      	str	r3, [r7, #8]
 80048c2:	4b7f      	ldr	r3, [pc, #508]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 80048c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80048ce:	4b7c      	ldr	r3, [pc, #496]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d6:	60bb      	str	r3, [r7, #8]
 80048d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048de:	4b79      	ldr	r3, [pc, #484]	@ (8004ac4 <HAL_RCC_OscConfig+0x47c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d118      	bne.n	800491c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048ea:	4b76      	ldr	r3, [pc, #472]	@ (8004ac4 <HAL_RCC_OscConfig+0x47c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a75      	ldr	r2, [pc, #468]	@ (8004ac4 <HAL_RCC_OscConfig+0x47c>)
 80048f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048f6:	f7fd fef7 	bl	80026e8 <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fc:	e008      	b.n	8004910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fe:	f7fd fef3 	bl	80026e8 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	2b02      	cmp	r3, #2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e118      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004910:	4b6c      	ldr	r3, [pc, #432]	@ (8004ac4 <HAL_RCC_OscConfig+0x47c>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0f0      	beq.n	80048fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d106      	bne.n	8004932 <HAL_RCC_OscConfig+0x2ea>
 8004924:	4b66      	ldr	r3, [pc, #408]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004928:	4a65      	ldr	r2, [pc, #404]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004930:	e01c      	b.n	800496c <HAL_RCC_OscConfig+0x324>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b05      	cmp	r3, #5
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0x30c>
 800493a:	4b61      	ldr	r3, [pc, #388]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493e:	4a60      	ldr	r2, [pc, #384]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004940:	f043 0304 	orr.w	r3, r3, #4
 8004944:	6713      	str	r3, [r2, #112]	@ 0x70
 8004946:	4b5e      	ldr	r3, [pc, #376]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800494a:	4a5d      	ldr	r2, [pc, #372]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	6713      	str	r3, [r2, #112]	@ 0x70
 8004952:	e00b      	b.n	800496c <HAL_RCC_OscConfig+0x324>
 8004954:	4b5a      	ldr	r3, [pc, #360]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004958:	4a59      	ldr	r2, [pc, #356]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 800495a:	f023 0301 	bic.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004960:	4b57      	ldr	r3, [pc, #348]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004964:	4a56      	ldr	r2, [pc, #344]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004966:	f023 0304 	bic.w	r3, r3, #4
 800496a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d015      	beq.n	80049a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004974:	f7fd feb8 	bl	80026e8 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800497a:	e00a      	b.n	8004992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800497c:	f7fd feb4 	bl	80026e8 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e0d7      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004992:	4b4b      	ldr	r3, [pc, #300]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0ee      	beq.n	800497c <HAL_RCC_OscConfig+0x334>
 800499e:	e014      	b.n	80049ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fd fea2 	bl	80026e8 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049a6:	e00a      	b.n	80049be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049a8:	f7fd fe9e 	bl	80026e8 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e0c1      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049be:	4b40      	ldr	r3, [pc, #256]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1ee      	bne.n	80049a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049ca:	7dfb      	ldrb	r3, [r7, #23]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d105      	bne.n	80049dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049d0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d4:	4a3a      	ldr	r2, [pc, #232]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 80049d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 80ad 	beq.w	8004b40 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049e6:	4b36      	ldr	r3, [pc, #216]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f003 030c 	and.w	r3, r3, #12
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d060      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d145      	bne.n	8004a86 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049fa:	4b33      	ldr	r3, [pc, #204]	@ (8004ac8 <HAL_RCC_OscConfig+0x480>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a00:	f7fd fe72 	bl	80026e8 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a06:	e008      	b.n	8004a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a08:	f7fd fe6e 	bl	80026e8 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e093      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1a:	4b29      	ldr	r3, [pc, #164]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1f0      	bne.n	8004a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	019b      	lsls	r3, r3, #6
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a3c:	085b      	lsrs	r3, r3, #1
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	041b      	lsls	r3, r3, #16
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	061b      	lsls	r3, r3, #24
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a50:	071b      	lsls	r3, r3, #28
 8004a52:	491b      	ldr	r1, [pc, #108]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ac8 <HAL_RCC_OscConfig+0x480>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5e:	f7fd fe43 	bl	80026e8 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a66:	f7fd fe3f 	bl	80026e8 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e064      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a78:	4b11      	ldr	r3, [pc, #68]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x41e>
 8004a84:	e05c      	b.n	8004b40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a86:	4b10      	ldr	r3, [pc, #64]	@ (8004ac8 <HAL_RCC_OscConfig+0x480>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a8c:	f7fd fe2c 	bl	80026e8 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fd fe28 	bl	80026e8 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e04d      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <HAL_RCC_OscConfig+0x478>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x44c>
 8004ab2:	e045      	b.n	8004b40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d107      	bne.n	8004acc <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e040      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40007000 	.word	0x40007000
 8004ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004acc:	4b1f      	ldr	r3, [pc, #124]	@ (8004b4c <HAL_RCC_OscConfig+0x504>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d030      	beq.n	8004b3c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d129      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d122      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d119      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b12:	085b      	lsrs	r3, r3, #1
 8004b14:	3b01      	subs	r3, #1
 8004b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d10f      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d107      	bne.n	8004b3c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800

08004b50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e073      	b.n	8004c4e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	7f5b      	ldrb	r3, [r3, #29]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fd fba2 	bl	80022c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b10      	cmp	r3, #16
 8004b8e:	d055      	beq.n	8004c3c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	22ca      	movs	r2, #202	@ 0xca
 8004b96:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2253      	movs	r2, #83	@ 0x53
 8004b9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fa49 	bl	8005038 <RTC_EnterInitMode>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d12c      	bne.n	8004c0a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004bbe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bc2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6899      	ldr	r1, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68d2      	ldr	r2, [r2, #12]
 8004bea:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6919      	ldr	r1, [r3, #16]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	041a      	lsls	r2, r3, #16
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fa50 	bl	80050a6 <RTC_ExitInitMode>
 8004c06:	4603      	mov	r3, r0
 8004c08:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d110      	bne.n	8004c32 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c1e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699a      	ldr	r2, [r3, #24]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	22ff      	movs	r2, #255	@ 0xff
 8004c38:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c3a:	e001      	b.n	8004c40 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d102      	bne.n	8004c4c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c56:	b590      	push	{r4, r7, lr}
 8004c58:	b087      	sub	sp, #28
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	7f1b      	ldrb	r3, [r3, #28]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_RTC_SetTime+0x1c>
 8004c6e:	2302      	movs	r3, #2
 8004c70:	e087      	b.n	8004d82 <HAL_RTC_SetTime+0x12c>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d126      	bne.n	8004cd2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2200      	movs	r2, #0
 8004c96:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fa27 	bl	80050f0 <RTC_ByteToBcd2>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	785b      	ldrb	r3, [r3, #1]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fa20 	bl	80050f0 <RTC_ByteToBcd2>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004cb4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	789b      	ldrb	r3, [r3, #2]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fa18 	bl	80050f0 <RTC_ByteToBcd2>
 8004cc0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004cc2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	78db      	ldrb	r3, [r3, #3]
 8004cca:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e018      	b.n	8004d04 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004cf2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004cf8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	78db      	ldrb	r3, [r3, #3]
 8004cfe:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004d00:	4313      	orrs	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	22ca      	movs	r2, #202	@ 0xca
 8004d0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2253      	movs	r2, #83	@ 0x53
 8004d12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f98f 	bl	8005038 <RTC_EnterInitMode>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004d1e:	7cfb      	ldrb	r3, [r7, #19]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d120      	bne.n	8004d66 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004d2e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004d32:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d42:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6899      	ldr	r1, [r3, #8]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f000 f9a2 	bl	80050a6 <RTC_ExitInitMode>
 8004d62:	4603      	mov	r3, r0
 8004d64:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004d66:	7cfb      	ldrb	r3, [r7, #19]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	22ff      	movs	r2, #255	@ 0xff
 8004d78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	771a      	strb	r2, [r3, #28]

  return status;
 8004d80:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd90      	pop	{r4, r7, pc}

08004d8a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b086      	sub	sp, #24
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004dbc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	0c1b      	lsrs	r3, r3, #16
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004dcc:	b2da      	uxtb	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	0a1b      	lsrs	r3, r3, #8
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dea:	b2da      	uxtb	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	0d9b      	lsrs	r3, r3, #22
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d11a      	bne.n	8004e3c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 f98e 	bl	800512c <RTC_Bcd2ToByte>
 8004e10:	4603      	mov	r3, r0
 8004e12:	461a      	mov	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	785b      	ldrb	r3, [r3, #1]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 f985 	bl	800512c <RTC_Bcd2ToByte>
 8004e22:	4603      	mov	r3, r0
 8004e24:	461a      	mov	r2, r3
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	789b      	ldrb	r3, [r3, #2]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 f97c 	bl	800512c <RTC_Bcd2ToByte>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e46:	b590      	push	{r4, r7, lr}
 8004e48:	b087      	sub	sp, #28
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	60f8      	str	r0, [r7, #12]
 8004e4e:	60b9      	str	r1, [r7, #8]
 8004e50:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	7f1b      	ldrb	r3, [r3, #28]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_RTC_SetDate+0x1c>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e071      	b.n	8004f46 <HAL_RTC_SetDate+0x100>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2201      	movs	r2, #1
 8004e66:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10e      	bne.n	8004e92 <HAL_RTC_SetDate+0x4c>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	f003 0310 	and.w	r3, r3, #16
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	785b      	ldrb	r3, [r3, #1]
 8004e84:	f023 0310 	bic.w	r3, r3, #16
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	330a      	adds	r3, #10
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d11c      	bne.n	8004ed2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	78db      	ldrb	r3, [r3, #3]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 f927 	bl	80050f0 <RTC_ByteToBcd2>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	785b      	ldrb	r3, [r3, #1]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f920 	bl	80050f0 <RTC_ByteToBcd2>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004eb4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	789b      	ldrb	r3, [r3, #2]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 f918 	bl	80050f0 <RTC_ByteToBcd2>
 8004ec0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ec2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e00e      	b.n	8004ef0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	78db      	ldrb	r3, [r3, #3]
 8004ed6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	785b      	ldrb	r3, [r3, #1]
 8004edc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ede:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ee4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	22ca      	movs	r2, #202	@ 0xca
 8004ef6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2253      	movs	r2, #83	@ 0x53
 8004efe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f899 	bl	8005038 <RTC_EnterInitMode>
 8004f06:	4603      	mov	r3, r0
 8004f08:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10c      	bne.n	8004f2a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f1e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f8c0 	bl	80050a6 <RTC_ExitInitMode>
 8004f26:	4603      	mov	r3, r0
 8004f28:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004f2a:	7cfb      	ldrb	r3, [r7, #19]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d102      	bne.n	8004f36 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	22ff      	movs	r2, #255	@ 0xff
 8004f3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	771a      	strb	r2, [r3, #28]

  return status;
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd90      	pop	{r4, r7, pc}

08004f4e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b086      	sub	sp, #24
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	60f8      	str	r0, [r7, #12]
 8004f56:	60b9      	str	r1, [r7, #8]
 8004f58:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004f68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f6c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	0a1b      	lsrs	r3, r3, #8
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	0b5b      	lsrs	r3, r3, #13
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d11a      	bne.n	8004fe2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	78db      	ldrb	r3, [r3, #3]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 f8bb 	bl	800512c <RTC_Bcd2ToByte>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	461a      	mov	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 f8b2 	bl	800512c <RTC_Bcd2ToByte>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	461a      	mov	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	789b      	ldrb	r3, [r3, #2]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f8a9 	bl	800512c <RTC_Bcd2ToByte>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	461a      	mov	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8005034 <HAL_RTC_WaitForSynchro+0x48>)
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005000:	f7fd fb72 	bl	80026e8 <HAL_GetTick>
 8005004:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005006:	e009      	b.n	800501c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005008:	f7fd fb6e 	bl	80026e8 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005016:	d901      	bls.n	800501c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005018:	2303      	movs	r3, #3
 800501a:	e007      	b.n	800502c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0320 	and.w	r3, r3, #32
 8005026:	2b00      	cmp	r3, #0
 8005028:	d0ee      	beq.n	8005008 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	00017f5f 	.word	0x00017f5f

08005038 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005040:	2300      	movs	r3, #0
 8005042:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d122      	bne.n	800509c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005064:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005066:	f7fd fb3f 	bl	80026e8 <HAL_GetTick>
 800506a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800506c:	e00c      	b.n	8005088 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800506e:	f7fd fb3b 	bl	80026e8 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800507c:	d904      	bls.n	8005088 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2204      	movs	r2, #4
 8005082:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005092:	2b00      	cmp	r3, #0
 8005094:	d102      	bne.n	800509c <RTC_EnterInitMode+0x64>
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b01      	cmp	r3, #1
 800509a:	d1e8      	bne.n	800506e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68da      	ldr	r2, [r3, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050c0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10a      	bne.n	80050e6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff ff8b 	bl	8004fec <HAL_RTC_WaitForSynchro>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d004      	beq.n	80050e6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2204      	movs	r2, #4
 80050e0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80050fe:	e005      	b.n	800510c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3301      	adds	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8005106:	79fb      	ldrb	r3, [r7, #7]
 8005108:	3b0a      	subs	r3, #10
 800510a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	2b09      	cmp	r3, #9
 8005110:	d8f6      	bhi.n	8005100 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	b2db      	uxtb	r3, r3
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	b2da      	uxtb	r2, r3
 800511a:	79fb      	ldrb	r3, [r7, #7]
 800511c:	4313      	orrs	r3, r2
 800511e:	b2db      	uxtb	r3, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	091b      	lsrs	r3, r3, #4
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	4613      	mov	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4413      	add	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	b2db      	uxtb	r3, r3
 8005158:	4413      	add	r3, r2
 800515a:	b2db      	uxtb	r3, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e07b      	b.n	8005272 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	2b00      	cmp	r3, #0
 8005180:	d108      	bne.n	8005194 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800518a:	d009      	beq.n	80051a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	61da      	str	r2, [r3, #28]
 8005192:	e005      	b.n	80051a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fd f810 	bl	80021e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80051d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	431a      	orrs	r2, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005224:	ea42 0103 	orr.w	r1, r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	f003 0104 	and.w	r1, r3, #4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005246:	f003 0210 	and.w	r2, r3, #16
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005260:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b088      	sub	sp, #32
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	603b      	str	r3, [r7, #0]
 8005286:	4613      	mov	r3, r2
 8005288:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800528a:	2300      	movs	r3, #0
 800528c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_SPI_Transmit+0x22>
 8005298:	2302      	movs	r3, #2
 800529a:	e12d      	b.n	80054f8 <HAL_SPI_Transmit+0x27e>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052a4:	f7fd fa20 	bl	80026e8 <HAL_GetTick>
 80052a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80052aa:	88fb      	ldrh	r3, [r7, #6]
 80052ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d002      	beq.n	80052c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80052ba:	2302      	movs	r3, #2
 80052bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052be:	e116      	b.n	80054ee <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Transmit+0x52>
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d102      	bne.n	80052d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80052d0:	e10d      	b.n	80054ee <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2203      	movs	r2, #3
 80052d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	88fa      	ldrh	r2, [r7, #6]
 80052ea:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	88fa      	ldrh	r2, [r7, #6]
 80052f0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005318:	d10f      	bne.n	800533a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005338:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005344:	2b40      	cmp	r3, #64	@ 0x40
 8005346:	d007      	beq.n	8005358 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005360:	d14f      	bne.n	8005402 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_SPI_Transmit+0xf6>
 800536a:	8afb      	ldrh	r3, [r7, #22]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d142      	bne.n	80053f6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005374:	881a      	ldrh	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005380:	1c9a      	adds	r2, r3, #2
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005394:	e02f      	b.n	80053f6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0302 	and.w	r3, r3, #2
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d112      	bne.n	80053ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a8:	881a      	ldrh	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	1c9a      	adds	r2, r3, #2
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80053c8:	e015      	b.n	80053f6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053ca:	f7fd f98d 	bl	80026e8 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d803      	bhi.n	80053e2 <HAL_SPI_Transmit+0x168>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e0:	d102      	bne.n	80053e8 <HAL_SPI_Transmit+0x16e>
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80053f4:	e07b      	b.n	80054ee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ca      	bne.n	8005396 <HAL_SPI_Transmit+0x11c>
 8005400:	e050      	b.n	80054a4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_SPI_Transmit+0x196>
 800540a:	8afb      	ldrh	r3, [r7, #22]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d144      	bne.n	800549a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	7812      	ldrb	r2, [r2, #0]
 800541c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	1c5a      	adds	r2, r3, #1
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800542c:	b29b      	uxth	r3, r3
 800542e:	3b01      	subs	r3, #1
 8005430:	b29a      	uxth	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005436:	e030      	b.n	800549a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b02      	cmp	r3, #2
 8005444:	d113      	bne.n	800546e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	330c      	adds	r3, #12
 8005450:	7812      	ldrb	r2, [r2, #0]
 8005452:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005462:	b29b      	uxth	r3, r3
 8005464:	3b01      	subs	r3, #1
 8005466:	b29a      	uxth	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800546c:	e015      	b.n	800549a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800546e:	f7fd f93b 	bl	80026e8 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d803      	bhi.n	8005486 <HAL_SPI_Transmit+0x20c>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d102      	bne.n	800548c <HAL_SPI_Transmit+0x212>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005498:	e029      	b.n	80054ee <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1c9      	bne.n	8005438 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 f8b1 	bl	8005610 <SPI_EndRxTxTransaction>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10a      	bne.n	80054d8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054c2:	2300      	movs	r3, #0
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	613b      	str	r3, [r7, #16]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d002      	beq.n	80054e6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	77fb      	strb	r3, [r7, #31]
 80054e4:	e003      	b.n	80054ee <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80054f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3720      	adds	r7, #32
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005510:	f7fd f8ea 	bl	80026e8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	4413      	add	r3, r2
 800551e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005520:	f7fd f8e2 	bl	80026e8 <HAL_GetTick>
 8005524:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005526:	4b39      	ldr	r3, [pc, #228]	@ (800560c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	015b      	lsls	r3, r3, #5
 800552c:	0d1b      	lsrs	r3, r3, #20
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	fb02 f303 	mul.w	r3, r2, r3
 8005534:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005536:	e054      	b.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d050      	beq.n	80055e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005540:	f7fd f8d2 	bl	80026e8 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	69fa      	ldr	r2, [r7, #28]
 800554c:	429a      	cmp	r2, r3
 800554e:	d902      	bls.n	8005556 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d13d      	bne.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	685a      	ldr	r2, [r3, #4]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005564:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800556e:	d111      	bne.n	8005594 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005578:	d004      	beq.n	8005584 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005582:	d107      	bne.n	8005594 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005592:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800559c:	d10f      	bne.n	80055be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e017      	b.n	8005602 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	3b01      	subs	r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	4013      	ands	r3, r2
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	bf0c      	ite	eq
 80055f2:	2301      	moveq	r3, #1
 80055f4:	2300      	movne	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	461a      	mov	r2, r3
 80055fa:	79fb      	ldrb	r3, [r7, #7]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d19b      	bne.n	8005538 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20003678 	.word	0x20003678

08005610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af02      	add	r7, sp, #8
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2201      	movs	r2, #1
 8005624:	2102      	movs	r1, #2
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f7ff ff6a 	bl	8005500 <SPI_WaitFlagStateUntilTimeout>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d007      	beq.n	8005642 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005636:	f043 0220 	orr.w	r2, r3, #32
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e032      	b.n	80056a8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005642:	4b1b      	ldr	r3, [pc, #108]	@ (80056b0 <SPI_EndRxTxTransaction+0xa0>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1b      	ldr	r2, [pc, #108]	@ (80056b4 <SPI_EndRxTxTransaction+0xa4>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	0d5b      	lsrs	r3, r3, #21
 800564e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005660:	d112      	bne.n	8005688 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2200      	movs	r2, #0
 800566a:	2180      	movs	r1, #128	@ 0x80
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7ff ff47 	bl	8005500 <SPI_WaitFlagStateUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d016      	beq.n	80056a6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800567c:	f043 0220 	orr.w	r2, r3, #32
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e00f      	b.n	80056a8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	3b01      	subs	r3, #1
 8005692:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569e:	2b80      	cmp	r3, #128	@ 0x80
 80056a0:	d0f2      	beq.n	8005688 <SPI_EndRxTxTransaction+0x78>
 80056a2:	e000      	b.n	80056a6 <SPI_EndRxTxTransaction+0x96>
        break;
 80056a4:	bf00      	nop
  }

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20003678 	.word	0x20003678
 80056b4:	165e9f81 	.word	0x165e9f81

080056b8 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e04a      	b.n	8005760 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc fe1a 	bl	8002318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2224      	movs	r2, #36	@ 0x24
 80056e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fc8d 	bl	800601c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	691a      	ldr	r2, [r3, #16]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8005720:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695a      	ldr	r2, [r3, #20]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f042 0208 	orr.w	r2, r2, #8
 8005730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2220      	movs	r2, #32
 8005754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b0ba      	sub	sp, #232	@ 0xe8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800578e:	2300      	movs	r3, #0
 8005790:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005794:	2300      	movs	r3, #0
 8005796:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80057a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d10f      	bne.n	80057ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <HAL_UART_IRQHandler+0x66>
 80057ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057be:	f003 0320 	and.w	r3, r3, #32
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fb69 	bl	8005e9e <UART_Receive_IT>
      return;
 80057cc:	e25b      	b.n	8005c86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80057ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 80de 	beq.w	8005994 <HAL_UART_IRQHandler+0x22c>
 80057d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	f000 80d1 	beq.w	8005994 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d00b      	beq.n	8005816 <HAL_UART_IRQHandler+0xae>
 80057fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800581a:	f003 0304 	and.w	r3, r3, #4
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <HAL_UART_IRQHandler+0xd2>
 8005822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	f043 0202 	orr.w	r2, r3, #2
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800583a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00b      	beq.n	800585e <HAL_UART_IRQHandler+0xf6>
 8005846:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005856:	f043 0204 	orr.w	r2, r3, #4
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800585e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d011      	beq.n	800588e <HAL_UART_IRQHandler+0x126>
 800586a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005886:	f043 0208 	orr.w	r2, r3, #8
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 81f2 	beq.w	8005c7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d008      	beq.n	80058b6 <HAL_UART_IRQHandler+0x14e>
 80058a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a8:	f003 0320 	and.w	r3, r3, #32
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 faf4 	bl	8005e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058c0:	2b40      	cmp	r3, #64	@ 0x40
 80058c2:	bf0c      	ite	eq
 80058c4:	2301      	moveq	r3, #1
 80058c6:	2300      	movne	r3, #0
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d2:	f003 0308 	and.w	r3, r3, #8
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <HAL_UART_IRQHandler+0x17a>
 80058da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d04f      	beq.n	8005982 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f9fc 	bl	8005ce0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f2:	2b40      	cmp	r3, #64	@ 0x40
 80058f4:	d141      	bne.n	800597a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3314      	adds	r3, #20
 80058fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800590c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005914:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3314      	adds	r3, #20
 800591e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005922:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005926:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800592e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800593a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1d9      	bne.n	80058f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d013      	beq.n	8005972 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b48 <HAL_UART_IRQHandler+0x3e0>)
 8005950:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005956:	4618      	mov	r0, r3
 8005958:	f7fd f877 	bl	8002a4a <HAL_DMA_Abort_IT>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d016      	beq.n	8005990 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005966:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800596c:	4610      	mov	r0, r2
 800596e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005970:	e00e      	b.n	8005990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f99e 	bl	8005cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005978:	e00a      	b.n	8005990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f99a 	bl	8005cb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	e006      	b.n	8005990 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f996 	bl	8005cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800598e:	e175      	b.n	8005c7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	bf00      	nop
    return;
 8005992:	e173      	b.n	8005c7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005998:	2b01      	cmp	r3, #1
 800599a:	f040 814f 	bne.w	8005c3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059a2:	f003 0310 	and.w	r3, r3, #16
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8148 	beq.w	8005c3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80059ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8141 	beq.w	8005c3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059ba:	2300      	movs	r3, #0
 80059bc:	60bb      	str	r3, [r7, #8]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059da:	2b40      	cmp	r3, #64	@ 0x40
 80059dc:	f040 80b6 	bne.w	8005b4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8145 	beq.w	8005c80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80059fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059fe:	429a      	cmp	r2, r3
 8005a00:	f080 813e 	bcs.w	8005c80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a16:	f000 8088 	beq.w	8005b2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005a30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005a46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005a52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005a56:	e841 2300 	strex	r3, r2, [r1]
 8005a5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1d9      	bne.n	8005a1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3314      	adds	r3, #20
 8005a6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005a76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3314      	adds	r3, #20
 8005a86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005a8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005a8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005a92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005a9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e1      	bne.n	8005a66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ab4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3314      	adds	r3, #20
 8005ac2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005ac6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005acc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005ace:	e841 2300 	strex	r3, r2, [r1]
 8005ad2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ad4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d1e3      	bne.n	8005aa2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2220      	movs	r2, #32
 8005ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005af8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005b0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005b0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005b1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e3      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fc ff20 	bl	800296a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f000 f8c1 	bl	8005cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b46:	e09b      	b.n	8005c80 <HAL_UART_IRQHandler+0x518>
 8005b48:	08005da7 	.word	0x08005da7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 808e 	beq.w	8005c84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8089 	beq.w	8005c84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	330c      	adds	r3, #12
 8005b78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005b96:	647a      	str	r2, [r7, #68]	@ 0x44
 8005b98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ba4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1e3      	bne.n	8005b72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3314      	adds	r3, #20
 8005bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	f023 0301 	bic.w	r3, r3, #1
 8005bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	3314      	adds	r3, #20
 8005bca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005bce:	633a      	str	r2, [r7, #48]	@ 0x30
 8005bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1e3      	bne.n	8005baa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0310 	bic.w	r3, r3, #16
 8005c06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	330c      	adds	r3, #12
 8005c10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	e841 2300 	strex	r3, r2, [r1]
 8005c20:	617b      	str	r3, [r7, #20]
   return(result);
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d1e3      	bne.n	8005bf0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 f847 	bl	8005cc8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c3a:	e023      	b.n	8005c84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d009      	beq.n	8005c5c <HAL_UART_IRQHandler+0x4f4>
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f8ba 	bl	8005dce <UART_Transmit_IT>
    return;
 8005c5a:	e014      	b.n	8005c86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00e      	beq.n	8005c86 <HAL_UART_IRQHandler+0x51e>
 8005c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 f8fa 	bl	8005e6e <UART_EndTransmit_IT>
    return;
 8005c7a:	e004      	b.n	8005c86 <HAL_UART_IRQHandler+0x51e>
    return;
 8005c7c:	bf00      	nop
 8005c7e:	e002      	b.n	8005c86 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c80:	bf00      	nop
 8005c82:	e000      	b.n	8005c86 <HAL_UART_IRQHandler+0x51e>
      return;
 8005c84:	bf00      	nop
  }
}
 8005c86:	37e8      	adds	r7, #232	@ 0xe8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cd4:	bf00      	nop
 8005cd6:	370c      	adds	r7, #12
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b095      	sub	sp, #84	@ 0x54
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	330c      	adds	r3, #12
 8005cee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf2:	e853 3f00 	ldrex	r3, [r3]
 8005cf6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	330c      	adds	r3, #12
 8005d06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d08:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d10:	e841 2300 	strex	r3, r2, [r1]
 8005d14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1e5      	bne.n	8005ce8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3314      	adds	r3, #20
 8005d22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3314      	adds	r3, #20
 8005d3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e5      	bne.n	8005d1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d119      	bne.n	8005d8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	330c      	adds	r3, #12
 8005d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	e853 3f00 	ldrex	r3, [r3]
 8005d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f023 0310 	bic.w	r3, r3, #16
 8005d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d78:	61ba      	str	r2, [r7, #24]
 8005d7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7c:	6979      	ldr	r1, [r7, #20]
 8005d7e:	69ba      	ldr	r2, [r7, #24]
 8005d80:	e841 2300 	strex	r3, r2, [r1]
 8005d84:	613b      	str	r3, [r7, #16]
   return(result);
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e5      	bne.n	8005d58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d9a:	bf00      	nop
 8005d9c:	3754      	adds	r7, #84	@ 0x54
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff ff77 	bl	8005cb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dc6:	bf00      	nop
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b21      	cmp	r3, #33	@ 0x21
 8005de0:	d13e      	bne.n	8005e60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dea:	d114      	bne.n	8005e16 <UART_Transmit_IT+0x48>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d110      	bne.n	8005e16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a1b      	ldr	r3, [r3, #32]
 8005df8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	1c9a      	adds	r2, r3, #2
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	621a      	str	r2, [r3, #32]
 8005e14:	e008      	b.n	8005e28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	1c59      	adds	r1, r3, #1
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6211      	str	r1, [r2, #32]
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4619      	mov	r1, r3
 8005e36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10f      	bne.n	8005e5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68da      	ldr	r2, [r3, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e000      	b.n	8005e62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e60:	2302      	movs	r3, #2
  }
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68da      	ldr	r2, [r3, #12]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2220      	movs	r2, #32
 8005e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7ff fefc 	bl	8005c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b08c      	sub	sp, #48	@ 0x30
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b22      	cmp	r3, #34	@ 0x22
 8005eb0:	f040 80ae 	bne.w	8006010 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ebc:	d117      	bne.n	8005eee <UART_Receive_IT+0x50>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d113      	bne.n	8005eee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ece:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee6:	1c9a      	adds	r2, r3, #2
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	629a      	str	r2, [r3, #40]	@ 0x28
 8005eec:	e026      	b.n	8005f3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f00:	d007      	beq.n	8005f12 <UART_Receive_IT+0x74>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <UART_Receive_IT+0x82>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e008      	b.n	8005f32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d15d      	bne.n	800600c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f022 0220 	bic.w	r2, r2, #32
 8005f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	695a      	ldr	r2, [r3, #20]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f022 0201 	bic.w	r2, r2, #1
 8005f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d135      	bne.n	8006002 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	330c      	adds	r3, #12
 8005fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	613b      	str	r3, [r7, #16]
   return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f023 0310 	bic.w	r3, r3, #16
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fbc:	623a      	str	r2, [r7, #32]
 8005fbe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	69f9      	ldr	r1, [r7, #28]
 8005fc2:	6a3a      	ldr	r2, [r7, #32]
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0310 	and.w	r3, r3, #16
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d10a      	bne.n	8005ff4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fde:	2300      	movs	r3, #0
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f7ff fe64 	bl	8005cc8 <HAL_UARTEx_RxEventCallback>
 8006000:	e002      	b.n	8006008 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7ff fe4c 	bl	8005ca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e002      	b.n	8006012 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	e000      	b.n	8006012 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006010:	2302      	movs	r3, #2
  }
}
 8006012:	4618      	mov	r0, r3
 8006014:	3730      	adds	r7, #48	@ 0x30
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
	...

0800601c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800601c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006020:	b0c0      	sub	sp, #256	@ 0x100
 8006022:	af00      	add	r7, sp, #0
 8006024:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006038:	68d9      	ldr	r1, [r3, #12]
 800603a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	ea40 0301 	orr.w	r3, r0, r1
 8006044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	431a      	orrs	r2, r3
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	431a      	orrs	r2, r3
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	4313      	orrs	r3, r2
 8006064:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006074:	f021 010c 	bic.w	r1, r1, #12
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006082:	430b      	orrs	r3, r1
 8006084:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006096:	6999      	ldr	r1, [r3, #24]
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	ea40 0301 	orr.w	r3, r0, r1
 80060a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b8f      	ldr	r3, [pc, #572]	@ (80062e8 <UART_SetConfig+0x2cc>)
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d005      	beq.n	80060bc <UART_SetConfig+0xa0>
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	4b8d      	ldr	r3, [pc, #564]	@ (80062ec <UART_SetConfig+0x2d0>)
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d104      	bne.n	80060c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060bc:	f7fe f9d4 	bl	8004468 <HAL_RCC_GetPCLK2Freq>
 80060c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060c4:	e003      	b.n	80060ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060c6:	f7fe f9bb 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 80060ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060d8:	f040 810c 	bne.w	80062f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80060ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80060ee:	4622      	mov	r2, r4
 80060f0:	462b      	mov	r3, r5
 80060f2:	1891      	adds	r1, r2, r2
 80060f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80060f6:	415b      	adcs	r3, r3
 80060f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80060fe:	4621      	mov	r1, r4
 8006100:	eb12 0801 	adds.w	r8, r2, r1
 8006104:	4629      	mov	r1, r5
 8006106:	eb43 0901 	adc.w	r9, r3, r1
 800610a:	f04f 0200 	mov.w	r2, #0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800611a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800611e:	4690      	mov	r8, r2
 8006120:	4699      	mov	r9, r3
 8006122:	4623      	mov	r3, r4
 8006124:	eb18 0303 	adds.w	r3, r8, r3
 8006128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800612c:	462b      	mov	r3, r5
 800612e:	eb49 0303 	adc.w	r3, r9, r3
 8006132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006142:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006146:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800614a:	460b      	mov	r3, r1
 800614c:	18db      	adds	r3, r3, r3
 800614e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006150:	4613      	mov	r3, r2
 8006152:	eb42 0303 	adc.w	r3, r2, r3
 8006156:	657b      	str	r3, [r7, #84]	@ 0x54
 8006158:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800615c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006160:	f7fa fd52 	bl	8000c08 <__aeabi_uldivmod>
 8006164:	4602      	mov	r2, r0
 8006166:	460b      	mov	r3, r1
 8006168:	4b61      	ldr	r3, [pc, #388]	@ (80062f0 <UART_SetConfig+0x2d4>)
 800616a:	fba3 2302 	umull	r2, r3, r3, r2
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	011c      	lsls	r4, r3, #4
 8006172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006176:	2200      	movs	r2, #0
 8006178:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800617c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006180:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006184:	4642      	mov	r2, r8
 8006186:	464b      	mov	r3, r9
 8006188:	1891      	adds	r1, r2, r2
 800618a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800618c:	415b      	adcs	r3, r3
 800618e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006190:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006194:	4641      	mov	r1, r8
 8006196:	eb12 0a01 	adds.w	sl, r2, r1
 800619a:	4649      	mov	r1, r9
 800619c:	eb43 0b01 	adc.w	fp, r3, r1
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061b4:	4692      	mov	sl, r2
 80061b6:	469b      	mov	fp, r3
 80061b8:	4643      	mov	r3, r8
 80061ba:	eb1a 0303 	adds.w	r3, sl, r3
 80061be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061c2:	464b      	mov	r3, r9
 80061c4:	eb4b 0303 	adc.w	r3, fp, r3
 80061c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061e0:	460b      	mov	r3, r1
 80061e2:	18db      	adds	r3, r3, r3
 80061e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80061e6:	4613      	mov	r3, r2
 80061e8:	eb42 0303 	adc.w	r3, r2, r3
 80061ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80061f6:	f7fa fd07 	bl	8000c08 <__aeabi_uldivmod>
 80061fa:	4602      	mov	r2, r0
 80061fc:	460b      	mov	r3, r1
 80061fe:	4611      	mov	r1, r2
 8006200:	4b3b      	ldr	r3, [pc, #236]	@ (80062f0 <UART_SetConfig+0x2d4>)
 8006202:	fba3 2301 	umull	r2, r3, r3, r1
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	2264      	movs	r2, #100	@ 0x64
 800620a:	fb02 f303 	mul.w	r3, r2, r3
 800620e:	1acb      	subs	r3, r1, r3
 8006210:	00db      	lsls	r3, r3, #3
 8006212:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006216:	4b36      	ldr	r3, [pc, #216]	@ (80062f0 <UART_SetConfig+0x2d4>)
 8006218:	fba3 2302 	umull	r2, r3, r3, r2
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006224:	441c      	add	r4, r3
 8006226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800622a:	2200      	movs	r2, #0
 800622c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006230:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006234:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006238:	4642      	mov	r2, r8
 800623a:	464b      	mov	r3, r9
 800623c:	1891      	adds	r1, r2, r2
 800623e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006240:	415b      	adcs	r3, r3
 8006242:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006248:	4641      	mov	r1, r8
 800624a:	1851      	adds	r1, r2, r1
 800624c:	6339      	str	r1, [r7, #48]	@ 0x30
 800624e:	4649      	mov	r1, r9
 8006250:	414b      	adcs	r3, r1
 8006252:	637b      	str	r3, [r7, #52]	@ 0x34
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006260:	4659      	mov	r1, fp
 8006262:	00cb      	lsls	r3, r1, #3
 8006264:	4651      	mov	r1, sl
 8006266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800626a:	4651      	mov	r1, sl
 800626c:	00ca      	lsls	r2, r1, #3
 800626e:	4610      	mov	r0, r2
 8006270:	4619      	mov	r1, r3
 8006272:	4603      	mov	r3, r0
 8006274:	4642      	mov	r2, r8
 8006276:	189b      	adds	r3, r3, r2
 8006278:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800627c:	464b      	mov	r3, r9
 800627e:	460a      	mov	r2, r1
 8006280:	eb42 0303 	adc.w	r3, r2, r3
 8006284:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006294:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006298:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800629c:	460b      	mov	r3, r1
 800629e:	18db      	adds	r3, r3, r3
 80062a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062a2:	4613      	mov	r3, r2
 80062a4:	eb42 0303 	adc.w	r3, r2, r3
 80062a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062b2:	f7fa fca9 	bl	8000c08 <__aeabi_uldivmod>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4b0d      	ldr	r3, [pc, #52]	@ (80062f0 <UART_SetConfig+0x2d4>)
 80062bc:	fba3 1302 	umull	r1, r3, r3, r2
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	2164      	movs	r1, #100	@ 0x64
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	3332      	adds	r3, #50	@ 0x32
 80062ce:	4a08      	ldr	r2, [pc, #32]	@ (80062f0 <UART_SetConfig+0x2d4>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	f003 0207 	and.w	r2, r3, #7
 80062da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4422      	add	r2, r4
 80062e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062e4:	e106      	b.n	80064f4 <UART_SetConfig+0x4d8>
 80062e6:	bf00      	nop
 80062e8:	40011000 	.word	0x40011000
 80062ec:	40011400 	.word	0x40011400
 80062f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062f8:	2200      	movs	r2, #0
 80062fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006302:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006306:	4642      	mov	r2, r8
 8006308:	464b      	mov	r3, r9
 800630a:	1891      	adds	r1, r2, r2
 800630c:	6239      	str	r1, [r7, #32]
 800630e:	415b      	adcs	r3, r3
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
 8006312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006316:	4641      	mov	r1, r8
 8006318:	1854      	adds	r4, r2, r1
 800631a:	4649      	mov	r1, r9
 800631c:	eb43 0501 	adc.w	r5, r3, r1
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	00eb      	lsls	r3, r5, #3
 800632a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800632e:	00e2      	lsls	r2, r4, #3
 8006330:	4614      	mov	r4, r2
 8006332:	461d      	mov	r5, r3
 8006334:	4643      	mov	r3, r8
 8006336:	18e3      	adds	r3, r4, r3
 8006338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800633c:	464b      	mov	r3, r9
 800633e:	eb45 0303 	adc.w	r3, r5, r3
 8006342:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006352:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006362:	4629      	mov	r1, r5
 8006364:	008b      	lsls	r3, r1, #2
 8006366:	4621      	mov	r1, r4
 8006368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800636c:	4621      	mov	r1, r4
 800636e:	008a      	lsls	r2, r1, #2
 8006370:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006374:	f7fa fc48 	bl	8000c08 <__aeabi_uldivmod>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4b60      	ldr	r3, [pc, #384]	@ (8006500 <UART_SetConfig+0x4e4>)
 800637e:	fba3 2302 	umull	r2, r3, r3, r2
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	011c      	lsls	r4, r3, #4
 8006386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800638a:	2200      	movs	r2, #0
 800638c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006390:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006394:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006398:	4642      	mov	r2, r8
 800639a:	464b      	mov	r3, r9
 800639c:	1891      	adds	r1, r2, r2
 800639e:	61b9      	str	r1, [r7, #24]
 80063a0:	415b      	adcs	r3, r3
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063a8:	4641      	mov	r1, r8
 80063aa:	1851      	adds	r1, r2, r1
 80063ac:	6139      	str	r1, [r7, #16]
 80063ae:	4649      	mov	r1, r9
 80063b0:	414b      	adcs	r3, r1
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063c0:	4659      	mov	r1, fp
 80063c2:	00cb      	lsls	r3, r1, #3
 80063c4:	4651      	mov	r1, sl
 80063c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ca:	4651      	mov	r1, sl
 80063cc:	00ca      	lsls	r2, r1, #3
 80063ce:	4610      	mov	r0, r2
 80063d0:	4619      	mov	r1, r3
 80063d2:	4603      	mov	r3, r0
 80063d4:	4642      	mov	r2, r8
 80063d6:	189b      	adds	r3, r3, r2
 80063d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063dc:	464b      	mov	r3, r9
 80063de:	460a      	mov	r2, r1
 80063e0:	eb42 0303 	adc.w	r3, r2, r3
 80063e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	f04f 0300 	mov.w	r3, #0
 80063fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006400:	4649      	mov	r1, r9
 8006402:	008b      	lsls	r3, r1, #2
 8006404:	4641      	mov	r1, r8
 8006406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800640a:	4641      	mov	r1, r8
 800640c:	008a      	lsls	r2, r1, #2
 800640e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006412:	f7fa fbf9 	bl	8000c08 <__aeabi_uldivmod>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4611      	mov	r1, r2
 800641c:	4b38      	ldr	r3, [pc, #224]	@ (8006500 <UART_SetConfig+0x4e4>)
 800641e:	fba3 2301 	umull	r2, r3, r3, r1
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	2264      	movs	r2, #100	@ 0x64
 8006426:	fb02 f303 	mul.w	r3, r2, r3
 800642a:	1acb      	subs	r3, r1, r3
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	3332      	adds	r3, #50	@ 0x32
 8006430:	4a33      	ldr	r2, [pc, #204]	@ (8006500 <UART_SetConfig+0x4e4>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	095b      	lsrs	r3, r3, #5
 8006438:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800643c:	441c      	add	r4, r3
 800643e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006442:	2200      	movs	r2, #0
 8006444:	673b      	str	r3, [r7, #112]	@ 0x70
 8006446:	677a      	str	r2, [r7, #116]	@ 0x74
 8006448:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800644c:	4642      	mov	r2, r8
 800644e:	464b      	mov	r3, r9
 8006450:	1891      	adds	r1, r2, r2
 8006452:	60b9      	str	r1, [r7, #8]
 8006454:	415b      	adcs	r3, r3
 8006456:	60fb      	str	r3, [r7, #12]
 8006458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800645c:	4641      	mov	r1, r8
 800645e:	1851      	adds	r1, r2, r1
 8006460:	6039      	str	r1, [r7, #0]
 8006462:	4649      	mov	r1, r9
 8006464:	414b      	adcs	r3, r1
 8006466:	607b      	str	r3, [r7, #4]
 8006468:	f04f 0200 	mov.w	r2, #0
 800646c:	f04f 0300 	mov.w	r3, #0
 8006470:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006474:	4659      	mov	r1, fp
 8006476:	00cb      	lsls	r3, r1, #3
 8006478:	4651      	mov	r1, sl
 800647a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800647e:	4651      	mov	r1, sl
 8006480:	00ca      	lsls	r2, r1, #3
 8006482:	4610      	mov	r0, r2
 8006484:	4619      	mov	r1, r3
 8006486:	4603      	mov	r3, r0
 8006488:	4642      	mov	r2, r8
 800648a:	189b      	adds	r3, r3, r2
 800648c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800648e:	464b      	mov	r3, r9
 8006490:	460a      	mov	r2, r1
 8006492:	eb42 0303 	adc.w	r3, r2, r3
 8006496:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80064a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064b0:	4649      	mov	r1, r9
 80064b2:	008b      	lsls	r3, r1, #2
 80064b4:	4641      	mov	r1, r8
 80064b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ba:	4641      	mov	r1, r8
 80064bc:	008a      	lsls	r2, r1, #2
 80064be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064c2:	f7fa fba1 	bl	8000c08 <__aeabi_uldivmod>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <UART_SetConfig+0x4e4>)
 80064cc:	fba3 1302 	umull	r1, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	2164      	movs	r1, #100	@ 0x64
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	3332      	adds	r3, #50	@ 0x32
 80064de:	4a08      	ldr	r2, [pc, #32]	@ (8006500 <UART_SetConfig+0x4e4>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	f003 020f 	and.w	r2, r3, #15
 80064ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4422      	add	r2, r4
 80064f2:	609a      	str	r2, [r3, #8]
}
 80064f4:	bf00      	nop
 80064f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80064fa:	46bd      	mov	sp, r7
 80064fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006500:	51eb851f 	.word	0x51eb851f

08006504 <RTC_interface>:

extern char date[10];
extern char time[20];

void RTC_interface ()
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af02      	add	r7, sp, #8



		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800650a:	2200      	movs	r2, #0
 800650c:	490c      	ldr	r1, [pc, #48]	@ (8006540 <RTC_interface+0x3c>)
 800650e:	480d      	ldr	r0, [pc, #52]	@ (8006544 <RTC_interface+0x40>)
 8006510:	f7fe fd1d 	bl	8004f4e <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8006514:	2200      	movs	r2, #0
 8006516:	490c      	ldr	r1, [pc, #48]	@ (8006548 <RTC_interface+0x44>)
 8006518:	480a      	ldr	r0, [pc, #40]	@ (8006544 <RTC_interface+0x40>)
 800651a:	f7fe fc36 	bl	8004d8a <HAL_RTC_GetTime>


		//sprintf(date,"Date: %d:%d:%d",sDate.Date,sDate.Month,sDate.Year);
		sprintf(time, "%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sDate.Date);
 800651e:	4b0a      	ldr	r3, [pc, #40]	@ (8006548 <RTC_interface+0x44>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	4b08      	ldr	r3, [pc, #32]	@ (8006548 <RTC_interface+0x44>)
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	4619      	mov	r1, r3
 800652a:	4b05      	ldr	r3, [pc, #20]	@ (8006540 <RTC_interface+0x3c>)
 800652c:	789b      	ldrb	r3, [r3, #2]
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	460b      	mov	r3, r1
 8006532:	4906      	ldr	r1, [pc, #24]	@ (800654c <RTC_interface+0x48>)
 8006534:	4806      	ldr	r0, [pc, #24]	@ (8006550 <RTC_interface+0x4c>)
 8006536:	f001 ffe9 	bl	800850c <siprintf>

		//HAL_Delay(500);



}
 800653a:	bf00      	nop
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20005994 	.word	0x20005994
 8006544:	20005960 	.word	0x20005960
 8006548:	20005980 	.word	0x20005980
 800654c:	0800a818 	.word	0x0800a818
 8006550:	200038b8 	.word	0x200038b8

08006554 <MX_RTC_Init>:
   * @brief RTC Initialization Function
   * @param None
   * @retval None
   */
  void MX_RTC_Init(void)
 {
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN RTC_Init 0 */

   /* USER CODE END RTC_Init 0 */

   RTC_TimeTypeDef sTime = {0};
 800655a:	1d3b      	adds	r3, r7, #4
 800655c:	2200      	movs	r2, #0
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	609a      	str	r2, [r3, #8]
 8006564:	60da      	str	r2, [r3, #12]
 8006566:	611a      	str	r2, [r3, #16]
   RTC_DateTypeDef sDate = {0};
 8006568:	2300      	movs	r3, #0
 800656a:	603b      	str	r3, [r7, #0]

   /* USER CODE END RTC_Init 1 */

   /** Initialize RTC Only
   */
   hrtc.Instance = RTC;
 800656c:	4b24      	ldr	r3, [pc, #144]	@ (8006600 <MX_RTC_Init+0xac>)
 800656e:	4a25      	ldr	r2, [pc, #148]	@ (8006604 <MX_RTC_Init+0xb0>)
 8006570:	601a      	str	r2, [r3, #0]
   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006572:	4b23      	ldr	r3, [pc, #140]	@ (8006600 <MX_RTC_Init+0xac>)
 8006574:	2200      	movs	r2, #0
 8006576:	605a      	str	r2, [r3, #4]
   hrtc.Init.AsynchPrediv = 127;
 8006578:	4b21      	ldr	r3, [pc, #132]	@ (8006600 <MX_RTC_Init+0xac>)
 800657a:	227f      	movs	r2, #127	@ 0x7f
 800657c:	609a      	str	r2, [r3, #8]
   hrtc.Init.SynchPrediv = 255;
 800657e:	4b20      	ldr	r3, [pc, #128]	@ (8006600 <MX_RTC_Init+0xac>)
 8006580:	22ff      	movs	r2, #255	@ 0xff
 8006582:	60da      	str	r2, [r3, #12]
   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006584:	4b1e      	ldr	r3, [pc, #120]	@ (8006600 <MX_RTC_Init+0xac>)
 8006586:	2200      	movs	r2, #0
 8006588:	611a      	str	r2, [r3, #16]
   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800658a:	4b1d      	ldr	r3, [pc, #116]	@ (8006600 <MX_RTC_Init+0xac>)
 800658c:	2200      	movs	r2, #0
 800658e:	615a      	str	r2, [r3, #20]
   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006590:	4b1b      	ldr	r3, [pc, #108]	@ (8006600 <MX_RTC_Init+0xac>)
 8006592:	2200      	movs	r2, #0
 8006594:	619a      	str	r2, [r3, #24]
   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006596:	481a      	ldr	r0, [pc, #104]	@ (8006600 <MX_RTC_Init+0xac>)
 8006598:	f7fe fada 	bl	8004b50 <HAL_RTC_Init>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <MX_RTC_Init+0x52>
   {
     Error_Handler();
 80065a2:	f7fb fde1 	bl	8002168 <Error_Handler>

   /* USER CODE END Check_RTC_BKUP */

   /** Initialize RTC and set the Time and Date
   */
   sTime.Hours = 0x00;
 80065a6:	2300      	movs	r3, #0
 80065a8:	713b      	strb	r3, [r7, #4]
   sTime.Minutes = 0x00;
 80065aa:	2300      	movs	r3, #0
 80065ac:	717b      	strb	r3, [r7, #5]
   sTime.Seconds = 0x00;
 80065ae:	2300      	movs	r3, #0
 80065b0:	71bb      	strb	r3, [r7, #6]
   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80065b2:	2300      	movs	r3, #0
 80065b4:	613b      	str	r3, [r7, #16]
   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80065b6:	2300      	movs	r3, #0
 80065b8:	617b      	str	r3, [r7, #20]
   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80065ba:	1d3b      	adds	r3, r7, #4
 80065bc:	2201      	movs	r2, #1
 80065be:	4619      	mov	r1, r3
 80065c0:	480f      	ldr	r0, [pc, #60]	@ (8006600 <MX_RTC_Init+0xac>)
 80065c2:	f7fe fb48 	bl	8004c56 <HAL_RTC_SetTime>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d001      	beq.n	80065d0 <MX_RTC_Init+0x7c>
   {
     Error_Handler();
 80065cc:	f7fb fdcc 	bl	8002168 <Error_Handler>
   }
   sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80065d0:	2306      	movs	r3, #6
 80065d2:	703b      	strb	r3, [r7, #0]
   sDate.Month = 0x00;
 80065d4:	2300      	movs	r3, #0
 80065d6:	707b      	strb	r3, [r7, #1]
   sDate.Date = 0x00;
 80065d8:	2300      	movs	r3, #0
 80065da:	70bb      	strb	r3, [r7, #2]
   sDate.Year = 0x0;
 80065dc:	2300      	movs	r3, #0
 80065de:	70fb      	strb	r3, [r7, #3]

   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80065e0:	463b      	mov	r3, r7
 80065e2:	2201      	movs	r2, #1
 80065e4:	4619      	mov	r1, r3
 80065e6:	4806      	ldr	r0, [pc, #24]	@ (8006600 <MX_RTC_Init+0xac>)
 80065e8:	f7fe fc2d 	bl	8004e46 <HAL_RTC_SetDate>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <MX_RTC_Init+0xa2>
   {
     Error_Handler();
 80065f2:	f7fb fdb9 	bl	8002168 <Error_Handler>
   }
   /* USER CODE BEGIN RTC_Init 2 */

   /* USER CODE END RTC_Init 2 */

 }
 80065f6:	bf00      	nop
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	20005960 	.word	0x20005960
 8006604:	40002800 	.word	0x40002800

08006608 <Drive_CS_low>:




void Drive_CS_low()
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800660c:	2200      	movs	r2, #0
 800660e:	2110      	movs	r1, #16
 8006610:	4802      	ldr	r0, [pc, #8]	@ (800661c <Drive_CS_low+0x14>)
 8006612:	f7fc fbb1 	bl	8002d78 <HAL_GPIO_WritePin>
}
 8006616:	bf00      	nop
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40020000 	.word	0x40020000

08006620 <Drive_CS_high>:


void Drive_CS_high()
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8006624:	2201      	movs	r2, #1
 8006626:	2110      	movs	r1, #16
 8006628:	4802      	ldr	r0, [pc, #8]	@ (8006634 <Drive_CS_high+0x14>)
 800662a:	f7fc fba5 	bl	8002d78 <HAL_GPIO_WritePin>
}
 800662e:	bf00      	nop
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40020000 	.word	0x40020000

08006638 <Drive_DC_low>:


void Drive_DC_low()
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 800663c:	2200      	movs	r2, #0
 800663e:	2110      	movs	r1, #16
 8006640:	4802      	ldr	r0, [pc, #8]	@ (800664c <Drive_DC_low+0x14>)
 8006642:	f7fc fb99 	bl	8002d78 <HAL_GPIO_WritePin>
}
 8006646:	bf00      	nop
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40020800 	.word	0x40020800

08006650 <Drive_DC_high>:


void Drive_DC_high()
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8006654:	2201      	movs	r2, #1
 8006656:	2110      	movs	r1, #16
 8006658:	4802      	ldr	r0, [pc, #8]	@ (8006664 <Drive_DC_high+0x14>)
 800665a:	f7fc fb8d 	bl	8002d78 <HAL_GPIO_WritePin>
}
 800665e:	bf00      	nop
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	40020800 	.word	0x40020800

08006668 <Drive_RESET_low>:


void Drive_RESET_low()
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 800666c:	2200      	movs	r2, #0
 800666e:	2120      	movs	r1, #32
 8006670:	4802      	ldr	r0, [pc, #8]	@ (800667c <Drive_RESET_low+0x14>)
 8006672:	f7fc fb81 	bl	8002d78 <HAL_GPIO_WritePin>
}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	40020800 	.word	0x40020800

08006680 <Drive_RESET_high>:


void Drive_RESET_high()
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8006684:	2201      	movs	r2, #1
 8006686:	2120      	movs	r1, #32
 8006688:	4802      	ldr	r0, [pc, #8]	@ (8006694 <Drive_RESET_high+0x14>)
 800668a:	f7fc fb75 	bl	8002d78 <HAL_GPIO_WritePin>
}
 800668e:	bf00      	nop
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	40020800 	.word	0x40020800

08006698 <SPI_send_byte>:


void SPI_send_byte(uint8_t byte_to_transmit)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_transmit, 1, 10);
 80066a2:	1df9      	adds	r1, r7, #7
 80066a4:	230a      	movs	r3, #10
 80066a6:	2201      	movs	r2, #1
 80066a8:	4803      	ldr	r0, [pc, #12]	@ (80066b8 <SPI_send_byte+0x20>)
 80066aa:	f7fe fde6 	bl	800527a <HAL_SPI_Transmit>
}
 80066ae:	bf00      	nop
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20005900 	.word	0x20005900

080066bc <SPI_send_array>:


void SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi1, array_to_transmit, array_size, 100);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	2364      	movs	r3, #100	@ 0x64
 80066cc:	6879      	ldr	r1, [r7, #4]
 80066ce:	4803      	ldr	r0, [pc, #12]	@ (80066dc <SPI_send_array+0x20>)
 80066d0:	f7fe fdd3 	bl	800527a <HAL_SPI_Transmit>
}
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20005900 	.word	0x20005900

080066e0 <msDelay>:


void msDelay(uint32_t milliseconds)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7fc f809 	bl	8002700 <HAL_Delay>
}
 80066ee:	bf00      	nop
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <Display_command>:


void Display_command(uint8_t command)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	4603      	mov	r3, r0
 80066fe:	71fb      	strb	r3, [r7, #7]
	Drive_CS_low();
 8006700:	f7ff ff82 	bl	8006608 <Drive_CS_low>
	Drive_DC_low();
 8006704:	f7ff ff98 	bl	8006638 <Drive_DC_low>
	SPI_send_byte(command);
 8006708:	79fb      	ldrb	r3, [r7, #7]
 800670a:	4618      	mov	r0, r3
 800670c:	f7ff ffc4 	bl	8006698 <SPI_send_byte>
	Drive_CS_high();
 8006710:	f7ff ff86 	bl	8006620 <Drive_CS_high>
}
 8006714:	bf00      	nop
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <Display_data>:

void Display_data(uint8_t data)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	71fb      	strb	r3, [r7, #7]
	Drive_CS_low();
 8006726:	f7ff ff6f 	bl	8006608 <Drive_CS_low>
	Drive_DC_high();
 800672a:	f7ff ff91 	bl	8006650 <Drive_DC_high>
	SPI_send_byte(data);
 800672e:	79fb      	ldrb	r3, [r7, #7]
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff ffb1 	bl	8006698 <SPI_send_byte>
	Drive_CS_high();
 8006736:	f7ff ff73 	bl	8006620 <Drive_CS_high>
}
 800673a:	bf00      	nop
 800673c:	3708      	adds	r7, #8
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}

08006742 <Display_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void Display_init()
{
 8006742:	b580      	push	{r7, lr}
 8006744:	af00      	add	r7, sp, #0
	Drive_RESET_low();
 8006746:	f7ff ff8f 	bl	8006668 <Drive_RESET_low>
	msDelay(1);
 800674a:	2001      	movs	r0, #1
 800674c:	f7ff ffc8 	bl	80066e0 <msDelay>
	Drive_RESET_high();
 8006750:	f7ff ff96 	bl	8006680 <Drive_RESET_high>
	msDelay(50);
 8006754:	2032      	movs	r0, #50	@ 0x32
 8006756:	f7ff ffc3 	bl	80066e0 <msDelay>
	Display_command(0xFD);
 800675a:	20fd      	movs	r0, #253	@ 0xfd
 800675c:	f7ff ffcb 	bl	80066f6 <Display_command>
	Display_data(0x12);
 8006760:	2012      	movs	r0, #18
 8006762:	f7ff ffdb 	bl	800671c <Display_data>
	Display_command(0xAE);
 8006766:	20ae      	movs	r0, #174	@ 0xae
 8006768:	f7ff ffc5 	bl	80066f6 <Display_command>
	Display_command(0xB3);
 800676c:	20b3      	movs	r0, #179	@ 0xb3
 800676e:	f7ff ffc2 	bl	80066f6 <Display_command>
	Display_data(0x91);
 8006772:	2091      	movs	r0, #145	@ 0x91
 8006774:	f7ff ffd2 	bl	800671c <Display_data>
	Display_command(0xCA);
 8006778:	20ca      	movs	r0, #202	@ 0xca
 800677a:	f7ff ffbc 	bl	80066f6 <Display_command>
	Display_data(0x3F);
 800677e:	203f      	movs	r0, #63	@ 0x3f
 8006780:	f7ff ffcc 	bl	800671c <Display_data>
	Display_command(0xA2);
 8006784:	20a2      	movs	r0, #162	@ 0xa2
 8006786:	f7ff ffb6 	bl	80066f6 <Display_command>
	Display_data(0x00);
 800678a:	2000      	movs	r0, #0
 800678c:	f7ff ffc6 	bl	800671c <Display_data>
	Display_command(0xA1);
 8006790:	20a1      	movs	r0, #161	@ 0xa1
 8006792:	f7ff ffb0 	bl	80066f6 <Display_command>
	Display_data(0x00);
 8006796:	2000      	movs	r0, #0
 8006798:	f7ff ffc0 	bl	800671c <Display_data>
	Display_command(0xA0);
 800679c:	20a0      	movs	r0, #160	@ 0xa0
 800679e:	f7ff ffaa 	bl	80066f6 <Display_command>
	Display_data(0x14);
 80067a2:	2014      	movs	r0, #20
 80067a4:	f7ff ffba 	bl	800671c <Display_data>
	Display_data(0x11);
 80067a8:	2011      	movs	r0, #17
 80067aa:	f7ff ffb7 	bl	800671c <Display_data>
	Display_command(0xB5);
 80067ae:	20b5      	movs	r0, #181	@ 0xb5
 80067b0:	f7ff ffa1 	bl	80066f6 <Display_command>
	Display_data(0x00);
 80067b4:	2000      	movs	r0, #0
 80067b6:	f7ff ffb1 	bl	800671c <Display_data>
	Display_command(0xAB);
 80067ba:	20ab      	movs	r0, #171	@ 0xab
 80067bc:	f7ff ff9b 	bl	80066f6 <Display_command>
	Display_data(0x01);
 80067c0:	2001      	movs	r0, #1
 80067c2:	f7ff ffab 	bl	800671c <Display_data>
	Display_command(0xB4);
 80067c6:	20b4      	movs	r0, #180	@ 0xb4
 80067c8:	f7ff ff95 	bl	80066f6 <Display_command>
	Display_data(0xA0);
 80067cc:	20a0      	movs	r0, #160	@ 0xa0
 80067ce:	f7ff ffa5 	bl	800671c <Display_data>
	Display_data(0xFD);
 80067d2:	20fd      	movs	r0, #253	@ 0xfd
 80067d4:	f7ff ffa2 	bl	800671c <Display_data>
	Display_command(0xC1);
 80067d8:	20c1      	movs	r0, #193	@ 0xc1
 80067da:	f7ff ff8c 	bl	80066f6 <Display_command>
	Display_data(0xFF);
 80067de:	20ff      	movs	r0, #255	@ 0xff
 80067e0:	f7ff ff9c 	bl	800671c <Display_data>
	Display_command(0xC7);
 80067e4:	20c7      	movs	r0, #199	@ 0xc7
 80067e6:	f7ff ff86 	bl	80066f6 <Display_command>
	Display_data(0x0F);
 80067ea:	200f      	movs	r0, #15
 80067ec:	f7ff ff96 	bl	800671c <Display_data>
	Display_command(0xB9);
 80067f0:	20b9      	movs	r0, #185	@ 0xb9
 80067f2:	f7ff ff80 	bl	80066f6 <Display_command>
	Display_command(0xB1);
 80067f6:	20b1      	movs	r0, #177	@ 0xb1
 80067f8:	f7ff ff7d 	bl	80066f6 <Display_command>
	Display_data(0xE2);
 80067fc:	20e2      	movs	r0, #226	@ 0xe2
 80067fe:	f7ff ff8d 	bl	800671c <Display_data>
	Display_command(0xD1);
 8006802:	20d1      	movs	r0, #209	@ 0xd1
 8006804:	f7ff ff77 	bl	80066f6 <Display_command>
	Display_data(0x82);
 8006808:	2082      	movs	r0, #130	@ 0x82
 800680a:	f7ff ff87 	bl	800671c <Display_data>
	Display_data(0x20);
 800680e:	2020      	movs	r0, #32
 8006810:	f7ff ff84 	bl	800671c <Display_data>
	Display_command(0xBB);
 8006814:	20bb      	movs	r0, #187	@ 0xbb
 8006816:	f7ff ff6e 	bl	80066f6 <Display_command>
	Display_data(0x1F);
 800681a:	201f      	movs	r0, #31
 800681c:	f7ff ff7e 	bl	800671c <Display_data>
	Display_command(0xB6);
 8006820:	20b6      	movs	r0, #182	@ 0xb6
 8006822:	f7ff ff68 	bl	80066f6 <Display_command>
	Display_data(0x08);
 8006826:	2008      	movs	r0, #8
 8006828:	f7ff ff78 	bl	800671c <Display_data>
	Display_command(0xBE);
 800682c:	20be      	movs	r0, #190	@ 0xbe
 800682e:	f7ff ff62 	bl	80066f6 <Display_command>
	Display_data(0x07);
 8006832:	2007      	movs	r0, #7
 8006834:	f7ff ff72 	bl	800671c <Display_data>
	Display_command(0xA6);
 8006838:	20a6      	movs	r0, #166	@ 0xa6
 800683a:	f7ff ff5c 	bl	80066f6 <Display_command>
	Display_command(0xA9);
 800683e:	20a9      	movs	r0, #169	@ 0xa9
 8006840:	f7ff ff59 	bl	80066f6 <Display_command>
	msDelay(10);
 8006844:	200a      	movs	r0, #10
 8006846:	f7ff ff4b 	bl	80066e0 <msDelay>
	Display_command(0xAF);
 800684a:	20af      	movs	r0, #175	@ 0xaf
 800684c:	f7ff ff53 	bl	80066f6 <Display_command>
	msDelay(50);
 8006850:	2032      	movs	r0, #50	@ 0x32
 8006852:	f7ff ff45 	bl	80066e0 <msDelay>
}
 8006856:	bf00      	nop
 8006858:	bd80      	pop	{r7, pc}

0800685a <Display_set_window>:
	Display_command(SET_DEFAULT_GRAYSCALE_TAB);
}


void Display_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
{
 800685a:	b590      	push	{r4, r7, lr}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	4604      	mov	r4, r0
 8006862:	4608      	mov	r0, r1
 8006864:	4611      	mov	r1, r2
 8006866:	461a      	mov	r2, r3
 8006868:	4623      	mov	r3, r4
 800686a:	71fb      	strb	r3, [r7, #7]
 800686c:	4603      	mov	r3, r0
 800686e:	71bb      	strb	r3, [r7, #6]
 8006870:	460b      	mov	r3, r1
 8006872:	717b      	strb	r3, [r7, #5]
 8006874:	4613      	mov	r3, r2
 8006876:	713b      	strb	r3, [r7, #4]
	Display_command(SET_COLUMN_ADDR);  //set columns range
 8006878:	2015      	movs	r0, #21
 800687a:	f7ff ff3c 	bl	80066f6 <Display_command>
	Display_data(28+start_column);
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	331c      	adds	r3, #28
 8006882:	b2db      	uxtb	r3, r3
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff ff49 	bl	800671c <Display_data>
	Display_data(28+end_column);
 800688a:	79bb      	ldrb	r3, [r7, #6]
 800688c:	331c      	adds	r3, #28
 800688e:	b2db      	uxtb	r3, r3
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff ff43 	bl	800671c <Display_data>
	Display_command(SET_ROW_ADDR);  //set rows range
 8006896:	2075      	movs	r0, #117	@ 0x75
 8006898:	f7ff ff2d 	bl	80066f6 <Display_command>
	Display_data(start_row);
 800689c:	797b      	ldrb	r3, [r7, #5]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff ff3c 	bl	800671c <Display_data>
	Display_data(end_row);
 80068a4:	793b      	ldrb	r3, [r7, #4]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff ff38 	bl	800671c <Display_data>
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd90      	pop	{r4, r7, pc}

080068b4 <Send_buffer>:


void Send_buffer(uint8_t* buffer, uint32_t buffer_size)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
	Display_command(ENABLE_RAM_WRITE);  //enable write of pixels
 80068be:	205c      	movs	r0, #92	@ 0x5c
 80068c0:	f7ff ff19 	bl	80066f6 <Display_command>
	Drive_CS_low();
 80068c4:	f7ff fea0 	bl	8006608 <Drive_CS_low>
	Drive_DC_high();
 80068c8:	f7ff fec2 	bl	8006650 <Drive_DC_high>
	SPI_send_array(buffer, buffer_size);
 80068cc:	6839      	ldr	r1, [r7, #0]
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f7ff fef4 	bl	80066bc <SPI_send_array>
	Drive_CS_high();
 80068d4:	f7ff fea4 	bl	8006620 <Drive_CS_high>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <set_buffer_size>:

uint16_t _buffer_height = 64;       //buffer dimensions used to determine if pixel is within array bounds
uint16_t _buffer_width = 256;      //by default buffer size is equal to OLED size

void set_buffer_size(uint16_t _buffer_width, uint16_t buffer_height)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	460a      	mov	r2, r1
 80068ea:	80fb      	strh	r3, [r7, #6]
 80068ec:	4613      	mov	r3, r2
 80068ee:	80bb      	strh	r3, [r7, #4]
	_buffer_height = buffer_height;
 80068f0:	4a04      	ldr	r2, [pc, #16]	@ (8006904 <set_buffer_size+0x24>)
 80068f2:	88bb      	ldrh	r3, [r7, #4]
 80068f4:	8013      	strh	r3, [r2, #0]
	_buffer_width = _buffer_width;
}
 80068f6:	bf00      	nop
 80068f8:	370c      	adds	r7, #12
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	20003682 	.word	0x20003682

08006908 <fill_buffer>:

void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	b25a      	sxtb	r2, r3
 800691a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800691e:	4313      	orrs	r3, r2
 8006920:	b25b      	sxtb	r3, r3
 8006922:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 8006924:	4b0e      	ldr	r3, [pc, #56]	@ (8006960 <fill_buffer+0x58>)
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	4b0e      	ldr	r3, [pc, #56]	@ (8006964 <fill_buffer+0x5c>)
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	fb02 f303 	mul.w	r3, r2, r3
 8006932:	0fda      	lsrs	r2, r3, #31
 8006934:	4413      	add	r3, r2
 8006936:	105b      	asrs	r3, r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 800693a:	e004      	b.n	8006946 <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	607a      	str	r2, [r7, #4]
 8006942:	7afa      	ldrb	r2, [r7, #11]
 8006944:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	1e5a      	subs	r2, r3, #1
 800694a:	60fa      	str	r2, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f5      	bne.n	800693c <fill_buffer+0x34>
	}
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20003682 	.word	0x20003682
 8006964:	20003684 	.word	0x20003684

08006968 <draw_pixel>:

void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	4608      	mov	r0, r1
 8006972:	4611      	mov	r1, r2
 8006974:	461a      	mov	r2, r3
 8006976:	4603      	mov	r3, r0
 8006978:	817b      	strh	r3, [r7, #10]
 800697a:	460b      	mov	r3, r1
 800697c:	813b      	strh	r3, [r7, #8]
 800697e:	4613      	mov	r3, r2
 8006980:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 8006982:	4b35      	ldr	r3, [pc, #212]	@ (8006a58 <draw_pixel+0xf0>)
 8006984:	881b      	ldrh	r3, [r3, #0]
 8006986:	897a      	ldrh	r2, [r7, #10]
 8006988:	429a      	cmp	r2, r3
 800698a:	d25f      	bcs.n	8006a4c <draw_pixel+0xe4>
 800698c:	4b33      	ldr	r3, [pc, #204]	@ (8006a5c <draw_pixel+0xf4>)
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	893a      	ldrh	r2, [r7, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	d25a      	bcs.n	8006a4c <draw_pixel+0xe4>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 8006996:	893b      	ldrh	r3, [r7, #8]
 8006998:	4a2f      	ldr	r2, [pc, #188]	@ (8006a58 <draw_pixel+0xf0>)
 800699a:	8812      	ldrh	r2, [r2, #0]
 800699c:	fb03 f202 	mul.w	r2, r3, r2
 80069a0:	897b      	ldrh	r3, [r7, #10]
 80069a2:	4413      	add	r3, r2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	bfb8      	it	lt
 80069ac:	425b      	neglt	r3, r3
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d125      	bne.n	80069fe <draw_pixel+0x96>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 80069b2:	893b      	ldrh	r3, [r7, #8]
 80069b4:	4a28      	ldr	r2, [pc, #160]	@ (8006a58 <draw_pixel+0xf0>)
 80069b6:	8812      	ldrh	r2, [r2, #0]
 80069b8:	fb03 f202 	mul.w	r2, r3, r2
 80069bc:	897b      	ldrh	r3, [r7, #10]
 80069be:	4413      	add	r3, r2
 80069c0:	0fda      	lsrs	r2, r3, #31
 80069c2:	4413      	add	r3, r2
 80069c4:	105b      	asrs	r3, r3, #1
 80069c6:	461a      	mov	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4413      	add	r3, r2
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	b25b      	sxtb	r3, r3
 80069d0:	f023 030f 	bic.w	r3, r3, #15
 80069d4:	b25a      	sxtb	r2, r3
 80069d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069da:	4313      	orrs	r3, r2
 80069dc:	b259      	sxtb	r1, r3
 80069de:	893b      	ldrh	r3, [r7, #8]
 80069e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a58 <draw_pixel+0xf0>)
 80069e2:	8812      	ldrh	r2, [r2, #0]
 80069e4:	fb03 f202 	mul.w	r2, r3, r2
 80069e8:	897b      	ldrh	r3, [r7, #10]
 80069ea:	4413      	add	r3, r2
 80069ec:	0fda      	lsrs	r2, r3, #31
 80069ee:	4413      	add	r3, r2
 80069f0:	105b      	asrs	r3, r3, #1
 80069f2:	461a      	mov	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	b2ca      	uxtb	r2, r1
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	e027      	b.n	8006a4e <draw_pixel+0xe6>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 80069fe:	893b      	ldrh	r3, [r7, #8]
 8006a00:	4a15      	ldr	r2, [pc, #84]	@ (8006a58 <draw_pixel+0xf0>)
 8006a02:	8812      	ldrh	r2, [r2, #0]
 8006a04:	fb03 f202 	mul.w	r2, r3, r2
 8006a08:	897b      	ldrh	r3, [r7, #10]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	0fda      	lsrs	r2, r3, #31
 8006a0e:	4413      	add	r3, r2
 8006a10:	105b      	asrs	r3, r3, #1
 8006a12:	461a      	mov	r2, r3
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	4413      	add	r3, r2
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	b25b      	sxtb	r3, r3
 8006a1c:	f003 030f 	and.w	r3, r3, #15
 8006a20:	b25a      	sxtb	r2, r3
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	b25b      	sxtb	r3, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	b259      	sxtb	r1, r3
 8006a2c:	893b      	ldrh	r3, [r7, #8]
 8006a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a58 <draw_pixel+0xf0>)
 8006a30:	8812      	ldrh	r2, [r2, #0]
 8006a32:	fb03 f202 	mul.w	r2, r3, r2
 8006a36:	897b      	ldrh	r3, [r7, #10]
 8006a38:	4413      	add	r3, r2
 8006a3a:	0fda      	lsrs	r2, r3, #31
 8006a3c:	4413      	add	r3, r2
 8006a3e:	105b      	asrs	r3, r3, #1
 8006a40:	461a      	mov	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4413      	add	r3, r2
 8006a46:	b2ca      	uxtb	r2, r1
 8006a48:	701a      	strb	r2, [r3, #0]
 8006a4a:	e000      	b.n	8006a4e <draw_pixel+0xe6>
		return;
 8006a4c:	bf00      	nop
	}
}
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	20003684 	.word	0x20003684
 8006a5c:	20003682 	.word	0x20003682

08006a60 <draw_rect_filled>:

void draw_rect_filled(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	4608      	mov	r0, r1
 8006a6a:	4611      	mov	r1, r2
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	817b      	strh	r3, [r7, #10]
 8006a72:	460b      	mov	r3, r1
 8006a74:	813b      	strh	r3, [r7, #8]
 8006a76:	4613      	mov	r3, r2
 8006a78:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = x0; i <= x1; i++)
 8006a7a:	897b      	ldrh	r3, [r7, #10]
 8006a7c:	82fb      	strh	r3, [r7, #22]
 8006a7e:	e013      	b.n	8006aa8 <draw_rect_filled+0x48>
	{
		for (uint16_t j = y0; j <= y1; j++)
 8006a80:	893b      	ldrh	r3, [r7, #8]
 8006a82:	82bb      	strh	r3, [r7, #20]
 8006a84:	e009      	b.n	8006a9a <draw_rect_filled+0x3a>
		{
			draw_pixel(frame_buffer, i, j, brightness);
 8006a86:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006a8a:	8aba      	ldrh	r2, [r7, #20]
 8006a8c:	8af9      	ldrh	r1, [r7, #22]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff ff6a 	bl	8006968 <draw_pixel>
		for (uint16_t j = y0; j <= y1; j++)
 8006a94:	8abb      	ldrh	r3, [r7, #20]
 8006a96:	3301      	adds	r3, #1
 8006a98:	82bb      	strh	r3, [r7, #20]
 8006a9a:	8aba      	ldrh	r2, [r7, #20]
 8006a9c:	8c3b      	ldrh	r3, [r7, #32]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d9f1      	bls.n	8006a86 <draw_rect_filled+0x26>
	for (uint16_t i = x0; i <= x1; i++)
 8006aa2:	8afb      	ldrh	r3, [r7, #22]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	82fb      	strh	r3, [r7, #22]
 8006aa8:	8afa      	ldrh	r2, [r7, #22]
 8006aaa:	88fb      	ldrh	r3, [r7, #6]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d9e7      	bls.n	8006a80 <draw_rect_filled+0x20>
		}
	}
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	3718      	adds	r7, #24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <select_font>:

void select_font(const GFXfont *new_gfx_font)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 8006ac4:	4a04      	ldr	r2, [pc, #16]	@ (8006ad8 <select_font+0x1c>)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6013      	str	r3, [r2, #0]
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	20005998 	.word	0x20005998

08006adc <draw_char>:

void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	@ 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4603      	mov	r3, r0
 8006aec:	72fb      	strb	r3, [r7, #11]
 8006aee:	460b      	mov	r3, r1
 8006af0:	813b      	strh	r3, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 8006af6:	4b44      	ldr	r3, [pc, #272]	@ (8006c08 <draw_char+0x12c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d07f      	beq.n	8006bfe <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 8006afe:	4b42      	ldr	r3, [pc, #264]	@ (8006c08 <draw_char+0x12c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	891b      	ldrh	r3, [r3, #8]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	7afa      	ldrb	r2, [r7, #11]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 8006b0c:	4b3e      	ldr	r3, [pc, #248]	@ (8006c08 <draw_char+0x12c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	7afb      	ldrb	r3, [r7, #11]
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4413      	add	r3, r2
 8006b18:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 8006b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c08 <draw_char+0x12c>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t width = glyph->width;
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	789b      	ldrb	r3, [r3, #2]
 8006b2c:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	78db      	ldrb	r3, [r3, #3]
 8006b32:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	795b      	ldrb	r3, [r3, #5]
 8006b38:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	799b      	ldrb	r3, [r3, #6]
 8006b3e:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t bits = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t y_pos = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint8_t x_pos = 0;
 8006b52:	2300      	movs	r3, #0
 8006b54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 8006b58:	2300      	movs	r3, #0
 8006b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b5e:	e048      	b.n	8006bf2 <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 8006b60:	2300      	movs	r3, #0
 8006b62:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b66:	e03a      	b.n	8006bde <draw_char+0x102>
		{
			if (!(bit++ & 7))
 8006b68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	f887 2025 	strb.w	r2, [r7, #37]	@ 0x25
 8006b72:	f003 0307 	and.w	r3, r3, #7
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d108      	bne.n	8006b8c <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8006b7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b7c:	1c5a      	adds	r2, r3, #1
 8006b7e:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8006b80:	461a      	mov	r2, r3
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	4413      	add	r3, r2
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			}
			if (bits & 0x80)
 8006b8c:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	da1a      	bge.n	8006bca <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 8006b94:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	893b      	ldrh	r3, [r7, #8]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	b29a      	uxth	r2, r3
 8006ba0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	b299      	uxth	r1, r3
 8006baa:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8006bae:	b29a      	uxth	r2, r3
 8006bb0:	88fb      	ldrh	r3, [r7, #6]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	4413      	add	r3, r2
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f7ff fecf 	bl	8006968 <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 8006bca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 8006bd4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006bd8:	3301      	adds	r3, #1
 8006bda:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006bde:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8006be2:	7dfb      	ldrb	r3, [r7, #23]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d3bf      	bcc.n	8006b68 <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 8006be8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006bec:	3301      	adds	r3, #1
 8006bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bf2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006bf6:	7dbb      	ldrb	r3, [r7, #22]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d3b1      	bcc.n	8006b60 <draw_char+0x84>
 8006bfc:	e000      	b.n	8006c00 <draw_char+0x124>
		return;
 8006bfe:	bf00      	nop
		}
	}
}
 8006c00:	3728      	adds	r7, #40	@ 0x28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20005998 	.word	0x20005998

08006c0c <draw_text>:

void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af02      	add	r7, sp, #8
 8006c12:	60f8      	str	r0, [r7, #12]
 8006c14:	60b9      	str	r1, [r7, #8]
 8006c16:	4611      	mov	r1, r2
 8006c18:	461a      	mov	r2, r3
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	80fb      	strh	r3, [r7, #6]
 8006c1e:	4613      	mov	r3, r2
 8006c20:	80bb      	strh	r3, [r7, #4]
    while (*text)
 8006c22:	e01b      	b.n	8006c5c <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	7819      	ldrb	r1, [r3, #0]
 8006c28:	88b8      	ldrh	r0, [r7, #4]
 8006c2a:	88fa      	ldrh	r2, [r7, #6]
 8006c2c:	7e3b      	ldrb	r3, [r7, #24]
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	4603      	mov	r3, r0
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff ff52 	bl	8006adc <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 8006c38:	4b0d      	ldr	r3, [pc, #52]	@ (8006c70 <draw_text+0x64>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006c46:	3b20      	subs	r3, #32
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	791b      	ldrb	r3, [r3, #4]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	4413      	add	r3, r2
 8006c54:	80fb      	strh	r3, [r7, #6]
        text++;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	60bb      	str	r3, [r7, #8]
    while (*text)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1df      	bne.n	8006c24 <draw_text+0x18>
    }
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20005998 	.word	0x20005998

08006c74 <draw_bitmap_4bpp>:
		}
	}
}

void draw_bitmap_4bpp(uint8_t *frame_buffer, const uint8_t *bitmap, uint16_t x0, uint16_t y0, uint16_t x_size, uint16_t y_size)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	4611      	mov	r1, r2
 8006c80:	461a      	mov	r2, r3
 8006c82:	460b      	mov	r3, r1
 8006c84:	80fb      	strh	r3, [r7, #6]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80bb      	strh	r3, [r7, #4]
	uint16_t bitmap_pos = 0;       //byte index in bitmap array
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	83fb      	strh	r3, [r7, #30]
	uint16_t processed_pixels = 0;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	83bb      	strh	r3, [r7, #28]
	uint8_t pixel_parity = 0;      //if pixel is even = 0; odd = 1
 8006c92:	2300      	movs	r3, #0
 8006c94:	75fb      	strb	r3, [r7, #23]

	for (uint16_t i = y0; i < y0 + y_size; i++)
 8006c96:	88bb      	ldrh	r3, [r7, #4]
 8006c98:	837b      	strh	r3, [r7, #26]
 8006c9a:	e034      	b.n	8006d06 <draw_bitmap_4bpp+0x92>
	{
		for (uint16_t j = x0; j < x0 + x_size; j++)
 8006c9c:	88fb      	ldrh	r3, [r7, #6]
 8006c9e:	833b      	strh	r3, [r7, #24]
 8006ca0:	e028      	b.n	8006cf4 <draw_bitmap_4bpp+0x80>
		{
			pixel_parity = processed_pixels % 2;
 8006ca2:	8bbb      	ldrh	r3, [r7, #28]
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]

			if(pixel_parity == 0)
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10e      	bne.n	8006cd0 <draw_bitmap_4bpp+0x5c>
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos] >> 4);
 8006cb2:	8bfb      	ldrh	r3, [r7, #30]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	091b      	lsrs	r3, r3, #4
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	8b7a      	ldrh	r2, [r7, #26]
 8006cc0:	8b39      	ldrh	r1, [r7, #24]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7ff fe50 	bl	8006968 <draw_pixel>
				processed_pixels++;
 8006cc8:	8bbb      	ldrh	r3, [r7, #28]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	83bb      	strh	r3, [r7, #28]
 8006cce:	e00e      	b.n	8006cee <draw_bitmap_4bpp+0x7a>
			}
			else
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos]);
 8006cd0:	8bfb      	ldrh	r3, [r7, #30]
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	8b7a      	ldrh	r2, [r7, #26]
 8006cda:	8b39      	ldrh	r1, [r7, #24]
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f7ff fe43 	bl	8006968 <draw_pixel>
				processed_pixels++;
 8006ce2:	8bbb      	ldrh	r3, [r7, #28]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	83bb      	strh	r3, [r7, #28]
				bitmap_pos++;
 8006ce8:	8bfb      	ldrh	r3, [r7, #30]
 8006cea:	3301      	adds	r3, #1
 8006cec:	83fb      	strh	r3, [r7, #30]
		for (uint16_t j = x0; j < x0 + x_size; j++)
 8006cee:	8b3b      	ldrh	r3, [r7, #24]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	833b      	strh	r3, [r7, #24]
 8006cf4:	8b3a      	ldrh	r2, [r7, #24]
 8006cf6:	88f9      	ldrh	r1, [r7, #6]
 8006cf8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006cfa:	440b      	add	r3, r1
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	dbd0      	blt.n	8006ca2 <draw_bitmap_4bpp+0x2e>
	for (uint16_t i = y0; i < y0 + y_size; i++)
 8006d00:	8b7b      	ldrh	r3, [r7, #26]
 8006d02:	3301      	adds	r3, #1
 8006d04:	837b      	strh	r3, [r7, #26]
 8006d06:	8b7a      	ldrh	r2, [r7, #26]
 8006d08:	88b9      	ldrh	r1, [r7, #4]
 8006d0a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006d0c:	440b      	add	r3, r1
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	dbc4      	blt.n	8006c9c <draw_bitmap_4bpp+0x28>
			}
		}
	}
}
 8006d12:	bf00      	nop
 8006d14:	bf00      	nop
 8006d16:	3720      	adds	r7, #32
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <send_buffer_to_OLED>:

void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	807b      	strh	r3, [r7, #2]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	803b      	strh	r3, [r7, #0]
	Display_set_window(0, 63, 0, 127);
 8006d2c:	237f      	movs	r3, #127	@ 0x7f
 8006d2e:	2200      	movs	r2, #0
 8006d30:	213f      	movs	r1, #63	@ 0x3f
 8006d32:	2000      	movs	r0, #0
 8006d34:	f7ff fd91 	bl	800685a <Display_set_window>
	Send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 8006d38:	883b      	ldrh	r3, [r7, #0]
 8006d3a:	01db      	lsls	r3, r3, #7
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	887b      	ldrh	r3, [r7, #2]
 8006d40:	4413      	add	r3, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4413      	add	r3, r2
 8006d46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7ff fdb2 	bl	80068b4 <Send_buffer>
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <mcp23017_regForPin>:
 * @param pin
 * @param portAaddr
 * @param portBaddr
 * @return
 */
static uint8_t mcp23017_regForPin (uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	4603      	mov	r3, r0
 8006d60:	71fb      	strb	r3, [r7, #7]
 8006d62:	460b      	mov	r3, r1
 8006d64:	71bb      	strb	r3, [r7, #6]
 8006d66:	4613      	mov	r3, r2
 8006d68:	717b      	strb	r3, [r7, #5]
	return(pin<8) ? portAaddr : portBaddr;
 8006d6a:	79fb      	ldrb	r3, [r7, #7]
 8006d6c:	2b07      	cmp	r3, #7
 8006d6e:	d801      	bhi.n	8006d74 <mcp23017_regForPin+0x1c>
 8006d70:	79bb      	ldrb	r3, [r7, #6]
 8006d72:	e000      	b.n	8006d76 <mcp23017_regForPin+0x1e>
 8006d74:	797b      	ldrb	r3, [r7, #5]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <mcp23017_bitForPin>:
/**
 * Bit number associated to a given pin
 * @param pin
 * @return
 */
static uint8_t mcp23017_bitForPin(uint8_t pin){
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	4603      	mov	r3, r0
 8006d8a:	71fb      	strb	r3, [r7, #7]
	return pin % 8;
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	f003 0307 	and.w	r3, r3, #7
 8006d92:	b2db      	uxtb	r3, r3
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <mcp23017_readRegister>:
 * Reads a given register
 * @param hdev
 * @param addr
 * @return
 */
HAL_StatusTypeDef mcp23017_readRegister(MCP23017_HandleTypeDef *hdev, uint8_t addr, uint8_t *data) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08a      	sub	sp, #40	@ 0x28
 8006da4:	af04      	add	r7, sp, #16
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	460b      	mov	r3, r1
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	72fb      	strb	r3, [r7, #11]
	// read the current GPINTEN
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Read(hdev->hi2c1, hdev->addr, addr, 1, data, 1, HAL_MAX_DELAY);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6818      	ldr	r0, [r3, #0]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	8899      	ldrh	r1, [r3, #4]
 8006db6:	7afb      	ldrb	r3, [r7, #11]
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	f04f 33ff 	mov.w	r3, #4294967295
 8006dbe:	9302      	str	r3, [sp, #8]
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	9301      	str	r3, [sp, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	2301      	movs	r3, #1
 8006dca:	f7fc fa2d 	bl	8003228 <HAL_I2C_Mem_Read>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	75fb      	strb	r3, [r7, #23]
	return ret;
 8006dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <mcp23017_writeRegister>:
 * @param regAddr Register Address
 * @param regValue Value to write to
 * @return
 */
static HAL_StatusTypeDef mcp23017_writeRegister(MCP23017_HandleTypeDef *hdev, uint8_t regAddr, uint8_t regValue)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b088      	sub	sp, #32
 8006de0:	af04      	add	r7, sp, #16
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	70fb      	strb	r3, [r7, #3]
 8006de8:	4613      	mov	r3, r2
 8006dea:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Write(hdev->hi2c1, hdev->addr, regAddr, 1, (uint8_t*) &regValue, 1, HAL_MAX_DELAY);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6818      	ldr	r0, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	8899      	ldrh	r1, [r3, #4]
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfc:	9302      	str	r3, [sp, #8]
 8006dfe:	2301      	movs	r3, #1
 8006e00:	9301      	str	r3, [sp, #4]
 8006e02:	1cbb      	adds	r3, r7, #2
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	2301      	movs	r3, #1
 8006e08:	f7fc f914 	bl	8003034 <HAL_I2C_Mem_Write>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	73fb      	strb	r3, [r7, #15]
	return ret;
 8006e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <mcp23017_updateRegisterBit>:
 * @param pin
 * @param pValue
 * @param portAaddr
 * @param portBaddr
 */
HAL_StatusTypeDef mcp23017_updateRegisterBit(MCP23017_HandleTypeDef *hdev, uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
 8006e22:	4608      	mov	r0, r1
 8006e24:	4611      	mov	r1, r2
 8006e26:	461a      	mov	r2, r3
 8006e28:	4603      	mov	r3, r0
 8006e2a:	70fb      	strb	r3, [r7, #3]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70bb      	strb	r3, [r7, #2]
 8006e30:	4613      	mov	r3, r2
 8006e32:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr = mcp23017_regForPin(pin,portAaddr,portBaddr);
 8006e34:	7e3a      	ldrb	r2, [r7, #24]
 8006e36:	7879      	ldrb	r1, [r7, #1]
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7ff ff8c 	bl	8006d58 <mcp23017_regForPin>
 8006e40:	4603      	mov	r3, r0
 8006e42:	73fb      	strb	r3, [r7, #15]
	uint8_t bit = mcp23017_bitForPin(pin);
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7ff ff9b 	bl	8006d82 <mcp23017_bitForPin>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	73bb      	strb	r3, [r7, #14]
	mcp23017_readRegister(hdev, regAddr, &regValue);
 8006e50:	f107 020d 	add.w	r2, r7, #13
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	4619      	mov	r1, r3
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f7ff ffa1 	bl	8006da0 <mcp23017_readRegister>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
 8006e5e:	78bb      	ldrb	r3, [r7, #2]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <mcp23017_updateRegisterBit+0x5e>
 8006e64:	7bbb      	ldrb	r3, [r7, #14]
 8006e66:	2201      	movs	r2, #1
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	b2da      	uxtb	r2, r3
 8006e6e:	7b7b      	ldrb	r3, [r7, #13]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	737b      	strb	r3, [r7, #13]
 8006e76:	e00a      	b.n	8006e8e <mcp23017_updateRegisterBit+0x74>
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	43db      	mvns	r3, r3
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	7b7b      	ldrb	r3, [r7, #13]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	737b      	strb	r3, [r7, #13]

	return (mcp23017_writeRegister(hdev, regAddr,regValue));
 8006e8e:	7b7a      	ldrb	r2, [r7, #13]
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff ffa1 	bl	8006ddc <mcp23017_writeRegister>
 8006e9a:	4603      	mov	r3, r0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <mcp23017_init>:
 * @param hdev
 * @param hi2c1
 * @param addr
 */
HAL_StatusTypeDef mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c1, uint16_t addr)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b086      	sub	sp, #24
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret;

	hdev->hi2c1 = hi2c1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	601a      	str	r2, [r3, #0]
	hdev->addr = addr << 1;
 8006eb8:	88fb      	ldrh	r3, [r7, #6]
 8006eba:	005b      	lsls	r3, r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	809a      	strh	r2, [r3, #4]

	ret = HAL_I2C_IsDeviceReady(hi2c1, hdev->addr, 20, I2C_READYNESS_DELAY);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8899      	ldrh	r1, [r3, #4]
 8006ec6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006eca:	2214      	movs	r2, #20
 8006ecc:	68b8      	ldr	r0, [r7, #8]
 8006ece:	f7fc fbdd 	bl	800368c <HAL_I2C_IsDeviceReady>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75bb      	strb	r3, [r7, #22]
	if (ret != HAL_OK) return ret;
 8006ed6:	7dbb      	ldrb	r3, [r7, #22]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <mcp23017_init+0x3c>
 8006edc:	7dbb      	ldrb	r3, [r7, #22]
 8006ede:	e01a      	b.n	8006f16 <mcp23017_init+0x72>
	//DISSLW = 	0 : slew rate enabled
	//HAEN = 	0 : hardware address pin is always enabled on 23017
	//ODR = 	0 : open drain output
	//INTPOL = 	0 : interrupt active low
	// bit0 - unplemented read as 0
	uint8_t byte = 0 | 1 << 5 | 1 << 6;
 8006ee0:	2360      	movs	r3, #96	@ 0x60
 8006ee2:	757b      	strb	r3, [r7, #21]

	for (uint8_t i = 0; i < 2; i++) {
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	75fb      	strb	r3, [r7, #23]
 8006ee8:	e011      	b.n	8006f0e <mcp23017_init+0x6a>
		ret = mcp23017_writeRegister(hdev, MCP23017_IOCONA+i, byte);
 8006eea:	7dfb      	ldrb	r3, [r7, #23]
 8006eec:	330a      	adds	r3, #10
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	7d7a      	ldrb	r2, [r7, #21]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff ff71 	bl	8006ddc <mcp23017_writeRegister>
 8006efa:	4603      	mov	r3, r0
 8006efc:	75bb      	strb	r3, [r7, #22]
		if (ret != HAL_OK) return ret;
 8006efe:	7dbb      	ldrb	r3, [r7, #22]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <mcp23017_init+0x64>
 8006f04:	7dbb      	ldrb	r3, [r7, #22]
 8006f06:	e006      	b.n	8006f16 <mcp23017_init+0x72>
	for (uint8_t i = 0; i < 2; i++) {
 8006f08:	7dfb      	ldrb	r3, [r7, #23]
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	75fb      	strb	r3, [r7, #23]
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d9ea      	bls.n	8006eea <mcp23017_init+0x46>
	}

	return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <mcp23017_portMode>:
 * @param pullups
 * @param inverted
 * @return
 */
HAL_StatusTypeDef mcp23017_portMode(MCP23017_HandleTypeDef *hdev, MCP23017Port_t port, MCP23017_PinModeIO_t pinmode, MCP23017_PinPolarity_t pinpolarity)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b084      	sub	sp, #16
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	4608      	mov	r0, r1
 8006f28:	4611      	mov	r1, r2
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	70fb      	strb	r3, [r7, #3]
 8006f30:	460b      	mov	r3, r1
 8006f32:	70bb      	strb	r3, [r7, #2]
 8006f34:	4613      	mov	r3, r2
 8006f36:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	ret = mcp23017_writeRegister(hdev, MCP23017_IODIRA + port,
 8006f38:	78bb      	ldrb	r3, [r7, #2]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <mcp23017_portMode+0x26>
			(pinmode == MCP23017_PIN_MODE_INPUT || pinmode == MCP23017_PIN_MODE_INPUT_PULLUP) ? 0xFF : 0x00);
 8006f3e:	78bb      	ldrb	r3, [r7, #2]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d101      	bne.n	8006f48 <mcp23017_portMode+0x2a>
	ret = mcp23017_writeRegister(hdev, MCP23017_IODIRA + port,
 8006f44:	22ff      	movs	r2, #255	@ 0xff
 8006f46:	e000      	b.n	8006f4a <mcp23017_portMode+0x2c>
 8006f48:	2200      	movs	r2, #0
 8006f4a:	78fb      	ldrb	r3, [r7, #3]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7ff ff44 	bl	8006ddc <mcp23017_writeRegister>
 8006f54:	4603      	mov	r3, r0
 8006f56:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8006f58:	7bfb      	ldrb	r3, [r7, #15]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <mcp23017_portMode+0x44>
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	e028      	b.n	8006fb4 <mcp23017_portMode+0x96>

	ret = mcp23017_writeRegister(hdev, MCP23017_GPPUA + port, (pinmode == MCP23017_PIN_MODE_INPUT_PULLUP ? 0xff : 0x00));
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	330c      	adds	r3, #12
 8006f66:	b2d9      	uxtb	r1, r3
 8006f68:	78bb      	ldrb	r3, [r7, #2]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d101      	bne.n	8006f72 <mcp23017_portMode+0x54>
 8006f6e:	23ff      	movs	r3, #255	@ 0xff
 8006f70:	e000      	b.n	8006f74 <mcp23017_portMode+0x56>
 8006f72:	2300      	movs	r3, #0
 8006f74:	461a      	mov	r2, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff ff30 	bl	8006ddc <mcp23017_writeRegister>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <mcp23017_portMode+0x6c>
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
 8006f88:	e014      	b.n	8006fb4 <mcp23017_portMode+0x96>

	ret = mcp23017_writeRegister(hdev, MCP23017_IPOLA + port, pinpolarity ? 0xff : 0x00);
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	b2d9      	uxtb	r1, r3
 8006f90:	787b      	ldrb	r3, [r7, #1]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <mcp23017_portMode+0x7c>
 8006f96:	23ff      	movs	r3, #255	@ 0xff
 8006f98:	e000      	b.n	8006f9c <mcp23017_portMode+0x7e>
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff ff1c 	bl	8006ddc <mcp23017_writeRegister>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <mcp23017_portMode+0x94>
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	e000      	b.n	8006fb4 <mcp23017_portMode+0x96>

	return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <mcp23017_pinMode>:
 * @param mode
 * @param inverted
 * @return
 */
HAL_StatusTypeDef mcp23017_pinMode(MCP23017_HandleTypeDef *hdev, uint8_t pin, MCP23017_PinModeIO_t mode, MCP23017_PinPolarity_t polarity)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af02      	add	r7, sp, #8
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4603      	mov	r3, r0
 8006fcc:	70fb      	strb	r3, [r7, #3]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	70bb      	strb	r3, [r7, #2]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	/* if input we set IODIRA or IODIRB (depending on pin number) to 1 */
	ret = mcp23017_updateRegisterBit(hdev, pin, (mode == MCP23017_PIN_MODE_INPUT || mode == MCP23017_PIN_MODE_INPUT_PULLUP),
 8006fd6:	78bb      	ldrb	r3, [r7, #2]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <mcp23017_pinMode+0x26>
 8006fdc:	78bb      	ldrb	r3, [r7, #2]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d101      	bne.n	8006fe6 <mcp23017_pinMode+0x2a>
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e000      	b.n	8006fe8 <mcp23017_pinMode+0x2c>
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	78f9      	ldrb	r1, [r7, #3]
 8006fec:	2301      	movs	r3, #1
 8006fee:	9300      	str	r3, [sp, #0]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7ff ff11 	bl	8006e1a <mcp23017_updateRegisterBit>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
			MCP23017_IODIRA, MCP23017_IODIRB);
	if (ret != HAL_OK) return ret;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <mcp23017_pinMode+0x4a>
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	e02a      	b.n	800705c <mcp23017_pinMode+0xa0>

	/* we also need to control the polarity, will be ignored anyway if output, 1 if pol inverted */
	ret = mcp23017_updateRegisterBit(hdev, pin, polarity == MCP23017_PIN_POLARITY_INVERTED, MCP23017_IPOLA, MCP23017_IPOLB);
 8007006:	787b      	ldrb	r3, [r7, #1]
 8007008:	2b01      	cmp	r3, #1
 800700a:	bf0c      	ite	eq
 800700c:	2301      	moveq	r3, #1
 800700e:	2300      	movne	r3, #0
 8007010:	b2db      	uxtb	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	78f9      	ldrb	r1, [r7, #3]
 8007016:	2303      	movs	r3, #3
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	2302      	movs	r3, #2
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f7ff fefc 	bl	8006e1a <mcp23017_updateRegisterBit>
 8007022:	4603      	mov	r3, r0
 8007024:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <mcp23017_pinMode+0x74>
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	e015      	b.n	800705c <mcp23017_pinMode+0xa0>

	/* then we need to setup the pull up for that pin if MCP23017_PIN_MODE_INPUT_PULLUP was selected */
	ret = mcp23017_updateRegisterBit(hdev, pin, mode == MCP23017_PIN_MODE_INPUT_PULLUP, MCP23017_GPPUA, MCP23017_GPPUB);
 8007030:	78bb      	ldrb	r3, [r7, #2]
 8007032:	2b01      	cmp	r3, #1
 8007034:	bf0c      	ite	eq
 8007036:	2301      	moveq	r3, #1
 8007038:	2300      	movne	r3, #0
 800703a:	b2db      	uxtb	r3, r3
 800703c:	461a      	mov	r2, r3
 800703e:	78f9      	ldrb	r1, [r7, #3]
 8007040:	230d      	movs	r3, #13
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	230c      	movs	r3, #12
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fee7 	bl	8006e1a <mcp23017_updateRegisterBit>
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <mcp23017_pinMode+0x9e>
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	e000      	b.n	800705c <mcp23017_pinMode+0xa0>

	return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <Ex_gpio_init>:

MCP23017_HandleTypeDef hmcp;


void Ex_gpio_init(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	af00      	add	r7, sp, #0
	mcp23017_init(&hmcp, &hi2c1, MCP23017_ADD_27);
 8007068:	2227      	movs	r2, #39	@ 0x27
 800706a:	4918      	ldr	r1, [pc, #96]	@ (80070cc <Ex_gpio_init+0x68>)
 800706c:	4818      	ldr	r0, [pc, #96]	@ (80070d0 <Ex_gpio_init+0x6c>)
 800706e:	f7ff ff19 	bl	8006ea4 <mcp23017_init>
	mcp23017_portMode(&hmcp, MCP23017Port_A, MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8007072:	2300      	movs	r3, #0
 8007074:	2202      	movs	r2, #2
 8007076:	2100      	movs	r1, #0
 8007078:	4815      	ldr	r0, [pc, #84]	@ (80070d0 <Ex_gpio_init+0x6c>)
 800707a:	f7ff ff50 	bl	8006f1e <mcp23017_portMode>
	mcp23017_portMode(&hmcp, MCP23017Port_B, MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 800707e:	2300      	movs	r3, #0
 8007080:	2202      	movs	r2, #2
 8007082:	2101      	movs	r1, #1
 8007084:	4812      	ldr	r0, [pc, #72]	@ (80070d0 <Ex_gpio_init+0x6c>)
 8007086:	f7ff ff4a 	bl	8006f1e <mcp23017_portMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPB0_Pin | MCP23017_GPB1_Pin | MCP23017_GPB2_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 800708a:	2300      	movs	r3, #0
 800708c:	2202      	movs	r2, #2
 800708e:	210b      	movs	r1, #11
 8007090:	480f      	ldr	r0, [pc, #60]	@ (80070d0 <Ex_gpio_init+0x6c>)
 8007092:	f7ff ff93 	bl	8006fbc <mcp23017_pinMode>
    mcp23017_pinMode(&hmcp,MCP23017_GPB3_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8007096:	2300      	movs	r3, #0
 8007098:	2202      	movs	r2, #2
 800709a:	210b      	movs	r1, #11
 800709c:	480c      	ldr	r0, [pc, #48]	@ (80070d0 <Ex_gpio_init+0x6c>)
 800709e:	f7ff ff8d 	bl	8006fbc <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA0_Pin | MCP23017_GPA1_Pin | MCP23017_GPA2_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80070a2:	2300      	movs	r3, #0
 80070a4:	2202      	movs	r2, #2
 80070a6:	2103      	movs	r1, #3
 80070a8:	4809      	ldr	r0, [pc, #36]	@ (80070d0 <Ex_gpio_init+0x6c>)
 80070aa:	f7ff ff87 	bl	8006fbc <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA3_Pin | MCP23017_GPA4_Pin | MCP23017_GPA5_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80070ae:	2300      	movs	r3, #0
 80070b0:	2202      	movs	r2, #2
 80070b2:	2107      	movs	r1, #7
 80070b4:	4806      	ldr	r0, [pc, #24]	@ (80070d0 <Ex_gpio_init+0x6c>)
 80070b6:	f7ff ff81 	bl	8006fbc <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA6_Pin | MCP23017_GPA7_Pin ,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80070ba:	2300      	movs	r3, #0
 80070bc:	2202      	movs	r2, #2
 80070be:	2107      	movs	r1, #7
 80070c0:	4803      	ldr	r0, [pc, #12]	@ (80070d0 <Ex_gpio_init+0x6c>)
 80070c2:	f7ff ff7b 	bl	8006fbc <mcp23017_pinMode>

}
 80070c6:	bf00      	nop
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	2000599c 	.word	0x2000599c
 80070d0:	200059f0 	.word	0x200059f0

080070d4 <USART_ReceiveData>:
DEVInfo devInfo;

char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]

  assert_param(IS_USART_ALL_PERIPH(USARTx));

  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070e6:	b29b      	uxth	r3, r3
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	807b      	strh	r3, [r7, #2]

  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  USARTx->DR = (Data & (uint16_t)0x01FF);
 8007100:	887b      	ldrh	r3, [r7, #2]
 8007102:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	605a      	str	r2, [r3, #4]
}
 800710a:	bf00      	nop
 800710c:	370c      	adds	r7, #12
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
	...

08007118 <usart_setup>:

uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8007120:	4b15      	ldr	r3, [pc, #84]	@ (8007178 <usart_setup+0x60>)
 8007122:	4a16      	ldr	r2, [pc, #88]	@ (800717c <usart_setup+0x64>)
 8007124:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8007126:	4a14      	ldr	r2, [pc, #80]	@ (8007178 <usart_setup+0x60>)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 800712c:	4b12      	ldr	r3, [pc, #72]	@ (8007178 <usart_setup+0x60>)
 800712e:	2200      	movs	r2, #0
 8007130:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8007132:	4b11      	ldr	r3, [pc, #68]	@ (8007178 <usart_setup+0x60>)
 8007134:	2200      	movs	r2, #0
 8007136:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8007138:	4b0f      	ldr	r3, [pc, #60]	@ (8007178 <usart_setup+0x60>)
 800713a:	2200      	movs	r2, #0
 800713c:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 800713e:	4b0e      	ldr	r3, [pc, #56]	@ (8007178 <usart_setup+0x60>)
 8007140:	220c      	movs	r2, #12
 8007142:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007144:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <usart_setup+0x60>)
 8007146:	2200      	movs	r2, #0
 8007148:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 800714a:	4b0b      	ldr	r3, [pc, #44]	@ (8007178 <usart_setup+0x60>)
 800714c:	2200      	movs	r2, #0
 800714e:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 8007150:	4809      	ldr	r0, [pc, #36]	@ (8007178 <usart_setup+0x60>)
 8007152:	f7fe fab1 	bl	80056b8 <HAL_HalfDuplex_Init>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d000      	beq.n	800715e <usart_setup+0x46>
	{

		__asm__("NOP");
 800715c:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 800715e:	4b06      	ldr	r3, [pc, #24]	@ (8007178 <usart_setup+0x60>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68da      	ldr	r2, [r3, #12]
 8007164:	4b04      	ldr	r3, [pc, #16]	@ (8007178 <usart_setup+0x60>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f042 0220 	orr.w	r2, r2, #32
 800716c:	60da      	str	r2, [r3, #12]
}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20003870 	.word	0x20003870
 800717c:	40011000 	.word	0x40011000

08007180 <owInit>:

void owInit(OneWire *ow) {
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	2300      	movs	r3, #0
 800718e:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8007190:	e015      	b.n	80071be <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	00db      	lsls	r3, r3, #3
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	4413      	add	r3, r2
 800719a:	60fb      	str	r3, [r7, #12]
    k=0;
 800719c:	2300      	movs	r3, #0
 800719e:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 80071a0:	e007      	b.n	80071b2 <owInit+0x32>
    r[k] = 0;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4413      	add	r3, r2
 80071a8:	2200      	movs	r2, #0
 80071aa:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	3301      	adds	r3, #1
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	2b07      	cmp	r3, #7
 80071b6:	ddf4      	ble.n	80071a2 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	3301      	adds	r3, #1
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dde6      	ble.n	8007192 <owInit+0x12>
  }
  k=0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 80071c8:	e008      	b.n	80071dc <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	4413      	add	r3, r2
 80071d0:	330c      	adds	r3, #12
 80071d2:	2200      	movs	r2, #0
 80071d4:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	3301      	adds	r3, #1
 80071da:	613b      	str	r3, [r7, #16]
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	2b07      	cmp	r3, #7
 80071e0:	ddf3      	ble.n	80071ca <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2240      	movs	r2, #64	@ 0x40
 80071e6:	609a      	str	r2, [r3, #8]

}
 80071e8:	bf00      	nop
 80071ea:	371c      	adds	r7, #28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <owReadHandler>:

void owReadHandler() {
 80071f4:	b590      	push	{r4, r7, lr}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 80071fa:	f000 f850 	bl	800729e <getUsartIndex>
 80071fe:	4603      	mov	r3, r0
 8007200:	71fb      	strb	r3, [r7, #7]
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8007202:	4b18      	ldr	r3, [pc, #96]	@ (8007264 <owReadHandler+0x70>)
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d025      	beq.n	800725a <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 800720e:	4b15      	ldr	r3, [pc, #84]	@ (8007264 <owReadHandler+0x70>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8007216:	2b00      	cmp	r3, #0
 8007218:	d01f      	beq.n	800725a <owReadHandler+0x66>

		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 800721a:	bf00      	nop
 800721c:	4b11      	ldr	r3, [pc, #68]	@ (8007264 <owReadHandler+0x70>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d0f9      	beq.n	800721c <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);
 8007228:	79fc      	ldrb	r4, [r7, #7]
 800722a:	480e      	ldr	r0, [pc, #56]	@ (8007264 <owReadHandler+0x70>)
 800722c:	f7ff ff52 	bl	80070d4 <USART_ReceiveData>
 8007230:	4603      	mov	r3, r0
 8007232:	461a      	mov	r2, r3
 8007234:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <owReadHandler+0x74>)
 8007236:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	2201      	movs	r2, #1
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	b25b      	sxtb	r3, r3
 8007244:	43db      	mvns	r3, r3
 8007246:	b25a      	sxtb	r2, r3
 8007248:	4b08      	ldr	r3, [pc, #32]	@ (800726c <owReadHandler+0x78>)
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	b25b      	sxtb	r3, r3
 8007250:	4013      	ands	r3, r2
 8007252:	b25b      	sxtb	r3, r3
 8007254:	b2da      	uxtb	r2, r3
 8007256:	4b05      	ldr	r3, [pc, #20]	@ (800726c <owReadHandler+0x78>)
 8007258:	701a      	strb	r2, [r3, #0]
  }
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	bd90      	pop	{r4, r7, pc}
 8007262:	bf00      	nop
 8007264:	40011000 	.word	0x40011000
 8007268:	200059fc 	.word	0x200059fc
 800726c:	200059f8 	.word	0x200059f8

08007270 <owResetCmd>:

  uint16_t owResetCmd() {
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
	uint16_t owPresence;

	usart_setup(9600);
 8007276:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800727a:	f7ff ff4d 	bl	8007118 <usart_setup>

  owSend(0xF0);
 800727e:	20f0      	movs	r0, #240	@ 0xf0
 8007280:	f000 f816 	bl	80072b0 <owSend>
  owPresence = owEchoRead();
 8007284:	f000 f854 	bl	8007330 <owEchoRead>
 8007288:	4603      	mov	r3, r0
 800728a:	80fb      	strh	r3, [r7, #6]
	usart_setup(115200);
 800728c:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8007290:	f7ff ff42 	bl	8007118 <usart_setup>
  return owPresence;
 8007294:	88fb      	ldrh	r3, [r7, #6]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <getUsartIndex>:

uint8_t getUsartIndex() {
 800729e:	b480      	push	{r7}
 80072a0:	af00      	add	r7, sp, #0

	return 0;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
	...

080072b0 <owSend>:

void owSend(uint16_t data) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());
 80072ba:	f7ff fff0 	bl	800729e <getUsartIndex>
 80072be:	4603      	mov	r3, r0
 80072c0:	461a      	mov	r2, r3
 80072c2:	2301      	movs	r3, #1
 80072c4:	4093      	lsls	r3, r2
 80072c6:	b25a      	sxtb	r2, r3
 80072c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007300 <owSend+0x50>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	b25b      	sxtb	r3, r3
 80072d0:	4313      	orrs	r3, r2
 80072d2:	b25b      	sxtb	r3, r3
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <owSend+0x50>)
 80072d8:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	4619      	mov	r1, r3
 80072de:	4809      	ldr	r0, [pc, #36]	@ (8007304 <owSend+0x54>)
 80072e0:	f7ff ff08 	bl	80070f4 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);
 80072e4:	bf00      	nop
 80072e6:	4b08      	ldr	r3, [pc, #32]	@ (8007308 <owSend+0x58>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f0:	2b40      	cmp	r3, #64	@ 0x40
 80072f2:	d1f8      	bne.n	80072e6 <owSend+0x36>
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	200059f8 	.word	0x200059f8
 8007304:	40011000 	.word	0x40011000
 8007308:	20003870 	.word	0x20003870

0800730c <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	4603      	mov	r3, r0
 8007314:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0;
 8007316:	88fb      	ldrh	r3, [r7, #6]
 8007318:	2bff      	cmp	r3, #255	@ 0xff
 800731a:	bf0c      	ite	eq
 800731c:	2301      	moveq	r3, #1
 800731e:	2300      	movne	r3, #0
 8007320:	b2db      	uxtb	r3, r3
}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
	...

08007330 <owEchoRead>:

uint16_t owEchoRead() {
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();
 8007336:	f7ff ffb2 	bl	800729e <getUsartIndex>
 800733a:	4603      	mov	r3, r0
 800733c:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 800733e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007342:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);
 8007344:	bf00      	nop
 8007346:	4b0c      	ldr	r3, [pc, #48]	@ (8007378 <owEchoRead+0x48>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	797b      	ldrb	r3, [r7, #5]
 8007350:	fa42 f303 	asr.w	r3, r2, r3
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d004      	beq.n	8007366 <owEchoRead+0x36>
 800735c:	88fb      	ldrh	r3, [r7, #6]
 800735e:	1e5a      	subs	r2, r3, #1
 8007360:	80fa      	strh	r2, [r7, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1ef      	bne.n	8007346 <owEchoRead+0x16>
  return rc_buffer[i];
 8007366:	797b      	ldrb	r3, [r7, #5]
 8007368:	4a04      	ldr	r2, [pc, #16]	@ (800737c <owEchoRead+0x4c>)
 800736a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800736e:	b29b      	uxth	r3, r3
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200059f8 	.word	0x200059f8
 800737c:	200059fc 	.word	0x200059fc

08007380 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	6039      	str	r1, [r7, #0]
 800738a:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
 8007390:	e014      	b.n	80073bc <byteToBits+0x3c>
    if (ow_byte & 0x01) {
 8007392:	79fb      	ldrb	r3, [r7, #7]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <byteToBits+0x24>
      *bits = WIRE_1;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	22ff      	movs	r2, #255	@ 0xff
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	e002      	b.n	80073aa <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	2200      	movs	r2, #0
 80073a8:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	3301      	adds	r3, #1
 80073ae:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1;
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	3301      	adds	r3, #1
 80073ba:	73fb      	strb	r3, [r7, #15]
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	2b07      	cmp	r3, #7
 80073c0:	d9e7      	bls.n	8007392 <byteToBits+0x12>
  }
  return bits;
 80073c2:	683b      	ldr	r3, [r7, #0]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3714      	adds	r7, #20
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <owSendByte>:

void owSendByte(uint8_t d) {
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);
 80073da:	f107 020c 	add.w	r2, r7, #12
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	4611      	mov	r1, r2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7ff ffcc 	bl	8007380 <byteToBits>
  for (i = 0; i < 8; ++i) {
 80073e8:	2300      	movs	r3, #0
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	e00a      	b.n	8007404 <owSendByte+0x34>
    owSend(data[i]);
 80073ee:	f107 020c 	add.w	r2, r7, #12
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	4413      	add	r3, r2
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff ff59 	bl	80072b0 <owSend>
  for (i = 0; i < 8; ++i) {
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	3301      	adds	r3, #1
 8007402:	617b      	str	r3, [r7, #20]
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b07      	cmp	r3, #7
 8007408:	ddf1      	ble.n	80073ee <owSendByte+0x1e>
  }
}
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	3718      	adds	r7, #24
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <owCRC>:
    bits++;
  }
  return target_byte;
}

uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	460b      	mov	r3, r1
 800741e:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8007420:	2300      	movs	r3, #0
 8007422:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8007424:	2300      	movs	r3, #0
 8007426:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8007428:	7b3b      	ldrb	r3, [r7, #12]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]
 8007436:	e018      	b.n	800746a <owCRC+0x56>
      fb = crc ^ dat;
 8007438:	7b7a      	ldrb	r2, [r7, #13]
 800743a:	7bbb      	ldrb	r3, [r7, #14]
 800743c:	4053      	eors	r3, r2
 800743e:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8007440:	7afb      	ldrb	r3, [r7, #11]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 8007448:	7b7b      	ldrb	r3, [r7, #13]
 800744a:	085b      	lsrs	r3, r3, #1
 800744c:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 800744e:	7bbb      	ldrb	r3, [r7, #14]
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c;
 8007454:	7afb      	ldrb	r3, [r7, #11]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d104      	bne.n	8007464 <owCRC+0x50>
 800745a:	7b7b      	ldrb	r3, [r7, #13]
 800745c:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8007460:	43db      	mvns	r3, r3
 8007462:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	3301      	adds	r3, #1
 8007468:	73fb      	strb	r3, [r7, #15]
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2b07      	cmp	r3, #7
 800746e:	d9e3      	bls.n	8007438 <owCRC+0x24>
    }
    st_byt++;
 8007470:	7b3b      	ldrb	r3, [r7, #12]
 8007472:	3301      	adds	r3, #1
 8007474:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len);
 8007476:	7b3a      	ldrb	r2, [r7, #12]
 8007478:	78fb      	ldrb	r3, [r7, #3]
 800747a:	429a      	cmp	r2, r3
 800747c:	d3d4      	bcc.n	8007428 <owCRC+0x14>
  return crc;
 800747e:	7b7b      	ldrb	r3, [r7, #13]
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);
 8007494:	2107      	movs	r1, #7
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7ff ffbc 	bl	8007414 <owCRC>
 800749c:	4603      	mov	r3, r0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <hasNextRom>:

int hasNextRom(OneWire *ow, uint8_t *ROM) {
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b088      	sub	sp, #32
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 80074b4:	f04f 33ff 	mov.w	r3, #4294967295
 80074b8:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) {
 80074be:	f7ff fed7 	bl	8007270 <owResetCmd>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2bf0      	cmp	r3, #240	@ 0xf0
 80074c6:	d101      	bne.n	80074cc <hasNextRom+0x26>
    return 0;
 80074c8:	2300      	movs	r3, #0
 80074ca:	e097      	b.n	80075fc <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);
 80074cc:	20f0      	movs	r0, #240	@ 0xf0
 80074ce:	f7ff ff7f 	bl	80073d0 <owSendByte>
  do {
		uint8_t answerBit =0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 80074d6:	7ffb      	ldrb	r3, [r7, #31]
 80074d8:	08db      	lsrs	r3, r3, #3
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	683a      	ldr	r2, [r7, #0]
 80074e2:	4413      	add	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 80074e6:	2300      	movs	r3, #0
 80074e8:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ);
 80074ea:	20ff      	movs	r0, #255	@ 0xff
 80074ec:	f7ff fee0 	bl	80072b0 <owSend>
    cB = owReadSlot(owEchoRead());
 80074f0:	f7ff ff1e 	bl	8007330 <owEchoRead>
 80074f4:	4603      	mov	r3, r0
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff ff08 	bl	800730c <owReadSlot>
 80074fc:	4603      	mov	r3, r0
 80074fe:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ);
 8007500:	20ff      	movs	r0, #255	@ 0xff
 8007502:	f7ff fed5 	bl	80072b0 <owSend>
    cmp_cB = owReadSlot(owEchoRead());
 8007506:	f7ff ff13 	bl	8007330 <owEchoRead>
 800750a:	4603      	mov	r3, r0
 800750c:	4618      	mov	r0, r3
 800750e:	f7ff fefd 	bl	800730c <owReadSlot>
 8007512:	4603      	mov	r3, r0
 8007514:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)
 8007516:	7afa      	ldrb	r2, [r7, #11]
 8007518:	7abb      	ldrb	r3, [r7, #10]
 800751a:	429a      	cmp	r2, r3
 800751c:	d105      	bne.n	800752a <hasNextRom+0x84>
 800751e:	7afb      	ldrb	r3, [r7, #11]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d102      	bne.n	800752a <hasNextRom+0x84>
      return -1;
 8007524:	f04f 33ff 	mov.w	r3, #4294967295
 8007528:	e068      	b.n	80075fc <hasNextRom+0x156>
    if (cB != cmp_cB) {
 800752a:	7afa      	ldrb	r2, [r7, #11]
 800752c:	7abb      	ldrb	r3, [r7, #10]
 800752e:	429a      	cmp	r2, r3
 8007530:	d002      	beq.n	8007538 <hasNextRom+0x92>
      searchDirection = cB;
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	75bb      	strb	r3, [r7, #22]
 8007536:	e023      	b.n	8007580 <hasNextRom+0xda>
			} else {
				if (ui32BitNumber == ow->lastDiscrepancy)
 8007538:	7ffa      	ldrb	r2, [r7, #31]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	429a      	cmp	r2, r3
 8007540:	d102      	bne.n	8007548 <hasNextRom+0xa2>
        searchDirection = 1;
 8007542:	2301      	movs	r3, #1
 8007544:	75bb      	strb	r3, [r7, #22]
 8007546:	e01b      	b.n	8007580 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {
 8007548:	7ffa      	ldrb	r2, [r7, #31]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	429a      	cmp	r2, r3
 8007550:	dd02      	ble.n	8007558 <hasNextRom+0xb2>
          searchDirection = 0;
 8007552:	2300      	movs	r3, #0
 8007554:	75bb      	strb	r3, [r7, #22]
 8007556:	e00e      	b.n	8007576 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	4413      	add	r3, r2
 800755e:	330c      	adds	r3, #12
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	7ffb      	ldrb	r3, [r7, #31]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	fa42 f303 	asr.w	r3, r2, r3
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8007576:	7dbb      	ldrb	r3, [r7, #22]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;
 800757c:	7ffb      	ldrb	r3, [r7, #31]
 800757e:	61bb      	str	r3, [r7, #24]
      }
    }

    if (searchDirection)
 8007580:	7dbb      	ldrb	r3, [r7, #22]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00e      	beq.n	80075a4 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	b25a      	sxtb	r2, r3
 800758c:	7ffb      	ldrb	r3, [r7, #31]
 800758e:	f003 0307 	and.w	r3, r3, #7
 8007592:	2101      	movs	r1, #1
 8007594:	fa01 f303 	lsl.w	r3, r1, r3
 8007598:	b25b      	sxtb	r3, r3
 800759a:	4313      	orrs	r3, r2
 800759c:	b25b      	sxtb	r3, r3
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);
 80075a4:	7dbb      	ldrb	r3, [r7, #22]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <hasNextRom+0x108>
 80075aa:	2300      	movs	r3, #0
 80075ac:	e000      	b.n	80075b0 <hasNextRom+0x10a>
 80075ae:	23ff      	movs	r3, #255	@ 0xff
 80075b0:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);
 80075b2:	7d7b      	ldrb	r3, [r7, #21]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7ff fe7a 	bl	80072b0 <owSend>
    ui32BitNumber++;
 80075bc:	7ffb      	ldrb	r3, [r7, #31]
 80075be:	3301      	adds	r3, #1
 80075c0:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);
 80075c2:	7ffb      	ldrb	r3, [r7, #31]
 80075c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80075c6:	d984      	bls.n	80074d2 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 80075ce:	e00b      	b.n	80075e8 <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	441a      	add	r2, r3
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	7811      	ldrb	r1, [r2, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	460a      	mov	r2, r1
 80075e0:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 80075e2:	7dfb      	ldrb	r3, [r7, #23]
 80075e4:	3301      	adds	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
 80075ea:	2b06      	cmp	r3, #6
 80075ec:	d9f0      	bls.n	80075d0 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bfcc      	ite	gt
 80075f6:	2301      	movgt	r3, #1
 80075f8:	2300      	movle	r3, #0
 80075fa:	b2db      	uxtb	r3, r3
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3720      	adds	r7, #32
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <owSearchCmd>:

int owSearchCmd(OneWire *ow) {
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f7ff fdb5 	bl	8007180 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device]));
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	4413      	add	r3, r2
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff ff40 	bl	80074a6 <hasNextRom>
 8007626:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	da02      	bge.n	8007634 <owSearchCmd+0x30>
      return -1;
 800762e:	f04f 33ff 	mov.w	r3, #4294967295
 8007632:	e009      	b.n	8007648 <owSearchCmd+0x44>
    device++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <owSearchCmd+0x42>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	dde7      	ble.n	8007616 <owSearchCmd+0x12>
		return device;
 8007646:	68fb      	ldr	r3, [r7, #12]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {
  owResetCmd();
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
	int i = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 800765c:	f7ff fe08 	bl	8007270 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);
 8007660:	2055      	movs	r0, #85	@ 0x55
 8007662:	f7ff feb5 	bl	80073d0 <owSendByte>
  for (; i < 8; i++)
 8007666:	e009      	b.n	800767c <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff fead 	bl	80073d0 <owSendByte>
  for (; i < 8; i++)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	3301      	adds	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b07      	cmp	r3, #7
 8007680:	ddf2      	ble.n	8007668 <owMatchRomCmd+0x18>
}
 8007682:	bf00      	nop
 8007684:	bf00      	nop
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);
 8007696:	6838      	ldr	r0, [r7, #0]
 8007698:	f7ff ffda 	bl	8007650 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);
 800769c:	2044      	movs	r0, #68	@ 0x44
 800769e:	f7ff fe97 	bl	80073d0 <owSendByte>
}
 80076a2:	bf00      	nop
 80076a4:	3708      	adds	r7, #8
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}

080076aa <owReadScratchpadCmd>:

uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {
 80076aa:	b580      	push	{r7, lr}
 80076ac:	b086      	sub	sp, #24
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	60f8      	str	r0, [r7, #12]
 80076b2:	60b9      	str	r1, [r7, #8]
 80076b4:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 80076b6:	2300      	movs	r3, #0
 80076b8:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b10      	cmp	r3, #16
 80076c0:	d001      	beq.n	80076c6 <owReadScratchpadCmd+0x1c>
 80076c2:	2b28      	cmp	r3, #40	@ 0x28
 80076c4:	d109      	bne.n	80076da <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;
 80076c6:	2348      	movs	r3, #72	@ 0x48
 80076c8:	82bb      	strh	r3, [r7, #20]
      break;
 80076ca:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 80076cc:	68b8      	ldr	r0, [r7, #8]
 80076ce:	f7ff ffbf 	bl	8007650 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);
 80076d2:	20be      	movs	r0, #190	@ 0xbe
 80076d4:	f7ff fe7c 	bl	80073d0 <owSendByte>
  while (b < p) {
 80076d8:	e048      	b.n	800776c <owReadScratchpadCmd+0xc2>
      return data;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	e04b      	b.n	8007776 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8));
 80076de:	8abb      	ldrh	r3, [r7, #20]
 80076e0:	3b08      	subs	r3, #8
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	da00      	bge.n	80076e8 <owReadScratchpadCmd+0x3e>
 80076e6:	3307      	adds	r3, #7
 80076e8:	10db      	asrs	r3, r3, #3
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	8afb      	ldrh	r3, [r7, #22]
 80076ee:	08db      	lsrs	r3, r3, #3
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	74fb      	strb	r3, [r7, #19]
    uint8_t bt;
		owSend(OW_READ);
 80076f8:	20ff      	movs	r0, #255	@ 0xff
 80076fa:	f7ff fdd9 	bl	80072b0 <owSend>
    bt = owReadSlot(owEchoRead());
 80076fe:	f7ff fe17 	bl	8007330 <owEchoRead>
 8007702:	4603      	mov	r3, r0
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff fe01 	bl	800730c <owReadSlot>
 800770a:	4603      	mov	r3, r0
 800770c:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 800770e:	7cbb      	ldrb	r3, [r7, #18]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d113      	bne.n	800773c <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;
 8007714:	7cfb      	ldrb	r3, [r7, #19]
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	4413      	add	r3, r2
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b25a      	sxtb	r2, r3
 800771e:	8afb      	ldrh	r3, [r7, #22]
 8007720:	f003 0307 	and.w	r3, r3, #7
 8007724:	2101      	movs	r1, #1
 8007726:	fa01 f303 	lsl.w	r3, r1, r3
 800772a:	b25b      	sxtb	r3, r3
 800772c:	4313      	orrs	r3, r2
 800772e:	b259      	sxtb	r1, r3
 8007730:	7cfb      	ldrb	r3, [r7, #19]
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	4413      	add	r3, r2
 8007736:	b2ca      	uxtb	r2, r1
 8007738:	701a      	strb	r2, [r3, #0]
 800773a:	e014      	b.n	8007766 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);
 800773c:	7cfb      	ldrb	r3, [r7, #19]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	4413      	add	r3, r2
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	b25a      	sxtb	r2, r3
 8007746:	8afb      	ldrh	r3, [r7, #22]
 8007748:	f003 0307 	and.w	r3, r3, #7
 800774c:	2101      	movs	r1, #1
 800774e:	fa01 f303 	lsl.w	r3, r1, r3
 8007752:	b25b      	sxtb	r3, r3
 8007754:	43db      	mvns	r3, r3
 8007756:	b25b      	sxtb	r3, r3
 8007758:	4013      	ands	r3, r2
 800775a:	b259      	sxtb	r1, r3
 800775c:	7cfb      	ldrb	r3, [r7, #19]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	4413      	add	r3, r2
 8007762:	b2ca      	uxtb	r2, r1
 8007764:	701a      	strb	r2, [r3, #0]
    b++;
 8007766:	8afb      	ldrh	r3, [r7, #22]
 8007768:	3301      	adds	r3, #1
 800776a:	82fb      	strh	r3, [r7, #22]
  while (b < p) {
 800776c:	8afa      	ldrh	r2, [r7, #22]
 800776e:	8abb      	ldrh	r3, [r7, #20]
 8007770:	429a      	cmp	r2, r3
 8007772:	d3b4      	bcc.n	80076de <owReadScratchpadCmd+0x34>
  }
  return data;
 8007774:	687b      	ldr	r3, [r7, #4]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <readTemperature>:
  owSendByte(th);
  owSendByte(tl);
  owSendByte(conf);
}

Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 800777e:	b580      	push	{r7, lr}
 8007780:	b08c      	sub	sp, #48	@ 0x30
 8007782:	af00      	add	r7, sp, #0
 8007784:	60f8      	str	r0, [r7, #12]
 8007786:	60b9      	str	r1, [r7, #8]
 8007788:	4613      	mov	r3, r2
 800778a:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 800778c:	2300      	movs	r3, #0
 800778e:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8007792:	2300      	movs	r3, #0
 8007794:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sp = (Scratchpad_DS18B20 *) &pad;
 8007798:	f107 0314 	add.w	r3, r7, #20
 800779c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 800779e:	f107 0314 	add.w	r3, r7, #20
 80077a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  switch (rom->family) {
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b10      	cmp	r3, #16
 80077aa:	d022      	beq.n	80077f2 <readTemperature+0x74>
 80077ac:	2b28      	cmp	r3, #40	@ 0x28
 80077ae:	d13a      	bne.n	8007826 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);
 80077b0:	f107 0314 	add.w	r3, r7, #20
 80077b4:	461a      	mov	r2, r3
 80077b6:	68b9      	ldr	r1, [r7, #8]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f7ff ff76 	bl	80076aa <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);
 80077be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c0:	79db      	ldrb	r3, [r3, #7]
 80077c2:	011b      	lsls	r3, r3, #4
 80077c4:	b25a      	sxtb	r2, r3
 80077c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c8:	7a1b      	ldrb	r3, [r3, #8]
 80077ca:	091b      	lsrs	r3, r3, #4
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	b25b      	sxtb	r3, r3
 80077d0:	4313      	orrs	r3, r2
 80077d2:	b25b      	sxtb	r3, r3
 80077d4:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);
 80077d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077da:	7a1b      	ldrb	r3, [r3, #8]
 80077dc:	f003 020f 	and.w	r2, r3, #15
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	111b      	asrs	r3, r3, #4
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 80077f0:	e01c      	b.n	800782c <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);
 80077f2:	f107 0314 	add.w	r3, r7, #20
 80077f6:	461a      	mov	r2, r3
 80077f8:	68b9      	ldr	r1, [r7, #8]
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f7ff ff55 	bl	80076aa <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8007800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007802:	7a1b      	ldrb	r3, [r3, #8]
 8007804:	085b      	lsrs	r3, r3, #1
 8007806:	b2db      	uxtb	r3, r3
 8007808:	b25b      	sxtb	r3, r3
 800780a:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 800780e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007810:	7a1b      	ldrb	r3, [r3, #8]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	b2db      	uxtb	r3, r3
 8007818:	461a      	mov	r2, r3
 800781a:	0092      	lsls	r2, r2, #2
 800781c:	4413      	add	r3, r2
 800781e:	b2db      	uxtb	r3, r3
 8007820:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 8007824:	e002      	b.n	800782c <readTemperature+0xae>
    default:
      return t;
 8007826:	8c3b      	ldrh	r3, [r7, #32]
 8007828:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800782a:	e008      	b.n	800783e <readTemperature+0xc0>
  }
  if (reSense) {
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f7ff ff29 	bl	800768c <owConvertTemperatureCmd>
  }
  return t;
 800783a:	8c3b      	ldrh	r3, [r7, #32]
 800783c:	84bb      	strh	r3, [r7, #36]	@ 0x24
}
 800783e:	2300      	movs	r3, #0
 8007840:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8007844:	f362 0307 	bfi	r3, r2, #0, #8
 8007848:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800784c:	f362 230f 	bfi	r3, r2, #8, #8
 8007850:	4618      	mov	r0, r3
 8007852:	3730      	adds	r7, #48	@ 0x30
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <get_ROMid>:
void owRecallE2Cmd(OneWire *ow, RomCode *rom) {
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}

int get_ROMid (void){
 8007858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800785a:	b089      	sub	sp, #36	@ 0x24
 800785c:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {
 800785e:	f7ff fd07 	bl	8007270 <owResetCmd>
 8007862:	4603      	mov	r3, r0
 8007864:	2bf0      	cmp	r3, #240	@ 0xf0
 8007866:	d079      	beq.n	800795c <get_ROMid+0x104>
		devices = owSearchCmd(&ow);
 8007868:	484e      	ldr	r0, [pc, #312]	@ (80079a4 <get_ROMid+0x14c>)
 800786a:	f7ff fecb 	bl	8007604 <owSearchCmd>
 800786e:	4603      	mov	r3, r0
 8007870:	b2da      	uxtb	r2, r3
 8007872:	4b4d      	ldr	r3, [pc, #308]	@ (80079a8 <get_ROMid+0x150>)
 8007874:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 8007876:	4b4c      	ldr	r3, [pc, #304]	@ (80079a8 <get_ROMid+0x150>)
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d113      	bne.n	80078a6 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 800787e:	4b4b      	ldr	r3, [pc, #300]	@ (80079ac <get_ROMid+0x154>)
 8007880:	4a4b      	ldr	r2, [pc, #300]	@ (80079b0 <get_ROMid+0x158>)
 8007882:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)
 8007884:	4b4b      	ldr	r3, [pc, #300]	@ (80079b4 <get_ROMid+0x15c>)
 8007886:	2200      	movs	r2, #0
 8007888:	601a      	str	r2, [r3, #0]
 800788a:	e005      	b.n	8007898 <get_ROMid+0x40>
					__asm__("nop");
 800788c:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)
 800788e:	4b49      	ldr	r3, [pc, #292]	@ (80079b4 <get_ROMid+0x15c>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3301      	adds	r3, #1
 8007894:	4a47      	ldr	r2, [pc, #284]	@ (80079b4 <get_ROMid+0x15c>)
 8007896:	6013      	str	r3, [r2, #0]
 8007898:	4b46      	ldr	r3, [pc, #280]	@ (80079b4 <get_ROMid+0x15c>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	4b43      	ldr	r3, [pc, #268]	@ (80079ac <get_ROMid+0x154>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d3f3      	bcc.n	800788c <get_ROMid+0x34>
				pDelay = 1000000;
 80078a4:	e7eb      	b.n	800787e <get_ROMid+0x26>
			}

		}
		i = 0;
 80078a6:	4b43      	ldr	r3, [pc, #268]	@ (80079b4 <get_ROMid+0x15c>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {
 80078ac:	e04f      	b.n	800794e <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 80078ae:	4b41      	ldr	r3, [pc, #260]	@ (80079b4 <get_ROMid+0x15c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	4a3b      	ldr	r2, [pc, #236]	@ (80079a4 <get_ROMid+0x14c>)
 80078b6:	4413      	add	r3, r2
 80078b8:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7ff fde6 	bl	800748c <owCRC8>
 80078c0:	4603      	mov	r3, r0
 80078c2:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	79db      	ldrb	r3, [r3, #7]
 80078c8:	78fa      	ldrb	r2, [r7, #3]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d101      	bne.n	80078d2 <get_ROMid+0x7a>
 80078ce:	4b3a      	ldr	r3, [pc, #232]	@ (80079b8 <get_ROMid+0x160>)
 80078d0:	e000      	b.n	80078d4 <get_ROMid+0x7c>
 80078d2:	4b3a      	ldr	r3, [pc, #232]	@ (80079bc <get_ROMid+0x164>)
 80078d4:	4a3a      	ldr	r2, [pc, #232]	@ (80079c0 <get_ROMid+0x168>)
 80078d6:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 80078d8:	4b36      	ldr	r3, [pc, #216]	@ (80079b4 <get_ROMid+0x15c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	461a      	mov	r2, r3
 80078de:	4b39      	ldr	r3, [pc, #228]	@ (80079c4 <get_ROMid+0x16c>)
 80078e0:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	461e      	mov	r6, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	799b      	ldrb	r3, [r3, #6]
 80078ec:	469c      	mov	ip, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	795b      	ldrb	r3, [r3, #5]
 80078f2:	461a      	mov	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	791b      	ldrb	r3, [r3, #4]
 80078f8:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80078fe:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8007904:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800790a:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8007910:	9305      	str	r3, [sp, #20]
 8007912:	9504      	str	r5, [sp, #16]
 8007914:	9403      	str	r4, [sp, #12]
 8007916:	9002      	str	r0, [sp, #8]
 8007918:	9101      	str	r1, [sp, #4]
 800791a:	9200      	str	r2, [sp, #0]
 800791c:	4663      	mov	r3, ip
 800791e:	4632      	mov	r2, r6
 8007920:	4929      	ldr	r1, [pc, #164]	@ (80079c8 <get_ROMid+0x170>)
 8007922:	482a      	ldr	r0, [pc, #168]	@ (80079cc <get_ROMid+0x174>)
 8007924:	f000 fdf2 	bl	800850c <siprintf>

			if (crc != r->crc) {
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	79db      	ldrb	r3, [r3, #7]
 800792c:	78fa      	ldrb	r2, [r7, #3]
 800792e:	429a      	cmp	r2, r3
 8007930:	d008      	beq.n	8007944 <get_ROMid+0xec>
				devInfo.device = i;
 8007932:	4b20      	ldr	r3, [pc, #128]	@ (80079b4 <get_ROMid+0x15c>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	4b22      	ldr	r3, [pc, #136]	@ (80079c4 <get_ROMid+0x16c>)
 800793a:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 800793c:	4924      	ldr	r1, [pc, #144]	@ (80079d0 <get_ROMid+0x178>)
 800793e:	4823      	ldr	r0, [pc, #140]	@ (80079cc <get_ROMid+0x174>)
 8007940:	f000 fde4 	bl	800850c <siprintf>
		for (; i < devices; i++) {
 8007944:	4b1b      	ldr	r3, [pc, #108]	@ (80079b4 <get_ROMid+0x15c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	3301      	adds	r3, #1
 800794a:	4a1a      	ldr	r2, [pc, #104]	@ (80079b4 <get_ROMid+0x15c>)
 800794c:	6013      	str	r3, [r2, #0]
 800794e:	4b16      	ldr	r3, [pc, #88]	@ (80079a8 <get_ROMid+0x150>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	461a      	mov	r2, r3
 8007954:	4b17      	ldr	r3, [pc, #92]	@ (80079b4 <get_ROMid+0x15c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	429a      	cmp	r2, r3
 800795a:	d8a8      	bhi.n	80078ae <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 800795c:	4b13      	ldr	r3, [pc, #76]	@ (80079ac <get_ROMid+0x154>)
 800795e:	4a14      	ldr	r2, [pc, #80]	@ (80079b0 <get_ROMid+0x158>)
 8007960:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 8007962:	4b14      	ldr	r3, [pc, #80]	@ (80079b4 <get_ROMid+0x15c>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]
 8007968:	e005      	b.n	8007976 <get_ROMid+0x11e>
		__asm__("nop");
 800796a:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 800796c:	4b11      	ldr	r3, [pc, #68]	@ (80079b4 <get_ROMid+0x15c>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3301      	adds	r3, #1
 8007972:	4a10      	ldr	r2, [pc, #64]	@ (80079b4 <get_ROMid+0x15c>)
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	4b0f      	ldr	r3, [pc, #60]	@ (80079b4 <get_ROMid+0x15c>)
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	4b0c      	ldr	r3, [pc, #48]	@ (80079ac <get_ROMid+0x154>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d3f3      	bcc.n	800796a <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 8007982:	4b0f      	ldr	r3, [pc, #60]	@ (80079c0 <get_ROMid+0x168>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	490c      	ldr	r1, [pc, #48]	@ (80079b8 <get_ROMid+0x160>)
 8007988:	4618      	mov	r0, r3
 800798a:	f7f8 fc41 	bl	8000210 <strcmp>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <get_ROMid+0x140>
 8007994:	2300      	movs	r3, #0
 8007996:	e001      	b.n	800799c <get_ROMid+0x144>
	else return -1;
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a4:	20005a10 	.word	0x20005a10
 80079a8:	20005a0c 	.word	0x20005a0c
 80079ac:	20003688 	.word	0x20003688
 80079b0:	000f4240 	.word	0x000f4240
 80079b4:	20005a24 	.word	0x20005a24
 80079b8:	0800a828 	.word	0x0800a828
 80079bc:	0800a830 	.word	0x0800a830
 80079c0:	20005a50 	.word	0x20005a50
 80079c4:	20005a2c 	.word	0x20005a2c
 80079c8:	0800a83c 	.word	0x0800a83c
 80079cc:	20005a30 	.word	0x20005a30
 80079d0:	0800a864 	.word	0x0800a864

080079d4 <get_Temperature>:

void get_Temperature (void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
	i=0;
 80079d8:	4b3a      	ldr	r3, [pc, #232]	@ (8007ac4 <get_Temperature+0xf0>)
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 80079de:	e067      	b.n	8007ab0 <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {
 80079e0:	4b38      	ldr	r3, [pc, #224]	@ (8007ac4 <get_Temperature+0xf0>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a38      	ldr	r2, [pc, #224]	@ (8007ac8 <get_Temperature+0xf4>)
 80079e6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80079ea:	2b28      	cmp	r3, #40	@ 0x28
 80079ec:	d006      	beq.n	80079fc <get_Temperature+0x28>
 80079ee:	2b28      	cmp	r3, #40	@ 0x28
 80079f0:	dc56      	bgt.n	8007aa0 <get_Temperature+0xcc>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d056      	beq.n	8007aa4 <get_Temperature+0xd0>
 80079f6:	2b10      	cmp	r3, #16
 80079f8:	d029      	beq.n	8007a4e <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:

			break;
 80079fa:	e051      	b.n	8007aa0 <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80079fc:	4b31      	ldr	r3, [pc, #196]	@ (8007ac4 <get_Temperature+0xf0>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	4a31      	ldr	r2, [pc, #196]	@ (8007ac8 <get_Temperature+0xf4>)
 8007a04:	4413      	add	r3, r2
 8007a06:	2201      	movs	r2, #1
 8007a08:	4619      	mov	r1, r3
 8007a0a:	482f      	ldr	r0, [pc, #188]	@ (8007ac8 <get_Temperature+0xf4>)
 8007a0c:	f7ff feb7 	bl	800777e <readTemperature>
 8007a10:	4603      	mov	r3, r0
 8007a12:	4a2e      	ldr	r2, [pc, #184]	@ (8007acc <get_Temperature+0xf8>)
 8007a14:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8007a16:	4b2d      	ldr	r3, [pc, #180]	@ (8007acc <get_Temperature+0xf8>)
 8007a18:	f993 3000 	ldrsb.w	r3, [r3]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	461a      	mov	r2, r3
 8007a28:	4b28      	ldr	r3, [pc, #160]	@ (8007acc <get_Temperature+0xf8>)
 8007a2a:	785b      	ldrb	r3, [r3, #1]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	ee07 3a90 	vmov	s15, r3
 8007a32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a36:	4b23      	ldr	r3, [pc, #140]	@ (8007ac4 <get_Temperature+0xf0>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8007a3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a42:	4a23      	ldr	r2, [pc, #140]	@ (8007ad0 <get_Temperature+0xfc>)
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	edc3 7a00 	vstr	s15, [r3]
			break;
 8007a4c:	e02b      	b.n	8007aa6 <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8007a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac4 <get_Temperature+0xf0>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac8 <get_Temperature+0xf4>)
 8007a56:	4413      	add	r3, r2
 8007a58:	2201      	movs	r2, #1
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	481a      	ldr	r0, [pc, #104]	@ (8007ac8 <get_Temperature+0xf4>)
 8007a5e:	f7ff fe8e 	bl	800777e <readTemperature>
 8007a62:	4603      	mov	r3, r0
 8007a64:	4a19      	ldr	r2, [pc, #100]	@ (8007acc <get_Temperature+0xf8>)
 8007a66:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8007a68:	4b18      	ldr	r3, [pc, #96]	@ (8007acc <get_Temperature+0xf8>)
 8007a6a:	f993 3000 	ldrsb.w	r3, [r3]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4b14      	ldr	r3, [pc, #80]	@ (8007acc <get_Temperature+0xf8>)
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	4413      	add	r3, r2
 8007a80:	ee07 3a90 	vmov	s15, r3
 8007a84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a88:	4b0e      	ldr	r3, [pc, #56]	@ (8007ac4 <get_Temperature+0xf0>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8007a90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a94:	4a0e      	ldr	r2, [pc, #56]	@ (8007ad0 <get_Temperature+0xfc>)
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	edc3 7a00 	vstr	s15, [r3]
			break;
 8007a9e:	e002      	b.n	8007aa6 <get_Temperature+0xd2>
			break;
 8007aa0:	bf00      	nop
 8007aa2:	e000      	b.n	8007aa6 <get_Temperature+0xd2>
			break;
 8007aa4:	bf00      	nop
	for (; i < devices; i++) {
 8007aa6:	4b07      	ldr	r3, [pc, #28]	@ (8007ac4 <get_Temperature+0xf0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	4a05      	ldr	r2, [pc, #20]	@ (8007ac4 <get_Temperature+0xf0>)
 8007aae:	6013      	str	r3, [r2, #0]
 8007ab0:	4b08      	ldr	r3, [pc, #32]	@ (8007ad4 <get_Temperature+0x100>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4b03      	ldr	r3, [pc, #12]	@ (8007ac4 <get_Temperature+0xf0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d890      	bhi.n	80079e0 <get_Temperature+0xc>
		}
	}

}
 8007abe:	bf00      	nop
 8007ac0:	bf00      	nop
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	20005a24 	.word	0x20005a24
 8007ac8:	20005a10 	.word	0x20005a10
 8007acc:	20005a28 	.word	0x20005a28
 8007ad0:	20005a08 	.word	0x20005a08
 8007ad4:	20005a0c 	.word	0x20005a0c

08007ad8 <__cvt>:
 8007ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007adc:	ec57 6b10 	vmov	r6, r7, d0
 8007ae0:	2f00      	cmp	r7, #0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	bfbb      	ittet	lt
 8007aea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007aee:	461f      	movlt	r7, r3
 8007af0:	2300      	movge	r3, #0
 8007af2:	232d      	movlt	r3, #45	@ 0x2d
 8007af4:	700b      	strb	r3, [r1, #0]
 8007af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007af8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007afc:	4691      	mov	r9, r2
 8007afe:	f023 0820 	bic.w	r8, r3, #32
 8007b02:	bfbc      	itt	lt
 8007b04:	4632      	movlt	r2, r6
 8007b06:	4616      	movlt	r6, r2
 8007b08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b0c:	d005      	beq.n	8007b1a <__cvt+0x42>
 8007b0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007b12:	d100      	bne.n	8007b16 <__cvt+0x3e>
 8007b14:	3401      	adds	r4, #1
 8007b16:	2102      	movs	r1, #2
 8007b18:	e000      	b.n	8007b1c <__cvt+0x44>
 8007b1a:	2103      	movs	r1, #3
 8007b1c:	ab03      	add	r3, sp, #12
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	ab02      	add	r3, sp, #8
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	ec47 6b10 	vmov	d0, r6, r7
 8007b28:	4653      	mov	r3, sl
 8007b2a:	4622      	mov	r2, r4
 8007b2c:	f000 fe5c 	bl	80087e8 <_dtoa_r>
 8007b30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007b34:	4605      	mov	r5, r0
 8007b36:	d119      	bne.n	8007b6c <__cvt+0x94>
 8007b38:	f019 0f01 	tst.w	r9, #1
 8007b3c:	d00e      	beq.n	8007b5c <__cvt+0x84>
 8007b3e:	eb00 0904 	add.w	r9, r0, r4
 8007b42:	2200      	movs	r2, #0
 8007b44:	2300      	movs	r3, #0
 8007b46:	4630      	mov	r0, r6
 8007b48:	4639      	mov	r1, r7
 8007b4a:	f7f8 ffed 	bl	8000b28 <__aeabi_dcmpeq>
 8007b4e:	b108      	cbz	r0, 8007b54 <__cvt+0x7c>
 8007b50:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b54:	2230      	movs	r2, #48	@ 0x30
 8007b56:	9b03      	ldr	r3, [sp, #12]
 8007b58:	454b      	cmp	r3, r9
 8007b5a:	d31e      	bcc.n	8007b9a <__cvt+0xc2>
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b60:	1b5b      	subs	r3, r3, r5
 8007b62:	4628      	mov	r0, r5
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	b004      	add	sp, #16
 8007b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b70:	eb00 0904 	add.w	r9, r0, r4
 8007b74:	d1e5      	bne.n	8007b42 <__cvt+0x6a>
 8007b76:	7803      	ldrb	r3, [r0, #0]
 8007b78:	2b30      	cmp	r3, #48	@ 0x30
 8007b7a:	d10a      	bne.n	8007b92 <__cvt+0xba>
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2300      	movs	r3, #0
 8007b80:	4630      	mov	r0, r6
 8007b82:	4639      	mov	r1, r7
 8007b84:	f7f8 ffd0 	bl	8000b28 <__aeabi_dcmpeq>
 8007b88:	b918      	cbnz	r0, 8007b92 <__cvt+0xba>
 8007b8a:	f1c4 0401 	rsb	r4, r4, #1
 8007b8e:	f8ca 4000 	str.w	r4, [sl]
 8007b92:	f8da 3000 	ldr.w	r3, [sl]
 8007b96:	4499      	add	r9, r3
 8007b98:	e7d3      	b.n	8007b42 <__cvt+0x6a>
 8007b9a:	1c59      	adds	r1, r3, #1
 8007b9c:	9103      	str	r1, [sp, #12]
 8007b9e:	701a      	strb	r2, [r3, #0]
 8007ba0:	e7d9      	b.n	8007b56 <__cvt+0x7e>

08007ba2 <__exponent>:
 8007ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ba4:	2900      	cmp	r1, #0
 8007ba6:	bfba      	itte	lt
 8007ba8:	4249      	neglt	r1, r1
 8007baa:	232d      	movlt	r3, #45	@ 0x2d
 8007bac:	232b      	movge	r3, #43	@ 0x2b
 8007bae:	2909      	cmp	r1, #9
 8007bb0:	7002      	strb	r2, [r0, #0]
 8007bb2:	7043      	strb	r3, [r0, #1]
 8007bb4:	dd29      	ble.n	8007c0a <__exponent+0x68>
 8007bb6:	f10d 0307 	add.w	r3, sp, #7
 8007bba:	461d      	mov	r5, r3
 8007bbc:	270a      	movs	r7, #10
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	fbb1 f6f7 	udiv	r6, r1, r7
 8007bc4:	fb07 1416 	mls	r4, r7, r6, r1
 8007bc8:	3430      	adds	r4, #48	@ 0x30
 8007bca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007bce:	460c      	mov	r4, r1
 8007bd0:	2c63      	cmp	r4, #99	@ 0x63
 8007bd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	dcf1      	bgt.n	8007bbe <__exponent+0x1c>
 8007bda:	3130      	adds	r1, #48	@ 0x30
 8007bdc:	1e94      	subs	r4, r2, #2
 8007bde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007be2:	1c41      	adds	r1, r0, #1
 8007be4:	4623      	mov	r3, r4
 8007be6:	42ab      	cmp	r3, r5
 8007be8:	d30a      	bcc.n	8007c00 <__exponent+0x5e>
 8007bea:	f10d 0309 	add.w	r3, sp, #9
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	42ac      	cmp	r4, r5
 8007bf2:	bf88      	it	hi
 8007bf4:	2300      	movhi	r3, #0
 8007bf6:	3302      	adds	r3, #2
 8007bf8:	4403      	add	r3, r0
 8007bfa:	1a18      	subs	r0, r3, r0
 8007bfc:	b003      	add	sp, #12
 8007bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c00:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007c04:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007c08:	e7ed      	b.n	8007be6 <__exponent+0x44>
 8007c0a:	2330      	movs	r3, #48	@ 0x30
 8007c0c:	3130      	adds	r1, #48	@ 0x30
 8007c0e:	7083      	strb	r3, [r0, #2]
 8007c10:	70c1      	strb	r1, [r0, #3]
 8007c12:	1d03      	adds	r3, r0, #4
 8007c14:	e7f1      	b.n	8007bfa <__exponent+0x58>
	...

08007c18 <_printf_float>:
 8007c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c1c:	b08d      	sub	sp, #52	@ 0x34
 8007c1e:	460c      	mov	r4, r1
 8007c20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007c24:	4616      	mov	r6, r2
 8007c26:	461f      	mov	r7, r3
 8007c28:	4605      	mov	r5, r0
 8007c2a:	f000 fcdb 	bl	80085e4 <_localeconv_r>
 8007c2e:	6803      	ldr	r3, [r0, #0]
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7f8 fb4c 	bl	80002d0 <strlen>
 8007c38:	2300      	movs	r3, #0
 8007c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c40:	9005      	str	r0, [sp, #20]
 8007c42:	3307      	adds	r3, #7
 8007c44:	f023 0307 	bic.w	r3, r3, #7
 8007c48:	f103 0208 	add.w	r2, r3, #8
 8007c4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007c50:	f8d4 b000 	ldr.w	fp, [r4]
 8007c54:	f8c8 2000 	str.w	r2, [r8]
 8007c58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007c5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007c60:	9307      	str	r3, [sp, #28]
 8007c62:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c6e:	4b9c      	ldr	r3, [pc, #624]	@ (8007ee0 <_printf_float+0x2c8>)
 8007c70:	f04f 32ff 	mov.w	r2, #4294967295
 8007c74:	f7f8 ff8a 	bl	8000b8c <__aeabi_dcmpun>
 8007c78:	bb70      	cbnz	r0, 8007cd8 <_printf_float+0xc0>
 8007c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c7e:	4b98      	ldr	r3, [pc, #608]	@ (8007ee0 <_printf_float+0x2c8>)
 8007c80:	f04f 32ff 	mov.w	r2, #4294967295
 8007c84:	f7f8 ff64 	bl	8000b50 <__aeabi_dcmple>
 8007c88:	bb30      	cbnz	r0, 8007cd8 <_printf_float+0xc0>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4640      	mov	r0, r8
 8007c90:	4649      	mov	r1, r9
 8007c92:	f7f8 ff53 	bl	8000b3c <__aeabi_dcmplt>
 8007c96:	b110      	cbz	r0, 8007c9e <_printf_float+0x86>
 8007c98:	232d      	movs	r3, #45	@ 0x2d
 8007c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c9e:	4a91      	ldr	r2, [pc, #580]	@ (8007ee4 <_printf_float+0x2cc>)
 8007ca0:	4b91      	ldr	r3, [pc, #580]	@ (8007ee8 <_printf_float+0x2d0>)
 8007ca2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007ca6:	bf94      	ite	ls
 8007ca8:	4690      	movls	r8, r2
 8007caa:	4698      	movhi	r8, r3
 8007cac:	2303      	movs	r3, #3
 8007cae:	6123      	str	r3, [r4, #16]
 8007cb0:	f02b 0304 	bic.w	r3, fp, #4
 8007cb4:	6023      	str	r3, [r4, #0]
 8007cb6:	f04f 0900 	mov.w	r9, #0
 8007cba:	9700      	str	r7, [sp, #0]
 8007cbc:	4633      	mov	r3, r6
 8007cbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	f000 f9d2 	bl	800806c <_printf_common>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	f040 808d 	bne.w	8007de8 <_printf_float+0x1d0>
 8007cce:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd2:	b00d      	add	sp, #52	@ 0x34
 8007cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd8:	4642      	mov	r2, r8
 8007cda:	464b      	mov	r3, r9
 8007cdc:	4640      	mov	r0, r8
 8007cde:	4649      	mov	r1, r9
 8007ce0:	f7f8 ff54 	bl	8000b8c <__aeabi_dcmpun>
 8007ce4:	b140      	cbz	r0, 8007cf8 <_printf_float+0xe0>
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	bfbc      	itt	lt
 8007cec:	232d      	movlt	r3, #45	@ 0x2d
 8007cee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8007eec <_printf_float+0x2d4>)
 8007cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ef0 <_printf_float+0x2d8>)
 8007cf6:	e7d4      	b.n	8007ca2 <_printf_float+0x8a>
 8007cf8:	6863      	ldr	r3, [r4, #4]
 8007cfa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007cfe:	9206      	str	r2, [sp, #24]
 8007d00:	1c5a      	adds	r2, r3, #1
 8007d02:	d13b      	bne.n	8007d7c <_printf_float+0x164>
 8007d04:	2306      	movs	r3, #6
 8007d06:	6063      	str	r3, [r4, #4]
 8007d08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	6022      	str	r2, [r4, #0]
 8007d10:	9303      	str	r3, [sp, #12]
 8007d12:	ab0a      	add	r3, sp, #40	@ 0x28
 8007d14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007d18:	ab09      	add	r3, sp, #36	@ 0x24
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	6861      	ldr	r1, [r4, #4]
 8007d1e:	ec49 8b10 	vmov	d0, r8, r9
 8007d22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007d26:	4628      	mov	r0, r5
 8007d28:	f7ff fed6 	bl	8007ad8 <__cvt>
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d30:	2b47      	cmp	r3, #71	@ 0x47
 8007d32:	4680      	mov	r8, r0
 8007d34:	d129      	bne.n	8007d8a <_printf_float+0x172>
 8007d36:	1cc8      	adds	r0, r1, #3
 8007d38:	db02      	blt.n	8007d40 <_printf_float+0x128>
 8007d3a:	6863      	ldr	r3, [r4, #4]
 8007d3c:	4299      	cmp	r1, r3
 8007d3e:	dd41      	ble.n	8007dc4 <_printf_float+0x1ac>
 8007d40:	f1aa 0a02 	sub.w	sl, sl, #2
 8007d44:	fa5f fa8a 	uxtb.w	sl, sl
 8007d48:	3901      	subs	r1, #1
 8007d4a:	4652      	mov	r2, sl
 8007d4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007d50:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d52:	f7ff ff26 	bl	8007ba2 <__exponent>
 8007d56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d58:	1813      	adds	r3, r2, r0
 8007d5a:	2a01      	cmp	r2, #1
 8007d5c:	4681      	mov	r9, r0
 8007d5e:	6123      	str	r3, [r4, #16]
 8007d60:	dc02      	bgt.n	8007d68 <_printf_float+0x150>
 8007d62:	6822      	ldr	r2, [r4, #0]
 8007d64:	07d2      	lsls	r2, r2, #31
 8007d66:	d501      	bpl.n	8007d6c <_printf_float+0x154>
 8007d68:	3301      	adds	r3, #1
 8007d6a:	6123      	str	r3, [r4, #16]
 8007d6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0a2      	beq.n	8007cba <_printf_float+0xa2>
 8007d74:	232d      	movs	r3, #45	@ 0x2d
 8007d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d7a:	e79e      	b.n	8007cba <_printf_float+0xa2>
 8007d7c:	9a06      	ldr	r2, [sp, #24]
 8007d7e:	2a47      	cmp	r2, #71	@ 0x47
 8007d80:	d1c2      	bne.n	8007d08 <_printf_float+0xf0>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d1c0      	bne.n	8007d08 <_printf_float+0xf0>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e7bd      	b.n	8007d06 <_printf_float+0xee>
 8007d8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d8e:	d9db      	bls.n	8007d48 <_printf_float+0x130>
 8007d90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007d94:	d118      	bne.n	8007dc8 <_printf_float+0x1b0>
 8007d96:	2900      	cmp	r1, #0
 8007d98:	6863      	ldr	r3, [r4, #4]
 8007d9a:	dd0b      	ble.n	8007db4 <_printf_float+0x19c>
 8007d9c:	6121      	str	r1, [r4, #16]
 8007d9e:	b913      	cbnz	r3, 8007da6 <_printf_float+0x18e>
 8007da0:	6822      	ldr	r2, [r4, #0]
 8007da2:	07d0      	lsls	r0, r2, #31
 8007da4:	d502      	bpl.n	8007dac <_printf_float+0x194>
 8007da6:	3301      	adds	r3, #1
 8007da8:	440b      	add	r3, r1
 8007daa:	6123      	str	r3, [r4, #16]
 8007dac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007dae:	f04f 0900 	mov.w	r9, #0
 8007db2:	e7db      	b.n	8007d6c <_printf_float+0x154>
 8007db4:	b913      	cbnz	r3, 8007dbc <_printf_float+0x1a4>
 8007db6:	6822      	ldr	r2, [r4, #0]
 8007db8:	07d2      	lsls	r2, r2, #31
 8007dba:	d501      	bpl.n	8007dc0 <_printf_float+0x1a8>
 8007dbc:	3302      	adds	r3, #2
 8007dbe:	e7f4      	b.n	8007daa <_printf_float+0x192>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	e7f2      	b.n	8007daa <_printf_float+0x192>
 8007dc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dca:	4299      	cmp	r1, r3
 8007dcc:	db05      	blt.n	8007dda <_printf_float+0x1c2>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	6121      	str	r1, [r4, #16]
 8007dd2:	07d8      	lsls	r0, r3, #31
 8007dd4:	d5ea      	bpl.n	8007dac <_printf_float+0x194>
 8007dd6:	1c4b      	adds	r3, r1, #1
 8007dd8:	e7e7      	b.n	8007daa <_printf_float+0x192>
 8007dda:	2900      	cmp	r1, #0
 8007ddc:	bfd4      	ite	le
 8007dde:	f1c1 0202 	rsble	r2, r1, #2
 8007de2:	2201      	movgt	r2, #1
 8007de4:	4413      	add	r3, r2
 8007de6:	e7e0      	b.n	8007daa <_printf_float+0x192>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	055a      	lsls	r2, r3, #21
 8007dec:	d407      	bmi.n	8007dfe <_printf_float+0x1e6>
 8007dee:	6923      	ldr	r3, [r4, #16]
 8007df0:	4642      	mov	r2, r8
 8007df2:	4631      	mov	r1, r6
 8007df4:	4628      	mov	r0, r5
 8007df6:	47b8      	blx	r7
 8007df8:	3001      	adds	r0, #1
 8007dfa:	d12b      	bne.n	8007e54 <_printf_float+0x23c>
 8007dfc:	e767      	b.n	8007cce <_printf_float+0xb6>
 8007dfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e02:	f240 80dd 	bls.w	8007fc0 <_printf_float+0x3a8>
 8007e06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	f7f8 fe8b 	bl	8000b28 <__aeabi_dcmpeq>
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d033      	beq.n	8007e7e <_printf_float+0x266>
 8007e16:	4a37      	ldr	r2, [pc, #220]	@ (8007ef4 <_printf_float+0x2dc>)
 8007e18:	2301      	movs	r3, #1
 8007e1a:	4631      	mov	r1, r6
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	47b8      	blx	r7
 8007e20:	3001      	adds	r0, #1
 8007e22:	f43f af54 	beq.w	8007cce <_printf_float+0xb6>
 8007e26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007e2a:	4543      	cmp	r3, r8
 8007e2c:	db02      	blt.n	8007e34 <_printf_float+0x21c>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	07d8      	lsls	r0, r3, #31
 8007e32:	d50f      	bpl.n	8007e54 <_printf_float+0x23c>
 8007e34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e38:	4631      	mov	r1, r6
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	47b8      	blx	r7
 8007e3e:	3001      	adds	r0, #1
 8007e40:	f43f af45 	beq.w	8007cce <_printf_float+0xb6>
 8007e44:	f04f 0900 	mov.w	r9, #0
 8007e48:	f108 38ff 	add.w	r8, r8, #4294967295
 8007e4c:	f104 0a1a 	add.w	sl, r4, #26
 8007e50:	45c8      	cmp	r8, r9
 8007e52:	dc09      	bgt.n	8007e68 <_printf_float+0x250>
 8007e54:	6823      	ldr	r3, [r4, #0]
 8007e56:	079b      	lsls	r3, r3, #30
 8007e58:	f100 8103 	bmi.w	8008062 <_printf_float+0x44a>
 8007e5c:	68e0      	ldr	r0, [r4, #12]
 8007e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e60:	4298      	cmp	r0, r3
 8007e62:	bfb8      	it	lt
 8007e64:	4618      	movlt	r0, r3
 8007e66:	e734      	b.n	8007cd2 <_printf_float+0xba>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	4652      	mov	r2, sl
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	f43f af2b 	beq.w	8007cce <_printf_float+0xb6>
 8007e78:	f109 0901 	add.w	r9, r9, #1
 8007e7c:	e7e8      	b.n	8007e50 <_printf_float+0x238>
 8007e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	dc39      	bgt.n	8007ef8 <_printf_float+0x2e0>
 8007e84:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef4 <_printf_float+0x2dc>)
 8007e86:	2301      	movs	r3, #1
 8007e88:	4631      	mov	r1, r6
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	47b8      	blx	r7
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f43f af1d 	beq.w	8007cce <_printf_float+0xb6>
 8007e94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007e98:	ea59 0303 	orrs.w	r3, r9, r3
 8007e9c:	d102      	bne.n	8007ea4 <_printf_float+0x28c>
 8007e9e:	6823      	ldr	r3, [r4, #0]
 8007ea0:	07d9      	lsls	r1, r3, #31
 8007ea2:	d5d7      	bpl.n	8007e54 <_printf_float+0x23c>
 8007ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4628      	mov	r0, r5
 8007eac:	47b8      	blx	r7
 8007eae:	3001      	adds	r0, #1
 8007eb0:	f43f af0d 	beq.w	8007cce <_printf_float+0xb6>
 8007eb4:	f04f 0a00 	mov.w	sl, #0
 8007eb8:	f104 0b1a 	add.w	fp, r4, #26
 8007ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ebe:	425b      	negs	r3, r3
 8007ec0:	4553      	cmp	r3, sl
 8007ec2:	dc01      	bgt.n	8007ec8 <_printf_float+0x2b0>
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	e793      	b.n	8007df0 <_printf_float+0x1d8>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	465a      	mov	r2, fp
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b8      	blx	r7
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	f43f aefb 	beq.w	8007cce <_printf_float+0xb6>
 8007ed8:	f10a 0a01 	add.w	sl, sl, #1
 8007edc:	e7ee      	b.n	8007ebc <_printf_float+0x2a4>
 8007ede:	bf00      	nop
 8007ee0:	7fefffff 	.word	0x7fefffff
 8007ee4:	0800f46c 	.word	0x0800f46c
 8007ee8:	0800f470 	.word	0x0800f470
 8007eec:	0800f474 	.word	0x0800f474
 8007ef0:	0800f478 	.word	0x0800f478
 8007ef4:	0800f47c 	.word	0x0800f47c
 8007ef8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007efa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007efe:	4553      	cmp	r3, sl
 8007f00:	bfa8      	it	ge
 8007f02:	4653      	movge	r3, sl
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	4699      	mov	r9, r3
 8007f08:	dc36      	bgt.n	8007f78 <_printf_float+0x360>
 8007f0a:	f04f 0b00 	mov.w	fp, #0
 8007f0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f12:	f104 021a 	add.w	r2, r4, #26
 8007f16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f18:	9306      	str	r3, [sp, #24]
 8007f1a:	eba3 0309 	sub.w	r3, r3, r9
 8007f1e:	455b      	cmp	r3, fp
 8007f20:	dc31      	bgt.n	8007f86 <_printf_float+0x36e>
 8007f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f24:	459a      	cmp	sl, r3
 8007f26:	dc3a      	bgt.n	8007f9e <_printf_float+0x386>
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	07da      	lsls	r2, r3, #31
 8007f2c:	d437      	bmi.n	8007f9e <_printf_float+0x386>
 8007f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f30:	ebaa 0903 	sub.w	r9, sl, r3
 8007f34:	9b06      	ldr	r3, [sp, #24]
 8007f36:	ebaa 0303 	sub.w	r3, sl, r3
 8007f3a:	4599      	cmp	r9, r3
 8007f3c:	bfa8      	it	ge
 8007f3e:	4699      	movge	r9, r3
 8007f40:	f1b9 0f00 	cmp.w	r9, #0
 8007f44:	dc33      	bgt.n	8007fae <_printf_float+0x396>
 8007f46:	f04f 0800 	mov.w	r8, #0
 8007f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f4e:	f104 0b1a 	add.w	fp, r4, #26
 8007f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f54:	ebaa 0303 	sub.w	r3, sl, r3
 8007f58:	eba3 0309 	sub.w	r3, r3, r9
 8007f5c:	4543      	cmp	r3, r8
 8007f5e:	f77f af79 	ble.w	8007e54 <_printf_float+0x23c>
 8007f62:	2301      	movs	r3, #1
 8007f64:	465a      	mov	r2, fp
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f43f aeae 	beq.w	8007cce <_printf_float+0xb6>
 8007f72:	f108 0801 	add.w	r8, r8, #1
 8007f76:	e7ec      	b.n	8007f52 <_printf_float+0x33a>
 8007f78:	4642      	mov	r2, r8
 8007f7a:	4631      	mov	r1, r6
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	47b8      	blx	r7
 8007f80:	3001      	adds	r0, #1
 8007f82:	d1c2      	bne.n	8007f0a <_printf_float+0x2f2>
 8007f84:	e6a3      	b.n	8007cce <_printf_float+0xb6>
 8007f86:	2301      	movs	r3, #1
 8007f88:	4631      	mov	r1, r6
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	9206      	str	r2, [sp, #24]
 8007f8e:	47b8      	blx	r7
 8007f90:	3001      	adds	r0, #1
 8007f92:	f43f ae9c 	beq.w	8007cce <_printf_float+0xb6>
 8007f96:	9a06      	ldr	r2, [sp, #24]
 8007f98:	f10b 0b01 	add.w	fp, fp, #1
 8007f9c:	e7bb      	b.n	8007f16 <_printf_float+0x2fe>
 8007f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fa2:	4631      	mov	r1, r6
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	47b8      	blx	r7
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d1c0      	bne.n	8007f2e <_printf_float+0x316>
 8007fac:	e68f      	b.n	8007cce <_printf_float+0xb6>
 8007fae:	9a06      	ldr	r2, [sp, #24]
 8007fb0:	464b      	mov	r3, r9
 8007fb2:	4442      	add	r2, r8
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	47b8      	blx	r7
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d1c3      	bne.n	8007f46 <_printf_float+0x32e>
 8007fbe:	e686      	b.n	8007cce <_printf_float+0xb6>
 8007fc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007fc4:	f1ba 0f01 	cmp.w	sl, #1
 8007fc8:	dc01      	bgt.n	8007fce <_printf_float+0x3b6>
 8007fca:	07db      	lsls	r3, r3, #31
 8007fcc:	d536      	bpl.n	800803c <_printf_float+0x424>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4642      	mov	r2, r8
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	47b8      	blx	r7
 8007fd8:	3001      	adds	r0, #1
 8007fda:	f43f ae78 	beq.w	8007cce <_printf_float+0xb6>
 8007fde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fe2:	4631      	mov	r1, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	47b8      	blx	r7
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f ae70 	beq.w	8007cce <_printf_float+0xb6>
 8007fee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ffa:	f7f8 fd95 	bl	8000b28 <__aeabi_dcmpeq>
 8007ffe:	b9c0      	cbnz	r0, 8008032 <_printf_float+0x41a>
 8008000:	4653      	mov	r3, sl
 8008002:	f108 0201 	add.w	r2, r8, #1
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	d10c      	bne.n	800802a <_printf_float+0x412>
 8008010:	e65d      	b.n	8007cce <_printf_float+0xb6>
 8008012:	2301      	movs	r3, #1
 8008014:	465a      	mov	r2, fp
 8008016:	4631      	mov	r1, r6
 8008018:	4628      	mov	r0, r5
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	f43f ae56 	beq.w	8007cce <_printf_float+0xb6>
 8008022:	f108 0801 	add.w	r8, r8, #1
 8008026:	45d0      	cmp	r8, sl
 8008028:	dbf3      	blt.n	8008012 <_printf_float+0x3fa>
 800802a:	464b      	mov	r3, r9
 800802c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008030:	e6df      	b.n	8007df2 <_printf_float+0x1da>
 8008032:	f04f 0800 	mov.w	r8, #0
 8008036:	f104 0b1a 	add.w	fp, r4, #26
 800803a:	e7f4      	b.n	8008026 <_printf_float+0x40e>
 800803c:	2301      	movs	r3, #1
 800803e:	4642      	mov	r2, r8
 8008040:	e7e1      	b.n	8008006 <_printf_float+0x3ee>
 8008042:	2301      	movs	r3, #1
 8008044:	464a      	mov	r2, r9
 8008046:	4631      	mov	r1, r6
 8008048:	4628      	mov	r0, r5
 800804a:	47b8      	blx	r7
 800804c:	3001      	adds	r0, #1
 800804e:	f43f ae3e 	beq.w	8007cce <_printf_float+0xb6>
 8008052:	f108 0801 	add.w	r8, r8, #1
 8008056:	68e3      	ldr	r3, [r4, #12]
 8008058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800805a:	1a5b      	subs	r3, r3, r1
 800805c:	4543      	cmp	r3, r8
 800805e:	dcf0      	bgt.n	8008042 <_printf_float+0x42a>
 8008060:	e6fc      	b.n	8007e5c <_printf_float+0x244>
 8008062:	f04f 0800 	mov.w	r8, #0
 8008066:	f104 0919 	add.w	r9, r4, #25
 800806a:	e7f4      	b.n	8008056 <_printf_float+0x43e>

0800806c <_printf_common>:
 800806c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008070:	4616      	mov	r6, r2
 8008072:	4698      	mov	r8, r3
 8008074:	688a      	ldr	r2, [r1, #8]
 8008076:	690b      	ldr	r3, [r1, #16]
 8008078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800807c:	4293      	cmp	r3, r2
 800807e:	bfb8      	it	lt
 8008080:	4613      	movlt	r3, r2
 8008082:	6033      	str	r3, [r6, #0]
 8008084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008088:	4607      	mov	r7, r0
 800808a:	460c      	mov	r4, r1
 800808c:	b10a      	cbz	r2, 8008092 <_printf_common+0x26>
 800808e:	3301      	adds	r3, #1
 8008090:	6033      	str	r3, [r6, #0]
 8008092:	6823      	ldr	r3, [r4, #0]
 8008094:	0699      	lsls	r1, r3, #26
 8008096:	bf42      	ittt	mi
 8008098:	6833      	ldrmi	r3, [r6, #0]
 800809a:	3302      	addmi	r3, #2
 800809c:	6033      	strmi	r3, [r6, #0]
 800809e:	6825      	ldr	r5, [r4, #0]
 80080a0:	f015 0506 	ands.w	r5, r5, #6
 80080a4:	d106      	bne.n	80080b4 <_printf_common+0x48>
 80080a6:	f104 0a19 	add.w	sl, r4, #25
 80080aa:	68e3      	ldr	r3, [r4, #12]
 80080ac:	6832      	ldr	r2, [r6, #0]
 80080ae:	1a9b      	subs	r3, r3, r2
 80080b0:	42ab      	cmp	r3, r5
 80080b2:	dc26      	bgt.n	8008102 <_printf_common+0x96>
 80080b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80080b8:	6822      	ldr	r2, [r4, #0]
 80080ba:	3b00      	subs	r3, #0
 80080bc:	bf18      	it	ne
 80080be:	2301      	movne	r3, #1
 80080c0:	0692      	lsls	r2, r2, #26
 80080c2:	d42b      	bmi.n	800811c <_printf_common+0xb0>
 80080c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80080c8:	4641      	mov	r1, r8
 80080ca:	4638      	mov	r0, r7
 80080cc:	47c8      	blx	r9
 80080ce:	3001      	adds	r0, #1
 80080d0:	d01e      	beq.n	8008110 <_printf_common+0xa4>
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	6922      	ldr	r2, [r4, #16]
 80080d6:	f003 0306 	and.w	r3, r3, #6
 80080da:	2b04      	cmp	r3, #4
 80080dc:	bf02      	ittt	eq
 80080de:	68e5      	ldreq	r5, [r4, #12]
 80080e0:	6833      	ldreq	r3, [r6, #0]
 80080e2:	1aed      	subeq	r5, r5, r3
 80080e4:	68a3      	ldr	r3, [r4, #8]
 80080e6:	bf0c      	ite	eq
 80080e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080ec:	2500      	movne	r5, #0
 80080ee:	4293      	cmp	r3, r2
 80080f0:	bfc4      	itt	gt
 80080f2:	1a9b      	subgt	r3, r3, r2
 80080f4:	18ed      	addgt	r5, r5, r3
 80080f6:	2600      	movs	r6, #0
 80080f8:	341a      	adds	r4, #26
 80080fa:	42b5      	cmp	r5, r6
 80080fc:	d11a      	bne.n	8008134 <_printf_common+0xc8>
 80080fe:	2000      	movs	r0, #0
 8008100:	e008      	b.n	8008114 <_printf_common+0xa8>
 8008102:	2301      	movs	r3, #1
 8008104:	4652      	mov	r2, sl
 8008106:	4641      	mov	r1, r8
 8008108:	4638      	mov	r0, r7
 800810a:	47c8      	blx	r9
 800810c:	3001      	adds	r0, #1
 800810e:	d103      	bne.n	8008118 <_printf_common+0xac>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008118:	3501      	adds	r5, #1
 800811a:	e7c6      	b.n	80080aa <_printf_common+0x3e>
 800811c:	18e1      	adds	r1, r4, r3
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	2030      	movs	r0, #48	@ 0x30
 8008122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008126:	4422      	add	r2, r4
 8008128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800812c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008130:	3302      	adds	r3, #2
 8008132:	e7c7      	b.n	80080c4 <_printf_common+0x58>
 8008134:	2301      	movs	r3, #1
 8008136:	4622      	mov	r2, r4
 8008138:	4641      	mov	r1, r8
 800813a:	4638      	mov	r0, r7
 800813c:	47c8      	blx	r9
 800813e:	3001      	adds	r0, #1
 8008140:	d0e6      	beq.n	8008110 <_printf_common+0xa4>
 8008142:	3601      	adds	r6, #1
 8008144:	e7d9      	b.n	80080fa <_printf_common+0x8e>
	...

08008148 <_printf_i>:
 8008148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800814c:	7e0f      	ldrb	r7, [r1, #24]
 800814e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008150:	2f78      	cmp	r7, #120	@ 0x78
 8008152:	4691      	mov	r9, r2
 8008154:	4680      	mov	r8, r0
 8008156:	460c      	mov	r4, r1
 8008158:	469a      	mov	sl, r3
 800815a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800815e:	d807      	bhi.n	8008170 <_printf_i+0x28>
 8008160:	2f62      	cmp	r7, #98	@ 0x62
 8008162:	d80a      	bhi.n	800817a <_printf_i+0x32>
 8008164:	2f00      	cmp	r7, #0
 8008166:	f000 80d2 	beq.w	800830e <_printf_i+0x1c6>
 800816a:	2f58      	cmp	r7, #88	@ 0x58
 800816c:	f000 80b9 	beq.w	80082e2 <_printf_i+0x19a>
 8008170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008178:	e03a      	b.n	80081f0 <_printf_i+0xa8>
 800817a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800817e:	2b15      	cmp	r3, #21
 8008180:	d8f6      	bhi.n	8008170 <_printf_i+0x28>
 8008182:	a101      	add	r1, pc, #4	@ (adr r1, 8008188 <_printf_i+0x40>)
 8008184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008188:	080081e1 	.word	0x080081e1
 800818c:	080081f5 	.word	0x080081f5
 8008190:	08008171 	.word	0x08008171
 8008194:	08008171 	.word	0x08008171
 8008198:	08008171 	.word	0x08008171
 800819c:	08008171 	.word	0x08008171
 80081a0:	080081f5 	.word	0x080081f5
 80081a4:	08008171 	.word	0x08008171
 80081a8:	08008171 	.word	0x08008171
 80081ac:	08008171 	.word	0x08008171
 80081b0:	08008171 	.word	0x08008171
 80081b4:	080082f5 	.word	0x080082f5
 80081b8:	0800821f 	.word	0x0800821f
 80081bc:	080082af 	.word	0x080082af
 80081c0:	08008171 	.word	0x08008171
 80081c4:	08008171 	.word	0x08008171
 80081c8:	08008317 	.word	0x08008317
 80081cc:	08008171 	.word	0x08008171
 80081d0:	0800821f 	.word	0x0800821f
 80081d4:	08008171 	.word	0x08008171
 80081d8:	08008171 	.word	0x08008171
 80081dc:	080082b7 	.word	0x080082b7
 80081e0:	6833      	ldr	r3, [r6, #0]
 80081e2:	1d1a      	adds	r2, r3, #4
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6032      	str	r2, [r6, #0]
 80081e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80081ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081f0:	2301      	movs	r3, #1
 80081f2:	e09d      	b.n	8008330 <_printf_i+0x1e8>
 80081f4:	6833      	ldr	r3, [r6, #0]
 80081f6:	6820      	ldr	r0, [r4, #0]
 80081f8:	1d19      	adds	r1, r3, #4
 80081fa:	6031      	str	r1, [r6, #0]
 80081fc:	0606      	lsls	r6, r0, #24
 80081fe:	d501      	bpl.n	8008204 <_printf_i+0xbc>
 8008200:	681d      	ldr	r5, [r3, #0]
 8008202:	e003      	b.n	800820c <_printf_i+0xc4>
 8008204:	0645      	lsls	r5, r0, #25
 8008206:	d5fb      	bpl.n	8008200 <_printf_i+0xb8>
 8008208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800820c:	2d00      	cmp	r5, #0
 800820e:	da03      	bge.n	8008218 <_printf_i+0xd0>
 8008210:	232d      	movs	r3, #45	@ 0x2d
 8008212:	426d      	negs	r5, r5
 8008214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008218:	4859      	ldr	r0, [pc, #356]	@ (8008380 <_printf_i+0x238>)
 800821a:	230a      	movs	r3, #10
 800821c:	e011      	b.n	8008242 <_printf_i+0xfa>
 800821e:	6821      	ldr	r1, [r4, #0]
 8008220:	6833      	ldr	r3, [r6, #0]
 8008222:	0608      	lsls	r0, r1, #24
 8008224:	f853 5b04 	ldr.w	r5, [r3], #4
 8008228:	d402      	bmi.n	8008230 <_printf_i+0xe8>
 800822a:	0649      	lsls	r1, r1, #25
 800822c:	bf48      	it	mi
 800822e:	b2ad      	uxthmi	r5, r5
 8008230:	2f6f      	cmp	r7, #111	@ 0x6f
 8008232:	4853      	ldr	r0, [pc, #332]	@ (8008380 <_printf_i+0x238>)
 8008234:	6033      	str	r3, [r6, #0]
 8008236:	bf14      	ite	ne
 8008238:	230a      	movne	r3, #10
 800823a:	2308      	moveq	r3, #8
 800823c:	2100      	movs	r1, #0
 800823e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008242:	6866      	ldr	r6, [r4, #4]
 8008244:	60a6      	str	r6, [r4, #8]
 8008246:	2e00      	cmp	r6, #0
 8008248:	bfa2      	ittt	ge
 800824a:	6821      	ldrge	r1, [r4, #0]
 800824c:	f021 0104 	bicge.w	r1, r1, #4
 8008250:	6021      	strge	r1, [r4, #0]
 8008252:	b90d      	cbnz	r5, 8008258 <_printf_i+0x110>
 8008254:	2e00      	cmp	r6, #0
 8008256:	d04b      	beq.n	80082f0 <_printf_i+0x1a8>
 8008258:	4616      	mov	r6, r2
 800825a:	fbb5 f1f3 	udiv	r1, r5, r3
 800825e:	fb03 5711 	mls	r7, r3, r1, r5
 8008262:	5dc7      	ldrb	r7, [r0, r7]
 8008264:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008268:	462f      	mov	r7, r5
 800826a:	42bb      	cmp	r3, r7
 800826c:	460d      	mov	r5, r1
 800826e:	d9f4      	bls.n	800825a <_printf_i+0x112>
 8008270:	2b08      	cmp	r3, #8
 8008272:	d10b      	bne.n	800828c <_printf_i+0x144>
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	07df      	lsls	r7, r3, #31
 8008278:	d508      	bpl.n	800828c <_printf_i+0x144>
 800827a:	6923      	ldr	r3, [r4, #16]
 800827c:	6861      	ldr	r1, [r4, #4]
 800827e:	4299      	cmp	r1, r3
 8008280:	bfde      	ittt	le
 8008282:	2330      	movle	r3, #48	@ 0x30
 8008284:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008288:	f106 36ff 	addle.w	r6, r6, #4294967295
 800828c:	1b92      	subs	r2, r2, r6
 800828e:	6122      	str	r2, [r4, #16]
 8008290:	f8cd a000 	str.w	sl, [sp]
 8008294:	464b      	mov	r3, r9
 8008296:	aa03      	add	r2, sp, #12
 8008298:	4621      	mov	r1, r4
 800829a:	4640      	mov	r0, r8
 800829c:	f7ff fee6 	bl	800806c <_printf_common>
 80082a0:	3001      	adds	r0, #1
 80082a2:	d14a      	bne.n	800833a <_printf_i+0x1f2>
 80082a4:	f04f 30ff 	mov.w	r0, #4294967295
 80082a8:	b004      	add	sp, #16
 80082aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	f043 0320 	orr.w	r3, r3, #32
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	4833      	ldr	r0, [pc, #204]	@ (8008384 <_printf_i+0x23c>)
 80082b8:	2778      	movs	r7, #120	@ 0x78
 80082ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	6831      	ldr	r1, [r6, #0]
 80082c2:	061f      	lsls	r7, r3, #24
 80082c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80082c8:	d402      	bmi.n	80082d0 <_printf_i+0x188>
 80082ca:	065f      	lsls	r7, r3, #25
 80082cc:	bf48      	it	mi
 80082ce:	b2ad      	uxthmi	r5, r5
 80082d0:	6031      	str	r1, [r6, #0]
 80082d2:	07d9      	lsls	r1, r3, #31
 80082d4:	bf44      	itt	mi
 80082d6:	f043 0320 	orrmi.w	r3, r3, #32
 80082da:	6023      	strmi	r3, [r4, #0]
 80082dc:	b11d      	cbz	r5, 80082e6 <_printf_i+0x19e>
 80082de:	2310      	movs	r3, #16
 80082e0:	e7ac      	b.n	800823c <_printf_i+0xf4>
 80082e2:	4827      	ldr	r0, [pc, #156]	@ (8008380 <_printf_i+0x238>)
 80082e4:	e7e9      	b.n	80082ba <_printf_i+0x172>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	f023 0320 	bic.w	r3, r3, #32
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	e7f6      	b.n	80082de <_printf_i+0x196>
 80082f0:	4616      	mov	r6, r2
 80082f2:	e7bd      	b.n	8008270 <_printf_i+0x128>
 80082f4:	6833      	ldr	r3, [r6, #0]
 80082f6:	6825      	ldr	r5, [r4, #0]
 80082f8:	6961      	ldr	r1, [r4, #20]
 80082fa:	1d18      	adds	r0, r3, #4
 80082fc:	6030      	str	r0, [r6, #0]
 80082fe:	062e      	lsls	r6, r5, #24
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	d501      	bpl.n	8008308 <_printf_i+0x1c0>
 8008304:	6019      	str	r1, [r3, #0]
 8008306:	e002      	b.n	800830e <_printf_i+0x1c6>
 8008308:	0668      	lsls	r0, r5, #25
 800830a:	d5fb      	bpl.n	8008304 <_printf_i+0x1bc>
 800830c:	8019      	strh	r1, [r3, #0]
 800830e:	2300      	movs	r3, #0
 8008310:	6123      	str	r3, [r4, #16]
 8008312:	4616      	mov	r6, r2
 8008314:	e7bc      	b.n	8008290 <_printf_i+0x148>
 8008316:	6833      	ldr	r3, [r6, #0]
 8008318:	1d1a      	adds	r2, r3, #4
 800831a:	6032      	str	r2, [r6, #0]
 800831c:	681e      	ldr	r6, [r3, #0]
 800831e:	6862      	ldr	r2, [r4, #4]
 8008320:	2100      	movs	r1, #0
 8008322:	4630      	mov	r0, r6
 8008324:	f7f7 ff84 	bl	8000230 <memchr>
 8008328:	b108      	cbz	r0, 800832e <_printf_i+0x1e6>
 800832a:	1b80      	subs	r0, r0, r6
 800832c:	6060      	str	r0, [r4, #4]
 800832e:	6863      	ldr	r3, [r4, #4]
 8008330:	6123      	str	r3, [r4, #16]
 8008332:	2300      	movs	r3, #0
 8008334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008338:	e7aa      	b.n	8008290 <_printf_i+0x148>
 800833a:	6923      	ldr	r3, [r4, #16]
 800833c:	4632      	mov	r2, r6
 800833e:	4649      	mov	r1, r9
 8008340:	4640      	mov	r0, r8
 8008342:	47d0      	blx	sl
 8008344:	3001      	adds	r0, #1
 8008346:	d0ad      	beq.n	80082a4 <_printf_i+0x15c>
 8008348:	6823      	ldr	r3, [r4, #0]
 800834a:	079b      	lsls	r3, r3, #30
 800834c:	d413      	bmi.n	8008376 <_printf_i+0x22e>
 800834e:	68e0      	ldr	r0, [r4, #12]
 8008350:	9b03      	ldr	r3, [sp, #12]
 8008352:	4298      	cmp	r0, r3
 8008354:	bfb8      	it	lt
 8008356:	4618      	movlt	r0, r3
 8008358:	e7a6      	b.n	80082a8 <_printf_i+0x160>
 800835a:	2301      	movs	r3, #1
 800835c:	4632      	mov	r2, r6
 800835e:	4649      	mov	r1, r9
 8008360:	4640      	mov	r0, r8
 8008362:	47d0      	blx	sl
 8008364:	3001      	adds	r0, #1
 8008366:	d09d      	beq.n	80082a4 <_printf_i+0x15c>
 8008368:	3501      	adds	r5, #1
 800836a:	68e3      	ldr	r3, [r4, #12]
 800836c:	9903      	ldr	r1, [sp, #12]
 800836e:	1a5b      	subs	r3, r3, r1
 8008370:	42ab      	cmp	r3, r5
 8008372:	dcf2      	bgt.n	800835a <_printf_i+0x212>
 8008374:	e7eb      	b.n	800834e <_printf_i+0x206>
 8008376:	2500      	movs	r5, #0
 8008378:	f104 0619 	add.w	r6, r4, #25
 800837c:	e7f5      	b.n	800836a <_printf_i+0x222>
 800837e:	bf00      	nop
 8008380:	0800f47e 	.word	0x0800f47e
 8008384:	0800f48f 	.word	0x0800f48f

08008388 <std>:
 8008388:	2300      	movs	r3, #0
 800838a:	b510      	push	{r4, lr}
 800838c:	4604      	mov	r4, r0
 800838e:	e9c0 3300 	strd	r3, r3, [r0]
 8008392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008396:	6083      	str	r3, [r0, #8]
 8008398:	8181      	strh	r1, [r0, #12]
 800839a:	6643      	str	r3, [r0, #100]	@ 0x64
 800839c:	81c2      	strh	r2, [r0, #14]
 800839e:	6183      	str	r3, [r0, #24]
 80083a0:	4619      	mov	r1, r3
 80083a2:	2208      	movs	r2, #8
 80083a4:	305c      	adds	r0, #92	@ 0x5c
 80083a6:	f000 f914 	bl	80085d2 <memset>
 80083aa:	4b0d      	ldr	r3, [pc, #52]	@ (80083e0 <std+0x58>)
 80083ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80083ae:	4b0d      	ldr	r3, [pc, #52]	@ (80083e4 <std+0x5c>)
 80083b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083b2:	4b0d      	ldr	r3, [pc, #52]	@ (80083e8 <std+0x60>)
 80083b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083b6:	4b0d      	ldr	r3, [pc, #52]	@ (80083ec <std+0x64>)
 80083b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80083ba:	4b0d      	ldr	r3, [pc, #52]	@ (80083f0 <std+0x68>)
 80083bc:	6224      	str	r4, [r4, #32]
 80083be:	429c      	cmp	r4, r3
 80083c0:	d006      	beq.n	80083d0 <std+0x48>
 80083c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083c6:	4294      	cmp	r4, r2
 80083c8:	d002      	beq.n	80083d0 <std+0x48>
 80083ca:	33d0      	adds	r3, #208	@ 0xd0
 80083cc:	429c      	cmp	r4, r3
 80083ce:	d105      	bne.n	80083dc <std+0x54>
 80083d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80083d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083d8:	f000 b978 	b.w	80086cc <__retarget_lock_init_recursive>
 80083dc:	bd10      	pop	{r4, pc}
 80083de:	bf00      	nop
 80083e0:	0800854d 	.word	0x0800854d
 80083e4:	0800856f 	.word	0x0800856f
 80083e8:	080085a7 	.word	0x080085a7
 80083ec:	080085cb 	.word	0x080085cb
 80083f0:	20005a54 	.word	0x20005a54

080083f4 <stdio_exit_handler>:
 80083f4:	4a02      	ldr	r2, [pc, #8]	@ (8008400 <stdio_exit_handler+0xc>)
 80083f6:	4903      	ldr	r1, [pc, #12]	@ (8008404 <stdio_exit_handler+0x10>)
 80083f8:	4803      	ldr	r0, [pc, #12]	@ (8008408 <stdio_exit_handler+0x14>)
 80083fa:	f000 b869 	b.w	80084d0 <_fwalk_sglue>
 80083fe:	bf00      	nop
 8008400:	2000368c 	.word	0x2000368c
 8008404:	0800a02d 	.word	0x0800a02d
 8008408:	2000369c 	.word	0x2000369c

0800840c <cleanup_stdio>:
 800840c:	6841      	ldr	r1, [r0, #4]
 800840e:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <cleanup_stdio+0x34>)
 8008410:	4299      	cmp	r1, r3
 8008412:	b510      	push	{r4, lr}
 8008414:	4604      	mov	r4, r0
 8008416:	d001      	beq.n	800841c <cleanup_stdio+0x10>
 8008418:	f001 fe08 	bl	800a02c <_fflush_r>
 800841c:	68a1      	ldr	r1, [r4, #8]
 800841e:	4b09      	ldr	r3, [pc, #36]	@ (8008444 <cleanup_stdio+0x38>)
 8008420:	4299      	cmp	r1, r3
 8008422:	d002      	beq.n	800842a <cleanup_stdio+0x1e>
 8008424:	4620      	mov	r0, r4
 8008426:	f001 fe01 	bl	800a02c <_fflush_r>
 800842a:	68e1      	ldr	r1, [r4, #12]
 800842c:	4b06      	ldr	r3, [pc, #24]	@ (8008448 <cleanup_stdio+0x3c>)
 800842e:	4299      	cmp	r1, r3
 8008430:	d004      	beq.n	800843c <cleanup_stdio+0x30>
 8008432:	4620      	mov	r0, r4
 8008434:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008438:	f001 bdf8 	b.w	800a02c <_fflush_r>
 800843c:	bd10      	pop	{r4, pc}
 800843e:	bf00      	nop
 8008440:	20005a54 	.word	0x20005a54
 8008444:	20005abc 	.word	0x20005abc
 8008448:	20005b24 	.word	0x20005b24

0800844c <global_stdio_init.part.0>:
 800844c:	b510      	push	{r4, lr}
 800844e:	4b0b      	ldr	r3, [pc, #44]	@ (800847c <global_stdio_init.part.0+0x30>)
 8008450:	4c0b      	ldr	r4, [pc, #44]	@ (8008480 <global_stdio_init.part.0+0x34>)
 8008452:	4a0c      	ldr	r2, [pc, #48]	@ (8008484 <global_stdio_init.part.0+0x38>)
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	4620      	mov	r0, r4
 8008458:	2200      	movs	r2, #0
 800845a:	2104      	movs	r1, #4
 800845c:	f7ff ff94 	bl	8008388 <std>
 8008460:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008464:	2201      	movs	r2, #1
 8008466:	2109      	movs	r1, #9
 8008468:	f7ff ff8e 	bl	8008388 <std>
 800846c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008470:	2202      	movs	r2, #2
 8008472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008476:	2112      	movs	r1, #18
 8008478:	f7ff bf86 	b.w	8008388 <std>
 800847c:	20005b8c 	.word	0x20005b8c
 8008480:	20005a54 	.word	0x20005a54
 8008484:	080083f5 	.word	0x080083f5

08008488 <__sfp_lock_acquire>:
 8008488:	4801      	ldr	r0, [pc, #4]	@ (8008490 <__sfp_lock_acquire+0x8>)
 800848a:	f000 b920 	b.w	80086ce <__retarget_lock_acquire_recursive>
 800848e:	bf00      	nop
 8008490:	20005b95 	.word	0x20005b95

08008494 <__sfp_lock_release>:
 8008494:	4801      	ldr	r0, [pc, #4]	@ (800849c <__sfp_lock_release+0x8>)
 8008496:	f000 b91b 	b.w	80086d0 <__retarget_lock_release_recursive>
 800849a:	bf00      	nop
 800849c:	20005b95 	.word	0x20005b95

080084a0 <__sinit>:
 80084a0:	b510      	push	{r4, lr}
 80084a2:	4604      	mov	r4, r0
 80084a4:	f7ff fff0 	bl	8008488 <__sfp_lock_acquire>
 80084a8:	6a23      	ldr	r3, [r4, #32]
 80084aa:	b11b      	cbz	r3, 80084b4 <__sinit+0x14>
 80084ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084b0:	f7ff bff0 	b.w	8008494 <__sfp_lock_release>
 80084b4:	4b04      	ldr	r3, [pc, #16]	@ (80084c8 <__sinit+0x28>)
 80084b6:	6223      	str	r3, [r4, #32]
 80084b8:	4b04      	ldr	r3, [pc, #16]	@ (80084cc <__sinit+0x2c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1f5      	bne.n	80084ac <__sinit+0xc>
 80084c0:	f7ff ffc4 	bl	800844c <global_stdio_init.part.0>
 80084c4:	e7f2      	b.n	80084ac <__sinit+0xc>
 80084c6:	bf00      	nop
 80084c8:	0800840d 	.word	0x0800840d
 80084cc:	20005b8c 	.word	0x20005b8c

080084d0 <_fwalk_sglue>:
 80084d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d4:	4607      	mov	r7, r0
 80084d6:	4688      	mov	r8, r1
 80084d8:	4614      	mov	r4, r2
 80084da:	2600      	movs	r6, #0
 80084dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084e0:	f1b9 0901 	subs.w	r9, r9, #1
 80084e4:	d505      	bpl.n	80084f2 <_fwalk_sglue+0x22>
 80084e6:	6824      	ldr	r4, [r4, #0]
 80084e8:	2c00      	cmp	r4, #0
 80084ea:	d1f7      	bne.n	80084dc <_fwalk_sglue+0xc>
 80084ec:	4630      	mov	r0, r6
 80084ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f2:	89ab      	ldrh	r3, [r5, #12]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d907      	bls.n	8008508 <_fwalk_sglue+0x38>
 80084f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084fc:	3301      	adds	r3, #1
 80084fe:	d003      	beq.n	8008508 <_fwalk_sglue+0x38>
 8008500:	4629      	mov	r1, r5
 8008502:	4638      	mov	r0, r7
 8008504:	47c0      	blx	r8
 8008506:	4306      	orrs	r6, r0
 8008508:	3568      	adds	r5, #104	@ 0x68
 800850a:	e7e9      	b.n	80084e0 <_fwalk_sglue+0x10>

0800850c <siprintf>:
 800850c:	b40e      	push	{r1, r2, r3}
 800850e:	b500      	push	{lr}
 8008510:	b09c      	sub	sp, #112	@ 0x70
 8008512:	ab1d      	add	r3, sp, #116	@ 0x74
 8008514:	9002      	str	r0, [sp, #8]
 8008516:	9006      	str	r0, [sp, #24]
 8008518:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800851c:	4809      	ldr	r0, [pc, #36]	@ (8008544 <siprintf+0x38>)
 800851e:	9107      	str	r1, [sp, #28]
 8008520:	9104      	str	r1, [sp, #16]
 8008522:	4909      	ldr	r1, [pc, #36]	@ (8008548 <siprintf+0x3c>)
 8008524:	f853 2b04 	ldr.w	r2, [r3], #4
 8008528:	9105      	str	r1, [sp, #20]
 800852a:	6800      	ldr	r0, [r0, #0]
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	a902      	add	r1, sp, #8
 8008530:	f001 fbfc 	bl	8009d2c <_svfiprintf_r>
 8008534:	9b02      	ldr	r3, [sp, #8]
 8008536:	2200      	movs	r2, #0
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	b01c      	add	sp, #112	@ 0x70
 800853c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008540:	b003      	add	sp, #12
 8008542:	4770      	bx	lr
 8008544:	20003698 	.word	0x20003698
 8008548:	ffff0208 	.word	0xffff0208

0800854c <__sread>:
 800854c:	b510      	push	{r4, lr}
 800854e:	460c      	mov	r4, r1
 8008550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008554:	f000 f86c 	bl	8008630 <_read_r>
 8008558:	2800      	cmp	r0, #0
 800855a:	bfab      	itete	ge
 800855c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800855e:	89a3      	ldrhlt	r3, [r4, #12]
 8008560:	181b      	addge	r3, r3, r0
 8008562:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008566:	bfac      	ite	ge
 8008568:	6563      	strge	r3, [r4, #84]	@ 0x54
 800856a:	81a3      	strhlt	r3, [r4, #12]
 800856c:	bd10      	pop	{r4, pc}

0800856e <__swrite>:
 800856e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008572:	461f      	mov	r7, r3
 8008574:	898b      	ldrh	r3, [r1, #12]
 8008576:	05db      	lsls	r3, r3, #23
 8008578:	4605      	mov	r5, r0
 800857a:	460c      	mov	r4, r1
 800857c:	4616      	mov	r6, r2
 800857e:	d505      	bpl.n	800858c <__swrite+0x1e>
 8008580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008584:	2302      	movs	r3, #2
 8008586:	2200      	movs	r2, #0
 8008588:	f000 f840 	bl	800860c <_lseek_r>
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008592:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008596:	81a3      	strh	r3, [r4, #12]
 8008598:	4632      	mov	r2, r6
 800859a:	463b      	mov	r3, r7
 800859c:	4628      	mov	r0, r5
 800859e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085a2:	f000 b857 	b.w	8008654 <_write_r>

080085a6 <__sseek>:
 80085a6:	b510      	push	{r4, lr}
 80085a8:	460c      	mov	r4, r1
 80085aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ae:	f000 f82d 	bl	800860c <_lseek_r>
 80085b2:	1c43      	adds	r3, r0, #1
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	bf15      	itete	ne
 80085b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80085ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80085be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80085c2:	81a3      	strheq	r3, [r4, #12]
 80085c4:	bf18      	it	ne
 80085c6:	81a3      	strhne	r3, [r4, #12]
 80085c8:	bd10      	pop	{r4, pc}

080085ca <__sclose>:
 80085ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ce:	f000 b80d 	b.w	80085ec <_close_r>

080085d2 <memset>:
 80085d2:	4402      	add	r2, r0
 80085d4:	4603      	mov	r3, r0
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d100      	bne.n	80085dc <memset+0xa>
 80085da:	4770      	bx	lr
 80085dc:	f803 1b01 	strb.w	r1, [r3], #1
 80085e0:	e7f9      	b.n	80085d6 <memset+0x4>
	...

080085e4 <_localeconv_r>:
 80085e4:	4800      	ldr	r0, [pc, #0]	@ (80085e8 <_localeconv_r+0x4>)
 80085e6:	4770      	bx	lr
 80085e8:	200037d8 	.word	0x200037d8

080085ec <_close_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4d06      	ldr	r5, [pc, #24]	@ (8008608 <_close_r+0x1c>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	4604      	mov	r4, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	602b      	str	r3, [r5, #0]
 80085f8:	f7f9 ff69 	bl	80024ce <_close>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_close_r+0x1a>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	b103      	cbz	r3, 8008606 <_close_r+0x1a>
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	20005b90 	.word	0x20005b90

0800860c <_lseek_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4d07      	ldr	r5, [pc, #28]	@ (800862c <_lseek_r+0x20>)
 8008610:	4604      	mov	r4, r0
 8008612:	4608      	mov	r0, r1
 8008614:	4611      	mov	r1, r2
 8008616:	2200      	movs	r2, #0
 8008618:	602a      	str	r2, [r5, #0]
 800861a:	461a      	mov	r2, r3
 800861c:	f7f9 ff7e 	bl	800251c <_lseek>
 8008620:	1c43      	adds	r3, r0, #1
 8008622:	d102      	bne.n	800862a <_lseek_r+0x1e>
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	b103      	cbz	r3, 800862a <_lseek_r+0x1e>
 8008628:	6023      	str	r3, [r4, #0]
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	20005b90 	.word	0x20005b90

08008630 <_read_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4d07      	ldr	r5, [pc, #28]	@ (8008650 <_read_r+0x20>)
 8008634:	4604      	mov	r4, r0
 8008636:	4608      	mov	r0, r1
 8008638:	4611      	mov	r1, r2
 800863a:	2200      	movs	r2, #0
 800863c:	602a      	str	r2, [r5, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	f7f9 ff0c 	bl	800245c <_read>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_read_r+0x1e>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_read_r+0x1e>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	20005b90 	.word	0x20005b90

08008654 <_write_r>:
 8008654:	b538      	push	{r3, r4, r5, lr}
 8008656:	4d07      	ldr	r5, [pc, #28]	@ (8008674 <_write_r+0x20>)
 8008658:	4604      	mov	r4, r0
 800865a:	4608      	mov	r0, r1
 800865c:	4611      	mov	r1, r2
 800865e:	2200      	movs	r2, #0
 8008660:	602a      	str	r2, [r5, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	f7f9 ff17 	bl	8002496 <_write>
 8008668:	1c43      	adds	r3, r0, #1
 800866a:	d102      	bne.n	8008672 <_write_r+0x1e>
 800866c:	682b      	ldr	r3, [r5, #0]
 800866e:	b103      	cbz	r3, 8008672 <_write_r+0x1e>
 8008670:	6023      	str	r3, [r4, #0]
 8008672:	bd38      	pop	{r3, r4, r5, pc}
 8008674:	20005b90 	.word	0x20005b90

08008678 <__errno>:
 8008678:	4b01      	ldr	r3, [pc, #4]	@ (8008680 <__errno+0x8>)
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	20003698 	.word	0x20003698

08008684 <__libc_init_array>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	4d0d      	ldr	r5, [pc, #52]	@ (80086bc <__libc_init_array+0x38>)
 8008688:	4c0d      	ldr	r4, [pc, #52]	@ (80086c0 <__libc_init_array+0x3c>)
 800868a:	1b64      	subs	r4, r4, r5
 800868c:	10a4      	asrs	r4, r4, #2
 800868e:	2600      	movs	r6, #0
 8008690:	42a6      	cmp	r6, r4
 8008692:	d109      	bne.n	80086a8 <__libc_init_array+0x24>
 8008694:	4d0b      	ldr	r5, [pc, #44]	@ (80086c4 <__libc_init_array+0x40>)
 8008696:	4c0c      	ldr	r4, [pc, #48]	@ (80086c8 <__libc_init_array+0x44>)
 8008698:	f002 f866 	bl	800a768 <_init>
 800869c:	1b64      	subs	r4, r4, r5
 800869e:	10a4      	asrs	r4, r4, #2
 80086a0:	2600      	movs	r6, #0
 80086a2:	42a6      	cmp	r6, r4
 80086a4:	d105      	bne.n	80086b2 <__libc_init_array+0x2e>
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ac:	4798      	blx	r3
 80086ae:	3601      	adds	r6, #1
 80086b0:	e7ee      	b.n	8008690 <__libc_init_array+0xc>
 80086b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b6:	4798      	blx	r3
 80086b8:	3601      	adds	r6, #1
 80086ba:	e7f2      	b.n	80086a2 <__libc_init_array+0x1e>
 80086bc:	0800f7e8 	.word	0x0800f7e8
 80086c0:	0800f7e8 	.word	0x0800f7e8
 80086c4:	0800f7e8 	.word	0x0800f7e8
 80086c8:	0800f7ec 	.word	0x0800f7ec

080086cc <__retarget_lock_init_recursive>:
 80086cc:	4770      	bx	lr

080086ce <__retarget_lock_acquire_recursive>:
 80086ce:	4770      	bx	lr

080086d0 <__retarget_lock_release_recursive>:
 80086d0:	4770      	bx	lr

080086d2 <quorem>:
 80086d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d6:	6903      	ldr	r3, [r0, #16]
 80086d8:	690c      	ldr	r4, [r1, #16]
 80086da:	42a3      	cmp	r3, r4
 80086dc:	4607      	mov	r7, r0
 80086de:	db7e      	blt.n	80087de <quorem+0x10c>
 80086e0:	3c01      	subs	r4, #1
 80086e2:	f101 0814 	add.w	r8, r1, #20
 80086e6:	00a3      	lsls	r3, r4, #2
 80086e8:	f100 0514 	add.w	r5, r0, #20
 80086ec:	9300      	str	r3, [sp, #0]
 80086ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086f2:	9301      	str	r3, [sp, #4]
 80086f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086fc:	3301      	adds	r3, #1
 80086fe:	429a      	cmp	r2, r3
 8008700:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008704:	fbb2 f6f3 	udiv	r6, r2, r3
 8008708:	d32e      	bcc.n	8008768 <quorem+0x96>
 800870a:	f04f 0a00 	mov.w	sl, #0
 800870e:	46c4      	mov	ip, r8
 8008710:	46ae      	mov	lr, r5
 8008712:	46d3      	mov	fp, sl
 8008714:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008718:	b298      	uxth	r0, r3
 800871a:	fb06 a000 	mla	r0, r6, r0, sl
 800871e:	0c02      	lsrs	r2, r0, #16
 8008720:	0c1b      	lsrs	r3, r3, #16
 8008722:	fb06 2303 	mla	r3, r6, r3, r2
 8008726:	f8de 2000 	ldr.w	r2, [lr]
 800872a:	b280      	uxth	r0, r0
 800872c:	b292      	uxth	r2, r2
 800872e:	1a12      	subs	r2, r2, r0
 8008730:	445a      	add	r2, fp
 8008732:	f8de 0000 	ldr.w	r0, [lr]
 8008736:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800873a:	b29b      	uxth	r3, r3
 800873c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008740:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008744:	b292      	uxth	r2, r2
 8008746:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800874a:	45e1      	cmp	r9, ip
 800874c:	f84e 2b04 	str.w	r2, [lr], #4
 8008750:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008754:	d2de      	bcs.n	8008714 <quorem+0x42>
 8008756:	9b00      	ldr	r3, [sp, #0]
 8008758:	58eb      	ldr	r3, [r5, r3]
 800875a:	b92b      	cbnz	r3, 8008768 <quorem+0x96>
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	3b04      	subs	r3, #4
 8008760:	429d      	cmp	r5, r3
 8008762:	461a      	mov	r2, r3
 8008764:	d32f      	bcc.n	80087c6 <quorem+0xf4>
 8008766:	613c      	str	r4, [r7, #16]
 8008768:	4638      	mov	r0, r7
 800876a:	f001 f97b 	bl	8009a64 <__mcmp>
 800876e:	2800      	cmp	r0, #0
 8008770:	db25      	blt.n	80087be <quorem+0xec>
 8008772:	4629      	mov	r1, r5
 8008774:	2000      	movs	r0, #0
 8008776:	f858 2b04 	ldr.w	r2, [r8], #4
 800877a:	f8d1 c000 	ldr.w	ip, [r1]
 800877e:	fa1f fe82 	uxth.w	lr, r2
 8008782:	fa1f f38c 	uxth.w	r3, ip
 8008786:	eba3 030e 	sub.w	r3, r3, lr
 800878a:	4403      	add	r3, r0
 800878c:	0c12      	lsrs	r2, r2, #16
 800878e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008792:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008796:	b29b      	uxth	r3, r3
 8008798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800879c:	45c1      	cmp	r9, r8
 800879e:	f841 3b04 	str.w	r3, [r1], #4
 80087a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087a6:	d2e6      	bcs.n	8008776 <quorem+0xa4>
 80087a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087b0:	b922      	cbnz	r2, 80087bc <quorem+0xea>
 80087b2:	3b04      	subs	r3, #4
 80087b4:	429d      	cmp	r5, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	d30b      	bcc.n	80087d2 <quorem+0x100>
 80087ba:	613c      	str	r4, [r7, #16]
 80087bc:	3601      	adds	r6, #1
 80087be:	4630      	mov	r0, r6
 80087c0:	b003      	add	sp, #12
 80087c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c6:	6812      	ldr	r2, [r2, #0]
 80087c8:	3b04      	subs	r3, #4
 80087ca:	2a00      	cmp	r2, #0
 80087cc:	d1cb      	bne.n	8008766 <quorem+0x94>
 80087ce:	3c01      	subs	r4, #1
 80087d0:	e7c6      	b.n	8008760 <quorem+0x8e>
 80087d2:	6812      	ldr	r2, [r2, #0]
 80087d4:	3b04      	subs	r3, #4
 80087d6:	2a00      	cmp	r2, #0
 80087d8:	d1ef      	bne.n	80087ba <quorem+0xe8>
 80087da:	3c01      	subs	r4, #1
 80087dc:	e7ea      	b.n	80087b4 <quorem+0xe2>
 80087de:	2000      	movs	r0, #0
 80087e0:	e7ee      	b.n	80087c0 <quorem+0xee>
 80087e2:	0000      	movs	r0, r0
 80087e4:	0000      	movs	r0, r0
	...

080087e8 <_dtoa_r>:
 80087e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ec:	69c7      	ldr	r7, [r0, #28]
 80087ee:	b099      	sub	sp, #100	@ 0x64
 80087f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80087f4:	ec55 4b10 	vmov	r4, r5, d0
 80087f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80087fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80087fc:	4683      	mov	fp, r0
 80087fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8008800:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008802:	b97f      	cbnz	r7, 8008824 <_dtoa_r+0x3c>
 8008804:	2010      	movs	r0, #16
 8008806:	f000 fdfd 	bl	8009404 <malloc>
 800880a:	4602      	mov	r2, r0
 800880c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008810:	b920      	cbnz	r0, 800881c <_dtoa_r+0x34>
 8008812:	4ba7      	ldr	r3, [pc, #668]	@ (8008ab0 <_dtoa_r+0x2c8>)
 8008814:	21ef      	movs	r1, #239	@ 0xef
 8008816:	48a7      	ldr	r0, [pc, #668]	@ (8008ab4 <_dtoa_r+0x2cc>)
 8008818:	f001 fc68 	bl	800a0ec <__assert_func>
 800881c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008820:	6007      	str	r7, [r0, #0]
 8008822:	60c7      	str	r7, [r0, #12]
 8008824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008828:	6819      	ldr	r1, [r3, #0]
 800882a:	b159      	cbz	r1, 8008844 <_dtoa_r+0x5c>
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	604a      	str	r2, [r1, #4]
 8008830:	2301      	movs	r3, #1
 8008832:	4093      	lsls	r3, r2
 8008834:	608b      	str	r3, [r1, #8]
 8008836:	4658      	mov	r0, fp
 8008838:	f000 feda 	bl	80095f0 <_Bfree>
 800883c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	1e2b      	subs	r3, r5, #0
 8008846:	bfb9      	ittee	lt
 8008848:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800884c:	9303      	strlt	r3, [sp, #12]
 800884e:	2300      	movge	r3, #0
 8008850:	6033      	strge	r3, [r6, #0]
 8008852:	9f03      	ldr	r7, [sp, #12]
 8008854:	4b98      	ldr	r3, [pc, #608]	@ (8008ab8 <_dtoa_r+0x2d0>)
 8008856:	bfbc      	itt	lt
 8008858:	2201      	movlt	r2, #1
 800885a:	6032      	strlt	r2, [r6, #0]
 800885c:	43bb      	bics	r3, r7
 800885e:	d112      	bne.n	8008886 <_dtoa_r+0x9e>
 8008860:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008862:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800886c:	4323      	orrs	r3, r4
 800886e:	f000 854d 	beq.w	800930c <_dtoa_r+0xb24>
 8008872:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008874:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008acc <_dtoa_r+0x2e4>
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 854f 	beq.w	800931c <_dtoa_r+0xb34>
 800887e:	f10a 0303 	add.w	r3, sl, #3
 8008882:	f000 bd49 	b.w	8009318 <_dtoa_r+0xb30>
 8008886:	ed9d 7b02 	vldr	d7, [sp, #8]
 800888a:	2200      	movs	r2, #0
 800888c:	ec51 0b17 	vmov	r0, r1, d7
 8008890:	2300      	movs	r3, #0
 8008892:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008896:	f7f8 f947 	bl	8000b28 <__aeabi_dcmpeq>
 800889a:	4680      	mov	r8, r0
 800889c:	b158      	cbz	r0, 80088b6 <_dtoa_r+0xce>
 800889e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088a0:	2301      	movs	r3, #1
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088a6:	b113      	cbz	r3, 80088ae <_dtoa_r+0xc6>
 80088a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80088aa:	4b84      	ldr	r3, [pc, #528]	@ (8008abc <_dtoa_r+0x2d4>)
 80088ac:	6013      	str	r3, [r2, #0]
 80088ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008ad0 <_dtoa_r+0x2e8>
 80088b2:	f000 bd33 	b.w	800931c <_dtoa_r+0xb34>
 80088b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80088ba:	aa16      	add	r2, sp, #88	@ 0x58
 80088bc:	a917      	add	r1, sp, #92	@ 0x5c
 80088be:	4658      	mov	r0, fp
 80088c0:	f001 f980 	bl	8009bc4 <__d2b>
 80088c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80088c8:	4681      	mov	r9, r0
 80088ca:	2e00      	cmp	r6, #0
 80088cc:	d077      	beq.n	80089be <_dtoa_r+0x1d6>
 80088ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80088d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80088e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80088e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80088e8:	4619      	mov	r1, r3
 80088ea:	2200      	movs	r2, #0
 80088ec:	4b74      	ldr	r3, [pc, #464]	@ (8008ac0 <_dtoa_r+0x2d8>)
 80088ee:	f7f7 fcfb 	bl	80002e8 <__aeabi_dsub>
 80088f2:	a369      	add	r3, pc, #420	@ (adr r3, 8008a98 <_dtoa_r+0x2b0>)
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f7f7 feae 	bl	8000658 <__aeabi_dmul>
 80088fc:	a368      	add	r3, pc, #416	@ (adr r3, 8008aa0 <_dtoa_r+0x2b8>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f7f7 fcf3 	bl	80002ec <__adddf3>
 8008906:	4604      	mov	r4, r0
 8008908:	4630      	mov	r0, r6
 800890a:	460d      	mov	r5, r1
 800890c:	f7f7 fe3a 	bl	8000584 <__aeabi_i2d>
 8008910:	a365      	add	r3, pc, #404	@ (adr r3, 8008aa8 <_dtoa_r+0x2c0>)
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	f7f7 fe9f 	bl	8000658 <__aeabi_dmul>
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	4620      	mov	r0, r4
 8008920:	4629      	mov	r1, r5
 8008922:	f7f7 fce3 	bl	80002ec <__adddf3>
 8008926:	4604      	mov	r4, r0
 8008928:	460d      	mov	r5, r1
 800892a:	f7f8 f945 	bl	8000bb8 <__aeabi_d2iz>
 800892e:	2200      	movs	r2, #0
 8008930:	4607      	mov	r7, r0
 8008932:	2300      	movs	r3, #0
 8008934:	4620      	mov	r0, r4
 8008936:	4629      	mov	r1, r5
 8008938:	f7f8 f900 	bl	8000b3c <__aeabi_dcmplt>
 800893c:	b140      	cbz	r0, 8008950 <_dtoa_r+0x168>
 800893e:	4638      	mov	r0, r7
 8008940:	f7f7 fe20 	bl	8000584 <__aeabi_i2d>
 8008944:	4622      	mov	r2, r4
 8008946:	462b      	mov	r3, r5
 8008948:	f7f8 f8ee 	bl	8000b28 <__aeabi_dcmpeq>
 800894c:	b900      	cbnz	r0, 8008950 <_dtoa_r+0x168>
 800894e:	3f01      	subs	r7, #1
 8008950:	2f16      	cmp	r7, #22
 8008952:	d851      	bhi.n	80089f8 <_dtoa_r+0x210>
 8008954:	4b5b      	ldr	r3, [pc, #364]	@ (8008ac4 <_dtoa_r+0x2dc>)
 8008956:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800895a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008962:	f7f8 f8eb 	bl	8000b3c <__aeabi_dcmplt>
 8008966:	2800      	cmp	r0, #0
 8008968:	d048      	beq.n	80089fc <_dtoa_r+0x214>
 800896a:	3f01      	subs	r7, #1
 800896c:	2300      	movs	r3, #0
 800896e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008970:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008972:	1b9b      	subs	r3, r3, r6
 8008974:	1e5a      	subs	r2, r3, #1
 8008976:	bf44      	itt	mi
 8008978:	f1c3 0801 	rsbmi	r8, r3, #1
 800897c:	2300      	movmi	r3, #0
 800897e:	9208      	str	r2, [sp, #32]
 8008980:	bf54      	ite	pl
 8008982:	f04f 0800 	movpl.w	r8, #0
 8008986:	9308      	strmi	r3, [sp, #32]
 8008988:	2f00      	cmp	r7, #0
 800898a:	db39      	blt.n	8008a00 <_dtoa_r+0x218>
 800898c:	9b08      	ldr	r3, [sp, #32]
 800898e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008990:	443b      	add	r3, r7
 8008992:	9308      	str	r3, [sp, #32]
 8008994:	2300      	movs	r3, #0
 8008996:	930a      	str	r3, [sp, #40]	@ 0x28
 8008998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800899a:	2b09      	cmp	r3, #9
 800899c:	d864      	bhi.n	8008a68 <_dtoa_r+0x280>
 800899e:	2b05      	cmp	r3, #5
 80089a0:	bfc4      	itt	gt
 80089a2:	3b04      	subgt	r3, #4
 80089a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80089a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a8:	f1a3 0302 	sub.w	r3, r3, #2
 80089ac:	bfcc      	ite	gt
 80089ae:	2400      	movgt	r4, #0
 80089b0:	2401      	movle	r4, #1
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d863      	bhi.n	8008a7e <_dtoa_r+0x296>
 80089b6:	e8df f003 	tbb	[pc, r3]
 80089ba:	372a      	.short	0x372a
 80089bc:	5535      	.short	0x5535
 80089be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80089c2:	441e      	add	r6, r3
 80089c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80089c8:	2b20      	cmp	r3, #32
 80089ca:	bfc1      	itttt	gt
 80089cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80089d0:	409f      	lslgt	r7, r3
 80089d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80089d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80089da:	bfd6      	itet	le
 80089dc:	f1c3 0320 	rsble	r3, r3, #32
 80089e0:	ea47 0003 	orrgt.w	r0, r7, r3
 80089e4:	fa04 f003 	lslle.w	r0, r4, r3
 80089e8:	f7f7 fdbc 	bl	8000564 <__aeabi_ui2d>
 80089ec:	2201      	movs	r2, #1
 80089ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80089f2:	3e01      	subs	r6, #1
 80089f4:	9214      	str	r2, [sp, #80]	@ 0x50
 80089f6:	e777      	b.n	80088e8 <_dtoa_r+0x100>
 80089f8:	2301      	movs	r3, #1
 80089fa:	e7b8      	b.n	800896e <_dtoa_r+0x186>
 80089fc:	9012      	str	r0, [sp, #72]	@ 0x48
 80089fe:	e7b7      	b.n	8008970 <_dtoa_r+0x188>
 8008a00:	427b      	negs	r3, r7
 8008a02:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a04:	2300      	movs	r3, #0
 8008a06:	eba8 0807 	sub.w	r8, r8, r7
 8008a0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a0c:	e7c4      	b.n	8008998 <_dtoa_r+0x1b0>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	dc35      	bgt.n	8008a84 <_dtoa_r+0x29c>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	9307      	str	r3, [sp, #28]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a22:	e00b      	b.n	8008a3c <_dtoa_r+0x254>
 8008a24:	2301      	movs	r3, #1
 8008a26:	e7f3      	b.n	8008a10 <_dtoa_r+0x228>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a2e:	18fb      	adds	r3, r7, r3
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	3301      	adds	r3, #1
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	9307      	str	r3, [sp, #28]
 8008a38:	bfb8      	it	lt
 8008a3a:	2301      	movlt	r3, #1
 8008a3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008a40:	2100      	movs	r1, #0
 8008a42:	2204      	movs	r2, #4
 8008a44:	f102 0514 	add.w	r5, r2, #20
 8008a48:	429d      	cmp	r5, r3
 8008a4a:	d91f      	bls.n	8008a8c <_dtoa_r+0x2a4>
 8008a4c:	6041      	str	r1, [r0, #4]
 8008a4e:	4658      	mov	r0, fp
 8008a50:	f000 fd8e 	bl	8009570 <_Balloc>
 8008a54:	4682      	mov	sl, r0
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d13c      	bne.n	8008ad4 <_dtoa_r+0x2ec>
 8008a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ac8 <_dtoa_r+0x2e0>)
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008a62:	e6d8      	b.n	8008816 <_dtoa_r+0x2e>
 8008a64:	2301      	movs	r3, #1
 8008a66:	e7e0      	b.n	8008a2a <_dtoa_r+0x242>
 8008a68:	2401      	movs	r4, #1
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008a70:	f04f 33ff 	mov.w	r3, #4294967295
 8008a74:	9300      	str	r3, [sp, #0]
 8008a76:	9307      	str	r3, [sp, #28]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2312      	movs	r3, #18
 8008a7c:	e7d0      	b.n	8008a20 <_dtoa_r+0x238>
 8008a7e:	2301      	movs	r3, #1
 8008a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a82:	e7f5      	b.n	8008a70 <_dtoa_r+0x288>
 8008a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	9307      	str	r3, [sp, #28]
 8008a8a:	e7d7      	b.n	8008a3c <_dtoa_r+0x254>
 8008a8c:	3101      	adds	r1, #1
 8008a8e:	0052      	lsls	r2, r2, #1
 8008a90:	e7d8      	b.n	8008a44 <_dtoa_r+0x25c>
 8008a92:	bf00      	nop
 8008a94:	f3af 8000 	nop.w
 8008a98:	636f4361 	.word	0x636f4361
 8008a9c:	3fd287a7 	.word	0x3fd287a7
 8008aa0:	8b60c8b3 	.word	0x8b60c8b3
 8008aa4:	3fc68a28 	.word	0x3fc68a28
 8008aa8:	509f79fb 	.word	0x509f79fb
 8008aac:	3fd34413 	.word	0x3fd34413
 8008ab0:	0800f4ad 	.word	0x0800f4ad
 8008ab4:	0800f4c4 	.word	0x0800f4c4
 8008ab8:	7ff00000 	.word	0x7ff00000
 8008abc:	0800f47d 	.word	0x0800f47d
 8008ac0:	3ff80000 	.word	0x3ff80000
 8008ac4:	0800f5c0 	.word	0x0800f5c0
 8008ac8:	0800f51c 	.word	0x0800f51c
 8008acc:	0800f4a9 	.word	0x0800f4a9
 8008ad0:	0800f47c 	.word	0x0800f47c
 8008ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ad8:	6018      	str	r0, [r3, #0]
 8008ada:	9b07      	ldr	r3, [sp, #28]
 8008adc:	2b0e      	cmp	r3, #14
 8008ade:	f200 80a4 	bhi.w	8008c2a <_dtoa_r+0x442>
 8008ae2:	2c00      	cmp	r4, #0
 8008ae4:	f000 80a1 	beq.w	8008c2a <_dtoa_r+0x442>
 8008ae8:	2f00      	cmp	r7, #0
 8008aea:	dd33      	ble.n	8008b54 <_dtoa_r+0x36c>
 8008aec:	4bad      	ldr	r3, [pc, #692]	@ (8008da4 <_dtoa_r+0x5bc>)
 8008aee:	f007 020f 	and.w	r2, r7, #15
 8008af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008af6:	ed93 7b00 	vldr	d7, [r3]
 8008afa:	05f8      	lsls	r0, r7, #23
 8008afc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b04:	d516      	bpl.n	8008b34 <_dtoa_r+0x34c>
 8008b06:	4ba8      	ldr	r3, [pc, #672]	@ (8008da8 <_dtoa_r+0x5c0>)
 8008b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b10:	f7f7 fecc 	bl	80008ac <__aeabi_ddiv>
 8008b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b18:	f004 040f 	and.w	r4, r4, #15
 8008b1c:	2603      	movs	r6, #3
 8008b1e:	4da2      	ldr	r5, [pc, #648]	@ (8008da8 <_dtoa_r+0x5c0>)
 8008b20:	b954      	cbnz	r4, 8008b38 <_dtoa_r+0x350>
 8008b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b2a:	f7f7 febf 	bl	80008ac <__aeabi_ddiv>
 8008b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b32:	e028      	b.n	8008b86 <_dtoa_r+0x39e>
 8008b34:	2602      	movs	r6, #2
 8008b36:	e7f2      	b.n	8008b1e <_dtoa_r+0x336>
 8008b38:	07e1      	lsls	r1, r4, #31
 8008b3a:	d508      	bpl.n	8008b4e <_dtoa_r+0x366>
 8008b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b44:	f7f7 fd88 	bl	8000658 <__aeabi_dmul>
 8008b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b4c:	3601      	adds	r6, #1
 8008b4e:	1064      	asrs	r4, r4, #1
 8008b50:	3508      	adds	r5, #8
 8008b52:	e7e5      	b.n	8008b20 <_dtoa_r+0x338>
 8008b54:	f000 80d2 	beq.w	8008cfc <_dtoa_r+0x514>
 8008b58:	427c      	negs	r4, r7
 8008b5a:	4b92      	ldr	r3, [pc, #584]	@ (8008da4 <_dtoa_r+0x5bc>)
 8008b5c:	4d92      	ldr	r5, [pc, #584]	@ (8008da8 <_dtoa_r+0x5c0>)
 8008b5e:	f004 020f 	and.w	r2, r4, #15
 8008b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b6e:	f7f7 fd73 	bl	8000658 <__aeabi_dmul>
 8008b72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b76:	1124      	asrs	r4, r4, #4
 8008b78:	2300      	movs	r3, #0
 8008b7a:	2602      	movs	r6, #2
 8008b7c:	2c00      	cmp	r4, #0
 8008b7e:	f040 80b2 	bne.w	8008ce6 <_dtoa_r+0x4fe>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d1d3      	bne.n	8008b2e <_dtoa_r+0x346>
 8008b86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f000 80b7 	beq.w	8008d00 <_dtoa_r+0x518>
 8008b92:	4b86      	ldr	r3, [pc, #536]	@ (8008dac <_dtoa_r+0x5c4>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f7f7 ffcf 	bl	8000b3c <__aeabi_dcmplt>
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	f000 80ae 	beq.w	8008d00 <_dtoa_r+0x518>
 8008ba4:	9b07      	ldr	r3, [sp, #28]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 80aa 	beq.w	8008d00 <_dtoa_r+0x518>
 8008bac:	9b00      	ldr	r3, [sp, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	dd37      	ble.n	8008c22 <_dtoa_r+0x43a>
 8008bb2:	1e7b      	subs	r3, r7, #1
 8008bb4:	9304      	str	r3, [sp, #16]
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	4b7d      	ldr	r3, [pc, #500]	@ (8008db0 <_dtoa_r+0x5c8>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	f7f7 fd4b 	bl	8000658 <__aeabi_dmul>
 8008bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc6:	9c00      	ldr	r4, [sp, #0]
 8008bc8:	3601      	adds	r6, #1
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7f7 fcda 	bl	8000584 <__aeabi_i2d>
 8008bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bd4:	f7f7 fd40 	bl	8000658 <__aeabi_dmul>
 8008bd8:	4b76      	ldr	r3, [pc, #472]	@ (8008db4 <_dtoa_r+0x5cc>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f7f7 fb86 	bl	80002ec <__adddf3>
 8008be0:	4605      	mov	r5, r0
 8008be2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008be6:	2c00      	cmp	r4, #0
 8008be8:	f040 808d 	bne.w	8008d06 <_dtoa_r+0x51e>
 8008bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf0:	4b71      	ldr	r3, [pc, #452]	@ (8008db8 <_dtoa_r+0x5d0>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f7f7 fb78 	bl	80002e8 <__aeabi_dsub>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c00:	462a      	mov	r2, r5
 8008c02:	4633      	mov	r3, r6
 8008c04:	f7f7 ffb8 	bl	8000b78 <__aeabi_dcmpgt>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	f040 828b 	bne.w	8009124 <_dtoa_r+0x93c>
 8008c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c12:	462a      	mov	r2, r5
 8008c14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c18:	f7f7 ff90 	bl	8000b3c <__aeabi_dcmplt>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	f040 8128 	bne.w	8008e72 <_dtoa_r+0x68a>
 8008c22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	f2c0 815a 	blt.w	8008ee6 <_dtoa_r+0x6fe>
 8008c32:	2f0e      	cmp	r7, #14
 8008c34:	f300 8157 	bgt.w	8008ee6 <_dtoa_r+0x6fe>
 8008c38:	4b5a      	ldr	r3, [pc, #360]	@ (8008da4 <_dtoa_r+0x5bc>)
 8008c3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c3e:	ed93 7b00 	vldr	d7, [r3]
 8008c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	ed8d 7b00 	vstr	d7, [sp]
 8008c4a:	da03      	bge.n	8008c54 <_dtoa_r+0x46c>
 8008c4c:	9b07      	ldr	r3, [sp, #28]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f340 8101 	ble.w	8008e56 <_dtoa_r+0x66e>
 8008c54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c58:	4656      	mov	r6, sl
 8008c5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c5e:	4620      	mov	r0, r4
 8008c60:	4629      	mov	r1, r5
 8008c62:	f7f7 fe23 	bl	80008ac <__aeabi_ddiv>
 8008c66:	f7f7 ffa7 	bl	8000bb8 <__aeabi_d2iz>
 8008c6a:	4680      	mov	r8, r0
 8008c6c:	f7f7 fc8a 	bl	8000584 <__aeabi_i2d>
 8008c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c74:	f7f7 fcf0 	bl	8000658 <__aeabi_dmul>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	4629      	mov	r1, r5
 8008c80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008c84:	f7f7 fb30 	bl	80002e8 <__aeabi_dsub>
 8008c88:	f806 4b01 	strb.w	r4, [r6], #1
 8008c8c:	9d07      	ldr	r5, [sp, #28]
 8008c8e:	eba6 040a 	sub.w	r4, r6, sl
 8008c92:	42a5      	cmp	r5, r4
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	f040 8117 	bne.w	8008eca <_dtoa_r+0x6e2>
 8008c9c:	f7f7 fb26 	bl	80002ec <__adddf3>
 8008ca0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	460d      	mov	r5, r1
 8008ca8:	f7f7 ff66 	bl	8000b78 <__aeabi_dcmpgt>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	f040 80f9 	bne.w	8008ea4 <_dtoa_r+0x6bc>
 8008cb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	4629      	mov	r1, r5
 8008cba:	f7f7 ff35 	bl	8000b28 <__aeabi_dcmpeq>
 8008cbe:	b118      	cbz	r0, 8008cc8 <_dtoa_r+0x4e0>
 8008cc0:	f018 0f01 	tst.w	r8, #1
 8008cc4:	f040 80ee 	bne.w	8008ea4 <_dtoa_r+0x6bc>
 8008cc8:	4649      	mov	r1, r9
 8008cca:	4658      	mov	r0, fp
 8008ccc:	f000 fc90 	bl	80095f0 <_Bfree>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	7033      	strb	r3, [r6, #0]
 8008cd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008cd6:	3701      	adds	r7, #1
 8008cd8:	601f      	str	r7, [r3, #0]
 8008cda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	f000 831d 	beq.w	800931c <_dtoa_r+0xb34>
 8008ce2:	601e      	str	r6, [r3, #0]
 8008ce4:	e31a      	b.n	800931c <_dtoa_r+0xb34>
 8008ce6:	07e2      	lsls	r2, r4, #31
 8008ce8:	d505      	bpl.n	8008cf6 <_dtoa_r+0x50e>
 8008cea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cee:	f7f7 fcb3 	bl	8000658 <__aeabi_dmul>
 8008cf2:	3601      	adds	r6, #1
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	1064      	asrs	r4, r4, #1
 8008cf8:	3508      	adds	r5, #8
 8008cfa:	e73f      	b.n	8008b7c <_dtoa_r+0x394>
 8008cfc:	2602      	movs	r6, #2
 8008cfe:	e742      	b.n	8008b86 <_dtoa_r+0x39e>
 8008d00:	9c07      	ldr	r4, [sp, #28]
 8008d02:	9704      	str	r7, [sp, #16]
 8008d04:	e761      	b.n	8008bca <_dtoa_r+0x3e2>
 8008d06:	4b27      	ldr	r3, [pc, #156]	@ (8008da4 <_dtoa_r+0x5bc>)
 8008d08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d12:	4454      	add	r4, sl
 8008d14:	2900      	cmp	r1, #0
 8008d16:	d053      	beq.n	8008dc0 <_dtoa_r+0x5d8>
 8008d18:	4928      	ldr	r1, [pc, #160]	@ (8008dbc <_dtoa_r+0x5d4>)
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	f7f7 fdc6 	bl	80008ac <__aeabi_ddiv>
 8008d20:	4633      	mov	r3, r6
 8008d22:	462a      	mov	r2, r5
 8008d24:	f7f7 fae0 	bl	80002e8 <__aeabi_dsub>
 8008d28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d2c:	4656      	mov	r6, sl
 8008d2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d32:	f7f7 ff41 	bl	8000bb8 <__aeabi_d2iz>
 8008d36:	4605      	mov	r5, r0
 8008d38:	f7f7 fc24 	bl	8000584 <__aeabi_i2d>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	460b      	mov	r3, r1
 8008d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d44:	f7f7 fad0 	bl	80002e8 <__aeabi_dsub>
 8008d48:	3530      	adds	r5, #48	@ 0x30
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d52:	f806 5b01 	strb.w	r5, [r6], #1
 8008d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d5a:	f7f7 feef 	bl	8000b3c <__aeabi_dcmplt>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d171      	bne.n	8008e46 <_dtoa_r+0x65e>
 8008d62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d66:	4911      	ldr	r1, [pc, #68]	@ (8008dac <_dtoa_r+0x5c4>)
 8008d68:	2000      	movs	r0, #0
 8008d6a:	f7f7 fabd 	bl	80002e8 <__aeabi_dsub>
 8008d6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d72:	f7f7 fee3 	bl	8000b3c <__aeabi_dcmplt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f040 8095 	bne.w	8008ea6 <_dtoa_r+0x6be>
 8008d7c:	42a6      	cmp	r6, r4
 8008d7e:	f43f af50 	beq.w	8008c22 <_dtoa_r+0x43a>
 8008d82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d86:	4b0a      	ldr	r3, [pc, #40]	@ (8008db0 <_dtoa_r+0x5c8>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f7f7 fc65 	bl	8000658 <__aeabi_dmul>
 8008d8e:	4b08      	ldr	r3, [pc, #32]	@ (8008db0 <_dtoa_r+0x5c8>)
 8008d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d94:	2200      	movs	r2, #0
 8008d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d9a:	f7f7 fc5d 	bl	8000658 <__aeabi_dmul>
 8008d9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008da2:	e7c4      	b.n	8008d2e <_dtoa_r+0x546>
 8008da4:	0800f5c0 	.word	0x0800f5c0
 8008da8:	0800f598 	.word	0x0800f598
 8008dac:	3ff00000 	.word	0x3ff00000
 8008db0:	40240000 	.word	0x40240000
 8008db4:	401c0000 	.word	0x401c0000
 8008db8:	40140000 	.word	0x40140000
 8008dbc:	3fe00000 	.word	0x3fe00000
 8008dc0:	4631      	mov	r1, r6
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f7f7 fc48 	bl	8000658 <__aeabi_dmul>
 8008dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008dcc:	9415      	str	r4, [sp, #84]	@ 0x54
 8008dce:	4656      	mov	r6, sl
 8008dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dd4:	f7f7 fef0 	bl	8000bb8 <__aeabi_d2iz>
 8008dd8:	4605      	mov	r5, r0
 8008dda:	f7f7 fbd3 	bl	8000584 <__aeabi_i2d>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de6:	f7f7 fa7f 	bl	80002e8 <__aeabi_dsub>
 8008dea:	3530      	adds	r5, #48	@ 0x30
 8008dec:	f806 5b01 	strb.w	r5, [r6], #1
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	42a6      	cmp	r6, r4
 8008df6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dfa:	f04f 0200 	mov.w	r2, #0
 8008dfe:	d124      	bne.n	8008e4a <_dtoa_r+0x662>
 8008e00:	4bac      	ldr	r3, [pc, #688]	@ (80090b4 <_dtoa_r+0x8cc>)
 8008e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e06:	f7f7 fa71 	bl	80002ec <__adddf3>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e12:	f7f7 feb1 	bl	8000b78 <__aeabi_dcmpgt>
 8008e16:	2800      	cmp	r0, #0
 8008e18:	d145      	bne.n	8008ea6 <_dtoa_r+0x6be>
 8008e1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e1e:	49a5      	ldr	r1, [pc, #660]	@ (80090b4 <_dtoa_r+0x8cc>)
 8008e20:	2000      	movs	r0, #0
 8008e22:	f7f7 fa61 	bl	80002e8 <__aeabi_dsub>
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e2e:	f7f7 fe85 	bl	8000b3c <__aeabi_dcmplt>
 8008e32:	2800      	cmp	r0, #0
 8008e34:	f43f aef5 	beq.w	8008c22 <_dtoa_r+0x43a>
 8008e38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008e3a:	1e73      	subs	r3, r6, #1
 8008e3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e42:	2b30      	cmp	r3, #48	@ 0x30
 8008e44:	d0f8      	beq.n	8008e38 <_dtoa_r+0x650>
 8008e46:	9f04      	ldr	r7, [sp, #16]
 8008e48:	e73e      	b.n	8008cc8 <_dtoa_r+0x4e0>
 8008e4a:	4b9b      	ldr	r3, [pc, #620]	@ (80090b8 <_dtoa_r+0x8d0>)
 8008e4c:	f7f7 fc04 	bl	8000658 <__aeabi_dmul>
 8008e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e54:	e7bc      	b.n	8008dd0 <_dtoa_r+0x5e8>
 8008e56:	d10c      	bne.n	8008e72 <_dtoa_r+0x68a>
 8008e58:	4b98      	ldr	r3, [pc, #608]	@ (80090bc <_dtoa_r+0x8d4>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e60:	f7f7 fbfa 	bl	8000658 <__aeabi_dmul>
 8008e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e68:	f7f7 fe7c 	bl	8000b64 <__aeabi_dcmpge>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	f000 8157 	beq.w	8009120 <_dtoa_r+0x938>
 8008e72:	2400      	movs	r4, #0
 8008e74:	4625      	mov	r5, r4
 8008e76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e78:	43db      	mvns	r3, r3
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	4656      	mov	r6, sl
 8008e7e:	2700      	movs	r7, #0
 8008e80:	4621      	mov	r1, r4
 8008e82:	4658      	mov	r0, fp
 8008e84:	f000 fbb4 	bl	80095f0 <_Bfree>
 8008e88:	2d00      	cmp	r5, #0
 8008e8a:	d0dc      	beq.n	8008e46 <_dtoa_r+0x65e>
 8008e8c:	b12f      	cbz	r7, 8008e9a <_dtoa_r+0x6b2>
 8008e8e:	42af      	cmp	r7, r5
 8008e90:	d003      	beq.n	8008e9a <_dtoa_r+0x6b2>
 8008e92:	4639      	mov	r1, r7
 8008e94:	4658      	mov	r0, fp
 8008e96:	f000 fbab 	bl	80095f0 <_Bfree>
 8008e9a:	4629      	mov	r1, r5
 8008e9c:	4658      	mov	r0, fp
 8008e9e:	f000 fba7 	bl	80095f0 <_Bfree>
 8008ea2:	e7d0      	b.n	8008e46 <_dtoa_r+0x65e>
 8008ea4:	9704      	str	r7, [sp, #16]
 8008ea6:	4633      	mov	r3, r6
 8008ea8:	461e      	mov	r6, r3
 8008eaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eae:	2a39      	cmp	r2, #57	@ 0x39
 8008eb0:	d107      	bne.n	8008ec2 <_dtoa_r+0x6da>
 8008eb2:	459a      	cmp	sl, r3
 8008eb4:	d1f8      	bne.n	8008ea8 <_dtoa_r+0x6c0>
 8008eb6:	9a04      	ldr	r2, [sp, #16]
 8008eb8:	3201      	adds	r2, #1
 8008eba:	9204      	str	r2, [sp, #16]
 8008ebc:	2230      	movs	r2, #48	@ 0x30
 8008ebe:	f88a 2000 	strb.w	r2, [sl]
 8008ec2:	781a      	ldrb	r2, [r3, #0]
 8008ec4:	3201      	adds	r2, #1
 8008ec6:	701a      	strb	r2, [r3, #0]
 8008ec8:	e7bd      	b.n	8008e46 <_dtoa_r+0x65e>
 8008eca:	4b7b      	ldr	r3, [pc, #492]	@ (80090b8 <_dtoa_r+0x8d0>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f7f7 fbc3 	bl	8000658 <__aeabi_dmul>
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	460d      	mov	r5, r1
 8008eda:	f7f7 fe25 	bl	8000b28 <__aeabi_dcmpeq>
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	f43f aebb 	beq.w	8008c5a <_dtoa_r+0x472>
 8008ee4:	e6f0      	b.n	8008cc8 <_dtoa_r+0x4e0>
 8008ee6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	f000 80db 	beq.w	80090a4 <_dtoa_r+0x8bc>
 8008eee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ef0:	2a01      	cmp	r2, #1
 8008ef2:	f300 80bf 	bgt.w	8009074 <_dtoa_r+0x88c>
 8008ef6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008ef8:	2a00      	cmp	r2, #0
 8008efa:	f000 80b7 	beq.w	800906c <_dtoa_r+0x884>
 8008efe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f04:	4646      	mov	r6, r8
 8008f06:	9a08      	ldr	r2, [sp, #32]
 8008f08:	2101      	movs	r1, #1
 8008f0a:	441a      	add	r2, r3
 8008f0c:	4658      	mov	r0, fp
 8008f0e:	4498      	add	r8, r3
 8008f10:	9208      	str	r2, [sp, #32]
 8008f12:	f000 fc21 	bl	8009758 <__i2b>
 8008f16:	4605      	mov	r5, r0
 8008f18:	b15e      	cbz	r6, 8008f32 <_dtoa_r+0x74a>
 8008f1a:	9b08      	ldr	r3, [sp, #32]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dd08      	ble.n	8008f32 <_dtoa_r+0x74a>
 8008f20:	42b3      	cmp	r3, r6
 8008f22:	9a08      	ldr	r2, [sp, #32]
 8008f24:	bfa8      	it	ge
 8008f26:	4633      	movge	r3, r6
 8008f28:	eba8 0803 	sub.w	r8, r8, r3
 8008f2c:	1af6      	subs	r6, r6, r3
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	9308      	str	r3, [sp, #32]
 8008f32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f34:	b1f3      	cbz	r3, 8008f74 <_dtoa_r+0x78c>
 8008f36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 80b7 	beq.w	80090ac <_dtoa_r+0x8c4>
 8008f3e:	b18c      	cbz	r4, 8008f64 <_dtoa_r+0x77c>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4622      	mov	r2, r4
 8008f44:	4658      	mov	r0, fp
 8008f46:	f000 fcc7 	bl	80098d8 <__pow5mult>
 8008f4a:	464a      	mov	r2, r9
 8008f4c:	4601      	mov	r1, r0
 8008f4e:	4605      	mov	r5, r0
 8008f50:	4658      	mov	r0, fp
 8008f52:	f000 fc17 	bl	8009784 <__multiply>
 8008f56:	4649      	mov	r1, r9
 8008f58:	9004      	str	r0, [sp, #16]
 8008f5a:	4658      	mov	r0, fp
 8008f5c:	f000 fb48 	bl	80095f0 <_Bfree>
 8008f60:	9b04      	ldr	r3, [sp, #16]
 8008f62:	4699      	mov	r9, r3
 8008f64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f66:	1b1a      	subs	r2, r3, r4
 8008f68:	d004      	beq.n	8008f74 <_dtoa_r+0x78c>
 8008f6a:	4649      	mov	r1, r9
 8008f6c:	4658      	mov	r0, fp
 8008f6e:	f000 fcb3 	bl	80098d8 <__pow5mult>
 8008f72:	4681      	mov	r9, r0
 8008f74:	2101      	movs	r1, #1
 8008f76:	4658      	mov	r0, fp
 8008f78:	f000 fbee 	bl	8009758 <__i2b>
 8008f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f7e:	4604      	mov	r4, r0
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f000 81cf 	beq.w	8009324 <_dtoa_r+0xb3c>
 8008f86:	461a      	mov	r2, r3
 8008f88:	4601      	mov	r1, r0
 8008f8a:	4658      	mov	r0, fp
 8008f8c:	f000 fca4 	bl	80098d8 <__pow5mult>
 8008f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	4604      	mov	r4, r0
 8008f96:	f300 8095 	bgt.w	80090c4 <_dtoa_r+0x8dc>
 8008f9a:	9b02      	ldr	r3, [sp, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f040 8087 	bne.w	80090b0 <_dtoa_r+0x8c8>
 8008fa2:	9b03      	ldr	r3, [sp, #12]
 8008fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f040 8089 	bne.w	80090c0 <_dtoa_r+0x8d8>
 8008fae:	9b03      	ldr	r3, [sp, #12]
 8008fb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fb4:	0d1b      	lsrs	r3, r3, #20
 8008fb6:	051b      	lsls	r3, r3, #20
 8008fb8:	b12b      	cbz	r3, 8008fc6 <_dtoa_r+0x7de>
 8008fba:	9b08      	ldr	r3, [sp, #32]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	9308      	str	r3, [sp, #32]
 8008fc0:	f108 0801 	add.w	r8, r8, #1
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 81b0 	beq.w	8009330 <_dtoa_r+0xb48>
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008fd6:	6918      	ldr	r0, [r3, #16]
 8008fd8:	f000 fb72 	bl	80096c0 <__hi0bits>
 8008fdc:	f1c0 0020 	rsb	r0, r0, #32
 8008fe0:	9b08      	ldr	r3, [sp, #32]
 8008fe2:	4418      	add	r0, r3
 8008fe4:	f010 001f 	ands.w	r0, r0, #31
 8008fe8:	d077      	beq.n	80090da <_dtoa_r+0x8f2>
 8008fea:	f1c0 0320 	rsb	r3, r0, #32
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	dd6b      	ble.n	80090ca <_dtoa_r+0x8e2>
 8008ff2:	9b08      	ldr	r3, [sp, #32]
 8008ff4:	f1c0 001c 	rsb	r0, r0, #28
 8008ff8:	4403      	add	r3, r0
 8008ffa:	4480      	add	r8, r0
 8008ffc:	4406      	add	r6, r0
 8008ffe:	9308      	str	r3, [sp, #32]
 8009000:	f1b8 0f00 	cmp.w	r8, #0
 8009004:	dd05      	ble.n	8009012 <_dtoa_r+0x82a>
 8009006:	4649      	mov	r1, r9
 8009008:	4642      	mov	r2, r8
 800900a:	4658      	mov	r0, fp
 800900c:	f000 fcbe 	bl	800998c <__lshift>
 8009010:	4681      	mov	r9, r0
 8009012:	9b08      	ldr	r3, [sp, #32]
 8009014:	2b00      	cmp	r3, #0
 8009016:	dd05      	ble.n	8009024 <_dtoa_r+0x83c>
 8009018:	4621      	mov	r1, r4
 800901a:	461a      	mov	r2, r3
 800901c:	4658      	mov	r0, fp
 800901e:	f000 fcb5 	bl	800998c <__lshift>
 8009022:	4604      	mov	r4, r0
 8009024:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009026:	2b00      	cmp	r3, #0
 8009028:	d059      	beq.n	80090de <_dtoa_r+0x8f6>
 800902a:	4621      	mov	r1, r4
 800902c:	4648      	mov	r0, r9
 800902e:	f000 fd19 	bl	8009a64 <__mcmp>
 8009032:	2800      	cmp	r0, #0
 8009034:	da53      	bge.n	80090de <_dtoa_r+0x8f6>
 8009036:	1e7b      	subs	r3, r7, #1
 8009038:	9304      	str	r3, [sp, #16]
 800903a:	4649      	mov	r1, r9
 800903c:	2300      	movs	r3, #0
 800903e:	220a      	movs	r2, #10
 8009040:	4658      	mov	r0, fp
 8009042:	f000 faf7 	bl	8009634 <__multadd>
 8009046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009048:	4681      	mov	r9, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 8172 	beq.w	8009334 <_dtoa_r+0xb4c>
 8009050:	2300      	movs	r3, #0
 8009052:	4629      	mov	r1, r5
 8009054:	220a      	movs	r2, #10
 8009056:	4658      	mov	r0, fp
 8009058:	f000 faec 	bl	8009634 <__multadd>
 800905c:	9b00      	ldr	r3, [sp, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	4605      	mov	r5, r0
 8009062:	dc67      	bgt.n	8009134 <_dtoa_r+0x94c>
 8009064:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009066:	2b02      	cmp	r3, #2
 8009068:	dc41      	bgt.n	80090ee <_dtoa_r+0x906>
 800906a:	e063      	b.n	8009134 <_dtoa_r+0x94c>
 800906c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800906e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009072:	e746      	b.n	8008f02 <_dtoa_r+0x71a>
 8009074:	9b07      	ldr	r3, [sp, #28]
 8009076:	1e5c      	subs	r4, r3, #1
 8009078:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800907a:	42a3      	cmp	r3, r4
 800907c:	bfbf      	itttt	lt
 800907e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009080:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009082:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009084:	1ae3      	sublt	r3, r4, r3
 8009086:	bfb4      	ite	lt
 8009088:	18d2      	addlt	r2, r2, r3
 800908a:	1b1c      	subge	r4, r3, r4
 800908c:	9b07      	ldr	r3, [sp, #28]
 800908e:	bfbc      	itt	lt
 8009090:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009092:	2400      	movlt	r4, #0
 8009094:	2b00      	cmp	r3, #0
 8009096:	bfb5      	itete	lt
 8009098:	eba8 0603 	sublt.w	r6, r8, r3
 800909c:	9b07      	ldrge	r3, [sp, #28]
 800909e:	2300      	movlt	r3, #0
 80090a0:	4646      	movge	r6, r8
 80090a2:	e730      	b.n	8008f06 <_dtoa_r+0x71e>
 80090a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090a8:	4646      	mov	r6, r8
 80090aa:	e735      	b.n	8008f18 <_dtoa_r+0x730>
 80090ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090ae:	e75c      	b.n	8008f6a <_dtoa_r+0x782>
 80090b0:	2300      	movs	r3, #0
 80090b2:	e788      	b.n	8008fc6 <_dtoa_r+0x7de>
 80090b4:	3fe00000 	.word	0x3fe00000
 80090b8:	40240000 	.word	0x40240000
 80090bc:	40140000 	.word	0x40140000
 80090c0:	9b02      	ldr	r3, [sp, #8]
 80090c2:	e780      	b.n	8008fc6 <_dtoa_r+0x7de>
 80090c4:	2300      	movs	r3, #0
 80090c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090c8:	e782      	b.n	8008fd0 <_dtoa_r+0x7e8>
 80090ca:	d099      	beq.n	8009000 <_dtoa_r+0x818>
 80090cc:	9a08      	ldr	r2, [sp, #32]
 80090ce:	331c      	adds	r3, #28
 80090d0:	441a      	add	r2, r3
 80090d2:	4498      	add	r8, r3
 80090d4:	441e      	add	r6, r3
 80090d6:	9208      	str	r2, [sp, #32]
 80090d8:	e792      	b.n	8009000 <_dtoa_r+0x818>
 80090da:	4603      	mov	r3, r0
 80090dc:	e7f6      	b.n	80090cc <_dtoa_r+0x8e4>
 80090de:	9b07      	ldr	r3, [sp, #28]
 80090e0:	9704      	str	r7, [sp, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	dc20      	bgt.n	8009128 <_dtoa_r+0x940>
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	dd1e      	ble.n	800912c <_dtoa_r+0x944>
 80090ee:	9b00      	ldr	r3, [sp, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f47f aec0 	bne.w	8008e76 <_dtoa_r+0x68e>
 80090f6:	4621      	mov	r1, r4
 80090f8:	2205      	movs	r2, #5
 80090fa:	4658      	mov	r0, fp
 80090fc:	f000 fa9a 	bl	8009634 <__multadd>
 8009100:	4601      	mov	r1, r0
 8009102:	4604      	mov	r4, r0
 8009104:	4648      	mov	r0, r9
 8009106:	f000 fcad 	bl	8009a64 <__mcmp>
 800910a:	2800      	cmp	r0, #0
 800910c:	f77f aeb3 	ble.w	8008e76 <_dtoa_r+0x68e>
 8009110:	4656      	mov	r6, sl
 8009112:	2331      	movs	r3, #49	@ 0x31
 8009114:	f806 3b01 	strb.w	r3, [r6], #1
 8009118:	9b04      	ldr	r3, [sp, #16]
 800911a:	3301      	adds	r3, #1
 800911c:	9304      	str	r3, [sp, #16]
 800911e:	e6ae      	b.n	8008e7e <_dtoa_r+0x696>
 8009120:	9c07      	ldr	r4, [sp, #28]
 8009122:	9704      	str	r7, [sp, #16]
 8009124:	4625      	mov	r5, r4
 8009126:	e7f3      	b.n	8009110 <_dtoa_r+0x928>
 8009128:	9b07      	ldr	r3, [sp, #28]
 800912a:	9300      	str	r3, [sp, #0]
 800912c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8104 	beq.w	800933c <_dtoa_r+0xb54>
 8009134:	2e00      	cmp	r6, #0
 8009136:	dd05      	ble.n	8009144 <_dtoa_r+0x95c>
 8009138:	4629      	mov	r1, r5
 800913a:	4632      	mov	r2, r6
 800913c:	4658      	mov	r0, fp
 800913e:	f000 fc25 	bl	800998c <__lshift>
 8009142:	4605      	mov	r5, r0
 8009144:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009146:	2b00      	cmp	r3, #0
 8009148:	d05a      	beq.n	8009200 <_dtoa_r+0xa18>
 800914a:	6869      	ldr	r1, [r5, #4]
 800914c:	4658      	mov	r0, fp
 800914e:	f000 fa0f 	bl	8009570 <_Balloc>
 8009152:	4606      	mov	r6, r0
 8009154:	b928      	cbnz	r0, 8009162 <_dtoa_r+0x97a>
 8009156:	4b84      	ldr	r3, [pc, #528]	@ (8009368 <_dtoa_r+0xb80>)
 8009158:	4602      	mov	r2, r0
 800915a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800915e:	f7ff bb5a 	b.w	8008816 <_dtoa_r+0x2e>
 8009162:	692a      	ldr	r2, [r5, #16]
 8009164:	3202      	adds	r2, #2
 8009166:	0092      	lsls	r2, r2, #2
 8009168:	f105 010c 	add.w	r1, r5, #12
 800916c:	300c      	adds	r0, #12
 800916e:	f000 ffaf 	bl	800a0d0 <memcpy>
 8009172:	2201      	movs	r2, #1
 8009174:	4631      	mov	r1, r6
 8009176:	4658      	mov	r0, fp
 8009178:	f000 fc08 	bl	800998c <__lshift>
 800917c:	f10a 0301 	add.w	r3, sl, #1
 8009180:	9307      	str	r3, [sp, #28]
 8009182:	9b00      	ldr	r3, [sp, #0]
 8009184:	4453      	add	r3, sl
 8009186:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009188:	9b02      	ldr	r3, [sp, #8]
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	462f      	mov	r7, r5
 8009190:	930a      	str	r3, [sp, #40]	@ 0x28
 8009192:	4605      	mov	r5, r0
 8009194:	9b07      	ldr	r3, [sp, #28]
 8009196:	4621      	mov	r1, r4
 8009198:	3b01      	subs	r3, #1
 800919a:	4648      	mov	r0, r9
 800919c:	9300      	str	r3, [sp, #0]
 800919e:	f7ff fa98 	bl	80086d2 <quorem>
 80091a2:	4639      	mov	r1, r7
 80091a4:	9002      	str	r0, [sp, #8]
 80091a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091aa:	4648      	mov	r0, r9
 80091ac:	f000 fc5a 	bl	8009a64 <__mcmp>
 80091b0:	462a      	mov	r2, r5
 80091b2:	9008      	str	r0, [sp, #32]
 80091b4:	4621      	mov	r1, r4
 80091b6:	4658      	mov	r0, fp
 80091b8:	f000 fc70 	bl	8009a9c <__mdiff>
 80091bc:	68c2      	ldr	r2, [r0, #12]
 80091be:	4606      	mov	r6, r0
 80091c0:	bb02      	cbnz	r2, 8009204 <_dtoa_r+0xa1c>
 80091c2:	4601      	mov	r1, r0
 80091c4:	4648      	mov	r0, r9
 80091c6:	f000 fc4d 	bl	8009a64 <__mcmp>
 80091ca:	4602      	mov	r2, r0
 80091cc:	4631      	mov	r1, r6
 80091ce:	4658      	mov	r0, fp
 80091d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80091d2:	f000 fa0d 	bl	80095f0 <_Bfree>
 80091d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091da:	9e07      	ldr	r6, [sp, #28]
 80091dc:	ea43 0102 	orr.w	r1, r3, r2
 80091e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091e2:	4319      	orrs	r1, r3
 80091e4:	d110      	bne.n	8009208 <_dtoa_r+0xa20>
 80091e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80091ea:	d029      	beq.n	8009240 <_dtoa_r+0xa58>
 80091ec:	9b08      	ldr	r3, [sp, #32]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	dd02      	ble.n	80091f8 <_dtoa_r+0xa10>
 80091f2:	9b02      	ldr	r3, [sp, #8]
 80091f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80091f8:	9b00      	ldr	r3, [sp, #0]
 80091fa:	f883 8000 	strb.w	r8, [r3]
 80091fe:	e63f      	b.n	8008e80 <_dtoa_r+0x698>
 8009200:	4628      	mov	r0, r5
 8009202:	e7bb      	b.n	800917c <_dtoa_r+0x994>
 8009204:	2201      	movs	r2, #1
 8009206:	e7e1      	b.n	80091cc <_dtoa_r+0x9e4>
 8009208:	9b08      	ldr	r3, [sp, #32]
 800920a:	2b00      	cmp	r3, #0
 800920c:	db04      	blt.n	8009218 <_dtoa_r+0xa30>
 800920e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009210:	430b      	orrs	r3, r1
 8009212:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009214:	430b      	orrs	r3, r1
 8009216:	d120      	bne.n	800925a <_dtoa_r+0xa72>
 8009218:	2a00      	cmp	r2, #0
 800921a:	dded      	ble.n	80091f8 <_dtoa_r+0xa10>
 800921c:	4649      	mov	r1, r9
 800921e:	2201      	movs	r2, #1
 8009220:	4658      	mov	r0, fp
 8009222:	f000 fbb3 	bl	800998c <__lshift>
 8009226:	4621      	mov	r1, r4
 8009228:	4681      	mov	r9, r0
 800922a:	f000 fc1b 	bl	8009a64 <__mcmp>
 800922e:	2800      	cmp	r0, #0
 8009230:	dc03      	bgt.n	800923a <_dtoa_r+0xa52>
 8009232:	d1e1      	bne.n	80091f8 <_dtoa_r+0xa10>
 8009234:	f018 0f01 	tst.w	r8, #1
 8009238:	d0de      	beq.n	80091f8 <_dtoa_r+0xa10>
 800923a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800923e:	d1d8      	bne.n	80091f2 <_dtoa_r+0xa0a>
 8009240:	9a00      	ldr	r2, [sp, #0]
 8009242:	2339      	movs	r3, #57	@ 0x39
 8009244:	7013      	strb	r3, [r2, #0]
 8009246:	4633      	mov	r3, r6
 8009248:	461e      	mov	r6, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009250:	2a39      	cmp	r2, #57	@ 0x39
 8009252:	d052      	beq.n	80092fa <_dtoa_r+0xb12>
 8009254:	3201      	adds	r2, #1
 8009256:	701a      	strb	r2, [r3, #0]
 8009258:	e612      	b.n	8008e80 <_dtoa_r+0x698>
 800925a:	2a00      	cmp	r2, #0
 800925c:	dd07      	ble.n	800926e <_dtoa_r+0xa86>
 800925e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009262:	d0ed      	beq.n	8009240 <_dtoa_r+0xa58>
 8009264:	9a00      	ldr	r2, [sp, #0]
 8009266:	f108 0301 	add.w	r3, r8, #1
 800926a:	7013      	strb	r3, [r2, #0]
 800926c:	e608      	b.n	8008e80 <_dtoa_r+0x698>
 800926e:	9b07      	ldr	r3, [sp, #28]
 8009270:	9a07      	ldr	r2, [sp, #28]
 8009272:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009278:	4293      	cmp	r3, r2
 800927a:	d028      	beq.n	80092ce <_dtoa_r+0xae6>
 800927c:	4649      	mov	r1, r9
 800927e:	2300      	movs	r3, #0
 8009280:	220a      	movs	r2, #10
 8009282:	4658      	mov	r0, fp
 8009284:	f000 f9d6 	bl	8009634 <__multadd>
 8009288:	42af      	cmp	r7, r5
 800928a:	4681      	mov	r9, r0
 800928c:	f04f 0300 	mov.w	r3, #0
 8009290:	f04f 020a 	mov.w	r2, #10
 8009294:	4639      	mov	r1, r7
 8009296:	4658      	mov	r0, fp
 8009298:	d107      	bne.n	80092aa <_dtoa_r+0xac2>
 800929a:	f000 f9cb 	bl	8009634 <__multadd>
 800929e:	4607      	mov	r7, r0
 80092a0:	4605      	mov	r5, r0
 80092a2:	9b07      	ldr	r3, [sp, #28]
 80092a4:	3301      	adds	r3, #1
 80092a6:	9307      	str	r3, [sp, #28]
 80092a8:	e774      	b.n	8009194 <_dtoa_r+0x9ac>
 80092aa:	f000 f9c3 	bl	8009634 <__multadd>
 80092ae:	4629      	mov	r1, r5
 80092b0:	4607      	mov	r7, r0
 80092b2:	2300      	movs	r3, #0
 80092b4:	220a      	movs	r2, #10
 80092b6:	4658      	mov	r0, fp
 80092b8:	f000 f9bc 	bl	8009634 <__multadd>
 80092bc:	4605      	mov	r5, r0
 80092be:	e7f0      	b.n	80092a2 <_dtoa_r+0xaba>
 80092c0:	9b00      	ldr	r3, [sp, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bfcc      	ite	gt
 80092c6:	461e      	movgt	r6, r3
 80092c8:	2601      	movle	r6, #1
 80092ca:	4456      	add	r6, sl
 80092cc:	2700      	movs	r7, #0
 80092ce:	4649      	mov	r1, r9
 80092d0:	2201      	movs	r2, #1
 80092d2:	4658      	mov	r0, fp
 80092d4:	f000 fb5a 	bl	800998c <__lshift>
 80092d8:	4621      	mov	r1, r4
 80092da:	4681      	mov	r9, r0
 80092dc:	f000 fbc2 	bl	8009a64 <__mcmp>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	dcb0      	bgt.n	8009246 <_dtoa_r+0xa5e>
 80092e4:	d102      	bne.n	80092ec <_dtoa_r+0xb04>
 80092e6:	f018 0f01 	tst.w	r8, #1
 80092ea:	d1ac      	bne.n	8009246 <_dtoa_r+0xa5e>
 80092ec:	4633      	mov	r3, r6
 80092ee:	461e      	mov	r6, r3
 80092f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092f4:	2a30      	cmp	r2, #48	@ 0x30
 80092f6:	d0fa      	beq.n	80092ee <_dtoa_r+0xb06>
 80092f8:	e5c2      	b.n	8008e80 <_dtoa_r+0x698>
 80092fa:	459a      	cmp	sl, r3
 80092fc:	d1a4      	bne.n	8009248 <_dtoa_r+0xa60>
 80092fe:	9b04      	ldr	r3, [sp, #16]
 8009300:	3301      	adds	r3, #1
 8009302:	9304      	str	r3, [sp, #16]
 8009304:	2331      	movs	r3, #49	@ 0x31
 8009306:	f88a 3000 	strb.w	r3, [sl]
 800930a:	e5b9      	b.n	8008e80 <_dtoa_r+0x698>
 800930c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800930e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800936c <_dtoa_r+0xb84>
 8009312:	b11b      	cbz	r3, 800931c <_dtoa_r+0xb34>
 8009314:	f10a 0308 	add.w	r3, sl, #8
 8009318:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800931a:	6013      	str	r3, [r2, #0]
 800931c:	4650      	mov	r0, sl
 800931e:	b019      	add	sp, #100	@ 0x64
 8009320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009326:	2b01      	cmp	r3, #1
 8009328:	f77f ae37 	ble.w	8008f9a <_dtoa_r+0x7b2>
 800932c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800932e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009330:	2001      	movs	r0, #1
 8009332:	e655      	b.n	8008fe0 <_dtoa_r+0x7f8>
 8009334:	9b00      	ldr	r3, [sp, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	f77f aed6 	ble.w	80090e8 <_dtoa_r+0x900>
 800933c:	4656      	mov	r6, sl
 800933e:	4621      	mov	r1, r4
 8009340:	4648      	mov	r0, r9
 8009342:	f7ff f9c6 	bl	80086d2 <quorem>
 8009346:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800934a:	f806 8b01 	strb.w	r8, [r6], #1
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	eba6 020a 	sub.w	r2, r6, sl
 8009354:	4293      	cmp	r3, r2
 8009356:	ddb3      	ble.n	80092c0 <_dtoa_r+0xad8>
 8009358:	4649      	mov	r1, r9
 800935a:	2300      	movs	r3, #0
 800935c:	220a      	movs	r2, #10
 800935e:	4658      	mov	r0, fp
 8009360:	f000 f968 	bl	8009634 <__multadd>
 8009364:	4681      	mov	r9, r0
 8009366:	e7ea      	b.n	800933e <_dtoa_r+0xb56>
 8009368:	0800f51c 	.word	0x0800f51c
 800936c:	0800f4a0 	.word	0x0800f4a0

08009370 <_free_r>:
 8009370:	b538      	push	{r3, r4, r5, lr}
 8009372:	4605      	mov	r5, r0
 8009374:	2900      	cmp	r1, #0
 8009376:	d041      	beq.n	80093fc <_free_r+0x8c>
 8009378:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800937c:	1f0c      	subs	r4, r1, #4
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfb8      	it	lt
 8009382:	18e4      	addlt	r4, r4, r3
 8009384:	f000 f8e8 	bl	8009558 <__malloc_lock>
 8009388:	4a1d      	ldr	r2, [pc, #116]	@ (8009400 <_free_r+0x90>)
 800938a:	6813      	ldr	r3, [r2, #0]
 800938c:	b933      	cbnz	r3, 800939c <_free_r+0x2c>
 800938e:	6063      	str	r3, [r4, #4]
 8009390:	6014      	str	r4, [r2, #0]
 8009392:	4628      	mov	r0, r5
 8009394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009398:	f000 b8e4 	b.w	8009564 <__malloc_unlock>
 800939c:	42a3      	cmp	r3, r4
 800939e:	d908      	bls.n	80093b2 <_free_r+0x42>
 80093a0:	6820      	ldr	r0, [r4, #0]
 80093a2:	1821      	adds	r1, r4, r0
 80093a4:	428b      	cmp	r3, r1
 80093a6:	bf01      	itttt	eq
 80093a8:	6819      	ldreq	r1, [r3, #0]
 80093aa:	685b      	ldreq	r3, [r3, #4]
 80093ac:	1809      	addeq	r1, r1, r0
 80093ae:	6021      	streq	r1, [r4, #0]
 80093b0:	e7ed      	b.n	800938e <_free_r+0x1e>
 80093b2:	461a      	mov	r2, r3
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	b10b      	cbz	r3, 80093bc <_free_r+0x4c>
 80093b8:	42a3      	cmp	r3, r4
 80093ba:	d9fa      	bls.n	80093b2 <_free_r+0x42>
 80093bc:	6811      	ldr	r1, [r2, #0]
 80093be:	1850      	adds	r0, r2, r1
 80093c0:	42a0      	cmp	r0, r4
 80093c2:	d10b      	bne.n	80093dc <_free_r+0x6c>
 80093c4:	6820      	ldr	r0, [r4, #0]
 80093c6:	4401      	add	r1, r0
 80093c8:	1850      	adds	r0, r2, r1
 80093ca:	4283      	cmp	r3, r0
 80093cc:	6011      	str	r1, [r2, #0]
 80093ce:	d1e0      	bne.n	8009392 <_free_r+0x22>
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	6053      	str	r3, [r2, #4]
 80093d6:	4408      	add	r0, r1
 80093d8:	6010      	str	r0, [r2, #0]
 80093da:	e7da      	b.n	8009392 <_free_r+0x22>
 80093dc:	d902      	bls.n	80093e4 <_free_r+0x74>
 80093de:	230c      	movs	r3, #12
 80093e0:	602b      	str	r3, [r5, #0]
 80093e2:	e7d6      	b.n	8009392 <_free_r+0x22>
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	1821      	adds	r1, r4, r0
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf04      	itt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	6063      	str	r3, [r4, #4]
 80093f2:	bf04      	itt	eq
 80093f4:	1809      	addeq	r1, r1, r0
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	6054      	str	r4, [r2, #4]
 80093fa:	e7ca      	b.n	8009392 <_free_r+0x22>
 80093fc:	bd38      	pop	{r3, r4, r5, pc}
 80093fe:	bf00      	nop
 8009400:	20005b9c 	.word	0x20005b9c

08009404 <malloc>:
 8009404:	4b02      	ldr	r3, [pc, #8]	@ (8009410 <malloc+0xc>)
 8009406:	4601      	mov	r1, r0
 8009408:	6818      	ldr	r0, [r3, #0]
 800940a:	f000 b825 	b.w	8009458 <_malloc_r>
 800940e:	bf00      	nop
 8009410:	20003698 	.word	0x20003698

08009414 <sbrk_aligned>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	4e0f      	ldr	r6, [pc, #60]	@ (8009454 <sbrk_aligned+0x40>)
 8009418:	460c      	mov	r4, r1
 800941a:	6831      	ldr	r1, [r6, #0]
 800941c:	4605      	mov	r5, r0
 800941e:	b911      	cbnz	r1, 8009426 <sbrk_aligned+0x12>
 8009420:	f000 fe46 	bl	800a0b0 <_sbrk_r>
 8009424:	6030      	str	r0, [r6, #0]
 8009426:	4621      	mov	r1, r4
 8009428:	4628      	mov	r0, r5
 800942a:	f000 fe41 	bl	800a0b0 <_sbrk_r>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	d103      	bne.n	800943a <sbrk_aligned+0x26>
 8009432:	f04f 34ff 	mov.w	r4, #4294967295
 8009436:	4620      	mov	r0, r4
 8009438:	bd70      	pop	{r4, r5, r6, pc}
 800943a:	1cc4      	adds	r4, r0, #3
 800943c:	f024 0403 	bic.w	r4, r4, #3
 8009440:	42a0      	cmp	r0, r4
 8009442:	d0f8      	beq.n	8009436 <sbrk_aligned+0x22>
 8009444:	1a21      	subs	r1, r4, r0
 8009446:	4628      	mov	r0, r5
 8009448:	f000 fe32 	bl	800a0b0 <_sbrk_r>
 800944c:	3001      	adds	r0, #1
 800944e:	d1f2      	bne.n	8009436 <sbrk_aligned+0x22>
 8009450:	e7ef      	b.n	8009432 <sbrk_aligned+0x1e>
 8009452:	bf00      	nop
 8009454:	20005b98 	.word	0x20005b98

08009458 <_malloc_r>:
 8009458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800945c:	1ccd      	adds	r5, r1, #3
 800945e:	f025 0503 	bic.w	r5, r5, #3
 8009462:	3508      	adds	r5, #8
 8009464:	2d0c      	cmp	r5, #12
 8009466:	bf38      	it	cc
 8009468:	250c      	movcc	r5, #12
 800946a:	2d00      	cmp	r5, #0
 800946c:	4606      	mov	r6, r0
 800946e:	db01      	blt.n	8009474 <_malloc_r+0x1c>
 8009470:	42a9      	cmp	r1, r5
 8009472:	d904      	bls.n	800947e <_malloc_r+0x26>
 8009474:	230c      	movs	r3, #12
 8009476:	6033      	str	r3, [r6, #0]
 8009478:	2000      	movs	r0, #0
 800947a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800947e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009554 <_malloc_r+0xfc>
 8009482:	f000 f869 	bl	8009558 <__malloc_lock>
 8009486:	f8d8 3000 	ldr.w	r3, [r8]
 800948a:	461c      	mov	r4, r3
 800948c:	bb44      	cbnz	r4, 80094e0 <_malloc_r+0x88>
 800948e:	4629      	mov	r1, r5
 8009490:	4630      	mov	r0, r6
 8009492:	f7ff ffbf 	bl	8009414 <sbrk_aligned>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	4604      	mov	r4, r0
 800949a:	d158      	bne.n	800954e <_malloc_r+0xf6>
 800949c:	f8d8 4000 	ldr.w	r4, [r8]
 80094a0:	4627      	mov	r7, r4
 80094a2:	2f00      	cmp	r7, #0
 80094a4:	d143      	bne.n	800952e <_malloc_r+0xd6>
 80094a6:	2c00      	cmp	r4, #0
 80094a8:	d04b      	beq.n	8009542 <_malloc_r+0xea>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	4639      	mov	r1, r7
 80094ae:	4630      	mov	r0, r6
 80094b0:	eb04 0903 	add.w	r9, r4, r3
 80094b4:	f000 fdfc 	bl	800a0b0 <_sbrk_r>
 80094b8:	4581      	cmp	r9, r0
 80094ba:	d142      	bne.n	8009542 <_malloc_r+0xea>
 80094bc:	6821      	ldr	r1, [r4, #0]
 80094be:	1a6d      	subs	r5, r5, r1
 80094c0:	4629      	mov	r1, r5
 80094c2:	4630      	mov	r0, r6
 80094c4:	f7ff ffa6 	bl	8009414 <sbrk_aligned>
 80094c8:	3001      	adds	r0, #1
 80094ca:	d03a      	beq.n	8009542 <_malloc_r+0xea>
 80094cc:	6823      	ldr	r3, [r4, #0]
 80094ce:	442b      	add	r3, r5
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	f8d8 3000 	ldr.w	r3, [r8]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	bb62      	cbnz	r2, 8009534 <_malloc_r+0xdc>
 80094da:	f8c8 7000 	str.w	r7, [r8]
 80094de:	e00f      	b.n	8009500 <_malloc_r+0xa8>
 80094e0:	6822      	ldr	r2, [r4, #0]
 80094e2:	1b52      	subs	r2, r2, r5
 80094e4:	d420      	bmi.n	8009528 <_malloc_r+0xd0>
 80094e6:	2a0b      	cmp	r2, #11
 80094e8:	d917      	bls.n	800951a <_malloc_r+0xc2>
 80094ea:	1961      	adds	r1, r4, r5
 80094ec:	42a3      	cmp	r3, r4
 80094ee:	6025      	str	r5, [r4, #0]
 80094f0:	bf18      	it	ne
 80094f2:	6059      	strne	r1, [r3, #4]
 80094f4:	6863      	ldr	r3, [r4, #4]
 80094f6:	bf08      	it	eq
 80094f8:	f8c8 1000 	streq.w	r1, [r8]
 80094fc:	5162      	str	r2, [r4, r5]
 80094fe:	604b      	str	r3, [r1, #4]
 8009500:	4630      	mov	r0, r6
 8009502:	f000 f82f 	bl	8009564 <__malloc_unlock>
 8009506:	f104 000b 	add.w	r0, r4, #11
 800950a:	1d23      	adds	r3, r4, #4
 800950c:	f020 0007 	bic.w	r0, r0, #7
 8009510:	1ac2      	subs	r2, r0, r3
 8009512:	bf1c      	itt	ne
 8009514:	1a1b      	subne	r3, r3, r0
 8009516:	50a3      	strne	r3, [r4, r2]
 8009518:	e7af      	b.n	800947a <_malloc_r+0x22>
 800951a:	6862      	ldr	r2, [r4, #4]
 800951c:	42a3      	cmp	r3, r4
 800951e:	bf0c      	ite	eq
 8009520:	f8c8 2000 	streq.w	r2, [r8]
 8009524:	605a      	strne	r2, [r3, #4]
 8009526:	e7eb      	b.n	8009500 <_malloc_r+0xa8>
 8009528:	4623      	mov	r3, r4
 800952a:	6864      	ldr	r4, [r4, #4]
 800952c:	e7ae      	b.n	800948c <_malloc_r+0x34>
 800952e:	463c      	mov	r4, r7
 8009530:	687f      	ldr	r7, [r7, #4]
 8009532:	e7b6      	b.n	80094a2 <_malloc_r+0x4a>
 8009534:	461a      	mov	r2, r3
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	42a3      	cmp	r3, r4
 800953a:	d1fb      	bne.n	8009534 <_malloc_r+0xdc>
 800953c:	2300      	movs	r3, #0
 800953e:	6053      	str	r3, [r2, #4]
 8009540:	e7de      	b.n	8009500 <_malloc_r+0xa8>
 8009542:	230c      	movs	r3, #12
 8009544:	6033      	str	r3, [r6, #0]
 8009546:	4630      	mov	r0, r6
 8009548:	f000 f80c 	bl	8009564 <__malloc_unlock>
 800954c:	e794      	b.n	8009478 <_malloc_r+0x20>
 800954e:	6005      	str	r5, [r0, #0]
 8009550:	e7d6      	b.n	8009500 <_malloc_r+0xa8>
 8009552:	bf00      	nop
 8009554:	20005b9c 	.word	0x20005b9c

08009558 <__malloc_lock>:
 8009558:	4801      	ldr	r0, [pc, #4]	@ (8009560 <__malloc_lock+0x8>)
 800955a:	f7ff b8b8 	b.w	80086ce <__retarget_lock_acquire_recursive>
 800955e:	bf00      	nop
 8009560:	20005b94 	.word	0x20005b94

08009564 <__malloc_unlock>:
 8009564:	4801      	ldr	r0, [pc, #4]	@ (800956c <__malloc_unlock+0x8>)
 8009566:	f7ff b8b3 	b.w	80086d0 <__retarget_lock_release_recursive>
 800956a:	bf00      	nop
 800956c:	20005b94 	.word	0x20005b94

08009570 <_Balloc>:
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	69c6      	ldr	r6, [r0, #28]
 8009574:	4604      	mov	r4, r0
 8009576:	460d      	mov	r5, r1
 8009578:	b976      	cbnz	r6, 8009598 <_Balloc+0x28>
 800957a:	2010      	movs	r0, #16
 800957c:	f7ff ff42 	bl	8009404 <malloc>
 8009580:	4602      	mov	r2, r0
 8009582:	61e0      	str	r0, [r4, #28]
 8009584:	b920      	cbnz	r0, 8009590 <_Balloc+0x20>
 8009586:	4b18      	ldr	r3, [pc, #96]	@ (80095e8 <_Balloc+0x78>)
 8009588:	4818      	ldr	r0, [pc, #96]	@ (80095ec <_Balloc+0x7c>)
 800958a:	216b      	movs	r1, #107	@ 0x6b
 800958c:	f000 fdae 	bl	800a0ec <__assert_func>
 8009590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009594:	6006      	str	r6, [r0, #0]
 8009596:	60c6      	str	r6, [r0, #12]
 8009598:	69e6      	ldr	r6, [r4, #28]
 800959a:	68f3      	ldr	r3, [r6, #12]
 800959c:	b183      	cbz	r3, 80095c0 <_Balloc+0x50>
 800959e:	69e3      	ldr	r3, [r4, #28]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095a6:	b9b8      	cbnz	r0, 80095d8 <_Balloc+0x68>
 80095a8:	2101      	movs	r1, #1
 80095aa:	fa01 f605 	lsl.w	r6, r1, r5
 80095ae:	1d72      	adds	r2, r6, #5
 80095b0:	0092      	lsls	r2, r2, #2
 80095b2:	4620      	mov	r0, r4
 80095b4:	f000 fdb8 	bl	800a128 <_calloc_r>
 80095b8:	b160      	cbz	r0, 80095d4 <_Balloc+0x64>
 80095ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80095be:	e00e      	b.n	80095de <_Balloc+0x6e>
 80095c0:	2221      	movs	r2, #33	@ 0x21
 80095c2:	2104      	movs	r1, #4
 80095c4:	4620      	mov	r0, r4
 80095c6:	f000 fdaf 	bl	800a128 <_calloc_r>
 80095ca:	69e3      	ldr	r3, [r4, #28]
 80095cc:	60f0      	str	r0, [r6, #12]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e4      	bne.n	800959e <_Balloc+0x2e>
 80095d4:	2000      	movs	r0, #0
 80095d6:	bd70      	pop	{r4, r5, r6, pc}
 80095d8:	6802      	ldr	r2, [r0, #0]
 80095da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80095de:	2300      	movs	r3, #0
 80095e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80095e4:	e7f7      	b.n	80095d6 <_Balloc+0x66>
 80095e6:	bf00      	nop
 80095e8:	0800f4ad 	.word	0x0800f4ad
 80095ec:	0800f52d 	.word	0x0800f52d

080095f0 <_Bfree>:
 80095f0:	b570      	push	{r4, r5, r6, lr}
 80095f2:	69c6      	ldr	r6, [r0, #28]
 80095f4:	4605      	mov	r5, r0
 80095f6:	460c      	mov	r4, r1
 80095f8:	b976      	cbnz	r6, 8009618 <_Bfree+0x28>
 80095fa:	2010      	movs	r0, #16
 80095fc:	f7ff ff02 	bl	8009404 <malloc>
 8009600:	4602      	mov	r2, r0
 8009602:	61e8      	str	r0, [r5, #28]
 8009604:	b920      	cbnz	r0, 8009610 <_Bfree+0x20>
 8009606:	4b09      	ldr	r3, [pc, #36]	@ (800962c <_Bfree+0x3c>)
 8009608:	4809      	ldr	r0, [pc, #36]	@ (8009630 <_Bfree+0x40>)
 800960a:	218f      	movs	r1, #143	@ 0x8f
 800960c:	f000 fd6e 	bl	800a0ec <__assert_func>
 8009610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009614:	6006      	str	r6, [r0, #0]
 8009616:	60c6      	str	r6, [r0, #12]
 8009618:	b13c      	cbz	r4, 800962a <_Bfree+0x3a>
 800961a:	69eb      	ldr	r3, [r5, #28]
 800961c:	6862      	ldr	r2, [r4, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009624:	6021      	str	r1, [r4, #0]
 8009626:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	0800f4ad 	.word	0x0800f4ad
 8009630:	0800f52d 	.word	0x0800f52d

08009634 <__multadd>:
 8009634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009638:	690d      	ldr	r5, [r1, #16]
 800963a:	4607      	mov	r7, r0
 800963c:	460c      	mov	r4, r1
 800963e:	461e      	mov	r6, r3
 8009640:	f101 0c14 	add.w	ip, r1, #20
 8009644:	2000      	movs	r0, #0
 8009646:	f8dc 3000 	ldr.w	r3, [ip]
 800964a:	b299      	uxth	r1, r3
 800964c:	fb02 6101 	mla	r1, r2, r1, r6
 8009650:	0c1e      	lsrs	r6, r3, #16
 8009652:	0c0b      	lsrs	r3, r1, #16
 8009654:	fb02 3306 	mla	r3, r2, r6, r3
 8009658:	b289      	uxth	r1, r1
 800965a:	3001      	adds	r0, #1
 800965c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009660:	4285      	cmp	r5, r0
 8009662:	f84c 1b04 	str.w	r1, [ip], #4
 8009666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800966a:	dcec      	bgt.n	8009646 <__multadd+0x12>
 800966c:	b30e      	cbz	r6, 80096b2 <__multadd+0x7e>
 800966e:	68a3      	ldr	r3, [r4, #8]
 8009670:	42ab      	cmp	r3, r5
 8009672:	dc19      	bgt.n	80096a8 <__multadd+0x74>
 8009674:	6861      	ldr	r1, [r4, #4]
 8009676:	4638      	mov	r0, r7
 8009678:	3101      	adds	r1, #1
 800967a:	f7ff ff79 	bl	8009570 <_Balloc>
 800967e:	4680      	mov	r8, r0
 8009680:	b928      	cbnz	r0, 800968e <__multadd+0x5a>
 8009682:	4602      	mov	r2, r0
 8009684:	4b0c      	ldr	r3, [pc, #48]	@ (80096b8 <__multadd+0x84>)
 8009686:	480d      	ldr	r0, [pc, #52]	@ (80096bc <__multadd+0x88>)
 8009688:	21ba      	movs	r1, #186	@ 0xba
 800968a:	f000 fd2f 	bl	800a0ec <__assert_func>
 800968e:	6922      	ldr	r2, [r4, #16]
 8009690:	3202      	adds	r2, #2
 8009692:	f104 010c 	add.w	r1, r4, #12
 8009696:	0092      	lsls	r2, r2, #2
 8009698:	300c      	adds	r0, #12
 800969a:	f000 fd19 	bl	800a0d0 <memcpy>
 800969e:	4621      	mov	r1, r4
 80096a0:	4638      	mov	r0, r7
 80096a2:	f7ff ffa5 	bl	80095f0 <_Bfree>
 80096a6:	4644      	mov	r4, r8
 80096a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096ac:	3501      	adds	r5, #1
 80096ae:	615e      	str	r6, [r3, #20]
 80096b0:	6125      	str	r5, [r4, #16]
 80096b2:	4620      	mov	r0, r4
 80096b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b8:	0800f51c 	.word	0x0800f51c
 80096bc:	0800f52d 	.word	0x0800f52d

080096c0 <__hi0bits>:
 80096c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80096c4:	4603      	mov	r3, r0
 80096c6:	bf36      	itet	cc
 80096c8:	0403      	lslcc	r3, r0, #16
 80096ca:	2000      	movcs	r0, #0
 80096cc:	2010      	movcc	r0, #16
 80096ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096d2:	bf3c      	itt	cc
 80096d4:	021b      	lslcc	r3, r3, #8
 80096d6:	3008      	addcc	r0, #8
 80096d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096dc:	bf3c      	itt	cc
 80096de:	011b      	lslcc	r3, r3, #4
 80096e0:	3004      	addcc	r0, #4
 80096e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e6:	bf3c      	itt	cc
 80096e8:	009b      	lslcc	r3, r3, #2
 80096ea:	3002      	addcc	r0, #2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	db05      	blt.n	80096fc <__hi0bits+0x3c>
 80096f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80096f4:	f100 0001 	add.w	r0, r0, #1
 80096f8:	bf08      	it	eq
 80096fa:	2020      	moveq	r0, #32
 80096fc:	4770      	bx	lr

080096fe <__lo0bits>:
 80096fe:	6803      	ldr	r3, [r0, #0]
 8009700:	4602      	mov	r2, r0
 8009702:	f013 0007 	ands.w	r0, r3, #7
 8009706:	d00b      	beq.n	8009720 <__lo0bits+0x22>
 8009708:	07d9      	lsls	r1, r3, #31
 800970a:	d421      	bmi.n	8009750 <__lo0bits+0x52>
 800970c:	0798      	lsls	r0, r3, #30
 800970e:	bf49      	itett	mi
 8009710:	085b      	lsrmi	r3, r3, #1
 8009712:	089b      	lsrpl	r3, r3, #2
 8009714:	2001      	movmi	r0, #1
 8009716:	6013      	strmi	r3, [r2, #0]
 8009718:	bf5c      	itt	pl
 800971a:	6013      	strpl	r3, [r2, #0]
 800971c:	2002      	movpl	r0, #2
 800971e:	4770      	bx	lr
 8009720:	b299      	uxth	r1, r3
 8009722:	b909      	cbnz	r1, 8009728 <__lo0bits+0x2a>
 8009724:	0c1b      	lsrs	r3, r3, #16
 8009726:	2010      	movs	r0, #16
 8009728:	b2d9      	uxtb	r1, r3
 800972a:	b909      	cbnz	r1, 8009730 <__lo0bits+0x32>
 800972c:	3008      	adds	r0, #8
 800972e:	0a1b      	lsrs	r3, r3, #8
 8009730:	0719      	lsls	r1, r3, #28
 8009732:	bf04      	itt	eq
 8009734:	091b      	lsreq	r3, r3, #4
 8009736:	3004      	addeq	r0, #4
 8009738:	0799      	lsls	r1, r3, #30
 800973a:	bf04      	itt	eq
 800973c:	089b      	lsreq	r3, r3, #2
 800973e:	3002      	addeq	r0, #2
 8009740:	07d9      	lsls	r1, r3, #31
 8009742:	d403      	bmi.n	800974c <__lo0bits+0x4e>
 8009744:	085b      	lsrs	r3, r3, #1
 8009746:	f100 0001 	add.w	r0, r0, #1
 800974a:	d003      	beq.n	8009754 <__lo0bits+0x56>
 800974c:	6013      	str	r3, [r2, #0]
 800974e:	4770      	bx	lr
 8009750:	2000      	movs	r0, #0
 8009752:	4770      	bx	lr
 8009754:	2020      	movs	r0, #32
 8009756:	4770      	bx	lr

08009758 <__i2b>:
 8009758:	b510      	push	{r4, lr}
 800975a:	460c      	mov	r4, r1
 800975c:	2101      	movs	r1, #1
 800975e:	f7ff ff07 	bl	8009570 <_Balloc>
 8009762:	4602      	mov	r2, r0
 8009764:	b928      	cbnz	r0, 8009772 <__i2b+0x1a>
 8009766:	4b05      	ldr	r3, [pc, #20]	@ (800977c <__i2b+0x24>)
 8009768:	4805      	ldr	r0, [pc, #20]	@ (8009780 <__i2b+0x28>)
 800976a:	f240 1145 	movw	r1, #325	@ 0x145
 800976e:	f000 fcbd 	bl	800a0ec <__assert_func>
 8009772:	2301      	movs	r3, #1
 8009774:	6144      	str	r4, [r0, #20]
 8009776:	6103      	str	r3, [r0, #16]
 8009778:	bd10      	pop	{r4, pc}
 800977a:	bf00      	nop
 800977c:	0800f51c 	.word	0x0800f51c
 8009780:	0800f52d 	.word	0x0800f52d

08009784 <__multiply>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	4614      	mov	r4, r2
 800978a:	690a      	ldr	r2, [r1, #16]
 800978c:	6923      	ldr	r3, [r4, #16]
 800978e:	429a      	cmp	r2, r3
 8009790:	bfa8      	it	ge
 8009792:	4623      	movge	r3, r4
 8009794:	460f      	mov	r7, r1
 8009796:	bfa4      	itt	ge
 8009798:	460c      	movge	r4, r1
 800979a:	461f      	movge	r7, r3
 800979c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80097a0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80097a4:	68a3      	ldr	r3, [r4, #8]
 80097a6:	6861      	ldr	r1, [r4, #4]
 80097a8:	eb0a 0609 	add.w	r6, sl, r9
 80097ac:	42b3      	cmp	r3, r6
 80097ae:	b085      	sub	sp, #20
 80097b0:	bfb8      	it	lt
 80097b2:	3101      	addlt	r1, #1
 80097b4:	f7ff fedc 	bl	8009570 <_Balloc>
 80097b8:	b930      	cbnz	r0, 80097c8 <__multiply+0x44>
 80097ba:	4602      	mov	r2, r0
 80097bc:	4b44      	ldr	r3, [pc, #272]	@ (80098d0 <__multiply+0x14c>)
 80097be:	4845      	ldr	r0, [pc, #276]	@ (80098d4 <__multiply+0x150>)
 80097c0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80097c4:	f000 fc92 	bl	800a0ec <__assert_func>
 80097c8:	f100 0514 	add.w	r5, r0, #20
 80097cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80097d0:	462b      	mov	r3, r5
 80097d2:	2200      	movs	r2, #0
 80097d4:	4543      	cmp	r3, r8
 80097d6:	d321      	bcc.n	800981c <__multiply+0x98>
 80097d8:	f107 0114 	add.w	r1, r7, #20
 80097dc:	f104 0214 	add.w	r2, r4, #20
 80097e0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80097e4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80097e8:	9302      	str	r3, [sp, #8]
 80097ea:	1b13      	subs	r3, r2, r4
 80097ec:	3b15      	subs	r3, #21
 80097ee:	f023 0303 	bic.w	r3, r3, #3
 80097f2:	3304      	adds	r3, #4
 80097f4:	f104 0715 	add.w	r7, r4, #21
 80097f8:	42ba      	cmp	r2, r7
 80097fa:	bf38      	it	cc
 80097fc:	2304      	movcc	r3, #4
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	9b02      	ldr	r3, [sp, #8]
 8009802:	9103      	str	r1, [sp, #12]
 8009804:	428b      	cmp	r3, r1
 8009806:	d80c      	bhi.n	8009822 <__multiply+0x9e>
 8009808:	2e00      	cmp	r6, #0
 800980a:	dd03      	ble.n	8009814 <__multiply+0x90>
 800980c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009810:	2b00      	cmp	r3, #0
 8009812:	d05b      	beq.n	80098cc <__multiply+0x148>
 8009814:	6106      	str	r6, [r0, #16]
 8009816:	b005      	add	sp, #20
 8009818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800981c:	f843 2b04 	str.w	r2, [r3], #4
 8009820:	e7d8      	b.n	80097d4 <__multiply+0x50>
 8009822:	f8b1 a000 	ldrh.w	sl, [r1]
 8009826:	f1ba 0f00 	cmp.w	sl, #0
 800982a:	d024      	beq.n	8009876 <__multiply+0xf2>
 800982c:	f104 0e14 	add.w	lr, r4, #20
 8009830:	46a9      	mov	r9, r5
 8009832:	f04f 0c00 	mov.w	ip, #0
 8009836:	f85e 7b04 	ldr.w	r7, [lr], #4
 800983a:	f8d9 3000 	ldr.w	r3, [r9]
 800983e:	fa1f fb87 	uxth.w	fp, r7
 8009842:	b29b      	uxth	r3, r3
 8009844:	fb0a 330b 	mla	r3, sl, fp, r3
 8009848:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800984c:	f8d9 7000 	ldr.w	r7, [r9]
 8009850:	4463      	add	r3, ip
 8009852:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009856:	fb0a c70b 	mla	r7, sl, fp, ip
 800985a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800985e:	b29b      	uxth	r3, r3
 8009860:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009864:	4572      	cmp	r2, lr
 8009866:	f849 3b04 	str.w	r3, [r9], #4
 800986a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800986e:	d8e2      	bhi.n	8009836 <__multiply+0xb2>
 8009870:	9b01      	ldr	r3, [sp, #4]
 8009872:	f845 c003 	str.w	ip, [r5, r3]
 8009876:	9b03      	ldr	r3, [sp, #12]
 8009878:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800987c:	3104      	adds	r1, #4
 800987e:	f1b9 0f00 	cmp.w	r9, #0
 8009882:	d021      	beq.n	80098c8 <__multiply+0x144>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	f104 0c14 	add.w	ip, r4, #20
 800988a:	46ae      	mov	lr, r5
 800988c:	f04f 0a00 	mov.w	sl, #0
 8009890:	f8bc b000 	ldrh.w	fp, [ip]
 8009894:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009898:	fb09 770b 	mla	r7, r9, fp, r7
 800989c:	4457      	add	r7, sl
 800989e:	b29b      	uxth	r3, r3
 80098a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098a4:	f84e 3b04 	str.w	r3, [lr], #4
 80098a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098b0:	f8be 3000 	ldrh.w	r3, [lr]
 80098b4:	fb09 330a 	mla	r3, r9, sl, r3
 80098b8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80098bc:	4562      	cmp	r2, ip
 80098be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80098c2:	d8e5      	bhi.n	8009890 <__multiply+0x10c>
 80098c4:	9f01      	ldr	r7, [sp, #4]
 80098c6:	51eb      	str	r3, [r5, r7]
 80098c8:	3504      	adds	r5, #4
 80098ca:	e799      	b.n	8009800 <__multiply+0x7c>
 80098cc:	3e01      	subs	r6, #1
 80098ce:	e79b      	b.n	8009808 <__multiply+0x84>
 80098d0:	0800f51c 	.word	0x0800f51c
 80098d4:	0800f52d 	.word	0x0800f52d

080098d8 <__pow5mult>:
 80098d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098dc:	4615      	mov	r5, r2
 80098de:	f012 0203 	ands.w	r2, r2, #3
 80098e2:	4607      	mov	r7, r0
 80098e4:	460e      	mov	r6, r1
 80098e6:	d007      	beq.n	80098f8 <__pow5mult+0x20>
 80098e8:	4c25      	ldr	r4, [pc, #148]	@ (8009980 <__pow5mult+0xa8>)
 80098ea:	3a01      	subs	r2, #1
 80098ec:	2300      	movs	r3, #0
 80098ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098f2:	f7ff fe9f 	bl	8009634 <__multadd>
 80098f6:	4606      	mov	r6, r0
 80098f8:	10ad      	asrs	r5, r5, #2
 80098fa:	d03d      	beq.n	8009978 <__pow5mult+0xa0>
 80098fc:	69fc      	ldr	r4, [r7, #28]
 80098fe:	b97c      	cbnz	r4, 8009920 <__pow5mult+0x48>
 8009900:	2010      	movs	r0, #16
 8009902:	f7ff fd7f 	bl	8009404 <malloc>
 8009906:	4602      	mov	r2, r0
 8009908:	61f8      	str	r0, [r7, #28]
 800990a:	b928      	cbnz	r0, 8009918 <__pow5mult+0x40>
 800990c:	4b1d      	ldr	r3, [pc, #116]	@ (8009984 <__pow5mult+0xac>)
 800990e:	481e      	ldr	r0, [pc, #120]	@ (8009988 <__pow5mult+0xb0>)
 8009910:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009914:	f000 fbea 	bl	800a0ec <__assert_func>
 8009918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800991c:	6004      	str	r4, [r0, #0]
 800991e:	60c4      	str	r4, [r0, #12]
 8009920:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009928:	b94c      	cbnz	r4, 800993e <__pow5mult+0x66>
 800992a:	f240 2171 	movw	r1, #625	@ 0x271
 800992e:	4638      	mov	r0, r7
 8009930:	f7ff ff12 	bl	8009758 <__i2b>
 8009934:	2300      	movs	r3, #0
 8009936:	f8c8 0008 	str.w	r0, [r8, #8]
 800993a:	4604      	mov	r4, r0
 800993c:	6003      	str	r3, [r0, #0]
 800993e:	f04f 0900 	mov.w	r9, #0
 8009942:	07eb      	lsls	r3, r5, #31
 8009944:	d50a      	bpl.n	800995c <__pow5mult+0x84>
 8009946:	4631      	mov	r1, r6
 8009948:	4622      	mov	r2, r4
 800994a:	4638      	mov	r0, r7
 800994c:	f7ff ff1a 	bl	8009784 <__multiply>
 8009950:	4631      	mov	r1, r6
 8009952:	4680      	mov	r8, r0
 8009954:	4638      	mov	r0, r7
 8009956:	f7ff fe4b 	bl	80095f0 <_Bfree>
 800995a:	4646      	mov	r6, r8
 800995c:	106d      	asrs	r5, r5, #1
 800995e:	d00b      	beq.n	8009978 <__pow5mult+0xa0>
 8009960:	6820      	ldr	r0, [r4, #0]
 8009962:	b938      	cbnz	r0, 8009974 <__pow5mult+0x9c>
 8009964:	4622      	mov	r2, r4
 8009966:	4621      	mov	r1, r4
 8009968:	4638      	mov	r0, r7
 800996a:	f7ff ff0b 	bl	8009784 <__multiply>
 800996e:	6020      	str	r0, [r4, #0]
 8009970:	f8c0 9000 	str.w	r9, [r0]
 8009974:	4604      	mov	r4, r0
 8009976:	e7e4      	b.n	8009942 <__pow5mult+0x6a>
 8009978:	4630      	mov	r0, r6
 800997a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800997e:	bf00      	nop
 8009980:	0800f588 	.word	0x0800f588
 8009984:	0800f4ad 	.word	0x0800f4ad
 8009988:	0800f52d 	.word	0x0800f52d

0800998c <__lshift>:
 800998c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009990:	460c      	mov	r4, r1
 8009992:	6849      	ldr	r1, [r1, #4]
 8009994:	6923      	ldr	r3, [r4, #16]
 8009996:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800999a:	68a3      	ldr	r3, [r4, #8]
 800999c:	4607      	mov	r7, r0
 800999e:	4691      	mov	r9, r2
 80099a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099a4:	f108 0601 	add.w	r6, r8, #1
 80099a8:	42b3      	cmp	r3, r6
 80099aa:	db0b      	blt.n	80099c4 <__lshift+0x38>
 80099ac:	4638      	mov	r0, r7
 80099ae:	f7ff fddf 	bl	8009570 <_Balloc>
 80099b2:	4605      	mov	r5, r0
 80099b4:	b948      	cbnz	r0, 80099ca <__lshift+0x3e>
 80099b6:	4602      	mov	r2, r0
 80099b8:	4b28      	ldr	r3, [pc, #160]	@ (8009a5c <__lshift+0xd0>)
 80099ba:	4829      	ldr	r0, [pc, #164]	@ (8009a60 <__lshift+0xd4>)
 80099bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80099c0:	f000 fb94 	bl	800a0ec <__assert_func>
 80099c4:	3101      	adds	r1, #1
 80099c6:	005b      	lsls	r3, r3, #1
 80099c8:	e7ee      	b.n	80099a8 <__lshift+0x1c>
 80099ca:	2300      	movs	r3, #0
 80099cc:	f100 0114 	add.w	r1, r0, #20
 80099d0:	f100 0210 	add.w	r2, r0, #16
 80099d4:	4618      	mov	r0, r3
 80099d6:	4553      	cmp	r3, sl
 80099d8:	db33      	blt.n	8009a42 <__lshift+0xb6>
 80099da:	6920      	ldr	r0, [r4, #16]
 80099dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099e0:	f104 0314 	add.w	r3, r4, #20
 80099e4:	f019 091f 	ands.w	r9, r9, #31
 80099e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099f0:	d02b      	beq.n	8009a4a <__lshift+0xbe>
 80099f2:	f1c9 0e20 	rsb	lr, r9, #32
 80099f6:	468a      	mov	sl, r1
 80099f8:	2200      	movs	r2, #0
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	fa00 f009 	lsl.w	r0, r0, r9
 8009a00:	4310      	orrs	r0, r2
 8009a02:	f84a 0b04 	str.w	r0, [sl], #4
 8009a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a0a:	459c      	cmp	ip, r3
 8009a0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a10:	d8f3      	bhi.n	80099fa <__lshift+0x6e>
 8009a12:	ebac 0304 	sub.w	r3, ip, r4
 8009a16:	3b15      	subs	r3, #21
 8009a18:	f023 0303 	bic.w	r3, r3, #3
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	f104 0015 	add.w	r0, r4, #21
 8009a22:	4584      	cmp	ip, r0
 8009a24:	bf38      	it	cc
 8009a26:	2304      	movcc	r3, #4
 8009a28:	50ca      	str	r2, [r1, r3]
 8009a2a:	b10a      	cbz	r2, 8009a30 <__lshift+0xa4>
 8009a2c:	f108 0602 	add.w	r6, r8, #2
 8009a30:	3e01      	subs	r6, #1
 8009a32:	4638      	mov	r0, r7
 8009a34:	612e      	str	r6, [r5, #16]
 8009a36:	4621      	mov	r1, r4
 8009a38:	f7ff fdda 	bl	80095f0 <_Bfree>
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a46:	3301      	adds	r3, #1
 8009a48:	e7c5      	b.n	80099d6 <__lshift+0x4a>
 8009a4a:	3904      	subs	r1, #4
 8009a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a50:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a54:	459c      	cmp	ip, r3
 8009a56:	d8f9      	bhi.n	8009a4c <__lshift+0xc0>
 8009a58:	e7ea      	b.n	8009a30 <__lshift+0xa4>
 8009a5a:	bf00      	nop
 8009a5c:	0800f51c 	.word	0x0800f51c
 8009a60:	0800f52d 	.word	0x0800f52d

08009a64 <__mcmp>:
 8009a64:	690a      	ldr	r2, [r1, #16]
 8009a66:	4603      	mov	r3, r0
 8009a68:	6900      	ldr	r0, [r0, #16]
 8009a6a:	1a80      	subs	r0, r0, r2
 8009a6c:	b530      	push	{r4, r5, lr}
 8009a6e:	d10e      	bne.n	8009a8e <__mcmp+0x2a>
 8009a70:	3314      	adds	r3, #20
 8009a72:	3114      	adds	r1, #20
 8009a74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a84:	4295      	cmp	r5, r2
 8009a86:	d003      	beq.n	8009a90 <__mcmp+0x2c>
 8009a88:	d205      	bcs.n	8009a96 <__mcmp+0x32>
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8e:	bd30      	pop	{r4, r5, pc}
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	d3f3      	bcc.n	8009a7c <__mcmp+0x18>
 8009a94:	e7fb      	b.n	8009a8e <__mcmp+0x2a>
 8009a96:	2001      	movs	r0, #1
 8009a98:	e7f9      	b.n	8009a8e <__mcmp+0x2a>
	...

08009a9c <__mdiff>:
 8009a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa0:	4689      	mov	r9, r1
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	4611      	mov	r1, r2
 8009aa6:	4648      	mov	r0, r9
 8009aa8:	4614      	mov	r4, r2
 8009aaa:	f7ff ffdb 	bl	8009a64 <__mcmp>
 8009aae:	1e05      	subs	r5, r0, #0
 8009ab0:	d112      	bne.n	8009ad8 <__mdiff+0x3c>
 8009ab2:	4629      	mov	r1, r5
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7ff fd5b 	bl	8009570 <_Balloc>
 8009aba:	4602      	mov	r2, r0
 8009abc:	b928      	cbnz	r0, 8009aca <__mdiff+0x2e>
 8009abe:	4b3f      	ldr	r3, [pc, #252]	@ (8009bbc <__mdiff+0x120>)
 8009ac0:	f240 2137 	movw	r1, #567	@ 0x237
 8009ac4:	483e      	ldr	r0, [pc, #248]	@ (8009bc0 <__mdiff+0x124>)
 8009ac6:	f000 fb11 	bl	800a0ec <__assert_func>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	b003      	add	sp, #12
 8009ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad8:	bfbc      	itt	lt
 8009ada:	464b      	movlt	r3, r9
 8009adc:	46a1      	movlt	r9, r4
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009ae4:	bfba      	itte	lt
 8009ae6:	461c      	movlt	r4, r3
 8009ae8:	2501      	movlt	r5, #1
 8009aea:	2500      	movge	r5, #0
 8009aec:	f7ff fd40 	bl	8009570 <_Balloc>
 8009af0:	4602      	mov	r2, r0
 8009af2:	b918      	cbnz	r0, 8009afc <__mdiff+0x60>
 8009af4:	4b31      	ldr	r3, [pc, #196]	@ (8009bbc <__mdiff+0x120>)
 8009af6:	f240 2145 	movw	r1, #581	@ 0x245
 8009afa:	e7e3      	b.n	8009ac4 <__mdiff+0x28>
 8009afc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b00:	6926      	ldr	r6, [r4, #16]
 8009b02:	60c5      	str	r5, [r0, #12]
 8009b04:	f109 0310 	add.w	r3, r9, #16
 8009b08:	f109 0514 	add.w	r5, r9, #20
 8009b0c:	f104 0e14 	add.w	lr, r4, #20
 8009b10:	f100 0b14 	add.w	fp, r0, #20
 8009b14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b1c:	9301      	str	r3, [sp, #4]
 8009b1e:	46d9      	mov	r9, fp
 8009b20:	f04f 0c00 	mov.w	ip, #0
 8009b24:	9b01      	ldr	r3, [sp, #4]
 8009b26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b2e:	9301      	str	r3, [sp, #4]
 8009b30:	fa1f f38a 	uxth.w	r3, sl
 8009b34:	4619      	mov	r1, r3
 8009b36:	b283      	uxth	r3, r0
 8009b38:	1acb      	subs	r3, r1, r3
 8009b3a:	0c00      	lsrs	r0, r0, #16
 8009b3c:	4463      	add	r3, ip
 8009b3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b46:	b29b      	uxth	r3, r3
 8009b48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b4c:	4576      	cmp	r6, lr
 8009b4e:	f849 3b04 	str.w	r3, [r9], #4
 8009b52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009b56:	d8e5      	bhi.n	8009b24 <__mdiff+0x88>
 8009b58:	1b33      	subs	r3, r6, r4
 8009b5a:	3b15      	subs	r3, #21
 8009b5c:	f023 0303 	bic.w	r3, r3, #3
 8009b60:	3415      	adds	r4, #21
 8009b62:	3304      	adds	r3, #4
 8009b64:	42a6      	cmp	r6, r4
 8009b66:	bf38      	it	cc
 8009b68:	2304      	movcc	r3, #4
 8009b6a:	441d      	add	r5, r3
 8009b6c:	445b      	add	r3, fp
 8009b6e:	461e      	mov	r6, r3
 8009b70:	462c      	mov	r4, r5
 8009b72:	4544      	cmp	r4, r8
 8009b74:	d30e      	bcc.n	8009b94 <__mdiff+0xf8>
 8009b76:	f108 0103 	add.w	r1, r8, #3
 8009b7a:	1b49      	subs	r1, r1, r5
 8009b7c:	f021 0103 	bic.w	r1, r1, #3
 8009b80:	3d03      	subs	r5, #3
 8009b82:	45a8      	cmp	r8, r5
 8009b84:	bf38      	it	cc
 8009b86:	2100      	movcc	r1, #0
 8009b88:	440b      	add	r3, r1
 8009b8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009b8e:	b191      	cbz	r1, 8009bb6 <__mdiff+0x11a>
 8009b90:	6117      	str	r7, [r2, #16]
 8009b92:	e79d      	b.n	8009ad0 <__mdiff+0x34>
 8009b94:	f854 1b04 	ldr.w	r1, [r4], #4
 8009b98:	46e6      	mov	lr, ip
 8009b9a:	0c08      	lsrs	r0, r1, #16
 8009b9c:	fa1c fc81 	uxtah	ip, ip, r1
 8009ba0:	4471      	add	r1, lr
 8009ba2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ba6:	b289      	uxth	r1, r1
 8009ba8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009bac:	f846 1b04 	str.w	r1, [r6], #4
 8009bb0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bb4:	e7dd      	b.n	8009b72 <__mdiff+0xd6>
 8009bb6:	3f01      	subs	r7, #1
 8009bb8:	e7e7      	b.n	8009b8a <__mdiff+0xee>
 8009bba:	bf00      	nop
 8009bbc:	0800f51c 	.word	0x0800f51c
 8009bc0:	0800f52d 	.word	0x0800f52d

08009bc4 <__d2b>:
 8009bc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bc8:	460f      	mov	r7, r1
 8009bca:	2101      	movs	r1, #1
 8009bcc:	ec59 8b10 	vmov	r8, r9, d0
 8009bd0:	4616      	mov	r6, r2
 8009bd2:	f7ff fccd 	bl	8009570 <_Balloc>
 8009bd6:	4604      	mov	r4, r0
 8009bd8:	b930      	cbnz	r0, 8009be8 <__d2b+0x24>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	4b23      	ldr	r3, [pc, #140]	@ (8009c6c <__d2b+0xa8>)
 8009bde:	4824      	ldr	r0, [pc, #144]	@ (8009c70 <__d2b+0xac>)
 8009be0:	f240 310f 	movw	r1, #783	@ 0x30f
 8009be4:	f000 fa82 	bl	800a0ec <__assert_func>
 8009be8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009bec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009bf0:	b10d      	cbz	r5, 8009bf6 <__d2b+0x32>
 8009bf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009bf6:	9301      	str	r3, [sp, #4]
 8009bf8:	f1b8 0300 	subs.w	r3, r8, #0
 8009bfc:	d023      	beq.n	8009c46 <__d2b+0x82>
 8009bfe:	4668      	mov	r0, sp
 8009c00:	9300      	str	r3, [sp, #0]
 8009c02:	f7ff fd7c 	bl	80096fe <__lo0bits>
 8009c06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c0a:	b1d0      	cbz	r0, 8009c42 <__d2b+0x7e>
 8009c0c:	f1c0 0320 	rsb	r3, r0, #32
 8009c10:	fa02 f303 	lsl.w	r3, r2, r3
 8009c14:	430b      	orrs	r3, r1
 8009c16:	40c2      	lsrs	r2, r0
 8009c18:	6163      	str	r3, [r4, #20]
 8009c1a:	9201      	str	r2, [sp, #4]
 8009c1c:	9b01      	ldr	r3, [sp, #4]
 8009c1e:	61a3      	str	r3, [r4, #24]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	bf0c      	ite	eq
 8009c24:	2201      	moveq	r2, #1
 8009c26:	2202      	movne	r2, #2
 8009c28:	6122      	str	r2, [r4, #16]
 8009c2a:	b1a5      	cbz	r5, 8009c56 <__d2b+0x92>
 8009c2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c30:	4405      	add	r5, r0
 8009c32:	603d      	str	r5, [r7, #0]
 8009c34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c38:	6030      	str	r0, [r6, #0]
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	b003      	add	sp, #12
 8009c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c42:	6161      	str	r1, [r4, #20]
 8009c44:	e7ea      	b.n	8009c1c <__d2b+0x58>
 8009c46:	a801      	add	r0, sp, #4
 8009c48:	f7ff fd59 	bl	80096fe <__lo0bits>
 8009c4c:	9b01      	ldr	r3, [sp, #4]
 8009c4e:	6163      	str	r3, [r4, #20]
 8009c50:	3020      	adds	r0, #32
 8009c52:	2201      	movs	r2, #1
 8009c54:	e7e8      	b.n	8009c28 <__d2b+0x64>
 8009c56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c5e:	6038      	str	r0, [r7, #0]
 8009c60:	6918      	ldr	r0, [r3, #16]
 8009c62:	f7ff fd2d 	bl	80096c0 <__hi0bits>
 8009c66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c6a:	e7e5      	b.n	8009c38 <__d2b+0x74>
 8009c6c:	0800f51c 	.word	0x0800f51c
 8009c70:	0800f52d 	.word	0x0800f52d

08009c74 <__ssputs_r>:
 8009c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c78:	688e      	ldr	r6, [r1, #8]
 8009c7a:	461f      	mov	r7, r3
 8009c7c:	42be      	cmp	r6, r7
 8009c7e:	680b      	ldr	r3, [r1, #0]
 8009c80:	4682      	mov	sl, r0
 8009c82:	460c      	mov	r4, r1
 8009c84:	4690      	mov	r8, r2
 8009c86:	d82d      	bhi.n	8009ce4 <__ssputs_r+0x70>
 8009c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c90:	d026      	beq.n	8009ce0 <__ssputs_r+0x6c>
 8009c92:	6965      	ldr	r5, [r4, #20]
 8009c94:	6909      	ldr	r1, [r1, #16]
 8009c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c9a:	eba3 0901 	sub.w	r9, r3, r1
 8009c9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ca2:	1c7b      	adds	r3, r7, #1
 8009ca4:	444b      	add	r3, r9
 8009ca6:	106d      	asrs	r5, r5, #1
 8009ca8:	429d      	cmp	r5, r3
 8009caa:	bf38      	it	cc
 8009cac:	461d      	movcc	r5, r3
 8009cae:	0553      	lsls	r3, r2, #21
 8009cb0:	d527      	bpl.n	8009d02 <__ssputs_r+0x8e>
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	f7ff fbd0 	bl	8009458 <_malloc_r>
 8009cb8:	4606      	mov	r6, r0
 8009cba:	b360      	cbz	r0, 8009d16 <__ssputs_r+0xa2>
 8009cbc:	6921      	ldr	r1, [r4, #16]
 8009cbe:	464a      	mov	r2, r9
 8009cc0:	f000 fa06 	bl	800a0d0 <memcpy>
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cce:	81a3      	strh	r3, [r4, #12]
 8009cd0:	6126      	str	r6, [r4, #16]
 8009cd2:	6165      	str	r5, [r4, #20]
 8009cd4:	444e      	add	r6, r9
 8009cd6:	eba5 0509 	sub.w	r5, r5, r9
 8009cda:	6026      	str	r6, [r4, #0]
 8009cdc:	60a5      	str	r5, [r4, #8]
 8009cde:	463e      	mov	r6, r7
 8009ce0:	42be      	cmp	r6, r7
 8009ce2:	d900      	bls.n	8009ce6 <__ssputs_r+0x72>
 8009ce4:	463e      	mov	r6, r7
 8009ce6:	6820      	ldr	r0, [r4, #0]
 8009ce8:	4632      	mov	r2, r6
 8009cea:	4641      	mov	r1, r8
 8009cec:	f000 f9c6 	bl	800a07c <memmove>
 8009cf0:	68a3      	ldr	r3, [r4, #8]
 8009cf2:	1b9b      	subs	r3, r3, r6
 8009cf4:	60a3      	str	r3, [r4, #8]
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	4433      	add	r3, r6
 8009cfa:	6023      	str	r3, [r4, #0]
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d02:	462a      	mov	r2, r5
 8009d04:	f000 fa36 	bl	800a174 <_realloc_r>
 8009d08:	4606      	mov	r6, r0
 8009d0a:	2800      	cmp	r0, #0
 8009d0c:	d1e0      	bne.n	8009cd0 <__ssputs_r+0x5c>
 8009d0e:	6921      	ldr	r1, [r4, #16]
 8009d10:	4650      	mov	r0, sl
 8009d12:	f7ff fb2d 	bl	8009370 <_free_r>
 8009d16:	230c      	movs	r3, #12
 8009d18:	f8ca 3000 	str.w	r3, [sl]
 8009d1c:	89a3      	ldrh	r3, [r4, #12]
 8009d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d22:	81a3      	strh	r3, [r4, #12]
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295
 8009d28:	e7e9      	b.n	8009cfe <__ssputs_r+0x8a>
	...

08009d2c <_svfiprintf_r>:
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	4698      	mov	r8, r3
 8009d32:	898b      	ldrh	r3, [r1, #12]
 8009d34:	061b      	lsls	r3, r3, #24
 8009d36:	b09d      	sub	sp, #116	@ 0x74
 8009d38:	4607      	mov	r7, r0
 8009d3a:	460d      	mov	r5, r1
 8009d3c:	4614      	mov	r4, r2
 8009d3e:	d510      	bpl.n	8009d62 <_svfiprintf_r+0x36>
 8009d40:	690b      	ldr	r3, [r1, #16]
 8009d42:	b973      	cbnz	r3, 8009d62 <_svfiprintf_r+0x36>
 8009d44:	2140      	movs	r1, #64	@ 0x40
 8009d46:	f7ff fb87 	bl	8009458 <_malloc_r>
 8009d4a:	6028      	str	r0, [r5, #0]
 8009d4c:	6128      	str	r0, [r5, #16]
 8009d4e:	b930      	cbnz	r0, 8009d5e <_svfiprintf_r+0x32>
 8009d50:	230c      	movs	r3, #12
 8009d52:	603b      	str	r3, [r7, #0]
 8009d54:	f04f 30ff 	mov.w	r0, #4294967295
 8009d58:	b01d      	add	sp, #116	@ 0x74
 8009d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5e:	2340      	movs	r3, #64	@ 0x40
 8009d60:	616b      	str	r3, [r5, #20]
 8009d62:	2300      	movs	r3, #0
 8009d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d66:	2320      	movs	r3, #32
 8009d68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d70:	2330      	movs	r3, #48	@ 0x30
 8009d72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f10 <_svfiprintf_r+0x1e4>
 8009d76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d7a:	f04f 0901 	mov.w	r9, #1
 8009d7e:	4623      	mov	r3, r4
 8009d80:	469a      	mov	sl, r3
 8009d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d86:	b10a      	cbz	r2, 8009d8c <_svfiprintf_r+0x60>
 8009d88:	2a25      	cmp	r2, #37	@ 0x25
 8009d8a:	d1f9      	bne.n	8009d80 <_svfiprintf_r+0x54>
 8009d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d90:	d00b      	beq.n	8009daa <_svfiprintf_r+0x7e>
 8009d92:	465b      	mov	r3, fp
 8009d94:	4622      	mov	r2, r4
 8009d96:	4629      	mov	r1, r5
 8009d98:	4638      	mov	r0, r7
 8009d9a:	f7ff ff6b 	bl	8009c74 <__ssputs_r>
 8009d9e:	3001      	adds	r0, #1
 8009da0:	f000 80a7 	beq.w	8009ef2 <_svfiprintf_r+0x1c6>
 8009da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009da6:	445a      	add	r2, fp
 8009da8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009daa:	f89a 3000 	ldrb.w	r3, [sl]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	f000 809f 	beq.w	8009ef2 <_svfiprintf_r+0x1c6>
 8009db4:	2300      	movs	r3, #0
 8009db6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dbe:	f10a 0a01 	add.w	sl, sl, #1
 8009dc2:	9304      	str	r3, [sp, #16]
 8009dc4:	9307      	str	r3, [sp, #28]
 8009dc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009dca:	931a      	str	r3, [sp, #104]	@ 0x68
 8009dcc:	4654      	mov	r4, sl
 8009dce:	2205      	movs	r2, #5
 8009dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd4:	484e      	ldr	r0, [pc, #312]	@ (8009f10 <_svfiprintf_r+0x1e4>)
 8009dd6:	f7f6 fa2b 	bl	8000230 <memchr>
 8009dda:	9a04      	ldr	r2, [sp, #16]
 8009ddc:	b9d8      	cbnz	r0, 8009e16 <_svfiprintf_r+0xea>
 8009dde:	06d0      	lsls	r0, r2, #27
 8009de0:	bf44      	itt	mi
 8009de2:	2320      	movmi	r3, #32
 8009de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009de8:	0711      	lsls	r1, r2, #28
 8009dea:	bf44      	itt	mi
 8009dec:	232b      	movmi	r3, #43	@ 0x2b
 8009dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009df2:	f89a 3000 	ldrb.w	r3, [sl]
 8009df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009df8:	d015      	beq.n	8009e26 <_svfiprintf_r+0xfa>
 8009dfa:	9a07      	ldr	r2, [sp, #28]
 8009dfc:	4654      	mov	r4, sl
 8009dfe:	2000      	movs	r0, #0
 8009e00:	f04f 0c0a 	mov.w	ip, #10
 8009e04:	4621      	mov	r1, r4
 8009e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e0a:	3b30      	subs	r3, #48	@ 0x30
 8009e0c:	2b09      	cmp	r3, #9
 8009e0e:	d94b      	bls.n	8009ea8 <_svfiprintf_r+0x17c>
 8009e10:	b1b0      	cbz	r0, 8009e40 <_svfiprintf_r+0x114>
 8009e12:	9207      	str	r2, [sp, #28]
 8009e14:	e014      	b.n	8009e40 <_svfiprintf_r+0x114>
 8009e16:	eba0 0308 	sub.w	r3, r0, r8
 8009e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	9304      	str	r3, [sp, #16]
 8009e22:	46a2      	mov	sl, r4
 8009e24:	e7d2      	b.n	8009dcc <_svfiprintf_r+0xa0>
 8009e26:	9b03      	ldr	r3, [sp, #12]
 8009e28:	1d19      	adds	r1, r3, #4
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	9103      	str	r1, [sp, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfbb      	ittet	lt
 8009e32:	425b      	neglt	r3, r3
 8009e34:	f042 0202 	orrlt.w	r2, r2, #2
 8009e38:	9307      	strge	r3, [sp, #28]
 8009e3a:	9307      	strlt	r3, [sp, #28]
 8009e3c:	bfb8      	it	lt
 8009e3e:	9204      	strlt	r2, [sp, #16]
 8009e40:	7823      	ldrb	r3, [r4, #0]
 8009e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e44:	d10a      	bne.n	8009e5c <_svfiprintf_r+0x130>
 8009e46:	7863      	ldrb	r3, [r4, #1]
 8009e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e4a:	d132      	bne.n	8009eb2 <_svfiprintf_r+0x186>
 8009e4c:	9b03      	ldr	r3, [sp, #12]
 8009e4e:	1d1a      	adds	r2, r3, #4
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	9203      	str	r2, [sp, #12]
 8009e54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e58:	3402      	adds	r4, #2
 8009e5a:	9305      	str	r3, [sp, #20]
 8009e5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f20 <_svfiprintf_r+0x1f4>
 8009e60:	7821      	ldrb	r1, [r4, #0]
 8009e62:	2203      	movs	r2, #3
 8009e64:	4650      	mov	r0, sl
 8009e66:	f7f6 f9e3 	bl	8000230 <memchr>
 8009e6a:	b138      	cbz	r0, 8009e7c <_svfiprintf_r+0x150>
 8009e6c:	9b04      	ldr	r3, [sp, #16]
 8009e6e:	eba0 000a 	sub.w	r0, r0, sl
 8009e72:	2240      	movs	r2, #64	@ 0x40
 8009e74:	4082      	lsls	r2, r0
 8009e76:	4313      	orrs	r3, r2
 8009e78:	3401      	adds	r4, #1
 8009e7a:	9304      	str	r3, [sp, #16]
 8009e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e80:	4824      	ldr	r0, [pc, #144]	@ (8009f14 <_svfiprintf_r+0x1e8>)
 8009e82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e86:	2206      	movs	r2, #6
 8009e88:	f7f6 f9d2 	bl	8000230 <memchr>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d036      	beq.n	8009efe <_svfiprintf_r+0x1d2>
 8009e90:	4b21      	ldr	r3, [pc, #132]	@ (8009f18 <_svfiprintf_r+0x1ec>)
 8009e92:	bb1b      	cbnz	r3, 8009edc <_svfiprintf_r+0x1b0>
 8009e94:	9b03      	ldr	r3, [sp, #12]
 8009e96:	3307      	adds	r3, #7
 8009e98:	f023 0307 	bic.w	r3, r3, #7
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	9303      	str	r3, [sp, #12]
 8009ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ea2:	4433      	add	r3, r6
 8009ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ea6:	e76a      	b.n	8009d7e <_svfiprintf_r+0x52>
 8009ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eac:	460c      	mov	r4, r1
 8009eae:	2001      	movs	r0, #1
 8009eb0:	e7a8      	b.n	8009e04 <_svfiprintf_r+0xd8>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	3401      	adds	r4, #1
 8009eb6:	9305      	str	r3, [sp, #20]
 8009eb8:	4619      	mov	r1, r3
 8009eba:	f04f 0c0a 	mov.w	ip, #10
 8009ebe:	4620      	mov	r0, r4
 8009ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ec4:	3a30      	subs	r2, #48	@ 0x30
 8009ec6:	2a09      	cmp	r2, #9
 8009ec8:	d903      	bls.n	8009ed2 <_svfiprintf_r+0x1a6>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d0c6      	beq.n	8009e5c <_svfiprintf_r+0x130>
 8009ece:	9105      	str	r1, [sp, #20]
 8009ed0:	e7c4      	b.n	8009e5c <_svfiprintf_r+0x130>
 8009ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e7f0      	b.n	8009ebe <_svfiprintf_r+0x192>
 8009edc:	ab03      	add	r3, sp, #12
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	462a      	mov	r2, r5
 8009ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8009f1c <_svfiprintf_r+0x1f0>)
 8009ee4:	a904      	add	r1, sp, #16
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	f7fd fe96 	bl	8007c18 <_printf_float>
 8009eec:	1c42      	adds	r2, r0, #1
 8009eee:	4606      	mov	r6, r0
 8009ef0:	d1d6      	bne.n	8009ea0 <_svfiprintf_r+0x174>
 8009ef2:	89ab      	ldrh	r3, [r5, #12]
 8009ef4:	065b      	lsls	r3, r3, #25
 8009ef6:	f53f af2d 	bmi.w	8009d54 <_svfiprintf_r+0x28>
 8009efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009efc:	e72c      	b.n	8009d58 <_svfiprintf_r+0x2c>
 8009efe:	ab03      	add	r3, sp, #12
 8009f00:	9300      	str	r3, [sp, #0]
 8009f02:	462a      	mov	r2, r5
 8009f04:	4b05      	ldr	r3, [pc, #20]	@ (8009f1c <_svfiprintf_r+0x1f0>)
 8009f06:	a904      	add	r1, sp, #16
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7fe f91d 	bl	8008148 <_printf_i>
 8009f0e:	e7ed      	b.n	8009eec <_svfiprintf_r+0x1c0>
 8009f10:	0800f688 	.word	0x0800f688
 8009f14:	0800f692 	.word	0x0800f692
 8009f18:	08007c19 	.word	0x08007c19
 8009f1c:	08009c75 	.word	0x08009c75
 8009f20:	0800f68e 	.word	0x0800f68e

08009f24 <__sflush_r>:
 8009f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2c:	0716      	lsls	r6, r2, #28
 8009f2e:	4605      	mov	r5, r0
 8009f30:	460c      	mov	r4, r1
 8009f32:	d454      	bmi.n	8009fde <__sflush_r+0xba>
 8009f34:	684b      	ldr	r3, [r1, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	dc02      	bgt.n	8009f40 <__sflush_r+0x1c>
 8009f3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	dd48      	ble.n	8009fd2 <__sflush_r+0xae>
 8009f40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	d045      	beq.n	8009fd2 <__sflush_r+0xae>
 8009f46:	2300      	movs	r3, #0
 8009f48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f4c:	682f      	ldr	r7, [r5, #0]
 8009f4e:	6a21      	ldr	r1, [r4, #32]
 8009f50:	602b      	str	r3, [r5, #0]
 8009f52:	d030      	beq.n	8009fb6 <__sflush_r+0x92>
 8009f54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	0759      	lsls	r1, r3, #29
 8009f5a:	d505      	bpl.n	8009f68 <__sflush_r+0x44>
 8009f5c:	6863      	ldr	r3, [r4, #4]
 8009f5e:	1ad2      	subs	r2, r2, r3
 8009f60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009f62:	b10b      	cbz	r3, 8009f68 <__sflush_r+0x44>
 8009f64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f66:	1ad2      	subs	r2, r2, r3
 8009f68:	2300      	movs	r3, #0
 8009f6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f6c:	6a21      	ldr	r1, [r4, #32]
 8009f6e:	4628      	mov	r0, r5
 8009f70:	47b0      	blx	r6
 8009f72:	1c43      	adds	r3, r0, #1
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	d106      	bne.n	8009f86 <__sflush_r+0x62>
 8009f78:	6829      	ldr	r1, [r5, #0]
 8009f7a:	291d      	cmp	r1, #29
 8009f7c:	d82b      	bhi.n	8009fd6 <__sflush_r+0xb2>
 8009f7e:	4a2a      	ldr	r2, [pc, #168]	@ (800a028 <__sflush_r+0x104>)
 8009f80:	410a      	asrs	r2, r1
 8009f82:	07d6      	lsls	r6, r2, #31
 8009f84:	d427      	bmi.n	8009fd6 <__sflush_r+0xb2>
 8009f86:	2200      	movs	r2, #0
 8009f88:	6062      	str	r2, [r4, #4]
 8009f8a:	04d9      	lsls	r1, r3, #19
 8009f8c:	6922      	ldr	r2, [r4, #16]
 8009f8e:	6022      	str	r2, [r4, #0]
 8009f90:	d504      	bpl.n	8009f9c <__sflush_r+0x78>
 8009f92:	1c42      	adds	r2, r0, #1
 8009f94:	d101      	bne.n	8009f9a <__sflush_r+0x76>
 8009f96:	682b      	ldr	r3, [r5, #0]
 8009f98:	b903      	cbnz	r3, 8009f9c <__sflush_r+0x78>
 8009f9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8009f9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f9e:	602f      	str	r7, [r5, #0]
 8009fa0:	b1b9      	cbz	r1, 8009fd2 <__sflush_r+0xae>
 8009fa2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fa6:	4299      	cmp	r1, r3
 8009fa8:	d002      	beq.n	8009fb0 <__sflush_r+0x8c>
 8009faa:	4628      	mov	r0, r5
 8009fac:	f7ff f9e0 	bl	8009370 <_free_r>
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fb4:	e00d      	b.n	8009fd2 <__sflush_r+0xae>
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	4628      	mov	r0, r5
 8009fba:	47b0      	blx	r6
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	1c50      	adds	r0, r2, #1
 8009fc0:	d1c9      	bne.n	8009f56 <__sflush_r+0x32>
 8009fc2:	682b      	ldr	r3, [r5, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d0c6      	beq.n	8009f56 <__sflush_r+0x32>
 8009fc8:	2b1d      	cmp	r3, #29
 8009fca:	d001      	beq.n	8009fd0 <__sflush_r+0xac>
 8009fcc:	2b16      	cmp	r3, #22
 8009fce:	d11e      	bne.n	800a00e <__sflush_r+0xea>
 8009fd0:	602f      	str	r7, [r5, #0]
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e022      	b.n	800a01c <__sflush_r+0xf8>
 8009fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fda:	b21b      	sxth	r3, r3
 8009fdc:	e01b      	b.n	800a016 <__sflush_r+0xf2>
 8009fde:	690f      	ldr	r7, [r1, #16]
 8009fe0:	2f00      	cmp	r7, #0
 8009fe2:	d0f6      	beq.n	8009fd2 <__sflush_r+0xae>
 8009fe4:	0793      	lsls	r3, r2, #30
 8009fe6:	680e      	ldr	r6, [r1, #0]
 8009fe8:	bf08      	it	eq
 8009fea:	694b      	ldreq	r3, [r1, #20]
 8009fec:	600f      	str	r7, [r1, #0]
 8009fee:	bf18      	it	ne
 8009ff0:	2300      	movne	r3, #0
 8009ff2:	eba6 0807 	sub.w	r8, r6, r7
 8009ff6:	608b      	str	r3, [r1, #8]
 8009ff8:	f1b8 0f00 	cmp.w	r8, #0
 8009ffc:	dde9      	ble.n	8009fd2 <__sflush_r+0xae>
 8009ffe:	6a21      	ldr	r1, [r4, #32]
 800a000:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a002:	4643      	mov	r3, r8
 800a004:	463a      	mov	r2, r7
 800a006:	4628      	mov	r0, r5
 800a008:	47b0      	blx	r6
 800a00a:	2800      	cmp	r0, #0
 800a00c:	dc08      	bgt.n	800a020 <__sflush_r+0xfc>
 800a00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a020:	4407      	add	r7, r0
 800a022:	eba8 0800 	sub.w	r8, r8, r0
 800a026:	e7e7      	b.n	8009ff8 <__sflush_r+0xd4>
 800a028:	dfbffffe 	.word	0xdfbffffe

0800a02c <_fflush_r>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	690b      	ldr	r3, [r1, #16]
 800a030:	4605      	mov	r5, r0
 800a032:	460c      	mov	r4, r1
 800a034:	b913      	cbnz	r3, 800a03c <_fflush_r+0x10>
 800a036:	2500      	movs	r5, #0
 800a038:	4628      	mov	r0, r5
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
 800a03c:	b118      	cbz	r0, 800a046 <_fflush_r+0x1a>
 800a03e:	6a03      	ldr	r3, [r0, #32]
 800a040:	b90b      	cbnz	r3, 800a046 <_fflush_r+0x1a>
 800a042:	f7fe fa2d 	bl	80084a0 <__sinit>
 800a046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0f3      	beq.n	800a036 <_fflush_r+0xa>
 800a04e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a050:	07d0      	lsls	r0, r2, #31
 800a052:	d404      	bmi.n	800a05e <_fflush_r+0x32>
 800a054:	0599      	lsls	r1, r3, #22
 800a056:	d402      	bmi.n	800a05e <_fflush_r+0x32>
 800a058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a05a:	f7fe fb38 	bl	80086ce <__retarget_lock_acquire_recursive>
 800a05e:	4628      	mov	r0, r5
 800a060:	4621      	mov	r1, r4
 800a062:	f7ff ff5f 	bl	8009f24 <__sflush_r>
 800a066:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a068:	07da      	lsls	r2, r3, #31
 800a06a:	4605      	mov	r5, r0
 800a06c:	d4e4      	bmi.n	800a038 <_fflush_r+0xc>
 800a06e:	89a3      	ldrh	r3, [r4, #12]
 800a070:	059b      	lsls	r3, r3, #22
 800a072:	d4e1      	bmi.n	800a038 <_fflush_r+0xc>
 800a074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a076:	f7fe fb2b 	bl	80086d0 <__retarget_lock_release_recursive>
 800a07a:	e7dd      	b.n	800a038 <_fflush_r+0xc>

0800a07c <memmove>:
 800a07c:	4288      	cmp	r0, r1
 800a07e:	b510      	push	{r4, lr}
 800a080:	eb01 0402 	add.w	r4, r1, r2
 800a084:	d902      	bls.n	800a08c <memmove+0x10>
 800a086:	4284      	cmp	r4, r0
 800a088:	4623      	mov	r3, r4
 800a08a:	d807      	bhi.n	800a09c <memmove+0x20>
 800a08c:	1e43      	subs	r3, r0, #1
 800a08e:	42a1      	cmp	r1, r4
 800a090:	d008      	beq.n	800a0a4 <memmove+0x28>
 800a092:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a09a:	e7f8      	b.n	800a08e <memmove+0x12>
 800a09c:	4402      	add	r2, r0
 800a09e:	4601      	mov	r1, r0
 800a0a0:	428a      	cmp	r2, r1
 800a0a2:	d100      	bne.n	800a0a6 <memmove+0x2a>
 800a0a4:	bd10      	pop	{r4, pc}
 800a0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0ae:	e7f7      	b.n	800a0a0 <memmove+0x24>

0800a0b0 <_sbrk_r>:
 800a0b0:	b538      	push	{r3, r4, r5, lr}
 800a0b2:	4d06      	ldr	r5, [pc, #24]	@ (800a0cc <_sbrk_r+0x1c>)
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	4604      	mov	r4, r0
 800a0b8:	4608      	mov	r0, r1
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	f7f8 fa3c 	bl	8002538 <_sbrk>
 800a0c0:	1c43      	adds	r3, r0, #1
 800a0c2:	d102      	bne.n	800a0ca <_sbrk_r+0x1a>
 800a0c4:	682b      	ldr	r3, [r5, #0]
 800a0c6:	b103      	cbz	r3, 800a0ca <_sbrk_r+0x1a>
 800a0c8:	6023      	str	r3, [r4, #0]
 800a0ca:	bd38      	pop	{r3, r4, r5, pc}
 800a0cc:	20005b90 	.word	0x20005b90

0800a0d0 <memcpy>:
 800a0d0:	440a      	add	r2, r1
 800a0d2:	4291      	cmp	r1, r2
 800a0d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0d8:	d100      	bne.n	800a0dc <memcpy+0xc>
 800a0da:	4770      	bx	lr
 800a0dc:	b510      	push	{r4, lr}
 800a0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0e6:	4291      	cmp	r1, r2
 800a0e8:	d1f9      	bne.n	800a0de <memcpy+0xe>
 800a0ea:	bd10      	pop	{r4, pc}

0800a0ec <__assert_func>:
 800a0ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0ee:	4614      	mov	r4, r2
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4b09      	ldr	r3, [pc, #36]	@ (800a118 <__assert_func+0x2c>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4605      	mov	r5, r0
 800a0f8:	68d8      	ldr	r0, [r3, #12]
 800a0fa:	b954      	cbnz	r4, 800a112 <__assert_func+0x26>
 800a0fc:	4b07      	ldr	r3, [pc, #28]	@ (800a11c <__assert_func+0x30>)
 800a0fe:	461c      	mov	r4, r3
 800a100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a104:	9100      	str	r1, [sp, #0]
 800a106:	462b      	mov	r3, r5
 800a108:	4905      	ldr	r1, [pc, #20]	@ (800a120 <__assert_func+0x34>)
 800a10a:	f000 f86f 	bl	800a1ec <fiprintf>
 800a10e:	f000 f87f 	bl	800a210 <abort>
 800a112:	4b04      	ldr	r3, [pc, #16]	@ (800a124 <__assert_func+0x38>)
 800a114:	e7f4      	b.n	800a100 <__assert_func+0x14>
 800a116:	bf00      	nop
 800a118:	20003698 	.word	0x20003698
 800a11c:	0800f6de 	.word	0x0800f6de
 800a120:	0800f6b0 	.word	0x0800f6b0
 800a124:	0800f6a3 	.word	0x0800f6a3

0800a128 <_calloc_r>:
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	fba1 5402 	umull	r5, r4, r1, r2
 800a12e:	b93c      	cbnz	r4, 800a140 <_calloc_r+0x18>
 800a130:	4629      	mov	r1, r5
 800a132:	f7ff f991 	bl	8009458 <_malloc_r>
 800a136:	4606      	mov	r6, r0
 800a138:	b928      	cbnz	r0, 800a146 <_calloc_r+0x1e>
 800a13a:	2600      	movs	r6, #0
 800a13c:	4630      	mov	r0, r6
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	220c      	movs	r2, #12
 800a142:	6002      	str	r2, [r0, #0]
 800a144:	e7f9      	b.n	800a13a <_calloc_r+0x12>
 800a146:	462a      	mov	r2, r5
 800a148:	4621      	mov	r1, r4
 800a14a:	f7fe fa42 	bl	80085d2 <memset>
 800a14e:	e7f5      	b.n	800a13c <_calloc_r+0x14>

0800a150 <__ascii_mbtowc>:
 800a150:	b082      	sub	sp, #8
 800a152:	b901      	cbnz	r1, 800a156 <__ascii_mbtowc+0x6>
 800a154:	a901      	add	r1, sp, #4
 800a156:	b142      	cbz	r2, 800a16a <__ascii_mbtowc+0x1a>
 800a158:	b14b      	cbz	r3, 800a16e <__ascii_mbtowc+0x1e>
 800a15a:	7813      	ldrb	r3, [r2, #0]
 800a15c:	600b      	str	r3, [r1, #0]
 800a15e:	7812      	ldrb	r2, [r2, #0]
 800a160:	1e10      	subs	r0, r2, #0
 800a162:	bf18      	it	ne
 800a164:	2001      	movne	r0, #1
 800a166:	b002      	add	sp, #8
 800a168:	4770      	bx	lr
 800a16a:	4610      	mov	r0, r2
 800a16c:	e7fb      	b.n	800a166 <__ascii_mbtowc+0x16>
 800a16e:	f06f 0001 	mvn.w	r0, #1
 800a172:	e7f8      	b.n	800a166 <__ascii_mbtowc+0x16>

0800a174 <_realloc_r>:
 800a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a178:	4680      	mov	r8, r0
 800a17a:	4615      	mov	r5, r2
 800a17c:	460c      	mov	r4, r1
 800a17e:	b921      	cbnz	r1, 800a18a <_realloc_r+0x16>
 800a180:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a184:	4611      	mov	r1, r2
 800a186:	f7ff b967 	b.w	8009458 <_malloc_r>
 800a18a:	b92a      	cbnz	r2, 800a198 <_realloc_r+0x24>
 800a18c:	f7ff f8f0 	bl	8009370 <_free_r>
 800a190:	2400      	movs	r4, #0
 800a192:	4620      	mov	r0, r4
 800a194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a198:	f000 f841 	bl	800a21e <_malloc_usable_size_r>
 800a19c:	4285      	cmp	r5, r0
 800a19e:	4606      	mov	r6, r0
 800a1a0:	d802      	bhi.n	800a1a8 <_realloc_r+0x34>
 800a1a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a1a6:	d8f4      	bhi.n	800a192 <_realloc_r+0x1e>
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	4640      	mov	r0, r8
 800a1ac:	f7ff f954 	bl	8009458 <_malloc_r>
 800a1b0:	4607      	mov	r7, r0
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	d0ec      	beq.n	800a190 <_realloc_r+0x1c>
 800a1b6:	42b5      	cmp	r5, r6
 800a1b8:	462a      	mov	r2, r5
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	bf28      	it	cs
 800a1be:	4632      	movcs	r2, r6
 800a1c0:	f7ff ff86 	bl	800a0d0 <memcpy>
 800a1c4:	4621      	mov	r1, r4
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	f7ff f8d2 	bl	8009370 <_free_r>
 800a1cc:	463c      	mov	r4, r7
 800a1ce:	e7e0      	b.n	800a192 <_realloc_r+0x1e>

0800a1d0 <__ascii_wctomb>:
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	4608      	mov	r0, r1
 800a1d4:	b141      	cbz	r1, 800a1e8 <__ascii_wctomb+0x18>
 800a1d6:	2aff      	cmp	r2, #255	@ 0xff
 800a1d8:	d904      	bls.n	800a1e4 <__ascii_wctomb+0x14>
 800a1da:	228a      	movs	r2, #138	@ 0x8a
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e2:	4770      	bx	lr
 800a1e4:	700a      	strb	r2, [r1, #0]
 800a1e6:	2001      	movs	r0, #1
 800a1e8:	4770      	bx	lr
	...

0800a1ec <fiprintf>:
 800a1ec:	b40e      	push	{r1, r2, r3}
 800a1ee:	b503      	push	{r0, r1, lr}
 800a1f0:	4601      	mov	r1, r0
 800a1f2:	ab03      	add	r3, sp, #12
 800a1f4:	4805      	ldr	r0, [pc, #20]	@ (800a20c <fiprintf+0x20>)
 800a1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1fa:	6800      	ldr	r0, [r0, #0]
 800a1fc:	9301      	str	r3, [sp, #4]
 800a1fe:	f000 f83f 	bl	800a280 <_vfiprintf_r>
 800a202:	b002      	add	sp, #8
 800a204:	f85d eb04 	ldr.w	lr, [sp], #4
 800a208:	b003      	add	sp, #12
 800a20a:	4770      	bx	lr
 800a20c:	20003698 	.word	0x20003698

0800a210 <abort>:
 800a210:	b508      	push	{r3, lr}
 800a212:	2006      	movs	r0, #6
 800a214:	f000 fa08 	bl	800a628 <raise>
 800a218:	2001      	movs	r0, #1
 800a21a:	f7f8 f914 	bl	8002446 <_exit>

0800a21e <_malloc_usable_size_r>:
 800a21e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a222:	1f18      	subs	r0, r3, #4
 800a224:	2b00      	cmp	r3, #0
 800a226:	bfbc      	itt	lt
 800a228:	580b      	ldrlt	r3, [r1, r0]
 800a22a:	18c0      	addlt	r0, r0, r3
 800a22c:	4770      	bx	lr

0800a22e <__sfputc_r>:
 800a22e:	6893      	ldr	r3, [r2, #8]
 800a230:	3b01      	subs	r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	b410      	push	{r4}
 800a236:	6093      	str	r3, [r2, #8]
 800a238:	da08      	bge.n	800a24c <__sfputc_r+0x1e>
 800a23a:	6994      	ldr	r4, [r2, #24]
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	db01      	blt.n	800a244 <__sfputc_r+0x16>
 800a240:	290a      	cmp	r1, #10
 800a242:	d103      	bne.n	800a24c <__sfputc_r+0x1e>
 800a244:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a248:	f000 b932 	b.w	800a4b0 <__swbuf_r>
 800a24c:	6813      	ldr	r3, [r2, #0]
 800a24e:	1c58      	adds	r0, r3, #1
 800a250:	6010      	str	r0, [r2, #0]
 800a252:	7019      	strb	r1, [r3, #0]
 800a254:	4608      	mov	r0, r1
 800a256:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <__sfputs_r>:
 800a25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25e:	4606      	mov	r6, r0
 800a260:	460f      	mov	r7, r1
 800a262:	4614      	mov	r4, r2
 800a264:	18d5      	adds	r5, r2, r3
 800a266:	42ac      	cmp	r4, r5
 800a268:	d101      	bne.n	800a26e <__sfputs_r+0x12>
 800a26a:	2000      	movs	r0, #0
 800a26c:	e007      	b.n	800a27e <__sfputs_r+0x22>
 800a26e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a272:	463a      	mov	r2, r7
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff ffda 	bl	800a22e <__sfputc_r>
 800a27a:	1c43      	adds	r3, r0, #1
 800a27c:	d1f3      	bne.n	800a266 <__sfputs_r+0xa>
 800a27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a280 <_vfiprintf_r>:
 800a280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a284:	460d      	mov	r5, r1
 800a286:	b09d      	sub	sp, #116	@ 0x74
 800a288:	4614      	mov	r4, r2
 800a28a:	4698      	mov	r8, r3
 800a28c:	4606      	mov	r6, r0
 800a28e:	b118      	cbz	r0, 800a298 <_vfiprintf_r+0x18>
 800a290:	6a03      	ldr	r3, [r0, #32]
 800a292:	b90b      	cbnz	r3, 800a298 <_vfiprintf_r+0x18>
 800a294:	f7fe f904 	bl	80084a0 <__sinit>
 800a298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a29a:	07d9      	lsls	r1, r3, #31
 800a29c:	d405      	bmi.n	800a2aa <_vfiprintf_r+0x2a>
 800a29e:	89ab      	ldrh	r3, [r5, #12]
 800a2a0:	059a      	lsls	r2, r3, #22
 800a2a2:	d402      	bmi.n	800a2aa <_vfiprintf_r+0x2a>
 800a2a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2a6:	f7fe fa12 	bl	80086ce <__retarget_lock_acquire_recursive>
 800a2aa:	89ab      	ldrh	r3, [r5, #12]
 800a2ac:	071b      	lsls	r3, r3, #28
 800a2ae:	d501      	bpl.n	800a2b4 <_vfiprintf_r+0x34>
 800a2b0:	692b      	ldr	r3, [r5, #16]
 800a2b2:	b99b      	cbnz	r3, 800a2dc <_vfiprintf_r+0x5c>
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f000 f938 	bl	800a52c <__swsetup_r>
 800a2bc:	b170      	cbz	r0, 800a2dc <_vfiprintf_r+0x5c>
 800a2be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2c0:	07dc      	lsls	r4, r3, #31
 800a2c2:	d504      	bpl.n	800a2ce <_vfiprintf_r+0x4e>
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c8:	b01d      	add	sp, #116	@ 0x74
 800a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ce:	89ab      	ldrh	r3, [r5, #12]
 800a2d0:	0598      	lsls	r0, r3, #22
 800a2d2:	d4f7      	bmi.n	800a2c4 <_vfiprintf_r+0x44>
 800a2d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2d6:	f7fe f9fb 	bl	80086d0 <__retarget_lock_release_recursive>
 800a2da:	e7f3      	b.n	800a2c4 <_vfiprintf_r+0x44>
 800a2dc:	2300      	movs	r3, #0
 800a2de:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2e0:	2320      	movs	r3, #32
 800a2e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ea:	2330      	movs	r3, #48	@ 0x30
 800a2ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a49c <_vfiprintf_r+0x21c>
 800a2f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2f4:	f04f 0901 	mov.w	r9, #1
 800a2f8:	4623      	mov	r3, r4
 800a2fa:	469a      	mov	sl, r3
 800a2fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a300:	b10a      	cbz	r2, 800a306 <_vfiprintf_r+0x86>
 800a302:	2a25      	cmp	r2, #37	@ 0x25
 800a304:	d1f9      	bne.n	800a2fa <_vfiprintf_r+0x7a>
 800a306:	ebba 0b04 	subs.w	fp, sl, r4
 800a30a:	d00b      	beq.n	800a324 <_vfiprintf_r+0xa4>
 800a30c:	465b      	mov	r3, fp
 800a30e:	4622      	mov	r2, r4
 800a310:	4629      	mov	r1, r5
 800a312:	4630      	mov	r0, r6
 800a314:	f7ff ffa2 	bl	800a25c <__sfputs_r>
 800a318:	3001      	adds	r0, #1
 800a31a:	f000 80a7 	beq.w	800a46c <_vfiprintf_r+0x1ec>
 800a31e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a320:	445a      	add	r2, fp
 800a322:	9209      	str	r2, [sp, #36]	@ 0x24
 800a324:	f89a 3000 	ldrb.w	r3, [sl]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 809f 	beq.w	800a46c <_vfiprintf_r+0x1ec>
 800a32e:	2300      	movs	r3, #0
 800a330:	f04f 32ff 	mov.w	r2, #4294967295
 800a334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a338:	f10a 0a01 	add.w	sl, sl, #1
 800a33c:	9304      	str	r3, [sp, #16]
 800a33e:	9307      	str	r3, [sp, #28]
 800a340:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a344:	931a      	str	r3, [sp, #104]	@ 0x68
 800a346:	4654      	mov	r4, sl
 800a348:	2205      	movs	r2, #5
 800a34a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a34e:	4853      	ldr	r0, [pc, #332]	@ (800a49c <_vfiprintf_r+0x21c>)
 800a350:	f7f5 ff6e 	bl	8000230 <memchr>
 800a354:	9a04      	ldr	r2, [sp, #16]
 800a356:	b9d8      	cbnz	r0, 800a390 <_vfiprintf_r+0x110>
 800a358:	06d1      	lsls	r1, r2, #27
 800a35a:	bf44      	itt	mi
 800a35c:	2320      	movmi	r3, #32
 800a35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a362:	0713      	lsls	r3, r2, #28
 800a364:	bf44      	itt	mi
 800a366:	232b      	movmi	r3, #43	@ 0x2b
 800a368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a36c:	f89a 3000 	ldrb.w	r3, [sl]
 800a370:	2b2a      	cmp	r3, #42	@ 0x2a
 800a372:	d015      	beq.n	800a3a0 <_vfiprintf_r+0x120>
 800a374:	9a07      	ldr	r2, [sp, #28]
 800a376:	4654      	mov	r4, sl
 800a378:	2000      	movs	r0, #0
 800a37a:	f04f 0c0a 	mov.w	ip, #10
 800a37e:	4621      	mov	r1, r4
 800a380:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a384:	3b30      	subs	r3, #48	@ 0x30
 800a386:	2b09      	cmp	r3, #9
 800a388:	d94b      	bls.n	800a422 <_vfiprintf_r+0x1a2>
 800a38a:	b1b0      	cbz	r0, 800a3ba <_vfiprintf_r+0x13a>
 800a38c:	9207      	str	r2, [sp, #28]
 800a38e:	e014      	b.n	800a3ba <_vfiprintf_r+0x13a>
 800a390:	eba0 0308 	sub.w	r3, r0, r8
 800a394:	fa09 f303 	lsl.w	r3, r9, r3
 800a398:	4313      	orrs	r3, r2
 800a39a:	9304      	str	r3, [sp, #16]
 800a39c:	46a2      	mov	sl, r4
 800a39e:	e7d2      	b.n	800a346 <_vfiprintf_r+0xc6>
 800a3a0:	9b03      	ldr	r3, [sp, #12]
 800a3a2:	1d19      	adds	r1, r3, #4
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	9103      	str	r1, [sp, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	bfbb      	ittet	lt
 800a3ac:	425b      	neglt	r3, r3
 800a3ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a3b2:	9307      	strge	r3, [sp, #28]
 800a3b4:	9307      	strlt	r3, [sp, #28]
 800a3b6:	bfb8      	it	lt
 800a3b8:	9204      	strlt	r2, [sp, #16]
 800a3ba:	7823      	ldrb	r3, [r4, #0]
 800a3bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3be:	d10a      	bne.n	800a3d6 <_vfiprintf_r+0x156>
 800a3c0:	7863      	ldrb	r3, [r4, #1]
 800a3c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3c4:	d132      	bne.n	800a42c <_vfiprintf_r+0x1ac>
 800a3c6:	9b03      	ldr	r3, [sp, #12]
 800a3c8:	1d1a      	adds	r2, r3, #4
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	9203      	str	r2, [sp, #12]
 800a3ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3d2:	3402      	adds	r4, #2
 800a3d4:	9305      	str	r3, [sp, #20]
 800a3d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4ac <_vfiprintf_r+0x22c>
 800a3da:	7821      	ldrb	r1, [r4, #0]
 800a3dc:	2203      	movs	r2, #3
 800a3de:	4650      	mov	r0, sl
 800a3e0:	f7f5 ff26 	bl	8000230 <memchr>
 800a3e4:	b138      	cbz	r0, 800a3f6 <_vfiprintf_r+0x176>
 800a3e6:	9b04      	ldr	r3, [sp, #16]
 800a3e8:	eba0 000a 	sub.w	r0, r0, sl
 800a3ec:	2240      	movs	r2, #64	@ 0x40
 800a3ee:	4082      	lsls	r2, r0
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	3401      	adds	r4, #1
 800a3f4:	9304      	str	r3, [sp, #16]
 800a3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3fa:	4829      	ldr	r0, [pc, #164]	@ (800a4a0 <_vfiprintf_r+0x220>)
 800a3fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a400:	2206      	movs	r2, #6
 800a402:	f7f5 ff15 	bl	8000230 <memchr>
 800a406:	2800      	cmp	r0, #0
 800a408:	d03f      	beq.n	800a48a <_vfiprintf_r+0x20a>
 800a40a:	4b26      	ldr	r3, [pc, #152]	@ (800a4a4 <_vfiprintf_r+0x224>)
 800a40c:	bb1b      	cbnz	r3, 800a456 <_vfiprintf_r+0x1d6>
 800a40e:	9b03      	ldr	r3, [sp, #12]
 800a410:	3307      	adds	r3, #7
 800a412:	f023 0307 	bic.w	r3, r3, #7
 800a416:	3308      	adds	r3, #8
 800a418:	9303      	str	r3, [sp, #12]
 800a41a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a41c:	443b      	add	r3, r7
 800a41e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a420:	e76a      	b.n	800a2f8 <_vfiprintf_r+0x78>
 800a422:	fb0c 3202 	mla	r2, ip, r2, r3
 800a426:	460c      	mov	r4, r1
 800a428:	2001      	movs	r0, #1
 800a42a:	e7a8      	b.n	800a37e <_vfiprintf_r+0xfe>
 800a42c:	2300      	movs	r3, #0
 800a42e:	3401      	adds	r4, #1
 800a430:	9305      	str	r3, [sp, #20]
 800a432:	4619      	mov	r1, r3
 800a434:	f04f 0c0a 	mov.w	ip, #10
 800a438:	4620      	mov	r0, r4
 800a43a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a43e:	3a30      	subs	r2, #48	@ 0x30
 800a440:	2a09      	cmp	r2, #9
 800a442:	d903      	bls.n	800a44c <_vfiprintf_r+0x1cc>
 800a444:	2b00      	cmp	r3, #0
 800a446:	d0c6      	beq.n	800a3d6 <_vfiprintf_r+0x156>
 800a448:	9105      	str	r1, [sp, #20]
 800a44a:	e7c4      	b.n	800a3d6 <_vfiprintf_r+0x156>
 800a44c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a450:	4604      	mov	r4, r0
 800a452:	2301      	movs	r3, #1
 800a454:	e7f0      	b.n	800a438 <_vfiprintf_r+0x1b8>
 800a456:	ab03      	add	r3, sp, #12
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	462a      	mov	r2, r5
 800a45c:	4b12      	ldr	r3, [pc, #72]	@ (800a4a8 <_vfiprintf_r+0x228>)
 800a45e:	a904      	add	r1, sp, #16
 800a460:	4630      	mov	r0, r6
 800a462:	f7fd fbd9 	bl	8007c18 <_printf_float>
 800a466:	4607      	mov	r7, r0
 800a468:	1c78      	adds	r0, r7, #1
 800a46a:	d1d6      	bne.n	800a41a <_vfiprintf_r+0x19a>
 800a46c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a46e:	07d9      	lsls	r1, r3, #31
 800a470:	d405      	bmi.n	800a47e <_vfiprintf_r+0x1fe>
 800a472:	89ab      	ldrh	r3, [r5, #12]
 800a474:	059a      	lsls	r2, r3, #22
 800a476:	d402      	bmi.n	800a47e <_vfiprintf_r+0x1fe>
 800a478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a47a:	f7fe f929 	bl	80086d0 <__retarget_lock_release_recursive>
 800a47e:	89ab      	ldrh	r3, [r5, #12]
 800a480:	065b      	lsls	r3, r3, #25
 800a482:	f53f af1f 	bmi.w	800a2c4 <_vfiprintf_r+0x44>
 800a486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a488:	e71e      	b.n	800a2c8 <_vfiprintf_r+0x48>
 800a48a:	ab03      	add	r3, sp, #12
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	462a      	mov	r2, r5
 800a490:	4b05      	ldr	r3, [pc, #20]	@ (800a4a8 <_vfiprintf_r+0x228>)
 800a492:	a904      	add	r1, sp, #16
 800a494:	4630      	mov	r0, r6
 800a496:	f7fd fe57 	bl	8008148 <_printf_i>
 800a49a:	e7e4      	b.n	800a466 <_vfiprintf_r+0x1e6>
 800a49c:	0800f688 	.word	0x0800f688
 800a4a0:	0800f692 	.word	0x0800f692
 800a4a4:	08007c19 	.word	0x08007c19
 800a4a8:	0800a25d 	.word	0x0800a25d
 800a4ac:	0800f68e 	.word	0x0800f68e

0800a4b0 <__swbuf_r>:
 800a4b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b2:	460e      	mov	r6, r1
 800a4b4:	4614      	mov	r4, r2
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	b118      	cbz	r0, 800a4c2 <__swbuf_r+0x12>
 800a4ba:	6a03      	ldr	r3, [r0, #32]
 800a4bc:	b90b      	cbnz	r3, 800a4c2 <__swbuf_r+0x12>
 800a4be:	f7fd ffef 	bl	80084a0 <__sinit>
 800a4c2:	69a3      	ldr	r3, [r4, #24]
 800a4c4:	60a3      	str	r3, [r4, #8]
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	071a      	lsls	r2, r3, #28
 800a4ca:	d501      	bpl.n	800a4d0 <__swbuf_r+0x20>
 800a4cc:	6923      	ldr	r3, [r4, #16]
 800a4ce:	b943      	cbnz	r3, 800a4e2 <__swbuf_r+0x32>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	f000 f82a 	bl	800a52c <__swsetup_r>
 800a4d8:	b118      	cbz	r0, 800a4e2 <__swbuf_r+0x32>
 800a4da:	f04f 37ff 	mov.w	r7, #4294967295
 800a4de:	4638      	mov	r0, r7
 800a4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	6922      	ldr	r2, [r4, #16]
 800a4e6:	1a98      	subs	r0, r3, r2
 800a4e8:	6963      	ldr	r3, [r4, #20]
 800a4ea:	b2f6      	uxtb	r6, r6
 800a4ec:	4283      	cmp	r3, r0
 800a4ee:	4637      	mov	r7, r6
 800a4f0:	dc05      	bgt.n	800a4fe <__swbuf_r+0x4e>
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f7ff fd99 	bl	800a02c <_fflush_r>
 800a4fa:	2800      	cmp	r0, #0
 800a4fc:	d1ed      	bne.n	800a4da <__swbuf_r+0x2a>
 800a4fe:	68a3      	ldr	r3, [r4, #8]
 800a500:	3b01      	subs	r3, #1
 800a502:	60a3      	str	r3, [r4, #8]
 800a504:	6823      	ldr	r3, [r4, #0]
 800a506:	1c5a      	adds	r2, r3, #1
 800a508:	6022      	str	r2, [r4, #0]
 800a50a:	701e      	strb	r6, [r3, #0]
 800a50c:	6962      	ldr	r2, [r4, #20]
 800a50e:	1c43      	adds	r3, r0, #1
 800a510:	429a      	cmp	r2, r3
 800a512:	d004      	beq.n	800a51e <__swbuf_r+0x6e>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	07db      	lsls	r3, r3, #31
 800a518:	d5e1      	bpl.n	800a4de <__swbuf_r+0x2e>
 800a51a:	2e0a      	cmp	r6, #10
 800a51c:	d1df      	bne.n	800a4de <__swbuf_r+0x2e>
 800a51e:	4621      	mov	r1, r4
 800a520:	4628      	mov	r0, r5
 800a522:	f7ff fd83 	bl	800a02c <_fflush_r>
 800a526:	2800      	cmp	r0, #0
 800a528:	d0d9      	beq.n	800a4de <__swbuf_r+0x2e>
 800a52a:	e7d6      	b.n	800a4da <__swbuf_r+0x2a>

0800a52c <__swsetup_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4b29      	ldr	r3, [pc, #164]	@ (800a5d4 <__swsetup_r+0xa8>)
 800a530:	4605      	mov	r5, r0
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	460c      	mov	r4, r1
 800a536:	b118      	cbz	r0, 800a540 <__swsetup_r+0x14>
 800a538:	6a03      	ldr	r3, [r0, #32]
 800a53a:	b90b      	cbnz	r3, 800a540 <__swsetup_r+0x14>
 800a53c:	f7fd ffb0 	bl	80084a0 <__sinit>
 800a540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a544:	0719      	lsls	r1, r3, #28
 800a546:	d422      	bmi.n	800a58e <__swsetup_r+0x62>
 800a548:	06da      	lsls	r2, r3, #27
 800a54a:	d407      	bmi.n	800a55c <__swsetup_r+0x30>
 800a54c:	2209      	movs	r2, #9
 800a54e:	602a      	str	r2, [r5, #0]
 800a550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a554:	81a3      	strh	r3, [r4, #12]
 800a556:	f04f 30ff 	mov.w	r0, #4294967295
 800a55a:	e033      	b.n	800a5c4 <__swsetup_r+0x98>
 800a55c:	0758      	lsls	r0, r3, #29
 800a55e:	d512      	bpl.n	800a586 <__swsetup_r+0x5a>
 800a560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a562:	b141      	cbz	r1, 800a576 <__swsetup_r+0x4a>
 800a564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a568:	4299      	cmp	r1, r3
 800a56a:	d002      	beq.n	800a572 <__swsetup_r+0x46>
 800a56c:	4628      	mov	r0, r5
 800a56e:	f7fe feff 	bl	8009370 <_free_r>
 800a572:	2300      	movs	r3, #0
 800a574:	6363      	str	r3, [r4, #52]	@ 0x34
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a57c:	81a3      	strh	r3, [r4, #12]
 800a57e:	2300      	movs	r3, #0
 800a580:	6063      	str	r3, [r4, #4]
 800a582:	6923      	ldr	r3, [r4, #16]
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	89a3      	ldrh	r3, [r4, #12]
 800a588:	f043 0308 	orr.w	r3, r3, #8
 800a58c:	81a3      	strh	r3, [r4, #12]
 800a58e:	6923      	ldr	r3, [r4, #16]
 800a590:	b94b      	cbnz	r3, 800a5a6 <__swsetup_r+0x7a>
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a59c:	d003      	beq.n	800a5a6 <__swsetup_r+0x7a>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f000 f883 	bl	800a6ac <__smakebuf_r>
 800a5a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5aa:	f013 0201 	ands.w	r2, r3, #1
 800a5ae:	d00a      	beq.n	800a5c6 <__swsetup_r+0x9a>
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	60a2      	str	r2, [r4, #8]
 800a5b4:	6962      	ldr	r2, [r4, #20]
 800a5b6:	4252      	negs	r2, r2
 800a5b8:	61a2      	str	r2, [r4, #24]
 800a5ba:	6922      	ldr	r2, [r4, #16]
 800a5bc:	b942      	cbnz	r2, 800a5d0 <__swsetup_r+0xa4>
 800a5be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a5c2:	d1c5      	bne.n	800a550 <__swsetup_r+0x24>
 800a5c4:	bd38      	pop	{r3, r4, r5, pc}
 800a5c6:	0799      	lsls	r1, r3, #30
 800a5c8:	bf58      	it	pl
 800a5ca:	6962      	ldrpl	r2, [r4, #20]
 800a5cc:	60a2      	str	r2, [r4, #8]
 800a5ce:	e7f4      	b.n	800a5ba <__swsetup_r+0x8e>
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	e7f7      	b.n	800a5c4 <__swsetup_r+0x98>
 800a5d4:	20003698 	.word	0x20003698

0800a5d8 <_raise_r>:
 800a5d8:	291f      	cmp	r1, #31
 800a5da:	b538      	push	{r3, r4, r5, lr}
 800a5dc:	4605      	mov	r5, r0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	d904      	bls.n	800a5ec <_raise_r+0x14>
 800a5e2:	2316      	movs	r3, #22
 800a5e4:	6003      	str	r3, [r0, #0]
 800a5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a5ee:	b112      	cbz	r2, 800a5f6 <_raise_r+0x1e>
 800a5f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5f4:	b94b      	cbnz	r3, 800a60a <_raise_r+0x32>
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 f830 	bl	800a65c <_getpid_r>
 800a5fc:	4622      	mov	r2, r4
 800a5fe:	4601      	mov	r1, r0
 800a600:	4628      	mov	r0, r5
 800a602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a606:	f000 b817 	b.w	800a638 <_kill_r>
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d00a      	beq.n	800a624 <_raise_r+0x4c>
 800a60e:	1c59      	adds	r1, r3, #1
 800a610:	d103      	bne.n	800a61a <_raise_r+0x42>
 800a612:	2316      	movs	r3, #22
 800a614:	6003      	str	r3, [r0, #0]
 800a616:	2001      	movs	r0, #1
 800a618:	e7e7      	b.n	800a5ea <_raise_r+0x12>
 800a61a:	2100      	movs	r1, #0
 800a61c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a620:	4620      	mov	r0, r4
 800a622:	4798      	blx	r3
 800a624:	2000      	movs	r0, #0
 800a626:	e7e0      	b.n	800a5ea <_raise_r+0x12>

0800a628 <raise>:
 800a628:	4b02      	ldr	r3, [pc, #8]	@ (800a634 <raise+0xc>)
 800a62a:	4601      	mov	r1, r0
 800a62c:	6818      	ldr	r0, [r3, #0]
 800a62e:	f7ff bfd3 	b.w	800a5d8 <_raise_r>
 800a632:	bf00      	nop
 800a634:	20003698 	.word	0x20003698

0800a638 <_kill_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	@ (800a658 <_kill_r+0x20>)
 800a63c:	2300      	movs	r3, #0
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	4611      	mov	r1, r2
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	f7f7 feee 	bl	8002426 <_kill>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d102      	bne.n	800a654 <_kill_r+0x1c>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	b103      	cbz	r3, 800a654 <_kill_r+0x1c>
 800a652:	6023      	str	r3, [r4, #0]
 800a654:	bd38      	pop	{r3, r4, r5, pc}
 800a656:	bf00      	nop
 800a658:	20005b90 	.word	0x20005b90

0800a65c <_getpid_r>:
 800a65c:	f7f7 bedb 	b.w	8002416 <_getpid>

0800a660 <__swhatbuf_r>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	460c      	mov	r4, r1
 800a664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a668:	2900      	cmp	r1, #0
 800a66a:	b096      	sub	sp, #88	@ 0x58
 800a66c:	4615      	mov	r5, r2
 800a66e:	461e      	mov	r6, r3
 800a670:	da0d      	bge.n	800a68e <__swhatbuf_r+0x2e>
 800a672:	89a3      	ldrh	r3, [r4, #12]
 800a674:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a678:	f04f 0100 	mov.w	r1, #0
 800a67c:	bf14      	ite	ne
 800a67e:	2340      	movne	r3, #64	@ 0x40
 800a680:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a684:	2000      	movs	r0, #0
 800a686:	6031      	str	r1, [r6, #0]
 800a688:	602b      	str	r3, [r5, #0]
 800a68a:	b016      	add	sp, #88	@ 0x58
 800a68c:	bd70      	pop	{r4, r5, r6, pc}
 800a68e:	466a      	mov	r2, sp
 800a690:	f000 f848 	bl	800a724 <_fstat_r>
 800a694:	2800      	cmp	r0, #0
 800a696:	dbec      	blt.n	800a672 <__swhatbuf_r+0x12>
 800a698:	9901      	ldr	r1, [sp, #4]
 800a69a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a69e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6a2:	4259      	negs	r1, r3
 800a6a4:	4159      	adcs	r1, r3
 800a6a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6aa:	e7eb      	b.n	800a684 <__swhatbuf_r+0x24>

0800a6ac <__smakebuf_r>:
 800a6ac:	898b      	ldrh	r3, [r1, #12]
 800a6ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6b0:	079d      	lsls	r5, r3, #30
 800a6b2:	4606      	mov	r6, r0
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	d507      	bpl.n	800a6c8 <__smakebuf_r+0x1c>
 800a6b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	6123      	str	r3, [r4, #16]
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	6163      	str	r3, [r4, #20]
 800a6c4:	b003      	add	sp, #12
 800a6c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6c8:	ab01      	add	r3, sp, #4
 800a6ca:	466a      	mov	r2, sp
 800a6cc:	f7ff ffc8 	bl	800a660 <__swhatbuf_r>
 800a6d0:	9f00      	ldr	r7, [sp, #0]
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	4639      	mov	r1, r7
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f7fe febe 	bl	8009458 <_malloc_r>
 800a6dc:	b948      	cbnz	r0, 800a6f2 <__smakebuf_r+0x46>
 800a6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6e2:	059a      	lsls	r2, r3, #22
 800a6e4:	d4ee      	bmi.n	800a6c4 <__smakebuf_r+0x18>
 800a6e6:	f023 0303 	bic.w	r3, r3, #3
 800a6ea:	f043 0302 	orr.w	r3, r3, #2
 800a6ee:	81a3      	strh	r3, [r4, #12]
 800a6f0:	e7e2      	b.n	800a6b8 <__smakebuf_r+0xc>
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	6020      	str	r0, [r4, #0]
 800a6f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6fa:	81a3      	strh	r3, [r4, #12]
 800a6fc:	9b01      	ldr	r3, [sp, #4]
 800a6fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a702:	b15b      	cbz	r3, 800a71c <__smakebuf_r+0x70>
 800a704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a708:	4630      	mov	r0, r6
 800a70a:	f000 f81d 	bl	800a748 <_isatty_r>
 800a70e:	b128      	cbz	r0, 800a71c <__smakebuf_r+0x70>
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	f023 0303 	bic.w	r3, r3, #3
 800a716:	f043 0301 	orr.w	r3, r3, #1
 800a71a:	81a3      	strh	r3, [r4, #12]
 800a71c:	89a3      	ldrh	r3, [r4, #12]
 800a71e:	431d      	orrs	r5, r3
 800a720:	81a5      	strh	r5, [r4, #12]
 800a722:	e7cf      	b.n	800a6c4 <__smakebuf_r+0x18>

0800a724 <_fstat_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4d07      	ldr	r5, [pc, #28]	@ (800a744 <_fstat_r+0x20>)
 800a728:	2300      	movs	r3, #0
 800a72a:	4604      	mov	r4, r0
 800a72c:	4608      	mov	r0, r1
 800a72e:	4611      	mov	r1, r2
 800a730:	602b      	str	r3, [r5, #0]
 800a732:	f7f7 fed8 	bl	80024e6 <_fstat>
 800a736:	1c43      	adds	r3, r0, #1
 800a738:	d102      	bne.n	800a740 <_fstat_r+0x1c>
 800a73a:	682b      	ldr	r3, [r5, #0]
 800a73c:	b103      	cbz	r3, 800a740 <_fstat_r+0x1c>
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	bd38      	pop	{r3, r4, r5, pc}
 800a742:	bf00      	nop
 800a744:	20005b90 	.word	0x20005b90

0800a748 <_isatty_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d06      	ldr	r5, [pc, #24]	@ (800a764 <_isatty_r+0x1c>)
 800a74c:	2300      	movs	r3, #0
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f7 fed7 	bl	8002506 <_isatty>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_isatty_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_isatty_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	20005b90 	.word	0x20005b90

0800a768 <_init>:
 800a768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a76a:	bf00      	nop
 800a76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a76e:	bc08      	pop	{r3}
 800a770:	469e      	mov	lr, r3
 800a772:	4770      	bx	lr

0800a774 <_fini>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	bf00      	nop
 800a778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77a:	bc08      	pop	{r3}
 800a77c:	469e      	mov	lr, r3
 800a77e:	4770      	bx	lr
