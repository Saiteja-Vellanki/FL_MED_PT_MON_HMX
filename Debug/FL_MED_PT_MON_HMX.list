
FL_MED_PT_MON_HMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091a8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002728  08009378  08009378  0000a378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa0  0800baa0  0000d48c  2**0
                  CONTENTS
  4 .ARM          00000008  0800baa0  0800baa0  0000caa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baa8  0800baa8  0000d48c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baa8  0800baa8  0000caa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800baac  0800baac  0000caac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000048c  20000000  0800bab0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022d8  2000048c  0800bf3c  0000d48c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002764  0800bf3c  0000d764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d48c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118ec  00000000  00000000  0000d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003184  00000000  00000000  0001eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00021f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c9f  00000000  00000000  00022fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e26  00000000  00000000  00023c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162f0  00000000  00000000  0003aa75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f0c1  00000000  00000000  00050d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfe26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005344  00000000  00000000  000cfe6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d51b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000048c 	.word	0x2000048c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009360 	.word	0x08009360

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000490 	.word	0x20000490
 800020c:	08009360 	.word	0x08009360

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Display_app_init>:
char data[10];

uint8_t tx_buf[256 * 64 / 2];

void Display_app_init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	 Display_init();
 8000efc:	f004 f931 	bl	8005162 <Display_init>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <Set_Display_buffsize>:

void Set_Display_buffsize(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	 set_buffer_size(256, 64);
 8000f08:	2140      	movs	r1, #64	@ 0x40
 8000f0a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f0e:	f004 f9f7 	bl	8005300 <set_buffer_size>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <Display_refresh>:

void Display_refresh(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	 Set_Display_buffsize();
 8000f1c:	f7ff fff2 	bl	8000f04 <Set_Display_buffsize>
	 fill_buffer(tx_buf, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	4809      	ldr	r0, [pc, #36]	@ (8000f48 <Display_refresh+0x30>)
 8000f24:	f004 fa00 	bl	8005328 <fill_buffer>
	 send_buffer_to_OLED(tx_buf, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4806      	ldr	r0, [pc, #24]	@ (8000f48 <Display_refresh+0x30>)
 8000f2e:	f004 fbd7 	bl	80056e0 <send_buffer_to_OLED>
     HAL_Delay(2000);
 8000f32:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f36:	f000 fd5d 	bl	80019f4 <HAL_Delay>
     fill_buffer(tx_buf, 0);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <Display_refresh+0x30>)
 8000f3e:	f004 f9f3 	bl	8005328 <fill_buffer>
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	200004fc 	.word	0x200004fc

08000f4c <Display_company_name>:
	send_buffer_to_OLED(tx_buf, 0, 0);
	HAL_Delay(5000);

}
void Display_company_name(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af02      	add	r7, sp, #8
	select_font(&FreeMono12pt7b);
 8000f52:	4814      	ldr	r0, [pc, #80]	@ (8000fa4 <Display_company_name+0x58>)
 8000f54:	f004 fa94 	bl	8005480 <select_font>
	draw_bitmap_4bpp(tx_buf, matrix, 0, 0, 32, 43);
 8000f58:	232b      	movs	r3, #43	@ 0x2b
 8000f5a:	9301      	str	r3, [sp, #4]
 8000f5c:	2320      	movs	r3, #32
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2300      	movs	r3, #0
 8000f62:	2200      	movs	r2, #0
 8000f64:	4910      	ldr	r1, [pc, #64]	@ (8000fa8 <Display_company_name+0x5c>)
 8000f66:	4811      	ldr	r0, [pc, #68]	@ (8000fac <Display_company_name+0x60>)
 8000f68:	f004 fb66 	bl	8005638 <draw_bitmap_4bpp>
    draw_text(tx_buf, "HEALOMEX BIO", 32, 20, 15);
 8000f6c:	230f      	movs	r3, #15
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2314      	movs	r3, #20
 8000f72:	2220      	movs	r2, #32
 8000f74:	490e      	ldr	r1, [pc, #56]	@ (8000fb0 <Display_company_name+0x64>)
 8000f76:	480d      	ldr	r0, [pc, #52]	@ (8000fac <Display_company_name+0x60>)
 8000f78:	f004 fb2a 	bl	80055d0 <draw_text>
    draw_text(tx_buf, "SCIENCES PVT LTD", 32, 45, 15);
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	232d      	movs	r3, #45	@ 0x2d
 8000f82:	2220      	movs	r2, #32
 8000f84:	490b      	ldr	r1, [pc, #44]	@ (8000fb4 <Display_company_name+0x68>)
 8000f86:	4809      	ldr	r0, [pc, #36]	@ (8000fac <Display_company_name+0x60>)
 8000f88:	f004 fb22 	bl	80055d0 <draw_text>
    send_buffer_to_OLED(tx_buf, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4806      	ldr	r0, [pc, #24]	@ (8000fac <Display_company_name+0x60>)
 8000f92:	f004 fba5 	bl	80056e0 <send_buffer_to_OLED>
	HAL_Delay(5000);
 8000f96:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f9a:	f000 fd2b 	bl	80019f4 <HAL_Delay>

}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	08009cfc 	.word	0x08009cfc
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	200004fc 	.word	0x200004fc
 8000fb0:	08009378 	.word	0x08009378
 8000fb4:	08009388 	.word	0x08009388

08000fb8 <Display_contct_num>:
void Display_contct_num(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af02      	add	r7, sp, #8
	select_font(&FreeMono12pt7b);
 8000fbe:	480f      	ldr	r0, [pc, #60]	@ (8000ffc <Display_contct_num+0x44>)
 8000fc0:	f004 fa5e 	bl	8005480 <select_font>
    draw_text(tx_buf, "CONTACT :", 10, 20, 15);
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2314      	movs	r3, #20
 8000fca:	220a      	movs	r2, #10
 8000fcc:	490c      	ldr	r1, [pc, #48]	@ (8001000 <Display_contct_num+0x48>)
 8000fce:	480d      	ldr	r0, [pc, #52]	@ (8001004 <Display_contct_num+0x4c>)
 8000fd0:	f004 fafe 	bl	80055d0 <draw_text>
	draw_text(tx_buf, "+91 9603966993", 10, 45, 15);
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	232d      	movs	r3, #45	@ 0x2d
 8000fda:	220a      	movs	r2, #10
 8000fdc:	490a      	ldr	r1, [pc, #40]	@ (8001008 <Display_contct_num+0x50>)
 8000fde:	4809      	ldr	r0, [pc, #36]	@ (8001004 <Display_contct_num+0x4c>)
 8000fe0:	f004 faf6 	bl	80055d0 <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4806      	ldr	r0, [pc, #24]	@ (8001004 <Display_contct_num+0x4c>)
 8000fea:	f004 fb79 	bl	80056e0 <send_buffer_to_OLED>
    HAL_Delay(2000);
 8000fee:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ff2:	f000 fcff 	bl	80019f4 <HAL_Delay>
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	08009cfc 	.word	0x08009cfc
 8001000:	0800939c 	.word	0x0800939c
 8001004:	200004fc 	.word	0x200004fc
 8001008:	080093a8 	.word	0x080093a8

0800100c <Display_Managmnt_sys>:
void Display_Managmnt_sys(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af02      	add	r7, sp, #8
	select_font(&FreeSans12pt7b);
 8001012:	4816      	ldr	r0, [pc, #88]	@ (800106c <Display_Managmnt_sys+0x60>)
 8001014:	f004 fa34 	bl	8005480 <select_font>
	draw_text(tx_buf, "Temperature", 10, 20, 15);
 8001018:	230f      	movs	r3, #15
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2314      	movs	r3, #20
 800101e:	220a      	movs	r2, #10
 8001020:	4913      	ldr	r1, [pc, #76]	@ (8001070 <Display_Managmnt_sys+0x64>)
 8001022:	4814      	ldr	r0, [pc, #80]	@ (8001074 <Display_Managmnt_sys+0x68>)
 8001024:	f004 fad4 	bl	80055d0 <draw_text>
	select_font(&Font5x7FixedMono);
 8001028:	4813      	ldr	r0, [pc, #76]	@ (8001078 <Display_Managmnt_sys+0x6c>)
 800102a:	f004 fa29 	bl	8005480 <select_font>
	draw_text(tx_buf, "HMX-V01", 120, 20, 15);
 800102e:	230f      	movs	r3, #15
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2314      	movs	r3, #20
 8001034:	2278      	movs	r2, #120	@ 0x78
 8001036:	4911      	ldr	r1, [pc, #68]	@ (800107c <Display_Managmnt_sys+0x70>)
 8001038:	480e      	ldr	r0, [pc, #56]	@ (8001074 <Display_Managmnt_sys+0x68>)
 800103a:	f004 fac9 	bl	80055d0 <draw_text>
	select_font(&FreeSans12pt7b);
 800103e:	480b      	ldr	r0, [pc, #44]	@ (800106c <Display_Managmnt_sys+0x60>)
 8001040:	f004 fa1e 	bl	8005480 <select_font>
	draw_text(tx_buf, "Management System", 10, 45, 15);
 8001044:	230f      	movs	r3, #15
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	232d      	movs	r3, #45	@ 0x2d
 800104a:	220a      	movs	r2, #10
 800104c:	490c      	ldr	r1, [pc, #48]	@ (8001080 <Display_Managmnt_sys+0x74>)
 800104e:	4809      	ldr	r0, [pc, #36]	@ (8001074 <Display_Managmnt_sys+0x68>)
 8001050:	f004 fabe 	bl	80055d0 <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	4806      	ldr	r0, [pc, #24]	@ (8001074 <Display_Managmnt_sys+0x68>)
 800105a:	f004 fb41 	bl	80056e0 <send_buffer_to_OLED>
	HAL_Delay(2000);
 800105e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001062:	f000 fcc7 	bl	80019f4 <HAL_Delay>
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	0800a7b8 	.word	0x0800a7b8
 8001070:	080093b8 	.word	0x080093b8
 8001074:	200004fc 	.word	0x200004fc
 8001078:	0800b708 	.word	0x0800b708
 800107c:	080093c4 	.word	0x080093c4
 8001080:	080093cc 	.word	0x080093cc

08001084 <Display_curr_temp>:

void Display_curr_temp(void)
{
 8001084:	b5b0      	push	{r4, r5, r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af02      	add	r7, sp, #8
	select_font(&FreeSerifItalic12pt7b);
 800108a:	481a      	ldr	r0, [pc, #104]	@ (80010f4 <Display_curr_temp+0x70>)
 800108c:	f004 f9f8 	bl	8005480 <select_font>
	draw_text(tx_buf, "TEMP:", 10, 20, 15);
 8001090:	230f      	movs	r3, #15
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2314      	movs	r3, #20
 8001096:	220a      	movs	r2, #10
 8001098:	4917      	ldr	r1, [pc, #92]	@ (80010f8 <Display_curr_temp+0x74>)
 800109a:	4818      	ldr	r0, [pc, #96]	@ (80010fc <Display_curr_temp+0x78>)
 800109c:	f004 fa98 	bl	80055d0 <draw_text>
    sprintf(data,"%.2f%.f C",Temp[0],Temp[1]);
 80010a0:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <Display_curr_temp+0x7c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa7f 	bl	80005a8 <__aeabi_f2d>
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <Display_curr_temp+0x7c>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fa78 	bl	80005a8 <__aeabi_f2d>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	e9cd 2300 	strd	r2, r3, [sp]
 80010c0:	4622      	mov	r2, r4
 80010c2:	462b      	mov	r3, r5
 80010c4:	490f      	ldr	r1, [pc, #60]	@ (8001104 <Display_curr_temp+0x80>)
 80010c6:	4810      	ldr	r0, [pc, #64]	@ (8001108 <Display_curr_temp+0x84>)
 80010c8:	f006 f81e 	bl	8007108 <siprintf>
    draw_text(tx_buf, data, 80, 20, 15);
 80010cc:	230f      	movs	r3, #15
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	2314      	movs	r3, #20
 80010d2:	2250      	movs	r2, #80	@ 0x50
 80010d4:	490c      	ldr	r1, [pc, #48]	@ (8001108 <Display_curr_temp+0x84>)
 80010d6:	4809      	ldr	r0, [pc, #36]	@ (80010fc <Display_curr_temp+0x78>)
 80010d8:	f004 fa7a 	bl	80055d0 <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	4806      	ldr	r0, [pc, #24]	@ (80010fc <Display_curr_temp+0x78>)
 80010e2:	f004 fafd 	bl	80056e0 <send_buffer_to_OLED>
	HAL_Delay(2000);
 80010e6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80010ea:	f000 fc83 	bl	80019f4 <HAL_Delay>
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bdb0      	pop	{r4, r5, r7, pc}
 80010f4:	0800b280 	.word	0x0800b280
 80010f8:	080093e0 	.word	0x080093e0
 80010fc:	200004fc 	.word	0x200004fc
 8001100:	200025cc 	.word	0x200025cc
 8001104:	080093e8 	.word	0x080093e8
 8001108:	200004f0 	.word	0x200004f0

0800110c <Gpio_Ex_init>:

void Gpio_Ex_init()
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	Ex_gpio_init();
 8001110:	f004 fcda 	bl	8005ac8 <Ex_gpio_init>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <Led_State>:

void Led_State()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	led_states(LED_ON);
 800111c:	2001      	movs	r0, #1
 800111e:	f004 fd9f 	bl	8005c60 <led_states>
	HAL_Delay(5000);
 8001122:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001126:	f000 fc65 	bl	80019f4 <HAL_Delay>
	led_states(LED_OFF);
 800112a:	2000      	movs	r0, #0
 800112c:	f004 fd98 	bl	8005c60 <led_states>
	HAL_Delay(5000);
 8001130:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001134:	f000 fc5e 	bl	80019f4 <HAL_Delay>

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <MX_USART1_UART_Init>:
/* USER CODE END EV */



void MX_USART1_UART_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001140:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001142:	4a12      	ldr	r2, [pc, #72]	@ (800118c <MX_USART1_UART_Init+0x50>)
 8001144:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001146:	4b10      	ldr	r3, [pc, #64]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001148:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800114c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001162:	220c      	movs	r2, #12
 8001164:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_USART1_UART_Init+0x4c>)
 8001174:	f003 f832 	bl	80041dc <HAL_HalfDuplex_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800117e:	f000 f999 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200004a8 	.word	0x200004a8
 800118c:	40011000 	.word	0x40011000

08001190 <USART1_IRQHandler>:
/**
  * @brief This function handles Non maskable interrupt.
  */

void USART1_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	 owReadHandler();
 8001194:	f004 fe2c 	bl	8005df0 <owReadHandler>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001198:	4802      	ldr	r0, [pc, #8]	@ (80011a4 <USART1_IRQHandler+0x14>)
 800119a:	f003 f877 	bl	800428c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200004a8 	.word	0x200004a8

080011a8 <MX_GPIO_Init>:
 */

#include "gpio.h"

void MX_GPIO_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ae:	f107 0314 	add.w	r3, r7, #20
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b30      	ldr	r3, [pc, #192]	@ (8001284 <MX_GPIO_Init+0xdc>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a2f      	ldr	r2, [pc, #188]	@ (8001284 <MX_GPIO_Init+0xdc>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <MX_GPIO_Init+0xdc>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b29      	ldr	r3, [pc, #164]	@ (8001284 <MX_GPIO_Init+0xdc>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a28      	ldr	r2, [pc, #160]	@ (8001284 <MX_GPIO_Init+0xdc>)
 80011e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <MX_GPIO_Init+0xdc>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <MX_GPIO_Init+0xdc>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <MX_GPIO_Init+0xdc>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	@ 0x30
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <MX_GPIO_Init+0xdc>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <MX_GPIO_Init+0xdc>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a1a      	ldr	r2, [pc, #104]	@ (8001284 <MX_GPIO_Init+0xdc>)
 800121c:	f043 0302 	orr.w	r3, r3, #2
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_GPIO_Init+0xdc>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800122e:	2200      	movs	r2, #0
 8001230:	2130      	movs	r1, #48	@ 0x30
 8001232:	4815      	ldr	r0, [pc, #84]	@ (8001288 <MX_GPIO_Init+0xe0>)
 8001234:	f000 ff1a 	bl	800206c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4813      	ldr	r0, [pc, #76]	@ (800128c <MX_GPIO_Init+0xe4>)
 800123e:	f000 ff15 	bl	800206c <HAL_GPIO_WritePin>
//  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
//


  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001242:	2330      	movs	r3, #48	@ 0x30
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	@ (8001288 <MX_GPIO_Init+0xe0>)
 800125a:	f000 fd93 	bl	8001d84 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800125e:	2310      	movs	r3, #16
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	@ (800128c <MX_GPIO_Init+0xe4>)
 8001276:	f000 fd85 	bl	8001d84 <HAL_GPIO_Init>

}
 800127a:	bf00      	nop
 800127c:	3728      	adds	r7, #40	@ 0x28
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40020800 	.word	0x40020800
 800128c:	40020000 	.word	0x40020000

08001290 <MX_I2C1_Init>:
  * @param None
  * @retval None
  *
  */
void MX_I2C1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001294:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <MX_I2C1_Init+0x50>)
 8001296:	4a13      	ldr	r2, [pc, #76]	@ (80012e4 <MX_I2C1_Init+0x54>)
 8001298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800129a:	4b11      	ldr	r3, [pc, #68]	@ (80012e0 <MX_I2C1_Init+0x50>)
 800129c:	4a12      	ldr	r2, [pc, #72]	@ (80012e8 <MX_I2C1_Init+0x58>)
 800129e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	@ (80012e0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <MX_I2C1_Init+0x50>)
 80012ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <MX_I2C1_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b09      	ldr	r3, [pc, #36]	@ (80012e0 <MX_I2C1_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012cc:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_I2C1_Init+0x50>)
 80012ce:	f000 fee7 	bl	80020a0 <HAL_I2C_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d8:	f000 f8ec 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20002560 	.word	0x20002560
 80012e4:	40005400 	.word	0x40005400
 80012e8:	000186a0 	.word	0x000186a0

080012ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	@ 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a19      	ldr	r2, [pc, #100]	@ (8001370 <HAL_I2C_MspInit+0x84>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d12b      	bne.n	8001366 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a17      	ldr	r2, [pc, #92]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800132a:	23c0      	movs	r3, #192	@ 0xc0
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800132e:	2312      	movs	r3, #18
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133a:	2304      	movs	r3, #4
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	480c      	ldr	r0, [pc, #48]	@ (8001378 <HAL_I2C_MspInit+0x8c>)
 8001346:	f000 fd1d 	bl	8001d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a08      	ldr	r2, [pc, #32]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 8001354:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_I2C_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001366:	bf00      	nop
 8001368:	3728      	adds	r7, #40	@ 0x28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40005400 	.word	0x40005400
 8001374:	40023800 	.word	0x40023800
 8001378:	40020400 	.word	0x40020400

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001380:	f000 fac6 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001384:	f000 f82a 	bl	80013dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001388:	f7ff ff0e 	bl	80011a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800138c:	f000 f898 	bl	80014c0 <MX_SPI1_Init>
  Display_app_init();
 8001390:	f7ff fdb2 	bl	8000ef8 <Display_app_init>
  MX_USART1_UART_Init();
 8001394:	f7ff fed2 	bl	800113c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001398:	f7ff ff7a 	bl	8001290 <MX_I2C1_Init>
  Gpio_Ex_init();
 800139c:	f7ff feb6 	bl	800110c <Gpio_Ex_init>


  /* USER CODE BEGIN 2 */
//  Display_refresh();
//  company_logo();
  Display_refresh();
 80013a0:	f7ff fdba 	bl	8000f18 <Display_refresh>
  Display_company_name();
 80013a4:	f7ff fdd2 	bl	8000f4c <Display_company_name>
  Display_refresh();
 80013a8:	f7ff fdb6 	bl	8000f18 <Display_refresh>
  Display_Managmnt_sys();
 80013ac:	f7ff fe2e 	bl	800100c <Display_Managmnt_sys>
  Display_refresh();
 80013b0:	f7ff fdb2 	bl	8000f18 <Display_refresh>
  Display_contct_num();
 80013b4:	f7ff fe00 	bl	8000fb8 <Display_contct_num>
  Display_refresh();
 80013b8:	f7ff fdae 	bl	8000f18 <Display_refresh>
  get_ROMid();
 80013bc:	f005 f84a 	bl	8006454 <get_ROMid>


  while (1)
  {

	      get_Temperature();
 80013c0:	f005 f906 	bl	80065d0 <get_Temperature>
	 	  HAL_Delay(1000);
 80013c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013c8:	f000 fb14 	bl	80019f4 <HAL_Delay>
	 	  Display_refresh();
 80013cc:	f7ff fda4 	bl	8000f18 <Display_refresh>
          Display_curr_temp();
 80013d0:	f7ff fe58 	bl	8001084 <Display_curr_temp>
          Led_State();
 80013d4:	f7ff fea0 	bl	8001118 <Led_State>
	      get_Temperature();
 80013d8:	bf00      	nop
 80013da:	e7f1      	b.n	80013c0 <main+0x44>

080013dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b094      	sub	sp, #80	@ 0x50
 80013e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2234      	movs	r2, #52	@ 0x34
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f005 feef 	bl	80071ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	605a      	str	r2, [r3, #4]
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <SystemClock_Config+0xd0>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	4a28      	ldr	r2, [pc, #160]	@ (80014ac <SystemClock_Config+0xd0>)
 800140a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800140e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001410:	4b26      	ldr	r3, [pc, #152]	@ (80014ac <SystemClock_Config+0xd0>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141c:	2300      	movs	r3, #0
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	4b23      	ldr	r3, [pc, #140]	@ (80014b0 <SystemClock_Config+0xd4>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a22      	ldr	r2, [pc, #136]	@ (80014b0 <SystemClock_Config+0xd4>)
 8001426:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b20      	ldr	r3, [pc, #128]	@ (80014b0 <SystemClock_Config+0xd4>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001438:	2302      	movs	r3, #2
 800143a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143c:	2301      	movs	r3, #1
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001440:	2310      	movs	r3, #16
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001444:	2302      	movs	r3, #2
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001448:	2300      	movs	r3, #0
 800144a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800144c:	2310      	movs	r3, #16
 800144e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001450:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001454:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001456:	2304      	movs	r3, #4
 8001458:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800145a:	2304      	movs	r3, #4
 800145c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800145e:	2302      	movs	r3, #2
 8001460:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4618      	mov	r0, r3
 8001468:	f002 f98c 	bl	8003784 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001472:	f000 f81f 	bl	80014b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001476:	230f      	movs	r3, #15
 8001478:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147a:	2302      	movs	r3, #2
 800147c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001482:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001486:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	2102      	movs	r1, #2
 8001492:	4618      	mov	r0, r3
 8001494:	f001 ff56 	bl	8003344 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800149e:	f000 f809 	bl	80014b4 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	@ 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40007000 	.word	0x40007000

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <Error_Handler+0x8>

080014c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014c4:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_SPI1_Init+0x64>)
 80014c6:	4a18      	ldr	r2, [pc, #96]	@ (8001528 <MX_SPI1_Init+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ca:	4b16      	ldr	r3, [pc, #88]	@ (8001524 <MX_SPI1_Init+0x64>)
 80014cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	4b14      	ldr	r3, [pc, #80]	@ (8001524 <MX_SPI1_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d8:	4b12      	ldr	r3, [pc, #72]	@ (8001524 <MX_SPI1_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014de:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <MX_SPI1_Init+0x64>)
 80014e0:	2202      	movs	r2, #2
 80014e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001524 <MX_SPI1_Init+0x64>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <MX_SPI1_Init+0x64>)
 80014ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80014f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001524 <MX_SPI1_Init+0x64>)
 80014f4:	2210      	movs	r2, #16
 80014f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001524 <MX_SPI1_Init+0x64>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014fe:	4b09      	ldr	r3, [pc, #36]	@ (8001524 <MX_SPI1_Init+0x64>)
 8001500:	2200      	movs	r2, #0
 8001502:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001504:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <MX_SPI1_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 15;
 800150a:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <MX_SPI1_Init+0x64>)
 800150c:	220f      	movs	r2, #15
 800150e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	@ (8001524 <MX_SPI1_Init+0x64>)
 8001512:	f002 fbbb 	bl	8003c8c <HAL_SPI_Init>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800151c:	f7ff ffca 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	200024fc 	.word	0x200024fc
 8001528:	40013000 	.word	0x40013000

0800152c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08a      	sub	sp, #40	@ 0x28
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a19      	ldr	r2, [pc, #100]	@ (80015b0 <HAL_SPI_MspInit+0x84>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d12b      	bne.n	80015a6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <HAL_SPI_MspInit+0x88>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <HAL_SPI_MspInit+0x88>)
 8001558:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800155c:	6453      	str	r3, [r2, #68]	@ 0x44
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <HAL_SPI_MspInit+0x88>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <HAL_SPI_MspInit+0x88>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a10      	ldr	r2, [pc, #64]	@ (80015b4 <HAL_SPI_MspInit+0x88>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <HAL_SPI_MspInit+0x88>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001586:	23a0      	movs	r3, #160	@ 0xa0
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001592:	2303      	movs	r3, #3
 8001594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001596:	2305      	movs	r3, #5
 8001598:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	@ (80015b8 <HAL_SPI_MspInit+0x8c>)
 80015a2:	f000 fbef 	bl	8001d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	@ 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40013000 	.word	0x40013000
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <HAL_MspInit+0x4c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015fa:	2007      	movs	r0, #7
 80015fc:	f000 faee 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40023800 	.word	0x40023800

0800160c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1d      	ldr	r2, [pc, #116]	@ (80016a0 <HAL_UART_MspInit+0x94>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d134      	bne.n	8001698 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b1c      	ldr	r3, [pc, #112]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001636:	4a1b      	ldr	r2, [pc, #108]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6453      	str	r3, [r2, #68]	@ 0x44
 800163e:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 8001640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001642:	f003 0310 	and.w	r3, r3, #16
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	4b15      	ldr	r3, [pc, #84]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001652:	4a14      	ldr	r2, [pc, #80]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6313      	str	r3, [r2, #48]	@ 0x30
 800165a:	4b12      	ldr	r3, [pc, #72]	@ (80016a4 <HAL_UART_MspInit+0x98>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001678:	2307      	movs	r3, #7
 800167a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4809      	ldr	r0, [pc, #36]	@ (80016a8 <HAL_UART_MspInit+0x9c>)
 8001684:	f000 fb7e 	bl	8001d84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	2025      	movs	r0, #37	@ 0x25
 800168e:	f000 fab0 	bl	8001bf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001692:	2025      	movs	r0, #37	@ 0x25
 8001694:	f000 fac9 	bl	8001c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	3728      	adds	r7, #40	@ 0x28
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40011000 	.word	0x40011000
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020000 	.word	0x40020000

080016ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <NMI_Handler+0x4>

080016b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <HardFault_Handler+0x4>

080016bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <MemManage_Handler+0x4>

080016c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c8:	bf00      	nop
 80016ca:	e7fd      	b.n	80016c8 <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001702:	f000 f957 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}

0800170a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  return 1;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <_kill>:

int _kill(int pid, int sig)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001724:	f005 fda6 	bl	8007274 <__errno>
 8001728:	4603      	mov	r3, r0
 800172a:	2216      	movs	r2, #22
 800172c:	601a      	str	r2, [r3, #0]
  return -1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <_exit>:

void _exit (int status)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001742:	f04f 31ff 	mov.w	r1, #4294967295
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffe7 	bl	800171a <_kill>
  while (1) {}    /* Make sure we hang here */
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <_exit+0x12>

08001750 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	e00a      	b.n	8001778 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001762:	f3af 8000 	nop.w
 8001766:	4601      	mov	r1, r0
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	b2ca      	uxtb	r2, r1
 8001770:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	429a      	cmp	r2, r3
 800177e:	dbf0      	blt.n	8001762 <_read+0x12>
  }

  return len;
 8001780:	687b      	ldr	r3, [r7, #4]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	60f8      	str	r0, [r7, #12]
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	e009      	b.n	80017b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	60ba      	str	r2, [r7, #8]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf1      	blt.n	800179c <_write+0x12>
  }
  return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_close>:

int _close(int file)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017ea:	605a      	str	r2, [r3, #4]
  return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <_isatty>:

int _isatty(int file)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
	...

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f005 fd0a 	bl	8007274 <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20008000 	.word	0x20008000
 800188c:	00000400 	.word	0x00000400
 8001890:	20002554 	.word	0x20002554
 8001894:	20002768 	.word	0x20002768

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	@ (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	@ (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018c0:	f7ff ffea 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	@ (80018f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	@ (80018fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ea:	f005 fcc9 	bl	8007280 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ee:	f7ff fd45 	bl	800137c <main>
  bx  lr    
 80018f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80018f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018fc:	2000048c 	.word	0x2000048c
  ldr r2, =_sidata
 8001900:	0800bab0 	.word	0x0800bab0
  ldr r2, =_sbss
 8001904:	2000048c 	.word	0x2000048c
  ldr r4, =_ebss
 8001908:	20002764 	.word	0x20002764

0800190c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0d      	ldr	r2, [pc, #52]	@ (8001950 <HAL_Init+0x40>)
 800191a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800191e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001920:	4b0b      	ldr	r3, [pc, #44]	@ (8001950 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <HAL_Init+0x40>)
 8001926:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800192a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <HAL_Init+0x40>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <HAL_Init+0x40>)
 8001932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f94f 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	2000      	movs	r0, #0
 8001940:	f000 f808 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fe3a 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40023c00 	.word	0x40023c00

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f967 	bl	8001c46 <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 f92f 	bl	8001bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	@ (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200002b0 	.word	0x200002b0
 80019ac:	200002b8 	.word	0x200002b8
 80019b0:	200002b4 	.word	0x200002b4

080019b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	200002b8 	.word	0x200002b8
 80019d8:	20002558 	.word	0x20002558

080019dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20002558 	.word	0x20002558

080019f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff ffee 	bl	80019dc <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d005      	beq.n	8001a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <HAL_Delay+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d8f7      	bhi.n	8001a1c <HAL_Delay+0x28>
  {
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200002b8 	.word	0x200002b8

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	@ (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	@ 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff29 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c04:	f7ff ff3e 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff8e 	bl	8001b30 <NVIC_EncodePriority>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff5d 	bl	8001adc <__NVIC_SetPriority>
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff31 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffa2 	bl	8001b98 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c6a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff feb6 	bl	80019dc <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d008      	beq.n	8001c90 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e052      	b.n	8001d36 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0216 	bic.w	r2, r2, #22
 8001c9e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	695a      	ldr	r2, [r3, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d103      	bne.n	8001cc0 <HAL_DMA_Abort+0x62>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d007      	beq.n	8001cd0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 0208 	bic.w	r2, r2, #8
 8001cce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ce0:	e013      	b.n	8001d0a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ce2:	f7ff fe7b 	bl	80019dc <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b05      	cmp	r3, #5
 8001cee:	d90c      	bls.n	8001d0a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e015      	b.n	8001d36 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1e4      	bne.n	8001ce2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d1c:	223f      	movs	r2, #63	@ 0x3f
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d004      	beq.n	8001d5c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2280      	movs	r2, #128	@ 0x80
 8001d56:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e00c      	b.n	8001d76 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2205      	movs	r2, #5
 8001d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
	...

08001d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b089      	sub	sp, #36	@ 0x24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	e14d      	b.n	800203c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001da0:	2201      	movs	r2, #1
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f040 813c 	bne.w	8002036 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d005      	beq.n	8001dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d130      	bne.n	8001e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	091b      	lsrs	r3, r3, #4
 8001e22:	f003 0201 	and.w	r2, r3, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d017      	beq.n	8001e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	2203      	movs	r2, #3
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d123      	bne.n	8001ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	220f      	movs	r2, #15
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	08da      	lsrs	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3208      	adds	r2, #8
 8001ec2:	69b9      	ldr	r1, [r7, #24]
 8001ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43db      	mvns	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	4013      	ands	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0203 	and.w	r2, r3, #3
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8096 	beq.w	8002036 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	4b51      	ldr	r3, [pc, #324]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	4a50      	ldr	r2, [pc, #320]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002054 <HAL_GPIO_Init+0x2d0>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f22:	60fb      	str	r3, [r7, #12]
 8001f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f26:	4a4c      	ldr	r2, [pc, #304]	@ (8002058 <HAL_GPIO_Init+0x2d4>)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	3302      	adds	r3, #2
 8001f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	220f      	movs	r2, #15
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a43      	ldr	r2, [pc, #268]	@ (800205c <HAL_GPIO_Init+0x2d8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x1ea>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a42      	ldr	r2, [pc, #264]	@ (8002060 <HAL_GPIO_Init+0x2dc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x1e6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a41      	ldr	r2, [pc, #260]	@ (8002064 <HAL_GPIO_Init+0x2e0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x1e2>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e004      	b.n	8001f70 <HAL_GPIO_Init+0x1ec>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e002      	b.n	8001f70 <HAL_GPIO_Init+0x1ec>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_GPIO_Init+0x1ec>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	69fa      	ldr	r2, [r7, #28]
 8001f72:	f002 0203 	and.w	r2, r2, #3
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	4093      	lsls	r3, r2
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f80:	4935      	ldr	r1, [pc, #212]	@ (8002058 <HAL_GPIO_Init+0x2d4>)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f8e:	4b36      	ldr	r3, [pc, #216]	@ (8002068 <HAL_GPIO_Init+0x2e4>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d003      	beq.n	8001fb2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8002068 <HAL_GPIO_Init+0x2e4>)
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002068 <HAL_GPIO_Init+0x2e4>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fdc:	4a22      	ldr	r2, [pc, #136]	@ (8002068 <HAL_GPIO_Init+0x2e4>)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <HAL_GPIO_Init+0x2e4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002006:	4a18      	ldr	r2, [pc, #96]	@ (8002068 <HAL_GPIO_Init+0x2e4>)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200c:	4b16      	ldr	r3, [pc, #88]	@ (8002068 <HAL_GPIO_Init+0x2e4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4313      	orrs	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002030:	4a0d      	ldr	r2, [pc, #52]	@ (8002068 <HAL_GPIO_Init+0x2e4>)
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3301      	adds	r3, #1
 800203a:	61fb      	str	r3, [r7, #28]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	2b0f      	cmp	r3, #15
 8002040:	f67f aeae 	bls.w	8001da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3724      	adds	r7, #36	@ 0x24
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023800 	.word	0x40023800
 8002058:	40013800 	.word	0x40013800
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400
 8002064:	40020800 	.word	0x40020800
 8002068:	40013c00 	.word	0x40013c00

0800206c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	460b      	mov	r3, r1
 8002076:	807b      	strh	r3, [r7, #2]
 8002078:	4613      	mov	r3, r2
 800207a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800207c:	787b      	ldrb	r3, [r7, #1]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002082:	887a      	ldrh	r2, [r7, #2]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002088:	e003      	b.n	8002092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800208a:	887b      	ldrh	r3, [r7, #2]
 800208c:	041a      	lsls	r2, r3, #16
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	619a      	str	r2, [r3, #24]
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e12b      	b.n	800230a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff f910 	bl	80012ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2224      	movs	r2, #36	@ 0x24
 80020d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0201 	bic.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002102:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002104:	f001 fb16 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8002108:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a81      	ldr	r2, [pc, #516]	@ (8002314 <HAL_I2C_Init+0x274>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d807      	bhi.n	8002124 <HAL_I2C_Init+0x84>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	4a80      	ldr	r2, [pc, #512]	@ (8002318 <HAL_I2C_Init+0x278>)
 8002118:	4293      	cmp	r3, r2
 800211a:	bf94      	ite	ls
 800211c:	2301      	movls	r3, #1
 800211e:	2300      	movhi	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	e006      	b.n	8002132 <HAL_I2C_Init+0x92>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4a7d      	ldr	r2, [pc, #500]	@ (800231c <HAL_I2C_Init+0x27c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	bf94      	ite	ls
 800212c:	2301      	movls	r3, #1
 800212e:	2300      	movhi	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e0e7      	b.n	800230a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a78      	ldr	r2, [pc, #480]	@ (8002320 <HAL_I2C_Init+0x280>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	0c9b      	lsrs	r3, r3, #18
 8002144:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	430a      	orrs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a6a      	ldr	r2, [pc, #424]	@ (8002314 <HAL_I2C_Init+0x274>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d802      	bhi.n	8002174 <HAL_I2C_Init+0xd4>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3301      	adds	r3, #1
 8002172:	e009      	b.n	8002188 <HAL_I2C_Init+0xe8>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800217a:	fb02 f303 	mul.w	r3, r2, r3
 800217e:	4a69      	ldr	r2, [pc, #420]	@ (8002324 <HAL_I2C_Init+0x284>)
 8002180:	fba2 2303 	umull	r2, r3, r2, r3
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	3301      	adds	r3, #1
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	430b      	orrs	r3, r1
 800218e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800219a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	495c      	ldr	r1, [pc, #368]	@ (8002314 <HAL_I2C_Init+0x274>)
 80021a4:	428b      	cmp	r3, r1
 80021a6:	d819      	bhi.n	80021dc <HAL_I2C_Init+0x13c>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1e59      	subs	r1, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b6:	1c59      	adds	r1, r3, #1
 80021b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021bc:	400b      	ands	r3, r1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00a      	beq.n	80021d8 <HAL_I2C_Init+0x138>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	1e59      	subs	r1, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d6:	e051      	b.n	800227c <HAL_I2C_Init+0x1dc>
 80021d8:	2304      	movs	r3, #4
 80021da:	e04f      	b.n	800227c <HAL_I2C_Init+0x1dc>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d111      	bne.n	8002208 <HAL_I2C_Init+0x168>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	440b      	add	r3, r1
 80021f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f6:	3301      	adds	r3, #1
 80021f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	bf0c      	ite	eq
 8002200:	2301      	moveq	r3, #1
 8002202:	2300      	movne	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e012      	b.n	800222e <HAL_I2C_Init+0x18e>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	1e58      	subs	r0, r3, #1
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6859      	ldr	r1, [r3, #4]
 8002210:	460b      	mov	r3, r1
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	0099      	lsls	r1, r3, #2
 8002218:	440b      	add	r3, r1
 800221a:	fbb0 f3f3 	udiv	r3, r0, r3
 800221e:	3301      	adds	r3, #1
 8002220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002224:	2b00      	cmp	r3, #0
 8002226:	bf0c      	ite	eq
 8002228:	2301      	moveq	r3, #1
 800222a:	2300      	movne	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Init+0x196>
 8002232:	2301      	movs	r3, #1
 8002234:	e022      	b.n	800227c <HAL_I2C_Init+0x1dc>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10e      	bne.n	800225c <HAL_I2C_Init+0x1bc>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1e58      	subs	r0, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6859      	ldr	r1, [r3, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	440b      	add	r3, r1
 800224c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800225a:	e00f      	b.n	800227c <HAL_I2C_Init+0x1dc>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1e58      	subs	r0, r3, #1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6859      	ldr	r1, [r3, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	0099      	lsls	r1, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002278:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	6809      	ldr	r1, [r1, #0]
 8002280:	4313      	orrs	r3, r2
 8002282:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69da      	ldr	r2, [r3, #28]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6911      	ldr	r1, [r2, #16]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68d2      	ldr	r2, [r2, #12]
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	430b      	orrs	r3, r1
 80022be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	000186a0 	.word	0x000186a0
 8002318:	001e847f 	.word	0x001e847f
 800231c:	003d08ff 	.word	0x003d08ff
 8002320:	431bde83 	.word	0x431bde83
 8002324:	10624dd3 	.word	0x10624dd3

08002328 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4603      	mov	r3, r0
 8002338:	817b      	strh	r3, [r7, #10]
 800233a:	460b      	mov	r3, r1
 800233c:	813b      	strh	r3, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002342:	f7ff fb4b 	bl	80019dc <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b20      	cmp	r3, #32
 8002352:	f040 80d9 	bne.w	8002508 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2319      	movs	r3, #25
 800235c:	2201      	movs	r2, #1
 800235e:	496d      	ldr	r1, [pc, #436]	@ (8002514 <HAL_I2C_Mem_Write+0x1ec>)
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fdb9 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800236c:	2302      	movs	r3, #2
 800236e:	e0cc      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_I2C_Mem_Write+0x56>
 800237a:	2302      	movs	r3, #2
 800237c:	e0c5      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	2b01      	cmp	r3, #1
 8002392:	d007      	beq.n	80023a4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2221      	movs	r2, #33	@ 0x21
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2240      	movs	r2, #64	@ 0x40
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a3a      	ldr	r2, [r7, #32]
 80023ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80023d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002518 <HAL_I2C_Mem_Write+0x1f0>)
 80023e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023e6:	88f8      	ldrh	r0, [r7, #6]
 80023e8:	893a      	ldrh	r2, [r7, #8]
 80023ea:	8979      	ldrh	r1, [r7, #10]
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	4603      	mov	r3, r0
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 fbf0 	bl	8002bdc <I2C_RequestMemoryWrite>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d052      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e081      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 fe7e 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00d      	beq.n	8002432 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	2b04      	cmp	r3, #4
 800241c:	d107      	bne.n	800242e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800242c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06b      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002436:	781a      	ldrb	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b04      	cmp	r3, #4
 800246e:	d11b      	bne.n	80024a8 <HAL_I2C_Mem_Write+0x180>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002474:	2b00      	cmp	r3, #0
 8002476:	d017      	beq.n	80024a8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1aa      	bne.n	8002406 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fe71 	bl	800319c <I2C_WaitOnBTFFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00d      	beq.n	80024dc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	2b04      	cmp	r3, #4
 80024c6:	d107      	bne.n	80024d8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024d6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e016      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2220      	movs	r2, #32
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	00100002 	.word	0x00100002
 8002518:	ffff0000 	.word	0xffff0000

0800251c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	@ 0x30
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	817b      	strh	r3, [r7, #10]
 800252e:	460b      	mov	r3, r1
 8002530:	813b      	strh	r3, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002536:	f7ff fa51 	bl	80019dc <HAL_GetTick>
 800253a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b20      	cmp	r3, #32
 8002546:	f040 8214 	bne.w	8002972 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2319      	movs	r3, #25
 8002550:	2201      	movs	r2, #1
 8002552:	497b      	ldr	r1, [pc, #492]	@ (8002740 <HAL_I2C_Mem_Read+0x224>)
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fcbf 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002560:	2302      	movs	r3, #2
 8002562:	e207      	b.n	8002974 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Mem_Read+0x56>
 800256e:	2302      	movs	r3, #2
 8002570:	e200      	b.n	8002974 <HAL_I2C_Mem_Read+0x458>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b01      	cmp	r3, #1
 8002586:	d007      	beq.n	8002598 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0201 	orr.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2222      	movs	r2, #34	@ 0x22
 80025ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2240      	movs	r2, #64	@ 0x40
 80025b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2200      	movs	r2, #0
 80025bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80025c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80025c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002744 <HAL_I2C_Mem_Read+0x228>)
 80025d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025da:	88f8      	ldrh	r0, [r7, #6]
 80025dc:	893a      	ldrh	r2, [r7, #8]
 80025de:	8979      	ldrh	r1, [r7, #10]
 80025e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e2:	9301      	str	r3, [sp, #4]
 80025e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	4603      	mov	r3, r0
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fb8c 	bl	8002d08 <I2C_RequestMemoryRead>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1bc      	b.n	8002974 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d113      	bne.n	800262a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	623b      	str	r3, [r7, #32]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	623b      	str	r3, [r7, #32]
 8002616:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e190      	b.n	800294c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262e:	2b01      	cmp	r3, #1
 8002630:	d11b      	bne.n	800266a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002640:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695b      	ldr	r3, [r3, #20]
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	e170      	b.n	800294c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800266e:	2b02      	cmp	r3, #2
 8002670:	d11b      	bne.n	80026aa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002680:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002690:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	e150      	b.n	800294c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80026c0:	e144      	b.n	800294c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	f200 80f1 	bhi.w	80028ae <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d123      	bne.n	800271c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 fda7 	bl	800322c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e145      	b.n	8002974 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691a      	ldr	r2, [r3, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	b2d2      	uxtb	r2, r2
 80026f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800271a:	e117      	b.n	800294c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002720:	2b02      	cmp	r3, #2
 8002722:	d14e      	bne.n	80027c2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272a:	2200      	movs	r2, #0
 800272c:	4906      	ldr	r1, [pc, #24]	@ (8002748 <HAL_I2C_Mem_Read+0x22c>)
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f000 fbd2 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e11a      	b.n	8002974 <HAL_I2C_Mem_Read+0x458>
 800273e:	bf00      	nop
 8002740:	00100002 	.word	0x00100002
 8002744:	ffff0000 	.word	0xffff0000
 8002748:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800275a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691a      	ldr	r2, [r3, #16]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	1c5a      	adds	r2, r3, #1
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002778:	3b01      	subs	r3, #1
 800277a:	b29a      	uxth	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	691a      	ldr	r2, [r3, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027aa:	3b01      	subs	r3, #1
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	3b01      	subs	r3, #1
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027c0:	e0c4      	b.n	800294c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c8:	2200      	movs	r2, #0
 80027ca:	496c      	ldr	r1, [pc, #432]	@ (800297c <HAL_I2C_Mem_Read+0x460>)
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 fb83 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0cb      	b.n	8002974 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691a      	ldr	r2, [r3, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	b2d2      	uxtb	r2, r2
 80027f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002814:	b29b      	uxth	r3, r3
 8002816:	3b01      	subs	r3, #1
 8002818:	b29a      	uxth	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002824:	2200      	movs	r2, #0
 8002826:	4955      	ldr	r1, [pc, #340]	@ (800297c <HAL_I2C_Mem_Read+0x460>)
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 fb55 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e09d      	b.n	8002974 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002846:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691a      	ldr	r2, [r3, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002870:	b29b      	uxth	r3, r3
 8002872:	3b01      	subs	r3, #1
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	b29a      	uxth	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028ac:	e04e      	b.n	800294c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fcba 	bl	800322c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e058      	b.n	8002974 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028de:	3b01      	subs	r3, #1
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	3b01      	subs	r3, #1
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d124      	bne.n	800294c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002906:	2b03      	cmp	r3, #3
 8002908:	d107      	bne.n	800291a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002918:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	f47f aeb6 	bne.w	80026c2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	e000      	b.n	8002974 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
  }
}
 8002974:	4618      	mov	r0, r3
 8002976:	3728      	adds	r7, #40	@ 0x28
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	00010004 	.word	0x00010004

08002980 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	@ 0x28
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	460b      	mov	r3, r1
 800298e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002990:	f7ff f824 	bl	80019dc <HAL_GetTick>
 8002994:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	f040 8111 	bne.w	8002bca <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2319      	movs	r3, #25
 80029ae:	2201      	movs	r2, #1
 80029b0:	4988      	ldr	r1, [pc, #544]	@ (8002bd4 <HAL_I2C_IsDeviceReady+0x254>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fa90 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	e104      	b.n	8002bcc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2C_IsDeviceReady+0x50>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e0fd      	b.n	8002bcc <HAL_I2C_IsDeviceReady+0x24c>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d007      	beq.n	80029f6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a04:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2224      	movs	r2, #36	@ 0x24
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4a70      	ldr	r2, [pc, #448]	@ (8002bd8 <HAL_I2C_IsDeviceReady+0x258>)
 8002a18:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002a28:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 fa4e 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a50:	d103      	bne.n	8002a5a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a58:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0b6      	b.n	8002bcc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a5e:	897b      	ldrh	r3, [r7, #10]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a6c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a6e:	f7fe ffb5 	bl	80019dc <HAL_GetTick>
 8002a72:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	bf0c      	ite	eq
 8002a82:	2301      	moveq	r3, #1
 8002a84:	2300      	movne	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a98:	bf0c      	ite	eq
 8002a9a:	2301      	moveq	r3, #1
 8002a9c:	2300      	movne	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002aa2:	e025      	b.n	8002af0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002aa4:	f7fe ff9a 	bl	80019dc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d302      	bcc.n	8002aba <HAL_I2C_IsDeviceReady+0x13a>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d103      	bne.n	8002ac2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	22a0      	movs	r2, #160	@ 0xa0
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2ba0      	cmp	r3, #160	@ 0xa0
 8002afa:	d005      	beq.n	8002b08 <HAL_I2C_IsDeviceReady+0x188>
 8002afc:	7dfb      	ldrb	r3, [r7, #23]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <HAL_I2C_IsDeviceReady+0x188>
 8002b02:	7dbb      	ldrb	r3, [r7, #22]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0cd      	beq.n	8002aa4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d129      	bne.n	8002b72 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	613b      	str	r3, [r7, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2319      	movs	r3, #25
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4921      	ldr	r1, [pc, #132]	@ (8002bd4 <HAL_I2C_IsDeviceReady+0x254>)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 f9c2 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e036      	b.n	8002bcc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2220      	movs	r2, #32
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	e02c      	b.n	8002bcc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b80:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b8a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	2319      	movs	r3, #25
 8002b92:	2201      	movs	r2, #1
 8002b94:	490f      	ldr	r1, [pc, #60]	@ (8002bd4 <HAL_I2C_IsDeviceReady+0x254>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f99e 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e012      	b.n	8002bcc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	f4ff af32 	bcc.w	8002a1a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
  }
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3720      	adds	r7, #32
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	00100002 	.word	0x00100002
 8002bd8:	ffff0000 	.word	0xffff0000

08002bdc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	461a      	mov	r2, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	817b      	strh	r3, [r7, #10]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	813b      	strh	r3, [r7, #8]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f960 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00d      	beq.n	8002c3a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c2c:	d103      	bne.n	8002c36 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e05f      	b.n	8002cfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c3a:	897b      	ldrh	r3, [r7, #10]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	6a3a      	ldr	r2, [r7, #32]
 8002c4e:	492d      	ldr	r1, [pc, #180]	@ (8002d04 <I2C_RequestMemoryWrite+0x128>)
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f9bb 	bl	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e04c      	b.n	8002cfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c78:	6a39      	ldr	r1, [r7, #32]
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fa46 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00d      	beq.n	8002ca2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d107      	bne.n	8002c9e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e02b      	b.n	8002cfa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ca2:	88fb      	ldrh	r3, [r7, #6]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d105      	bne.n	8002cb4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca8:	893b      	ldrh	r3, [r7, #8]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	611a      	str	r2, [r3, #16]
 8002cb2:	e021      	b.n	8002cf8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb4:	893b      	ldrh	r3, [r7, #8]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc4:	6a39      	ldr	r1, [r7, #32]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 fa20 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00d      	beq.n	8002cee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d107      	bne.n	8002cea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ce8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e005      	b.n	8002cfa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cee:	893b      	ldrh	r3, [r7, #8]
 8002cf0:	b2da      	uxtb	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	00010002 	.word	0x00010002

08002d08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b088      	sub	sp, #32
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	813b      	strh	r3, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f8c2 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d68:	d103      	bne.n	8002d72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e0aa      	b.n	8002ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d76:	897b      	ldrh	r3, [r7, #10]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	6a3a      	ldr	r2, [r7, #32]
 8002d8a:	4952      	ldr	r1, [pc, #328]	@ (8002ed4 <I2C_RequestMemoryRead+0x1cc>)
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f91d 	bl	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e097      	b.n	8002ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	617b      	str	r3, [r7, #20]
 8002db0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db4:	6a39      	ldr	r1, [r7, #32]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f9a8 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d107      	bne.n	8002dda <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e076      	b.n	8002ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d105      	bne.n	8002df0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de4:	893b      	ldrh	r3, [r7, #8]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	611a      	str	r2, [r3, #16]
 8002dee:	e021      	b.n	8002e34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002df0:	893b      	ldrh	r3, [r7, #8]
 8002df2:	0a1b      	lsrs	r3, r3, #8
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e00:	6a39      	ldr	r1, [r7, #32]
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f000 f982 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d107      	bne.n	8002e26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e050      	b.n	8002ecc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2a:	893b      	ldrh	r3, [r7, #8]
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e36:	6a39      	ldr	r1, [r7, #32]
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f967 	bl	800310c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d107      	bne.n	8002e5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e035      	b.n	8002ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	6a3b      	ldr	r3, [r7, #32]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f82b 	bl	8002ed8 <I2C_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e96:	d103      	bne.n	8002ea0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e013      	b.n	8002ecc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ea4:	897b      	ldrh	r3, [r7, #10]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	6a3a      	ldr	r2, [r7, #32]
 8002eb8:	4906      	ldr	r1, [pc, #24]	@ (8002ed4 <I2C_RequestMemoryRead+0x1cc>)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f886 	bl	8002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e000      	b.n	8002ecc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	00010002 	.word	0x00010002

08002ed8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ee8:	e048      	b.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d044      	beq.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7fe fd73 	bl	80019dc <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d139      	bne.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	0c1b      	lsrs	r3, r3, #16
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10d      	bne.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	43da      	mvns	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	bf0c      	ite	eq
 8002f24:	2301      	moveq	r3, #1
 8002f26:	2300      	movne	r3, #0
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	e00c      	b.n	8002f48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf0c      	ite	eq
 8002f40:	2301      	moveq	r3, #1
 8002f42:	2300      	movne	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d116      	bne.n	8002f7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	f043 0220 	orr.w	r2, r3, #32
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e023      	b.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	0c1b      	lsrs	r3, r3, #16
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10d      	bne.n	8002fa2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf0c      	ite	eq
 8002f98:	2301      	moveq	r3, #1
 8002f9a:	2300      	movne	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	e00c      	b.n	8002fbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	43da      	mvns	r2, r3
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d093      	beq.n	8002eea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fda:	e071      	b.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fea:	d123      	bne.n	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003004:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	f043 0204 	orr.w	r2, r3, #4
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e067      	b.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303a:	d041      	beq.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303c:	f7fe fcce 	bl	80019dc <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	429a      	cmp	r2, r3
 800304a:	d302      	bcc.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d136      	bne.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d10c      	bne.n	8003076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	43da      	mvns	r2, r3
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4013      	ands	r3, r2
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	e00b      	b.n	800308e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	43da      	mvns	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	4013      	ands	r3, r2
 8003082:	b29b      	uxth	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d016      	beq.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e021      	b.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	0c1b      	lsrs	r3, r3, #16
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d10c      	bne.n	80030e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	43da      	mvns	r2, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	4013      	ands	r3, r2
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	bf14      	ite	ne
 80030dc:	2301      	movne	r3, #1
 80030de:	2300      	moveq	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e00b      	b.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	43da      	mvns	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	4013      	ands	r3, r2
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f47f af6d 	bne.w	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003118:	e034      	b.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f8e3 	bl	80032e6 <I2C_IsAcknowledgeFailed>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e034      	b.n	8003194 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d028      	beq.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003132:	f7fe fc53 	bl	80019dc <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11d      	bne.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003152:	2b80      	cmp	r3, #128	@ 0x80
 8003154:	d016      	beq.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e007      	b.n	8003194 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318e:	2b80      	cmp	r3, #128	@ 0x80
 8003190:	d1c3      	bne.n	800311a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031a8:	e034      	b.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f89b 	bl	80032e6 <I2C_IsAcknowledgeFailed>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e034      	b.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c0:	d028      	beq.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c2:	f7fe fc0b 	bl	80019dc <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d302      	bcc.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d11d      	bne.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d016      	beq.n	8003214 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e007      	b.n	8003224 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b04      	cmp	r3, #4
 8003220:	d1c3      	bne.n	80031aa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003238:	e049      	b.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b10      	cmp	r3, #16
 8003246:	d119      	bne.n	800327c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0210 	mvn.w	r2, #16
 8003250:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e030      	b.n	80032de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800327c:	f7fe fbae 	bl	80019dc <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	429a      	cmp	r2, r3
 800328a:	d302      	bcc.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d11d      	bne.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329c:	2b40      	cmp	r3, #64	@ 0x40
 800329e:	d016      	beq.n	80032ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e007      	b.n	80032de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d8:	2b40      	cmp	r3, #64	@ 0x40
 80032da:	d1ae      	bne.n	800323a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fc:	d11b      	bne.n	8003336 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003306:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f043 0204 	orr.w	r2, r3, #4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0cc      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003358:	4b68      	ldr	r3, [pc, #416]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d90c      	bls.n	8003380 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003366:	4b65      	ldr	r3, [pc, #404]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b63      	ldr	r3, [pc, #396]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b8      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003398:	4b59      	ldr	r3, [pc, #356]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a58      	ldr	r2, [pc, #352]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b0:	4b53      	ldr	r3, [pc, #332]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a52      	ldr	r2, [pc, #328]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033bc:	4b50      	ldr	r3, [pc, #320]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	494d      	ldr	r1, [pc, #308]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d044      	beq.n	8003464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b47      	ldr	r3, [pc, #284]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d119      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d003      	beq.n	8003402 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d107      	bne.n	8003412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003402:	4b3f      	ldr	r3, [pc, #252]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e06f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003412:	4b3b      	ldr	r3, [pc, #236]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e067      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003422:	4b37      	ldr	r3, [pc, #220]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f023 0203 	bic.w	r2, r3, #3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	4934      	ldr	r1, [pc, #208]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	4313      	orrs	r3, r2
 8003432:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003434:	f7fe fad2 	bl	80019dc <HAL_GetTick>
 8003438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	e00a      	b.n	8003452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800343c:	f7fe face 	bl	80019dc <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344a:	4293      	cmp	r3, r2
 800344c:	d901      	bls.n	8003452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e04f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003452:	4b2b      	ldr	r3, [pc, #172]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 020c 	and.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	429a      	cmp	r2, r3
 8003462:	d1eb      	bne.n	800343c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003464:	4b25      	ldr	r3, [pc, #148]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d20c      	bcs.n	800348c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003472:	4b22      	ldr	r3, [pc, #136]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	b2d2      	uxtb	r2, r2
 8003478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e032      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003498:	4b19      	ldr	r3, [pc, #100]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4916      	ldr	r1, [pc, #88]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034b6:	4b12      	ldr	r3, [pc, #72]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	490e      	ldr	r1, [pc, #56]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034ca:	f000 f821 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	490a      	ldr	r1, [pc, #40]	@ (8003504 <HAL_RCC_ClockConfig+0x1c0>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a09      	ldr	r2, [pc, #36]	@ (8003508 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034e6:	4b09      	ldr	r3, [pc, #36]	@ (800350c <HAL_RCC_ClockConfig+0x1c8>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fa32 	bl	8001954 <HAL_InitTick>

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00
 8003500:	40023800 	.word	0x40023800
 8003504:	0800b718 	.word	0x0800b718
 8003508:	200002b0 	.word	0x200002b0
 800350c:	200002b4 	.word	0x200002b4

08003510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003514:	b094      	sub	sp, #80	@ 0x50
 8003516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	647b      	str	r3, [r7, #68]	@ 0x44
 800351c:	2300      	movs	r3, #0
 800351e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003520:	2300      	movs	r3, #0
 8003522:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003528:	4b79      	ldr	r3, [pc, #484]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b08      	cmp	r3, #8
 8003532:	d00d      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x40>
 8003534:	2b08      	cmp	r3, #8
 8003536:	f200 80e1 	bhi.w	80036fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x34>
 800353e:	2b04      	cmp	r3, #4
 8003540:	d003      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x3a>
 8003542:	e0db      	b.n	80036fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b73      	ldr	r3, [pc, #460]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x204>)
 8003546:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003548:	e0db      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354a:	4b73      	ldr	r3, [pc, #460]	@ (8003718 <HAL_RCC_GetSysClockFreq+0x208>)
 800354c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800354e:	e0d8      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003550:	4b6f      	ldr	r3, [pc, #444]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003558:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800355a:	4b6d      	ldr	r3, [pc, #436]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d063      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003566:	4b6a      	ldr	r3, [pc, #424]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	2200      	movs	r2, #0
 800356e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003570:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003578:	633b      	str	r3, [r7, #48]	@ 0x30
 800357a:	2300      	movs	r3, #0
 800357c:	637b      	str	r3, [r7, #52]	@ 0x34
 800357e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003582:	4622      	mov	r2, r4
 8003584:	462b      	mov	r3, r5
 8003586:	f04f 0000 	mov.w	r0, #0
 800358a:	f04f 0100 	mov.w	r1, #0
 800358e:	0159      	lsls	r1, r3, #5
 8003590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003594:	0150      	lsls	r0, r2, #5
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4621      	mov	r1, r4
 800359c:	1a51      	subs	r1, r2, r1
 800359e:	6139      	str	r1, [r7, #16]
 80035a0:	4629      	mov	r1, r5
 80035a2:	eb63 0301 	sbc.w	r3, r3, r1
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035b4:	4659      	mov	r1, fp
 80035b6:	018b      	lsls	r3, r1, #6
 80035b8:	4651      	mov	r1, sl
 80035ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035be:	4651      	mov	r1, sl
 80035c0:	018a      	lsls	r2, r1, #6
 80035c2:	4651      	mov	r1, sl
 80035c4:	ebb2 0801 	subs.w	r8, r2, r1
 80035c8:	4659      	mov	r1, fp
 80035ca:	eb63 0901 	sbc.w	r9, r3, r1
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035e2:	4690      	mov	r8, r2
 80035e4:	4699      	mov	r9, r3
 80035e6:	4623      	mov	r3, r4
 80035e8:	eb18 0303 	adds.w	r3, r8, r3
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	462b      	mov	r3, r5
 80035f0:	eb49 0303 	adc.w	r3, r9, r3
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003602:	4629      	mov	r1, r5
 8003604:	024b      	lsls	r3, r1, #9
 8003606:	4621      	mov	r1, r4
 8003608:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800360c:	4621      	mov	r1, r4
 800360e:	024a      	lsls	r2, r1, #9
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003616:	2200      	movs	r2, #0
 8003618:	62bb      	str	r3, [r7, #40]	@ 0x28
 800361a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800361c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003620:	f7fd faf2 	bl	8000c08 <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800362c:	e058      	b.n	80036e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362e:	4b38      	ldr	r3, [pc, #224]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	099b      	lsrs	r3, r3, #6
 8003634:	2200      	movs	r2, #0
 8003636:	4618      	mov	r0, r3
 8003638:	4611      	mov	r1, r2
 800363a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	2300      	movs	r3, #0
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
 8003644:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003648:	4642      	mov	r2, r8
 800364a:	464b      	mov	r3, r9
 800364c:	f04f 0000 	mov.w	r0, #0
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	0159      	lsls	r1, r3, #5
 8003656:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800365a:	0150      	lsls	r0, r2, #5
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4641      	mov	r1, r8
 8003662:	ebb2 0a01 	subs.w	sl, r2, r1
 8003666:	4649      	mov	r1, r9
 8003668:	eb63 0b01 	sbc.w	fp, r3, r1
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003678:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800367c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003680:	ebb2 040a 	subs.w	r4, r2, sl
 8003684:	eb63 050b 	sbc.w	r5, r3, fp
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	00eb      	lsls	r3, r5, #3
 8003692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003696:	00e2      	lsls	r2, r4, #3
 8003698:	4614      	mov	r4, r2
 800369a:	461d      	mov	r5, r3
 800369c:	4643      	mov	r3, r8
 800369e:	18e3      	adds	r3, r4, r3
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	464b      	mov	r3, r9
 80036a4:	eb45 0303 	adc.w	r3, r5, r3
 80036a8:	607b      	str	r3, [r7, #4]
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036b6:	4629      	mov	r1, r5
 80036b8:	028b      	lsls	r3, r1, #10
 80036ba:	4621      	mov	r1, r4
 80036bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036c0:	4621      	mov	r1, r4
 80036c2:	028a      	lsls	r2, r1, #10
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036ca:	2200      	movs	r2, #0
 80036cc:	61bb      	str	r3, [r7, #24]
 80036ce:	61fa      	str	r2, [r7, #28]
 80036d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d4:	f7fd fa98 	bl	8000c08 <__aeabi_uldivmod>
 80036d8:	4602      	mov	r2, r0
 80036da:	460b      	mov	r3, r1
 80036dc:	4613      	mov	r3, r2
 80036de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	3301      	adds	r3, #1
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80036f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036fa:	e002      	b.n	8003702 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <HAL_RCC_GetSysClockFreq+0x204>)
 80036fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003704:	4618      	mov	r0, r3
 8003706:	3750      	adds	r7, #80	@ 0x50
 8003708:	46bd      	mov	sp, r7
 800370a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800
 8003714:	00f42400 	.word	0x00f42400
 8003718:	007a1200 	.word	0x007a1200

0800371c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003720:	4b03      	ldr	r3, [pc, #12]	@ (8003730 <HAL_RCC_GetHCLKFreq+0x14>)
 8003722:	681b      	ldr	r3, [r3, #0]
}
 8003724:	4618      	mov	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	200002b0 	.word	0x200002b0

08003734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003738:	f7ff fff0 	bl	800371c <HAL_RCC_GetHCLKFreq>
 800373c:	4602      	mov	r2, r0
 800373e:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	0a9b      	lsrs	r3, r3, #10
 8003744:	f003 0307 	and.w	r3, r3, #7
 8003748:	4903      	ldr	r1, [pc, #12]	@ (8003758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800374a:	5ccb      	ldrb	r3, [r1, r3]
 800374c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003750:	4618      	mov	r0, r3
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40023800 	.word	0x40023800
 8003758:	0800b728 	.word	0x0800b728

0800375c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003760:	f7ff ffdc 	bl	800371c <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0b5b      	lsrs	r3, r3, #13
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4903      	ldr	r1, [pc, #12]	@ (8003780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	0800b728 	.word	0x0800b728

08003784 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e273      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d075      	beq.n	800388e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037a2:	4b88      	ldr	r3, [pc, #544]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b04      	cmp	r3, #4
 80037ac:	d00c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ae:	4b85      	ldr	r3, [pc, #532]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d112      	bne.n	80037e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ba:	4b82      	ldr	r3, [pc, #520]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037c6:	d10b      	bne.n	80037e0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	4b7e      	ldr	r3, [pc, #504]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d05b      	beq.n	800388c <HAL_RCC_OscConfig+0x108>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d157      	bne.n	800388c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e24e      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037e8:	d106      	bne.n	80037f8 <HAL_RCC_OscConfig+0x74>
 80037ea:	4b76      	ldr	r3, [pc, #472]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a75      	ldr	r2, [pc, #468]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80037f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	e01d      	b.n	8003834 <HAL_RCC_OscConfig+0xb0>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x98>
 8003802:	4b70      	ldr	r3, [pc, #448]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a6f      	ldr	r2, [pc, #444]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	4b6d      	ldr	r3, [pc, #436]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a6c      	ldr	r2, [pc, #432]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e00b      	b.n	8003834 <HAL_RCC_OscConfig+0xb0>
 800381c:	4b69      	ldr	r3, [pc, #420]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a68      	ldr	r2, [pc, #416]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	4b66      	ldr	r3, [pc, #408]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a65      	ldr	r2, [pc, #404]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 800382e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d013      	beq.n	8003864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe f8ce 	bl	80019dc <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003844:	f7fe f8ca 	bl	80019dc <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b64      	cmp	r3, #100	@ 0x64
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e213      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003856:	4b5b      	ldr	r3, [pc, #364]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0xc0>
 8003862:	e014      	b.n	800388e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe f8ba 	bl	80019dc <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800386c:	f7fe f8b6 	bl	80019dc <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	@ 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e1ff      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387e:	4b51      	ldr	r3, [pc, #324]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0xe8>
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800388c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d063      	beq.n	8003962 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800389a:	4b4a      	ldr	r3, [pc, #296]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00b      	beq.n	80038be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038a6:	4b47      	ldr	r3, [pc, #284]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d11c      	bne.n	80038ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b2:	4b44      	ldr	r3, [pc, #272]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d116      	bne.n	80038ec <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038be:	4b41      	ldr	r3, [pc, #260]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d005      	beq.n	80038d6 <HAL_RCC_OscConfig+0x152>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d001      	beq.n	80038d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e1d3      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d6:	4b3b      	ldr	r3, [pc, #236]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	4937      	ldr	r1, [pc, #220]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ea:	e03a      	b.n	8003962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d020      	beq.n	8003936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f4:	4b34      	ldr	r3, [pc, #208]	@ (80039c8 <HAL_RCC_OscConfig+0x244>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fa:	f7fe f86f 	bl	80019dc <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003902:	f7fe f86b 	bl	80019dc <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e1b4      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003914:	4b2b      	ldr	r3, [pc, #172]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003920:	4b28      	ldr	r3, [pc, #160]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4925      	ldr	r1, [pc, #148]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003930:	4313      	orrs	r3, r2
 8003932:	600b      	str	r3, [r1, #0]
 8003934:	e015      	b.n	8003962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003936:	4b24      	ldr	r3, [pc, #144]	@ (80039c8 <HAL_RCC_OscConfig+0x244>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fe f84e 	bl	80019dc <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003944:	f7fe f84a 	bl	80019dc <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e193      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003956:	4b1b      	ldr	r3, [pc, #108]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d036      	beq.n	80039dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003976:	4b15      	ldr	r3, [pc, #84]	@ (80039cc <HAL_RCC_OscConfig+0x248>)
 8003978:	2201      	movs	r2, #1
 800397a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fe f82e 	bl	80019dc <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003984:	f7fe f82a 	bl	80019dc <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e173      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003996:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <HAL_RCC_OscConfig+0x240>)
 8003998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x200>
 80039a2:	e01b      	b.n	80039dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a4:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <HAL_RCC_OscConfig+0x248>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039aa:	f7fe f817 	bl	80019dc <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b0:	e00e      	b.n	80039d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b2:	f7fe f813 	bl	80019dc <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d907      	bls.n	80039d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e15c      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
 80039c4:	40023800 	.word	0x40023800
 80039c8:	42470000 	.word	0x42470000
 80039cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d0:	4b8a      	ldr	r3, [pc, #552]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 80039d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ea      	bne.n	80039b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8097 	beq.w	8003b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ea:	2300      	movs	r3, #0
 80039ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ee:	4b83      	ldr	r3, [pc, #524]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10f      	bne.n	8003a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	4b7f      	ldr	r3, [pc, #508]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	4a7e      	ldr	r2, [pc, #504]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a0a:	4b7c      	ldr	r3, [pc, #496]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a16:	2301      	movs	r3, #1
 8003a18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1a:	4b79      	ldr	r3, [pc, #484]	@ (8003c00 <HAL_RCC_OscConfig+0x47c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d118      	bne.n	8003a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a26:	4b76      	ldr	r3, [pc, #472]	@ (8003c00 <HAL_RCC_OscConfig+0x47c>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a75      	ldr	r2, [pc, #468]	@ (8003c00 <HAL_RCC_OscConfig+0x47c>)
 8003a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a32:	f7fd ffd3 	bl	80019dc <HAL_GetTick>
 8003a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3a:	f7fd ffcf 	bl	80019dc <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e118      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c00 <HAL_RCC_OscConfig+0x47c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_OscConfig+0x2ea>
 8003a60:	4b66      	ldr	r3, [pc, #408]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a64:	4a65      	ldr	r2, [pc, #404]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a66:	f043 0301 	orr.w	r3, r3, #1
 8003a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6c:	e01c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x324>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b05      	cmp	r3, #5
 8003a74:	d10c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x30c>
 8003a76:	4b61      	ldr	r3, [pc, #388]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7a:	4a60      	ldr	r2, [pc, #384]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a7c:	f043 0304 	orr.w	r3, r3, #4
 8003a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a82:	4b5e      	ldr	r3, [pc, #376]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a86:	4a5d      	ldr	r2, [pc, #372]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a88:	f043 0301 	orr.w	r3, r3, #1
 8003a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a8e:	e00b      	b.n	8003aa8 <HAL_RCC_OscConfig+0x324>
 8003a90:	4b5a      	ldr	r3, [pc, #360]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	4a59      	ldr	r2, [pc, #356]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a9c:	4b57      	ldr	r3, [pc, #348]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa0:	4a56      	ldr	r2, [pc, #344]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003aa2:	f023 0304 	bic.w	r3, r3, #4
 8003aa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d015      	beq.n	8003adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab0:	f7fd ff94 	bl	80019dc <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fd ff90 	bl	80019dc <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e0d7      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ace:	4b4b      	ldr	r3, [pc, #300]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0ee      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x334>
 8003ada:	e014      	b.n	8003b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fd ff7e 	bl	80019dc <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fd ff7a 	bl	80019dc <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0c1      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afa:	4b40      	ldr	r3, [pc, #256]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1ee      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d105      	bne.n	8003b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b10:	4a3a      	ldr	r2, [pc, #232]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 80ad 	beq.w	8003c7c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b22:	4b36      	ldr	r3, [pc, #216]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 030c 	and.w	r3, r3, #12
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d060      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d145      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b36:	4b33      	ldr	r3, [pc, #204]	@ (8003c04 <HAL_RCC_OscConfig+0x480>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd ff4e 	bl	80019dc <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd ff4a 	bl	80019dc <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e093      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b56:	4b29      	ldr	r3, [pc, #164]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69da      	ldr	r2, [r3, #28]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b70:	019b      	lsls	r3, r3, #6
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	041b      	lsls	r3, r3, #16
 8003b7e:	431a      	orrs	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	061b      	lsls	r3, r3, #24
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8c:	071b      	lsls	r3, r3, #28
 8003b8e:	491b      	ldr	r1, [pc, #108]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b94:	4b1b      	ldr	r3, [pc, #108]	@ (8003c04 <HAL_RCC_OscConfig+0x480>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9a:	f7fd ff1f 	bl	80019dc <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba2:	f7fd ff1b 	bl	80019dc <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e064      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb4:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x41e>
 8003bc0:	e05c      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b10      	ldr	r3, [pc, #64]	@ (8003c04 <HAL_RCC_OscConfig+0x480>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd ff08 	bl	80019dc <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fd ff04 	bl	80019dc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e04d      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <HAL_RCC_OscConfig+0x478>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x44c>
 8003bee:	e045      	b.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d107      	bne.n	8003c08 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e040      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000
 8003c04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c08:	4b1f      	ldr	r3, [pc, #124]	@ (8003c88 <HAL_RCC_OscConfig+0x504>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d030      	beq.n	8003c78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d129      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d122      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c38:	4013      	ands	r3, r2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d119      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4e:	085b      	lsrs	r3, r3, #1
 8003c50:	3b01      	subs	r3, #1
 8003c52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d10f      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d107      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800

08003c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e07b      	b.n	8003d96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d108      	bne.n	8003cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cae:	d009      	beq.n	8003cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	61da      	str	r2, [r3, #28]
 8003cb6:	e005      	b.n	8003cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fd fc24 	bl	800152c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d48:	ea42 0103 	orr.w	r1, r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0104 	and.w	r1, r3, #4
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	f003 0210 	and.w	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b088      	sub	sp, #32
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	60f8      	str	r0, [r7, #12]
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	603b      	str	r3, [r7, #0]
 8003daa:	4613      	mov	r3, r2
 8003dac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dae:	2300      	movs	r3, #0
 8003db0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d101      	bne.n	8003dc0 <HAL_SPI_Transmit+0x22>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	e12d      	b.n	800401c <HAL_SPI_Transmit+0x27e>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003dc8:	f7fd fe08 	bl	80019dc <HAL_GetTick>
 8003dcc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dce:	88fb      	ldrh	r3, [r7, #6]
 8003dd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d002      	beq.n	8003de4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
 8003de0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003de2:	e116      	b.n	8004012 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_SPI_Transmit+0x52>
 8003dea:	88fb      	ldrh	r3, [r7, #6]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003df4:	e10d      	b.n	8004012 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2203      	movs	r2, #3
 8003dfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e3c:	d10f      	bne.n	8003e5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e68:	2b40      	cmp	r3, #64	@ 0x40
 8003e6a:	d007      	beq.n	8003e7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e84:	d14f      	bne.n	8003f26 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <HAL_SPI_Transmit+0xf6>
 8003e8e:	8afb      	ldrh	r3, [r7, #22]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d142      	bne.n	8003f1a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e98:	881a      	ldrh	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea4:	1c9a      	adds	r2, r3, #2
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003eb8:	e02f      	b.n	8003f1a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d112      	bne.n	8003eee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	881a      	ldrh	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	1c9a      	adds	r2, r3, #2
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003eec:	e015      	b.n	8003f1a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eee:	f7fd fd75 	bl	80019dc <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d803      	bhi.n	8003f06 <HAL_SPI_Transmit+0x168>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d102      	bne.n	8003f0c <HAL_SPI_Transmit+0x16e>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003f18:	e07b      	b.n	8004012 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1ca      	bne.n	8003eba <HAL_SPI_Transmit+0x11c>
 8003f24:	e050      	b.n	8003fc8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_Transmit+0x196>
 8003f2e:	8afb      	ldrh	r3, [r7, #22]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d144      	bne.n	8003fbe <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	7812      	ldrb	r2, [r2, #0]
 8003f40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f5a:	e030      	b.n	8003fbe <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d113      	bne.n	8003f92 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	7812      	ldrb	r2, [r2, #0]
 8003f76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f90:	e015      	b.n	8003fbe <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f92:	f7fd fd23 	bl	80019dc <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d803      	bhi.n	8003faa <HAL_SPI_Transmit+0x20c>
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa8:	d102      	bne.n	8003fb0 <HAL_SPI_Transmit+0x212>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003fbc:	e029      	b.n	8004012 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1c9      	bne.n	8003f5c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	6839      	ldr	r1, [r7, #0]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f8b1 	bl	8004134 <SPI_EndRxTxTransaction>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10a      	bne.n	8003ffc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e003      	b.n	8004012 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800401a:	7ffb      	ldrb	r3, [r7, #31]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3720      	adds	r7, #32
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004034:	f7fd fcd2 	bl	80019dc <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	4413      	add	r3, r2
 8004042:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004044:	f7fd fcca 	bl	80019dc <HAL_GetTick>
 8004048:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800404a:	4b39      	ldr	r3, [pc, #228]	@ (8004130 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	015b      	lsls	r3, r3, #5
 8004050:	0d1b      	lsrs	r3, r3, #20
 8004052:	69fa      	ldr	r2, [r7, #28]
 8004054:	fb02 f303 	mul.w	r3, r2, r3
 8004058:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800405a:	e054      	b.n	8004106 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004062:	d050      	beq.n	8004106 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004064:	f7fd fcba 	bl	80019dc <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	429a      	cmp	r2, r3
 8004072:	d902      	bls.n	800407a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d13d      	bne.n	80040f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004088:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004092:	d111      	bne.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800409c:	d004      	beq.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040a6:	d107      	bne.n	80040b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c0:	d10f      	bne.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e017      	b.n	8004126 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3b01      	subs	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	689a      	ldr	r2, [r3, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	429a      	cmp	r2, r3
 8004114:	bf0c      	ite	eq
 8004116:	2301      	moveq	r3, #1
 8004118:	2300      	movne	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	429a      	cmp	r2, r3
 8004122:	d19b      	bne.n	800405c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	200002b0 	.word	0x200002b0

08004134 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2201      	movs	r2, #1
 8004148:	2102      	movs	r1, #2
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff ff6a 	bl	8004024 <SPI_WaitFlagStateUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415a:	f043 0220 	orr.w	r2, r3, #32
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e032      	b.n	80041cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004166:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <SPI_EndRxTxTransaction+0xa0>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a1b      	ldr	r2, [pc, #108]	@ (80041d8 <SPI_EndRxTxTransaction+0xa4>)
 800416c:	fba2 2303 	umull	r2, r3, r2, r3
 8004170:	0d5b      	lsrs	r3, r3, #21
 8004172:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004184:	d112      	bne.n	80041ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2200      	movs	r2, #0
 800418e:	2180      	movs	r1, #128	@ 0x80
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff ff47 	bl	8004024 <SPI_WaitFlagStateUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d016      	beq.n	80041ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a0:	f043 0220 	orr.w	r2, r3, #32
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e00f      	b.n	80041cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041c2:	2b80      	cmp	r3, #128	@ 0x80
 80041c4:	d0f2      	beq.n	80041ac <SPI_EndRxTxTransaction+0x78>
 80041c6:	e000      	b.n	80041ca <SPI_EndRxTxTransaction+0x96>
        break;
 80041c8:	bf00      	nop
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	200002b0 	.word	0x200002b0
 80041d8:	165e9f81 	.word	0x165e9f81

080041dc <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e04a      	b.n	8004284 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd fa02 	bl	800160c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	@ 0x24
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68da      	ldr	r2, [r3, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800421e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 fc8d 	bl	8004b40 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004234:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004244:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695a      	ldr	r2, [r3, #20]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0208 	orr.w	r2, r2, #8
 8004254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2220      	movs	r2, #32
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b0ba      	sub	sp, #232	@ 0xe8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10f      	bne.n	80042f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_UART_IRQHandler+0x66>
 80042de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fb69 	bl	80049c2 <UART_Receive_IT>
      return;
 80042f0:	e25b      	b.n	80047aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	f000 80de 	beq.w	80044b8 <HAL_UART_IRQHandler+0x22c>
 80042fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800430c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80d1 	beq.w	80044b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <HAL_UART_IRQHandler+0xae>
 8004322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004332:	f043 0201 	orr.w	r2, r3, #1
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800433a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00b      	beq.n	800435e <HAL_UART_IRQHandler+0xd2>
 8004346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d005      	beq.n	800435e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f043 0202 	orr.w	r2, r3, #2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_UART_IRQHandler+0xf6>
 800436a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437a:	f043 0204 	orr.w	r2, r3, #4
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	2b00      	cmp	r3, #0
 800438c:	d011      	beq.n	80043b2 <HAL_UART_IRQHandler+0x126>
 800438e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800439a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043aa:	f043 0208 	orr.w	r2, r3, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 81f2 	beq.w	80047a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d008      	beq.n	80043da <HAL_UART_IRQHandler+0x14e>
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 faf4 	bl	80049c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e4:	2b40      	cmp	r3, #64	@ 0x40
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d103      	bne.n	8004406 <HAL_UART_IRQHandler+0x17a>
 80043fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004402:	2b00      	cmp	r3, #0
 8004404:	d04f      	beq.n	80044a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f9fc 	bl	8004804 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004416:	2b40      	cmp	r3, #64	@ 0x40
 8004418:	d141      	bne.n	800449e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3314      	adds	r3, #20
 8004442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004446:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800444a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800445e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1d9      	bne.n	800441a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446a:	2b00      	cmp	r3, #0
 800446c:	d013      	beq.n	8004496 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004472:	4a7e      	ldr	r2, [pc, #504]	@ (800466c <HAL_UART_IRQHandler+0x3e0>)
 8004474:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd fc5f 	bl	8001d3e <HAL_DMA_Abort_IT>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004490:	4610      	mov	r0, r2
 8004492:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004494:	e00e      	b.n	80044b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f99e 	bl	80047d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800449c:	e00a      	b.n	80044b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f99a 	bl	80047d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a4:	e006      	b.n	80044b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f996 	bl	80047d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80044b2:	e175      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	bf00      	nop
    return;
 80044b6:	e173      	b.n	80047a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044bc:	2b01      	cmp	r3, #1
 80044be:	f040 814f 	bne.w	8004760 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8148 	beq.w	8004760 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d4:	f003 0310 	and.w	r3, r3, #16
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8141 	beq.w	8004760 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60bb      	str	r3, [r7, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	60bb      	str	r3, [r7, #8]
 80044f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fe:	2b40      	cmp	r3, #64	@ 0x40
 8004500:	f040 80b6 	bne.w	8004670 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004510:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 8145 	beq.w	80047a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800451e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004522:	429a      	cmp	r2, r3
 8004524:	f080 813e 	bcs.w	80047a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800452e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800453a:	f000 8088 	beq.w	800464e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004548:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004554:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800455c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	330c      	adds	r3, #12
 8004566:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800456a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800456e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004576:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004582:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1d9      	bne.n	800453e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3314      	adds	r3, #20
 8004590:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800459a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800459c:	f023 0301 	bic.w	r3, r3, #1
 80045a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3314      	adds	r3, #20
 80045aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e1      	bne.n	800458a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3314      	adds	r3, #20
 80045cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045f2:	e841 2300 	strex	r3, r2, [r1]
 80045f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1e3      	bne.n	80045c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800461c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800461e:	f023 0310 	bic.w	r3, r3, #16
 8004622:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004630:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004632:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004636:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800463e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e3      	bne.n	800460c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004648:	4618      	mov	r0, r3
 800464a:	f7fd fb08 	bl	8001c5e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2202      	movs	r2, #2
 8004652:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800465c:	b29b      	uxth	r3, r3
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	b29b      	uxth	r3, r3
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f8c1 	bl	80047ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800466a:	e09b      	b.n	80047a4 <HAL_UART_IRQHandler+0x518>
 800466c:	080048cb 	.word	0x080048cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004678:	b29b      	uxth	r3, r3
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 808e 	beq.w	80047a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800468c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8089 	beq.w	80047a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	330c      	adds	r3, #12
 80046b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80046bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e3      	bne.n	8004696 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3314      	adds	r3, #20
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	623b      	str	r3, [r7, #32]
   return(result);
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	3314      	adds	r3, #20
 80046ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80046f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e3      	bne.n	80046ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2220      	movs	r2, #32
 800470a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	e853 3f00 	ldrex	r3, [r3]
 8004722:	60fb      	str	r3, [r7, #12]
   return(result);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0310 	bic.w	r3, r3, #16
 800472a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004738:	61fa      	str	r2, [r7, #28]
 800473a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473c:	69b9      	ldr	r1, [r7, #24]
 800473e:	69fa      	ldr	r2, [r7, #28]
 8004740:	e841 2300 	strex	r3, r2, [r1]
 8004744:	617b      	str	r3, [r7, #20]
   return(result);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1e3      	bne.n	8004714 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004752:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f847 	bl	80047ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800475e:	e023      	b.n	80047a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <HAL_UART_IRQHandler+0x4f4>
 800476c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f8ba 	bl	80048f2 <UART_Transmit_IT>
    return;
 800477e:	e014      	b.n	80047aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00e      	beq.n	80047aa <HAL_UART_IRQHandler+0x51e>
 800478c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f8fa 	bl	8004992 <UART_EndTransmit_IT>
    return;
 800479e:	e004      	b.n	80047aa <HAL_UART_IRQHandler+0x51e>
    return;
 80047a0:	bf00      	nop
 80047a2:	e002      	b.n	80047aa <HAL_UART_IRQHandler+0x51e>
      return;
 80047a4:	bf00      	nop
 80047a6:	e000      	b.n	80047aa <HAL_UART_IRQHandler+0x51e>
      return;
 80047a8:	bf00      	nop
  }
}
 80047aa:	37e8      	adds	r7, #232	@ 0xe8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b095      	sub	sp, #84	@ 0x54
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800481c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	330c      	adds	r3, #12
 800482a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800482c:	643a      	str	r2, [r7, #64]	@ 0x40
 800482e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004832:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800483a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e5      	bne.n	800480c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3314      	adds	r3, #20
 8004846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3314      	adds	r3, #20
 800485e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004860:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004862:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800486e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004878:	2b01      	cmp	r3, #1
 800487a:	d119      	bne.n	80048b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	e853 3f00 	ldrex	r3, [r3]
 800488a:	60bb      	str	r3, [r7, #8]
   return(result);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f023 0310 	bic.w	r3, r3, #16
 8004892:	647b      	str	r3, [r7, #68]	@ 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	330c      	adds	r3, #12
 800489a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800489c:	61ba      	str	r2, [r7, #24]
 800489e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	6979      	ldr	r1, [r7, #20]
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	e841 2300 	strex	r3, r2, [r1]
 80048a8:	613b      	str	r3, [r7, #16]
   return(result);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1e5      	bne.n	800487c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048be:	bf00      	nop
 80048c0:	3754      	adds	r7, #84	@ 0x54
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b084      	sub	sp, #16
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f7ff ff77 	bl	80047d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b085      	sub	sp, #20
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b21      	cmp	r3, #33	@ 0x21
 8004904:	d13e      	bne.n	8004984 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800490e:	d114      	bne.n	800493a <UART_Transmit_IT+0x48>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d110      	bne.n	800493a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	461a      	mov	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800492c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	1c9a      	adds	r2, r3, #2
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	621a      	str	r2, [r3, #32]
 8004938:	e008      	b.n	800494c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	1c59      	adds	r1, r3, #1
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	6211      	str	r1, [r2, #32]
 8004944:	781a      	ldrb	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29b      	uxth	r3, r3
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	4619      	mov	r1, r3
 800495a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10f      	bne.n	8004980 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68da      	ldr	r2, [r3, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800496e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800497e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004980:	2300      	movs	r3, #0
 8004982:	e000      	b.n	8004986 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004984:	2302      	movs	r3, #2
  }
}
 8004986:	4618      	mov	r0, r3
 8004988:	3714      	adds	r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68da      	ldr	r2, [r3, #12]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2220      	movs	r2, #32
 80049ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fefc 	bl	80047b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b08c      	sub	sp, #48	@ 0x30
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b22      	cmp	r3, #34	@ 0x22
 80049d4:	f040 80ae 	bne.w	8004b34 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e0:	d117      	bne.n	8004a12 <UART_Receive_IT+0x50>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d113      	bne.n	8004a12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0a:	1c9a      	adds	r2, r3, #2
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a10:	e026      	b.n	8004a60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a24:	d007      	beq.n	8004a36 <UART_Receive_IT+0x74>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <UART_Receive_IT+0x82>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	b2da      	uxtb	r2, r3
 8004a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a40:	701a      	strb	r2, [r3, #0]
 8004a42:	e008      	b.n	8004a56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a50:	b2da      	uxtb	r2, r3
 8004a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d15d      	bne.n	8004b30 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0220 	bic.w	r2, r2, #32
 8004a82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0201 	bic.w	r2, r2, #1
 8004aa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d135      	bne.n	8004b26 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	e853 3f00 	ldrex	r3, [r3]
 8004ace:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f023 0310 	bic.w	r3, r3, #16
 8004ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae0:	623a      	str	r2, [r7, #32]
 8004ae2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	69f9      	ldr	r1, [r7, #28]
 8004ae6:	6a3a      	ldr	r2, [r7, #32]
 8004ae8:	e841 2300 	strex	r3, r2, [r1]
 8004aec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d1e5      	bne.n	8004ac0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b10      	cmp	r3, #16
 8004b00:	d10a      	bne.n	8004b18 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b02:	2300      	movs	r3, #0
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fe64 	bl	80047ec <HAL_UARTEx_RxEventCallback>
 8004b24:	e002      	b.n	8004b2c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fe4c 	bl	80047c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e002      	b.n	8004b36 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3730      	adds	r7, #48	@ 0x30
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b44:	b0c0      	sub	sp, #256	@ 0x100
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b5c:	68d9      	ldr	r1, [r3, #12]
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	ea40 0301 	orr.w	r3, r0, r1
 8004b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b98:	f021 010c 	bic.w	r1, r1, #12
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	695b      	ldr	r3, [r3, #20]
 8004bb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bba:	6999      	ldr	r1, [r3, #24]
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	ea40 0301 	orr.w	r3, r0, r1
 8004bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4b8f      	ldr	r3, [pc, #572]	@ (8004e0c <UART_SetConfig+0x2cc>)
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d005      	beq.n	8004be0 <UART_SetConfig+0xa0>
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4b8d      	ldr	r3, [pc, #564]	@ (8004e10 <UART_SetConfig+0x2d0>)
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d104      	bne.n	8004bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fe fdbc 	bl	800375c <HAL_RCC_GetPCLK2Freq>
 8004be4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004be8:	e003      	b.n	8004bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bea:	f7fe fda3 	bl	8003734 <HAL_RCC_GetPCLK1Freq>
 8004bee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bfc:	f040 810c 	bne.w	8004e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c12:	4622      	mov	r2, r4
 8004c14:	462b      	mov	r3, r5
 8004c16:	1891      	adds	r1, r2, r2
 8004c18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c1a:	415b      	adcs	r3, r3
 8004c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c22:	4621      	mov	r1, r4
 8004c24:	eb12 0801 	adds.w	r8, r2, r1
 8004c28:	4629      	mov	r1, r5
 8004c2a:	eb43 0901 	adc.w	r9, r3, r1
 8004c2e:	f04f 0200 	mov.w	r2, #0
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c42:	4690      	mov	r8, r2
 8004c44:	4699      	mov	r9, r3
 8004c46:	4623      	mov	r3, r4
 8004c48:	eb18 0303 	adds.w	r3, r8, r3
 8004c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c50:	462b      	mov	r3, r5
 8004c52:	eb49 0303 	adc.w	r3, r9, r3
 8004c56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c6e:	460b      	mov	r3, r1
 8004c70:	18db      	adds	r3, r3, r3
 8004c72:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c74:	4613      	mov	r3, r2
 8004c76:	eb42 0303 	adc.w	r3, r2, r3
 8004c7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c84:	f7fb ffc0 	bl	8000c08 <__aeabi_uldivmod>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	4b61      	ldr	r3, [pc, #388]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c92:	095b      	lsrs	r3, r3, #5
 8004c94:	011c      	lsls	r4, r3, #4
 8004c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ca8:	4642      	mov	r2, r8
 8004caa:	464b      	mov	r3, r9
 8004cac:	1891      	adds	r1, r2, r2
 8004cae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cb0:	415b      	adcs	r3, r3
 8004cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cb8:	4641      	mov	r1, r8
 8004cba:	eb12 0a01 	adds.w	sl, r2, r1
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cd8:	4692      	mov	sl, r2
 8004cda:	469b      	mov	fp, r3
 8004cdc:	4643      	mov	r3, r8
 8004cde:	eb1a 0303 	adds.w	r3, sl, r3
 8004ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8004cec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d04:	460b      	mov	r3, r1
 8004d06:	18db      	adds	r3, r3, r3
 8004d08:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	eb42 0303 	adc.w	r3, r2, r3
 8004d10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d1a:	f7fb ff75 	bl	8000c08 <__aeabi_uldivmod>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004d26:	fba3 2301 	umull	r2, r3, r3, r1
 8004d2a:	095b      	lsrs	r3, r3, #5
 8004d2c:	2264      	movs	r2, #100	@ 0x64
 8004d2e:	fb02 f303 	mul.w	r3, r2, r3
 8004d32:	1acb      	subs	r3, r1, r3
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d3a:	4b36      	ldr	r3, [pc, #216]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	005b      	lsls	r3, r3, #1
 8004d44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d48:	441c      	add	r4, r3
 8004d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d5c:	4642      	mov	r2, r8
 8004d5e:	464b      	mov	r3, r9
 8004d60:	1891      	adds	r1, r2, r2
 8004d62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d64:	415b      	adcs	r3, r3
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d6c:	4641      	mov	r1, r8
 8004d6e:	1851      	adds	r1, r2, r1
 8004d70:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d72:	4649      	mov	r1, r9
 8004d74:	414b      	adcs	r3, r1
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d84:	4659      	mov	r1, fp
 8004d86:	00cb      	lsls	r3, r1, #3
 8004d88:	4651      	mov	r1, sl
 8004d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d8e:	4651      	mov	r1, sl
 8004d90:	00ca      	lsls	r2, r1, #3
 8004d92:	4610      	mov	r0, r2
 8004d94:	4619      	mov	r1, r3
 8004d96:	4603      	mov	r3, r0
 8004d98:	4642      	mov	r2, r8
 8004d9a:	189b      	adds	r3, r3, r2
 8004d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004da0:	464b      	mov	r3, r9
 8004da2:	460a      	mov	r2, r1
 8004da4:	eb42 0303 	adc.w	r3, r2, r3
 8004da8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004db8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	18db      	adds	r3, r3, r3
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	eb42 0303 	adc.w	r3, r2, r3
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dd6:	f7fb ff17 	bl	8000c08 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4b0d      	ldr	r3, [pc, #52]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004de0:	fba3 1302 	umull	r1, r3, r3, r2
 8004de4:	095b      	lsrs	r3, r3, #5
 8004de6:	2164      	movs	r1, #100	@ 0x64
 8004de8:	fb01 f303 	mul.w	r3, r1, r3
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	3332      	adds	r3, #50	@ 0x32
 8004df2:	4a08      	ldr	r2, [pc, #32]	@ (8004e14 <UART_SetConfig+0x2d4>)
 8004df4:	fba2 2303 	umull	r2, r3, r2, r3
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	f003 0207 	and.w	r2, r3, #7
 8004dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4422      	add	r2, r4
 8004e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e08:	e106      	b.n	8005018 <UART_SetConfig+0x4d8>
 8004e0a:	bf00      	nop
 8004e0c:	40011000 	.word	0x40011000
 8004e10:	40011400 	.word	0x40011400
 8004e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	1891      	adds	r1, r2, r2
 8004e30:	6239      	str	r1, [r7, #32]
 8004e32:	415b      	adcs	r3, r3
 8004e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e3a:	4641      	mov	r1, r8
 8004e3c:	1854      	adds	r4, r2, r1
 8004e3e:	4649      	mov	r1, r9
 8004e40:	eb43 0501 	adc.w	r5, r3, r1
 8004e44:	f04f 0200 	mov.w	r2, #0
 8004e48:	f04f 0300 	mov.w	r3, #0
 8004e4c:	00eb      	lsls	r3, r5, #3
 8004e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e52:	00e2      	lsls	r2, r4, #3
 8004e54:	4614      	mov	r4, r2
 8004e56:	461d      	mov	r5, r3
 8004e58:	4643      	mov	r3, r8
 8004e5a:	18e3      	adds	r3, r4, r3
 8004e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e60:	464b      	mov	r3, r9
 8004e62:	eb45 0303 	adc.w	r3, r5, r3
 8004e66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e86:	4629      	mov	r1, r5
 8004e88:	008b      	lsls	r3, r1, #2
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e90:	4621      	mov	r1, r4
 8004e92:	008a      	lsls	r2, r1, #2
 8004e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e98:	f7fb feb6 	bl	8000c08 <__aeabi_uldivmod>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4b60      	ldr	r3, [pc, #384]	@ (8005024 <UART_SetConfig+0x4e4>)
 8004ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8004ea6:	095b      	lsrs	r3, r3, #5
 8004ea8:	011c      	lsls	r4, r3, #4
 8004eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004eb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	1891      	adds	r1, r2, r2
 8004ec2:	61b9      	str	r1, [r7, #24]
 8004ec4:	415b      	adcs	r3, r3
 8004ec6:	61fb      	str	r3, [r7, #28]
 8004ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ecc:	4641      	mov	r1, r8
 8004ece:	1851      	adds	r1, r2, r1
 8004ed0:	6139      	str	r1, [r7, #16]
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	414b      	adcs	r3, r1
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ee4:	4659      	mov	r1, fp
 8004ee6:	00cb      	lsls	r3, r1, #3
 8004ee8:	4651      	mov	r1, sl
 8004eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eee:	4651      	mov	r1, sl
 8004ef0:	00ca      	lsls	r2, r1, #3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4642      	mov	r2, r8
 8004efa:	189b      	adds	r3, r3, r2
 8004efc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f00:	464b      	mov	r3, r9
 8004f02:	460a      	mov	r2, r1
 8004f04:	eb42 0303 	adc.w	r3, r2, r3
 8004f08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f18:	f04f 0200 	mov.w	r2, #0
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f24:	4649      	mov	r1, r9
 8004f26:	008b      	lsls	r3, r1, #2
 8004f28:	4641      	mov	r1, r8
 8004f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f2e:	4641      	mov	r1, r8
 8004f30:	008a      	lsls	r2, r1, #2
 8004f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f36:	f7fb fe67 	bl	8000c08 <__aeabi_uldivmod>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4611      	mov	r1, r2
 8004f40:	4b38      	ldr	r3, [pc, #224]	@ (8005024 <UART_SetConfig+0x4e4>)
 8004f42:	fba3 2301 	umull	r2, r3, r3, r1
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2264      	movs	r2, #100	@ 0x64
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	1acb      	subs	r3, r1, r3
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	3332      	adds	r3, #50	@ 0x32
 8004f54:	4a33      	ldr	r2, [pc, #204]	@ (8005024 <UART_SetConfig+0x4e4>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f60:	441c      	add	r4, r3
 8004f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f66:	2200      	movs	r2, #0
 8004f68:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f70:	4642      	mov	r2, r8
 8004f72:	464b      	mov	r3, r9
 8004f74:	1891      	adds	r1, r2, r2
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	415b      	adcs	r3, r3
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f80:	4641      	mov	r1, r8
 8004f82:	1851      	adds	r1, r2, r1
 8004f84:	6039      	str	r1, [r7, #0]
 8004f86:	4649      	mov	r1, r9
 8004f88:	414b      	adcs	r3, r1
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f98:	4659      	mov	r1, fp
 8004f9a:	00cb      	lsls	r3, r1, #3
 8004f9c:	4651      	mov	r1, sl
 8004f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa2:	4651      	mov	r1, sl
 8004fa4:	00ca      	lsls	r2, r1, #3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4603      	mov	r3, r0
 8004fac:	4642      	mov	r2, r8
 8004fae:	189b      	adds	r3, r3, r2
 8004fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fb2:	464b      	mov	r3, r9
 8004fb4:	460a      	mov	r2, r1
 8004fb6:	eb42 0303 	adc.w	r3, r2, r3
 8004fba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fc6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	008b      	lsls	r3, r1, #2
 8004fd8:	4641      	mov	r1, r8
 8004fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fde:	4641      	mov	r1, r8
 8004fe0:	008a      	lsls	r2, r1, #2
 8004fe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fe6:	f7fb fe0f 	bl	8000c08 <__aeabi_uldivmod>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <UART_SetConfig+0x4e4>)
 8004ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	2164      	movs	r1, #100	@ 0x64
 8004ff8:	fb01 f303 	mul.w	r3, r1, r3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	3332      	adds	r3, #50	@ 0x32
 8005002:	4a08      	ldr	r2, [pc, #32]	@ (8005024 <UART_SetConfig+0x4e4>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	f003 020f 	and.w	r2, r3, #15
 800500e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4422      	add	r2, r4
 8005016:	609a      	str	r2, [r3, #8]
}
 8005018:	bf00      	nop
 800501a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800501e:	46bd      	mov	sp, r7
 8005020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005024:	51eb851f 	.word	0x51eb851f

08005028 <Drive_CS_low>:




void Drive_CS_low()
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 800502c:	2200      	movs	r2, #0
 800502e:	2110      	movs	r1, #16
 8005030:	4802      	ldr	r0, [pc, #8]	@ (800503c <Drive_CS_low+0x14>)
 8005032:	f7fd f81b 	bl	800206c <HAL_GPIO_WritePin>
}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40020000 	.word	0x40020000

08005040 <Drive_CS_high>:


void Drive_CS_high()
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8005044:	2201      	movs	r2, #1
 8005046:	2110      	movs	r1, #16
 8005048:	4802      	ldr	r0, [pc, #8]	@ (8005054 <Drive_CS_high+0x14>)
 800504a:	f7fd f80f 	bl	800206c <HAL_GPIO_WritePin>
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40020000 	.word	0x40020000

08005058 <Drive_DC_low>:


void Drive_DC_low()
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 800505c:	2200      	movs	r2, #0
 800505e:	2110      	movs	r1, #16
 8005060:	4802      	ldr	r0, [pc, #8]	@ (800506c <Drive_DC_low+0x14>)
 8005062:	f7fd f803 	bl	800206c <HAL_GPIO_WritePin>
}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	40020800 	.word	0x40020800

08005070 <Drive_DC_high>:


void Drive_DC_high()
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8005074:	2201      	movs	r2, #1
 8005076:	2110      	movs	r1, #16
 8005078:	4802      	ldr	r0, [pc, #8]	@ (8005084 <Drive_DC_high+0x14>)
 800507a:	f7fc fff7 	bl	800206c <HAL_GPIO_WritePin>
}
 800507e:	bf00      	nop
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40020800 	.word	0x40020800

08005088 <Drive_RESET_low>:


void Drive_RESET_low()
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 800508c:	2200      	movs	r2, #0
 800508e:	2120      	movs	r1, #32
 8005090:	4802      	ldr	r0, [pc, #8]	@ (800509c <Drive_RESET_low+0x14>)
 8005092:	f7fc ffeb 	bl	800206c <HAL_GPIO_WritePin>
}
 8005096:	bf00      	nop
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40020800 	.word	0x40020800

080050a0 <Drive_RESET_high>:


void Drive_RESET_high()
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 80050a4:	2201      	movs	r2, #1
 80050a6:	2120      	movs	r1, #32
 80050a8:	4802      	ldr	r0, [pc, #8]	@ (80050b4 <Drive_RESET_high+0x14>)
 80050aa:	f7fc ffdf 	bl	800206c <HAL_GPIO_WritePin>
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40020800 	.word	0x40020800

080050b8 <SPI_send_byte>:


void SPI_send_byte(uint8_t byte_to_transmit)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_transmit, 1, 10);
 80050c2:	1df9      	adds	r1, r7, #7
 80050c4:	230a      	movs	r3, #10
 80050c6:	2201      	movs	r2, #1
 80050c8:	4803      	ldr	r0, [pc, #12]	@ (80050d8 <SPI_send_byte+0x20>)
 80050ca:	f7fe fe68 	bl	8003d9e <HAL_SPI_Transmit>
}
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	200024fc 	.word	0x200024fc

080050dc <SPI_send_array>:


void SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi1, array_to_transmit, array_size, 100);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	2364      	movs	r3, #100	@ 0x64
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4803      	ldr	r0, [pc, #12]	@ (80050fc <SPI_send_array+0x20>)
 80050f0:	f7fe fe55 	bl	8003d9e <HAL_SPI_Transmit>
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	200024fc 	.word	0x200024fc

08005100 <msDelay>:


void msDelay(uint32_t milliseconds)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7fc fc73 	bl	80019f4 <HAL_Delay>
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <Display_command>:


void Display_command(uint8_t command)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b082      	sub	sp, #8
 800511a:	af00      	add	r7, sp, #0
 800511c:	4603      	mov	r3, r0
 800511e:	71fb      	strb	r3, [r7, #7]
	Drive_CS_low();
 8005120:	f7ff ff82 	bl	8005028 <Drive_CS_low>
	Drive_DC_low();
 8005124:	f7ff ff98 	bl	8005058 <Drive_DC_low>
	SPI_send_byte(command);
 8005128:	79fb      	ldrb	r3, [r7, #7]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff ffc4 	bl	80050b8 <SPI_send_byte>
	Drive_CS_high();
 8005130:	f7ff ff86 	bl	8005040 <Drive_CS_high>
}
 8005134:	bf00      	nop
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <Display_data>:

void Display_data(uint8_t data)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	4603      	mov	r3, r0
 8005144:	71fb      	strb	r3, [r7, #7]
	Drive_CS_low();
 8005146:	f7ff ff6f 	bl	8005028 <Drive_CS_low>
	Drive_DC_high();
 800514a:	f7ff ff91 	bl	8005070 <Drive_DC_high>
	SPI_send_byte(data);
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff ffb1 	bl	80050b8 <SPI_send_byte>
	Drive_CS_high();
 8005156:	f7ff ff73 	bl	8005040 <Drive_CS_high>
}
 800515a:	bf00      	nop
 800515c:	3708      	adds	r7, #8
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <Display_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void Display_init()
{
 8005162:	b580      	push	{r7, lr}
 8005164:	af00      	add	r7, sp, #0
	Drive_RESET_low();
 8005166:	f7ff ff8f 	bl	8005088 <Drive_RESET_low>
	msDelay(1);
 800516a:	2001      	movs	r0, #1
 800516c:	f7ff ffc8 	bl	8005100 <msDelay>
	Drive_RESET_high();
 8005170:	f7ff ff96 	bl	80050a0 <Drive_RESET_high>
	msDelay(50);
 8005174:	2032      	movs	r0, #50	@ 0x32
 8005176:	f7ff ffc3 	bl	8005100 <msDelay>
	Display_command(0xFD);
 800517a:	20fd      	movs	r0, #253	@ 0xfd
 800517c:	f7ff ffcb 	bl	8005116 <Display_command>
	Display_data(0x12);
 8005180:	2012      	movs	r0, #18
 8005182:	f7ff ffdb 	bl	800513c <Display_data>
	Display_command(0xAE);
 8005186:	20ae      	movs	r0, #174	@ 0xae
 8005188:	f7ff ffc5 	bl	8005116 <Display_command>
	Display_command(0xB3);
 800518c:	20b3      	movs	r0, #179	@ 0xb3
 800518e:	f7ff ffc2 	bl	8005116 <Display_command>
	Display_data(0x91);
 8005192:	2091      	movs	r0, #145	@ 0x91
 8005194:	f7ff ffd2 	bl	800513c <Display_data>
	Display_command(0xCA);
 8005198:	20ca      	movs	r0, #202	@ 0xca
 800519a:	f7ff ffbc 	bl	8005116 <Display_command>
	Display_data(0x3F);
 800519e:	203f      	movs	r0, #63	@ 0x3f
 80051a0:	f7ff ffcc 	bl	800513c <Display_data>
	Display_command(0xA2);
 80051a4:	20a2      	movs	r0, #162	@ 0xa2
 80051a6:	f7ff ffb6 	bl	8005116 <Display_command>
	Display_data(0x00);
 80051aa:	2000      	movs	r0, #0
 80051ac:	f7ff ffc6 	bl	800513c <Display_data>
	Display_command(0xA1);
 80051b0:	20a1      	movs	r0, #161	@ 0xa1
 80051b2:	f7ff ffb0 	bl	8005116 <Display_command>
	Display_data(0x00);
 80051b6:	2000      	movs	r0, #0
 80051b8:	f7ff ffc0 	bl	800513c <Display_data>
	Display_command(0xA0);
 80051bc:	20a0      	movs	r0, #160	@ 0xa0
 80051be:	f7ff ffaa 	bl	8005116 <Display_command>
	Display_data(0x14);
 80051c2:	2014      	movs	r0, #20
 80051c4:	f7ff ffba 	bl	800513c <Display_data>
	Display_data(0x11);
 80051c8:	2011      	movs	r0, #17
 80051ca:	f7ff ffb7 	bl	800513c <Display_data>
	Display_command(0xB5);
 80051ce:	20b5      	movs	r0, #181	@ 0xb5
 80051d0:	f7ff ffa1 	bl	8005116 <Display_command>
	Display_data(0x00);
 80051d4:	2000      	movs	r0, #0
 80051d6:	f7ff ffb1 	bl	800513c <Display_data>
	Display_command(0xAB);
 80051da:	20ab      	movs	r0, #171	@ 0xab
 80051dc:	f7ff ff9b 	bl	8005116 <Display_command>
	Display_data(0x01);
 80051e0:	2001      	movs	r0, #1
 80051e2:	f7ff ffab 	bl	800513c <Display_data>
	Display_command(0xB4);
 80051e6:	20b4      	movs	r0, #180	@ 0xb4
 80051e8:	f7ff ff95 	bl	8005116 <Display_command>
	Display_data(0xA0);
 80051ec:	20a0      	movs	r0, #160	@ 0xa0
 80051ee:	f7ff ffa5 	bl	800513c <Display_data>
	Display_data(0xFD);
 80051f2:	20fd      	movs	r0, #253	@ 0xfd
 80051f4:	f7ff ffa2 	bl	800513c <Display_data>
	Display_command(0xC1);
 80051f8:	20c1      	movs	r0, #193	@ 0xc1
 80051fa:	f7ff ff8c 	bl	8005116 <Display_command>
	Display_data(0xFF);
 80051fe:	20ff      	movs	r0, #255	@ 0xff
 8005200:	f7ff ff9c 	bl	800513c <Display_data>
	Display_command(0xC7);
 8005204:	20c7      	movs	r0, #199	@ 0xc7
 8005206:	f7ff ff86 	bl	8005116 <Display_command>
	Display_data(0x0F);
 800520a:	200f      	movs	r0, #15
 800520c:	f7ff ff96 	bl	800513c <Display_data>
	Display_command(0xB9);
 8005210:	20b9      	movs	r0, #185	@ 0xb9
 8005212:	f7ff ff80 	bl	8005116 <Display_command>
	Display_command(0xB1);
 8005216:	20b1      	movs	r0, #177	@ 0xb1
 8005218:	f7ff ff7d 	bl	8005116 <Display_command>
	Display_data(0xE2);
 800521c:	20e2      	movs	r0, #226	@ 0xe2
 800521e:	f7ff ff8d 	bl	800513c <Display_data>
	Display_command(0xD1);
 8005222:	20d1      	movs	r0, #209	@ 0xd1
 8005224:	f7ff ff77 	bl	8005116 <Display_command>
	Display_data(0x82);
 8005228:	2082      	movs	r0, #130	@ 0x82
 800522a:	f7ff ff87 	bl	800513c <Display_data>
	Display_data(0x20);
 800522e:	2020      	movs	r0, #32
 8005230:	f7ff ff84 	bl	800513c <Display_data>
	Display_command(0xBB);
 8005234:	20bb      	movs	r0, #187	@ 0xbb
 8005236:	f7ff ff6e 	bl	8005116 <Display_command>
	Display_data(0x1F);
 800523a:	201f      	movs	r0, #31
 800523c:	f7ff ff7e 	bl	800513c <Display_data>
	Display_command(0xB6);
 8005240:	20b6      	movs	r0, #182	@ 0xb6
 8005242:	f7ff ff68 	bl	8005116 <Display_command>
	Display_data(0x08);
 8005246:	2008      	movs	r0, #8
 8005248:	f7ff ff78 	bl	800513c <Display_data>
	Display_command(0xBE);
 800524c:	20be      	movs	r0, #190	@ 0xbe
 800524e:	f7ff ff62 	bl	8005116 <Display_command>
	Display_data(0x07);
 8005252:	2007      	movs	r0, #7
 8005254:	f7ff ff72 	bl	800513c <Display_data>
	Display_command(0xA6);
 8005258:	20a6      	movs	r0, #166	@ 0xa6
 800525a:	f7ff ff5c 	bl	8005116 <Display_command>
	Display_command(0xA9);
 800525e:	20a9      	movs	r0, #169	@ 0xa9
 8005260:	f7ff ff59 	bl	8005116 <Display_command>
	msDelay(10);
 8005264:	200a      	movs	r0, #10
 8005266:	f7ff ff4b 	bl	8005100 <msDelay>
	Display_command(0xAF);
 800526a:	20af      	movs	r0, #175	@ 0xaf
 800526c:	f7ff ff53 	bl	8005116 <Display_command>
	msDelay(50);
 8005270:	2032      	movs	r0, #50	@ 0x32
 8005272:	f7ff ff45 	bl	8005100 <msDelay>
}
 8005276:	bf00      	nop
 8005278:	bd80      	pop	{r7, pc}

0800527a <Display_set_window>:
	Display_command(SET_DEFAULT_GRAYSCALE_TAB);
}


void Display_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
{
 800527a:	b590      	push	{r4, r7, lr}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	4604      	mov	r4, r0
 8005282:	4608      	mov	r0, r1
 8005284:	4611      	mov	r1, r2
 8005286:	461a      	mov	r2, r3
 8005288:	4623      	mov	r3, r4
 800528a:	71fb      	strb	r3, [r7, #7]
 800528c:	4603      	mov	r3, r0
 800528e:	71bb      	strb	r3, [r7, #6]
 8005290:	460b      	mov	r3, r1
 8005292:	717b      	strb	r3, [r7, #5]
 8005294:	4613      	mov	r3, r2
 8005296:	713b      	strb	r3, [r7, #4]
	Display_command(SET_COLUMN_ADDR);  //set columns range
 8005298:	2015      	movs	r0, #21
 800529a:	f7ff ff3c 	bl	8005116 <Display_command>
	Display_data(28+start_column);
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	331c      	adds	r3, #28
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7ff ff49 	bl	800513c <Display_data>
	Display_data(28+end_column);
 80052aa:	79bb      	ldrb	r3, [r7, #6]
 80052ac:	331c      	adds	r3, #28
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7ff ff43 	bl	800513c <Display_data>
	Display_command(SET_ROW_ADDR);  //set rows range
 80052b6:	2075      	movs	r0, #117	@ 0x75
 80052b8:	f7ff ff2d 	bl	8005116 <Display_command>
	Display_data(start_row);
 80052bc:	797b      	ldrb	r3, [r7, #5]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7ff ff3c 	bl	800513c <Display_data>
	Display_data(end_row);
 80052c4:	793b      	ldrb	r3, [r7, #4]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff ff38 	bl	800513c <Display_data>
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd90      	pop	{r4, r7, pc}

080052d4 <Send_buffer>:


void Send_buffer(uint8_t* buffer, uint32_t buffer_size)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
	Display_command(ENABLE_RAM_WRITE);  //enable write of pixels
 80052de:	205c      	movs	r0, #92	@ 0x5c
 80052e0:	f7ff ff19 	bl	8005116 <Display_command>
	Drive_CS_low();
 80052e4:	f7ff fea0 	bl	8005028 <Drive_CS_low>
	Drive_DC_high();
 80052e8:	f7ff fec2 	bl	8005070 <Drive_DC_high>
	SPI_send_array(buffer, buffer_size);
 80052ec:	6839      	ldr	r1, [r7, #0]
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff fef4 	bl	80050dc <SPI_send_array>
	Drive_CS_high();
 80052f4:	f7ff fea4 	bl	8005040 <Drive_CS_high>
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <set_buffer_size>:

uint16_t _buffer_height = 64;       //buffer dimensions used to determine if pixel is within array bounds
uint16_t _buffer_width = 256;      //by default buffer size is equal to OLED size

void set_buffer_size(uint16_t _buffer_width, uint16_t buffer_height)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	4603      	mov	r3, r0
 8005308:	460a      	mov	r2, r1
 800530a:	80fb      	strh	r3, [r7, #6]
 800530c:	4613      	mov	r3, r2
 800530e:	80bb      	strh	r3, [r7, #4]
	_buffer_height = buffer_height;
 8005310:	4a04      	ldr	r2, [pc, #16]	@ (8005324 <set_buffer_size+0x24>)
 8005312:	88bb      	ldrh	r3, [r7, #4]
 8005314:	8013      	strh	r3, [r2, #0]
	_buffer_width = _buffer_width;
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	200002ba 	.word	0x200002ba

08005328 <fill_buffer>:

void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	011b      	lsls	r3, r3, #4
 8005338:	b25a      	sxtb	r2, r3
 800533a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800533e:	4313      	orrs	r3, r2
 8005340:	b25b      	sxtb	r3, r3
 8005342:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 8005344:	4b0e      	ldr	r3, [pc, #56]	@ (8005380 <fill_buffer+0x58>)
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	4b0e      	ldr	r3, [pc, #56]	@ (8005384 <fill_buffer+0x5c>)
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	fb02 f303 	mul.w	r3, r2, r3
 8005352:	0fda      	lsrs	r2, r3, #31
 8005354:	4413      	add	r3, r2
 8005356:	105b      	asrs	r3, r3, #1
 8005358:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 800535a:	e004      	b.n	8005366 <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	7afa      	ldrb	r2, [r7, #11]
 8005364:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	1e5a      	subs	r2, r3, #1
 800536a:	60fa      	str	r2, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1f5      	bne.n	800535c <fill_buffer+0x34>
	}
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	200002ba 	.word	0x200002ba
 8005384:	200002bc 	.word	0x200002bc

08005388 <draw_pixel>:

void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	4608      	mov	r0, r1
 8005392:	4611      	mov	r1, r2
 8005394:	461a      	mov	r2, r3
 8005396:	4603      	mov	r3, r0
 8005398:	817b      	strh	r3, [r7, #10]
 800539a:	460b      	mov	r3, r1
 800539c:	813b      	strh	r3, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 80053a2:	4b35      	ldr	r3, [pc, #212]	@ (8005478 <draw_pixel+0xf0>)
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	897a      	ldrh	r2, [r7, #10]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d25f      	bcs.n	800546c <draw_pixel+0xe4>
 80053ac:	4b33      	ldr	r3, [pc, #204]	@ (800547c <draw_pixel+0xf4>)
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	893a      	ldrh	r2, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d25a      	bcs.n	800546c <draw_pixel+0xe4>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 80053b6:	893b      	ldrh	r3, [r7, #8]
 80053b8:	4a2f      	ldr	r2, [pc, #188]	@ (8005478 <draw_pixel+0xf0>)
 80053ba:	8812      	ldrh	r2, [r2, #0]
 80053bc:	fb03 f202 	mul.w	r2, r3, r2
 80053c0:	897b      	ldrh	r3, [r7, #10]
 80053c2:	4413      	add	r3, r2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	bfb8      	it	lt
 80053cc:	425b      	neglt	r3, r3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d125      	bne.n	800541e <draw_pixel+0x96>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 80053d2:	893b      	ldrh	r3, [r7, #8]
 80053d4:	4a28      	ldr	r2, [pc, #160]	@ (8005478 <draw_pixel+0xf0>)
 80053d6:	8812      	ldrh	r2, [r2, #0]
 80053d8:	fb03 f202 	mul.w	r2, r3, r2
 80053dc:	897b      	ldrh	r3, [r7, #10]
 80053de:	4413      	add	r3, r2
 80053e0:	0fda      	lsrs	r2, r3, #31
 80053e2:	4413      	add	r3, r2
 80053e4:	105b      	asrs	r3, r3, #1
 80053e6:	461a      	mov	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	b25b      	sxtb	r3, r3
 80053f0:	f023 030f 	bic.w	r3, r3, #15
 80053f4:	b25a      	sxtb	r2, r3
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	b259      	sxtb	r1, r3
 80053fe:	893b      	ldrh	r3, [r7, #8]
 8005400:	4a1d      	ldr	r2, [pc, #116]	@ (8005478 <draw_pixel+0xf0>)
 8005402:	8812      	ldrh	r2, [r2, #0]
 8005404:	fb03 f202 	mul.w	r2, r3, r2
 8005408:	897b      	ldrh	r3, [r7, #10]
 800540a:	4413      	add	r3, r2
 800540c:	0fda      	lsrs	r2, r3, #31
 800540e:	4413      	add	r3, r2
 8005410:	105b      	asrs	r3, r3, #1
 8005412:	461a      	mov	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4413      	add	r3, r2
 8005418:	b2ca      	uxtb	r2, r1
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	e027      	b.n	800546e <draw_pixel+0xe6>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 800541e:	893b      	ldrh	r3, [r7, #8]
 8005420:	4a15      	ldr	r2, [pc, #84]	@ (8005478 <draw_pixel+0xf0>)
 8005422:	8812      	ldrh	r2, [r2, #0]
 8005424:	fb03 f202 	mul.w	r2, r3, r2
 8005428:	897b      	ldrh	r3, [r7, #10]
 800542a:	4413      	add	r3, r2
 800542c:	0fda      	lsrs	r2, r3, #31
 800542e:	4413      	add	r3, r2
 8005430:	105b      	asrs	r3, r3, #1
 8005432:	461a      	mov	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	4413      	add	r3, r2
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	b25b      	sxtb	r3, r3
 800543c:	f003 030f 	and.w	r3, r3, #15
 8005440:	b25a      	sxtb	r2, r3
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	b25b      	sxtb	r3, r3
 8005448:	4313      	orrs	r3, r2
 800544a:	b259      	sxtb	r1, r3
 800544c:	893b      	ldrh	r3, [r7, #8]
 800544e:	4a0a      	ldr	r2, [pc, #40]	@ (8005478 <draw_pixel+0xf0>)
 8005450:	8812      	ldrh	r2, [r2, #0]
 8005452:	fb03 f202 	mul.w	r2, r3, r2
 8005456:	897b      	ldrh	r3, [r7, #10]
 8005458:	4413      	add	r3, r2
 800545a:	0fda      	lsrs	r2, r3, #31
 800545c:	4413      	add	r3, r2
 800545e:	105b      	asrs	r3, r3, #1
 8005460:	461a      	mov	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	4413      	add	r3, r2
 8005466:	b2ca      	uxtb	r2, r1
 8005468:	701a      	strb	r2, [r3, #0]
 800546a:	e000      	b.n	800546e <draw_pixel+0xe6>
		return;
 800546c:	bf00      	nop
	}
}
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	200002bc 	.word	0x200002bc
 800547c:	200002ba 	.word	0x200002ba

08005480 <select_font>:

void select_font(const GFXfont *new_gfx_font)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 8005488:	4a04      	ldr	r2, [pc, #16]	@ (800549c <select_font+0x1c>)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6013      	str	r3, [r2, #0]
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	2000255c 	.word	0x2000255c

080054a0 <draw_char>:

void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08a      	sub	sp, #40	@ 0x28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	4608      	mov	r0, r1
 80054aa:	4611      	mov	r1, r2
 80054ac:	461a      	mov	r2, r3
 80054ae:	4603      	mov	r3, r0
 80054b0:	72fb      	strb	r3, [r7, #11]
 80054b2:	460b      	mov	r3, r1
 80054b4:	813b      	strh	r3, [r7, #8]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 80054ba:	4b44      	ldr	r3, [pc, #272]	@ (80055cc <draw_char+0x12c>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d07f      	beq.n	80055c2 <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 80054c2:	4b42      	ldr	r3, [pc, #264]	@ (80055cc <draw_char+0x12c>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	891b      	ldrh	r3, [r3, #8]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	7afa      	ldrb	r2, [r7, #11]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 80054d0:	4b3e      	ldr	r3, [pc, #248]	@ (80055cc <draw_char+0x12c>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	7afb      	ldrb	r3, [r7, #11]
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 80054de:	4b3b      	ldr	r3, [pc, #236]	@ (80055cc <draw_char+0x12c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t width = glyph->width;
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	789b      	ldrb	r3, [r3, #2]
 80054f0:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	78db      	ldrb	r3, [r3, #3]
 80054f6:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	795b      	ldrb	r3, [r3, #5]
 80054fc:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	799b      	ldrb	r3, [r3, #6]
 8005502:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t bits = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t y_pos = 0;
 8005510:	2300      	movs	r3, #0
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint8_t x_pos = 0;
 8005516:	2300      	movs	r3, #0
 8005518:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 800551c:	2300      	movs	r3, #0
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005522:	e048      	b.n	80055b6 <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 8005524:	2300      	movs	r3, #0
 8005526:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800552a:	e03a      	b.n	80055a2 <draw_char+0x102>
		{
			if (!(bit++ & 7))
 800552c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	f887 2025 	strb.w	r2, [r7, #37]	@ 0x25
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	2b00      	cmp	r3, #0
 800553c:	d108      	bne.n	8005550 <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800553e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8005544:	461a      	mov	r2, r3
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	4413      	add	r3, r2
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			}
			if (bits & 0x80)
 8005550:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8005554:	2b00      	cmp	r3, #0
 8005556:	da1a      	bge.n	800558e <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 8005558:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800555c:	b29a      	uxth	r2, r3
 800555e:	893b      	ldrh	r3, [r7, #8]
 8005560:	4413      	add	r3, r2
 8005562:	b29a      	uxth	r2, r3
 8005564:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005568:	b29b      	uxth	r3, r3
 800556a:	4413      	add	r3, r2
 800556c:	b299      	uxth	r1, r3
 800556e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8005572:	b29a      	uxth	r2, r3
 8005574:	88fb      	ldrh	r3, [r7, #6]
 8005576:	4413      	add	r3, r2
 8005578:	b29a      	uxth	r2, r3
 800557a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800557e:	b29b      	uxth	r3, r3
 8005580:	4413      	add	r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f7ff fefd 	bl	8005388 <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 800558e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005592:	005b      	lsls	r3, r3, #1
 8005594:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 8005598:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800559c:	3301      	adds	r3, #1
 800559e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055a2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d3bf      	bcc.n	800552c <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 80055ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055b0:	3301      	adds	r3, #1
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80055ba:	7dbb      	ldrb	r3, [r7, #22]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d3b1      	bcc.n	8005524 <draw_char+0x84>
 80055c0:	e000      	b.n	80055c4 <draw_char+0x124>
		return;
 80055c2:	bf00      	nop
		}
	}
}
 80055c4:	3728      	adds	r7, #40	@ 0x28
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	2000255c 	.word	0x2000255c

080055d0 <draw_text>:

void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	4611      	mov	r1, r2
 80055dc:	461a      	mov	r2, r3
 80055de:	460b      	mov	r3, r1
 80055e0:	80fb      	strh	r3, [r7, #6]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80bb      	strh	r3, [r7, #4]
    while (*text)
 80055e6:	e01b      	b.n	8005620 <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	7819      	ldrb	r1, [r3, #0]
 80055ec:	88b8      	ldrh	r0, [r7, #4]
 80055ee:	88fa      	ldrh	r2, [r7, #6]
 80055f0:	7e3b      	ldrb	r3, [r7, #24]
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	4603      	mov	r3, r0
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff ff52 	bl	80054a0 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 80055fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005634 <draw_text+0x64>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800560a:	3b20      	subs	r3, #32
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	4413      	add	r3, r2
 8005610:	791b      	ldrb	r3, [r3, #4]
 8005612:	461a      	mov	r2, r3
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	4413      	add	r3, r2
 8005618:	80fb      	strh	r3, [r7, #6]
        text++;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	3301      	adds	r3, #1
 800561e:	60bb      	str	r3, [r7, #8]
    while (*text)
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1df      	bne.n	80055e8 <draw_text+0x18>
    }
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	2000255c 	.word	0x2000255c

08005638 <draw_bitmap_4bpp>:
		}
	}
}

void draw_bitmap_4bpp(uint8_t *frame_buffer, const uint8_t *bitmap, uint16_t x0, uint16_t y0, uint16_t x_size, uint16_t y_size)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4611      	mov	r1, r2
 8005644:	461a      	mov	r2, r3
 8005646:	460b      	mov	r3, r1
 8005648:	80fb      	strh	r3, [r7, #6]
 800564a:	4613      	mov	r3, r2
 800564c:	80bb      	strh	r3, [r7, #4]
	uint16_t bitmap_pos = 0;       //byte index in bitmap array
 800564e:	2300      	movs	r3, #0
 8005650:	83fb      	strh	r3, [r7, #30]
	uint16_t processed_pixels = 0;
 8005652:	2300      	movs	r3, #0
 8005654:	83bb      	strh	r3, [r7, #28]
	uint8_t pixel_parity = 0;      //if pixel is even = 0; odd = 1
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]

	for (uint16_t i = y0; i < y0 + y_size; i++)
 800565a:	88bb      	ldrh	r3, [r7, #4]
 800565c:	837b      	strh	r3, [r7, #26]
 800565e:	e034      	b.n	80056ca <draw_bitmap_4bpp+0x92>
	{
		for (uint16_t j = x0; j < x0 + x_size; j++)
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	833b      	strh	r3, [r7, #24]
 8005664:	e028      	b.n	80056b8 <draw_bitmap_4bpp+0x80>
		{
			pixel_parity = processed_pixels % 2;
 8005666:	8bbb      	ldrh	r3, [r7, #28]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	75fb      	strb	r3, [r7, #23]

			if(pixel_parity == 0)
 8005670:	7dfb      	ldrb	r3, [r7, #23]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10e      	bne.n	8005694 <draw_bitmap_4bpp+0x5c>
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos] >> 4);
 8005676:	8bfb      	ldrh	r3, [r7, #30]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	4413      	add	r3, r2
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	b2db      	uxtb	r3, r3
 8005682:	8b7a      	ldrh	r2, [r7, #26]
 8005684:	8b39      	ldrh	r1, [r7, #24]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7ff fe7e 	bl	8005388 <draw_pixel>
				processed_pixels++;
 800568c:	8bbb      	ldrh	r3, [r7, #28]
 800568e:	3301      	adds	r3, #1
 8005690:	83bb      	strh	r3, [r7, #28]
 8005692:	e00e      	b.n	80056b2 <draw_bitmap_4bpp+0x7a>
			}
			else
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos]);
 8005694:	8bfb      	ldrh	r3, [r7, #30]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	4413      	add	r3, r2
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	8b7a      	ldrh	r2, [r7, #26]
 800569e:	8b39      	ldrh	r1, [r7, #24]
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f7ff fe71 	bl	8005388 <draw_pixel>
				processed_pixels++;
 80056a6:	8bbb      	ldrh	r3, [r7, #28]
 80056a8:	3301      	adds	r3, #1
 80056aa:	83bb      	strh	r3, [r7, #28]
				bitmap_pos++;
 80056ac:	8bfb      	ldrh	r3, [r7, #30]
 80056ae:	3301      	adds	r3, #1
 80056b0:	83fb      	strh	r3, [r7, #30]
		for (uint16_t j = x0; j < x0 + x_size; j++)
 80056b2:	8b3b      	ldrh	r3, [r7, #24]
 80056b4:	3301      	adds	r3, #1
 80056b6:	833b      	strh	r3, [r7, #24]
 80056b8:	8b3a      	ldrh	r2, [r7, #24]
 80056ba:	88f9      	ldrh	r1, [r7, #6]
 80056bc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80056be:	440b      	add	r3, r1
 80056c0:	429a      	cmp	r2, r3
 80056c2:	dbd0      	blt.n	8005666 <draw_bitmap_4bpp+0x2e>
	for (uint16_t i = y0; i < y0 + y_size; i++)
 80056c4:	8b7b      	ldrh	r3, [r7, #26]
 80056c6:	3301      	adds	r3, #1
 80056c8:	837b      	strh	r3, [r7, #26]
 80056ca:	8b7a      	ldrh	r2, [r7, #26]
 80056cc:	88b9      	ldrh	r1, [r7, #4]
 80056ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80056d0:	440b      	add	r3, r1
 80056d2:	429a      	cmp	r2, r3
 80056d4:	dbc4      	blt.n	8005660 <draw_bitmap_4bpp+0x28>
			}
		}
	}
}
 80056d6:	bf00      	nop
 80056d8:	bf00      	nop
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <send_buffer_to_OLED>:

void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	807b      	strh	r3, [r7, #2]
 80056ec:	4613      	mov	r3, r2
 80056ee:	803b      	strh	r3, [r7, #0]
	Display_set_window(0, 63, 0, 127);
 80056f0:	237f      	movs	r3, #127	@ 0x7f
 80056f2:	2200      	movs	r2, #0
 80056f4:	213f      	movs	r1, #63	@ 0x3f
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7ff fdbf 	bl	800527a <Display_set_window>
	Send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 80056fc:	883b      	ldrh	r3, [r7, #0]
 80056fe:	01db      	lsls	r3, r3, #7
 8005700:	461a      	mov	r2, r3
 8005702:	887b      	ldrh	r3, [r7, #2]
 8005704:	4413      	add	r3, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	4413      	add	r3, r2
 800570a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fde0 	bl	80052d4 <Send_buffer>
}
 8005714:	bf00      	nop
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <mcp23017_regForPin>:
 * @param pin
 * @param portAaddr
 * @param portBaddr
 * @return
 */
static uint8_t mcp23017_regForPin (uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	4603      	mov	r3, r0
 8005724:	71fb      	strb	r3, [r7, #7]
 8005726:	460b      	mov	r3, r1
 8005728:	71bb      	strb	r3, [r7, #6]
 800572a:	4613      	mov	r3, r2
 800572c:	717b      	strb	r3, [r7, #5]
	return(pin<8) ? portAaddr : portBaddr;
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2b07      	cmp	r3, #7
 8005732:	d801      	bhi.n	8005738 <mcp23017_regForPin+0x1c>
 8005734:	79bb      	ldrb	r3, [r7, #6]
 8005736:	e000      	b.n	800573a <mcp23017_regForPin+0x1e>
 8005738:	797b      	ldrb	r3, [r7, #5]
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <mcp23017_bitForPin>:
/**
 * Bit number associated to a given pin
 * @param pin
 * @return
 */
static uint8_t mcp23017_bitForPin(uint8_t pin){
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	4603      	mov	r3, r0
 800574e:	71fb      	strb	r3, [r7, #7]
	return pin % 8;
 8005750:	79fb      	ldrb	r3, [r7, #7]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	b2db      	uxtb	r3, r3
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <mcp23017_readRegister>:
 * Reads a given register
 * @param hdev
 * @param addr
 * @return
 */
HAL_StatusTypeDef mcp23017_readRegister(MCP23017_HandleTypeDef *hdev, uint8_t addr, uint8_t *data) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	@ 0x28
 8005768:	af04      	add	r7, sp, #16
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	460b      	mov	r3, r1
 800576e:	607a      	str	r2, [r7, #4]
 8005770:	72fb      	strb	r3, [r7, #11]
	// read the current GPINTEN
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Read(hdev->hi2c1, hdev->addr, addr, 1, data, 1, HAL_MAX_DELAY);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6818      	ldr	r0, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8899      	ldrh	r1, [r3, #4]
 800577a:	7afb      	ldrb	r3, [r7, #11]
 800577c:	b29a      	uxth	r2, r3
 800577e:	f04f 33ff 	mov.w	r3, #4294967295
 8005782:	9302      	str	r3, [sp, #8]
 8005784:	2301      	movs	r3, #1
 8005786:	9301      	str	r3, [sp, #4]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	2301      	movs	r3, #1
 800578e:	f7fc fec5 	bl	800251c <HAL_I2C_Mem_Read>
 8005792:	4603      	mov	r3, r0
 8005794:	75fb      	strb	r3, [r7, #23]
	return ret;
 8005796:	7dfb      	ldrb	r3, [r7, #23]
}
 8005798:	4618      	mov	r0, r3
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <mcp23017_writeRegister>:
 * @param regAddr Register Address
 * @param regValue Value to write to
 * @return
 */
static HAL_StatusTypeDef mcp23017_writeRegister(MCP23017_HandleTypeDef *hdev, uint8_t regAddr, uint8_t regValue)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af04      	add	r7, sp, #16
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
 80057ac:	4613      	mov	r3, r2
 80057ae:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Write(hdev->hi2c1, hdev->addr, regAddr, 1, (uint8_t*) &regValue, 1, HAL_MAX_DELAY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6818      	ldr	r0, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8899      	ldrh	r1, [r3, #4]
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	b29a      	uxth	r2, r3
 80057bc:	f04f 33ff 	mov.w	r3, #4294967295
 80057c0:	9302      	str	r3, [sp, #8]
 80057c2:	2301      	movs	r3, #1
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	1cbb      	adds	r3, r7, #2
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	2301      	movs	r3, #1
 80057cc:	f7fc fdac 	bl	8002328 <HAL_I2C_Mem_Write>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]
	return ret;
 80057d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <mcp23017_updateRegisterBit>:
 * @param pin
 * @param pValue
 * @param portAaddr
 * @param portBaddr
 */
HAL_StatusTypeDef mcp23017_updateRegisterBit(MCP23017_HandleTypeDef *hdev, uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	4608      	mov	r0, r1
 80057e8:	4611      	mov	r1, r2
 80057ea:	461a      	mov	r2, r3
 80057ec:	4603      	mov	r3, r0
 80057ee:	70fb      	strb	r3, [r7, #3]
 80057f0:	460b      	mov	r3, r1
 80057f2:	70bb      	strb	r3, [r7, #2]
 80057f4:	4613      	mov	r3, r2
 80057f6:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr = mcp23017_regForPin(pin,portAaddr,portBaddr);
 80057f8:	7e3a      	ldrb	r2, [r7, #24]
 80057fa:	7879      	ldrb	r1, [r7, #1]
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff ff8c 	bl	800571c <mcp23017_regForPin>
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
	uint8_t bit = mcp23017_bitForPin(pin);
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff ff9b 	bl	8005746 <mcp23017_bitForPin>
 8005810:	4603      	mov	r3, r0
 8005812:	73bb      	strb	r3, [r7, #14]
	mcp23017_readRegister(hdev, regAddr, &regValue);
 8005814:	f107 020d 	add.w	r2, r7, #13
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	4619      	mov	r1, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ffa1 	bl	8005764 <mcp23017_readRegister>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
 8005822:	78bb      	ldrb	r3, [r7, #2]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <mcp23017_updateRegisterBit+0x5e>
 8005828:	7bbb      	ldrb	r3, [r7, #14]
 800582a:	2201      	movs	r2, #1
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	b2da      	uxtb	r2, r3
 8005832:	7b7b      	ldrb	r3, [r7, #13]
 8005834:	4313      	orrs	r3, r2
 8005836:	b2db      	uxtb	r3, r3
 8005838:	737b      	strb	r3, [r7, #13]
 800583a:	e00a      	b.n	8005852 <mcp23017_updateRegisterBit+0x74>
 800583c:	7bbb      	ldrb	r3, [r7, #14]
 800583e:	2201      	movs	r2, #1
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	b2db      	uxtb	r3, r3
 8005846:	43db      	mvns	r3, r3
 8005848:	b2da      	uxtb	r2, r3
 800584a:	7b7b      	ldrb	r3, [r7, #13]
 800584c:	4013      	ands	r3, r2
 800584e:	b2db      	uxtb	r3, r3
 8005850:	737b      	strb	r3, [r7, #13]

	return (mcp23017_writeRegister(hdev, regAddr,regValue));
 8005852:	7b7a      	ldrb	r2, [r7, #13]
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	4619      	mov	r1, r3
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff ffa1 	bl	80057a0 <mcp23017_writeRegister>
 800585e:	4603      	mov	r3, r0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <mcp23017_init>:
 * @param hdev
 * @param hi2c1
 * @param addr
 */
HAL_StatusTypeDef mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c1, uint16_t addr)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret;

	hdev->hi2c1 = hi2c1;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68ba      	ldr	r2, [r7, #8]
 800587a:	601a      	str	r2, [r3, #0]
	hdev->addr = addr << 1;
 800587c:	88fb      	ldrh	r3, [r7, #6]
 800587e:	005b      	lsls	r3, r3, #1
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	809a      	strh	r2, [r3, #4]

	ret = HAL_I2C_IsDeviceReady(hi2c1, hdev->addr, 20, I2C_READYNESS_DELAY);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8899      	ldrh	r1, [r3, #4]
 800588a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800588e:	2214      	movs	r2, #20
 8005890:	68b8      	ldr	r0, [r7, #8]
 8005892:	f7fd f875 	bl	8002980 <HAL_I2C_IsDeviceReady>
 8005896:	4603      	mov	r3, r0
 8005898:	75bb      	strb	r3, [r7, #22]
	if (ret != HAL_OK) return ret;
 800589a:	7dbb      	ldrb	r3, [r7, #22]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <mcp23017_init+0x3c>
 80058a0:	7dbb      	ldrb	r3, [r7, #22]
 80058a2:	e01a      	b.n	80058da <mcp23017_init+0x72>
	//DISSLW = 	0 : slew rate enabled
	//HAEN = 	0 : hardware address pin is always enabled on 23017
	//ODR = 	0 : open drain output
	//INTPOL = 	0 : interrupt active low
	// bit0 - unplemented read as 0
	uint8_t byte = 0 | 1 << 5 | 1 << 6;
 80058a4:	2360      	movs	r3, #96	@ 0x60
 80058a6:	757b      	strb	r3, [r7, #21]

	for (uint8_t i = 0; i < 2; i++) {
 80058a8:	2300      	movs	r3, #0
 80058aa:	75fb      	strb	r3, [r7, #23]
 80058ac:	e011      	b.n	80058d2 <mcp23017_init+0x6a>
		ret = mcp23017_writeRegister(hdev, MCP23017_IOCONA+i, byte);
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
 80058b0:	330a      	adds	r3, #10
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	7d7a      	ldrb	r2, [r7, #21]
 80058b6:	4619      	mov	r1, r3
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff ff71 	bl	80057a0 <mcp23017_writeRegister>
 80058be:	4603      	mov	r3, r0
 80058c0:	75bb      	strb	r3, [r7, #22]
		if (ret != HAL_OK) return ret;
 80058c2:	7dbb      	ldrb	r3, [r7, #22]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <mcp23017_init+0x64>
 80058c8:	7dbb      	ldrb	r3, [r7, #22]
 80058ca:	e006      	b.n	80058da <mcp23017_init+0x72>
	for (uint8_t i = 0; i < 2; i++) {
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
 80058ce:	3301      	adds	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d9ea      	bls.n	80058ae <mcp23017_init+0x46>
	}

	return HAL_OK;
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3718      	adds	r7, #24
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <mcp23017_portMode>:
 * @param pullups
 * @param inverted
 * @return
 */
HAL_StatusTypeDef mcp23017_portMode(MCP23017_HandleTypeDef *hdev, MCP23017Port_t port, MCP23017_PinModeIO_t pinmode, MCP23017_PinPolarity_t pinpolarity)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b084      	sub	sp, #16
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	4608      	mov	r0, r1
 80058ec:	4611      	mov	r1, r2
 80058ee:	461a      	mov	r2, r3
 80058f0:	4603      	mov	r3, r0
 80058f2:	70fb      	strb	r3, [r7, #3]
 80058f4:	460b      	mov	r3, r1
 80058f6:	70bb      	strb	r3, [r7, #2]
 80058f8:	4613      	mov	r3, r2
 80058fa:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	ret = mcp23017_writeRegister(hdev, MCP23017_IODIRA + port,
 80058fc:	78bb      	ldrb	r3, [r7, #2]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d002      	beq.n	8005908 <mcp23017_portMode+0x26>
			(pinmode == MCP23017_PIN_MODE_INPUT || pinmode == MCP23017_PIN_MODE_INPUT_PULLUP) ? 0xFF : 0x00);
 8005902:	78bb      	ldrb	r3, [r7, #2]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d101      	bne.n	800590c <mcp23017_portMode+0x2a>
	ret = mcp23017_writeRegister(hdev, MCP23017_IODIRA + port,
 8005908:	22ff      	movs	r2, #255	@ 0xff
 800590a:	e000      	b.n	800590e <mcp23017_portMode+0x2c>
 800590c:	2200      	movs	r2, #0
 800590e:	78fb      	ldrb	r3, [r7, #3]
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff ff44 	bl	80057a0 <mcp23017_writeRegister>
 8005918:	4603      	mov	r3, r0
 800591a:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 800591c:	7bfb      	ldrb	r3, [r7, #15]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <mcp23017_portMode+0x44>
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	e028      	b.n	8005978 <mcp23017_portMode+0x96>

	ret = mcp23017_writeRegister(hdev, MCP23017_GPPUA + port, (pinmode == MCP23017_PIN_MODE_INPUT_PULLUP ? 0xff : 0x00));
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	330c      	adds	r3, #12
 800592a:	b2d9      	uxtb	r1, r3
 800592c:	78bb      	ldrb	r3, [r7, #2]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <mcp23017_portMode+0x54>
 8005932:	23ff      	movs	r3, #255	@ 0xff
 8005934:	e000      	b.n	8005938 <mcp23017_portMode+0x56>
 8005936:	2300      	movs	r3, #0
 8005938:	461a      	mov	r2, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff ff30 	bl	80057a0 <mcp23017_writeRegister>
 8005940:	4603      	mov	r3, r0
 8005942:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <mcp23017_portMode+0x6c>
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	e014      	b.n	8005978 <mcp23017_portMode+0x96>

	ret = mcp23017_writeRegister(hdev, MCP23017_IPOLA + port, pinpolarity ? 0xff : 0x00);
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	3302      	adds	r3, #2
 8005952:	b2d9      	uxtb	r1, r3
 8005954:	787b      	ldrb	r3, [r7, #1]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <mcp23017_portMode+0x7c>
 800595a:	23ff      	movs	r3, #255	@ 0xff
 800595c:	e000      	b.n	8005960 <mcp23017_portMode+0x7e>
 800595e:	2300      	movs	r3, #0
 8005960:	461a      	mov	r2, r3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff ff1c 	bl	80057a0 <mcp23017_writeRegister>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <mcp23017_portMode+0x94>
 8005972:	7bfb      	ldrb	r3, [r7, #15]
 8005974:	e000      	b.n	8005978 <mcp23017_portMode+0x96>

	return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <mcp23017_pinMode>:
 * @param mode
 * @param inverted
 * @return
 */
HAL_StatusTypeDef mcp23017_pinMode(MCP23017_HandleTypeDef *hdev, uint8_t pin, MCP23017_PinModeIO_t mode, MCP23017_PinPolarity_t polarity)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af02      	add	r7, sp, #8
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	4608      	mov	r0, r1
 800598a:	4611      	mov	r1, r2
 800598c:	461a      	mov	r2, r3
 800598e:	4603      	mov	r3, r0
 8005990:	70fb      	strb	r3, [r7, #3]
 8005992:	460b      	mov	r3, r1
 8005994:	70bb      	strb	r3, [r7, #2]
 8005996:	4613      	mov	r3, r2
 8005998:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	/* if input we set IODIRA or IODIRB (depending on pin number) to 1 */
	ret = mcp23017_updateRegisterBit(hdev, pin, (mode == MCP23017_PIN_MODE_INPUT || mode == MCP23017_PIN_MODE_INPUT_PULLUP),
 800599a:	78bb      	ldrb	r3, [r7, #2]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d002      	beq.n	80059a6 <mcp23017_pinMode+0x26>
 80059a0:	78bb      	ldrb	r3, [r7, #2]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <mcp23017_pinMode+0x2a>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <mcp23017_pinMode+0x2c>
 80059aa:	2300      	movs	r3, #0
 80059ac:	b2da      	uxtb	r2, r3
 80059ae:	78f9      	ldrb	r1, [r7, #3]
 80059b0:	2301      	movs	r3, #1
 80059b2:	9300      	str	r3, [sp, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff ff11 	bl	80057de <mcp23017_updateRegisterBit>
 80059bc:	4603      	mov	r3, r0
 80059be:	73fb      	strb	r3, [r7, #15]
			MCP23017_IODIRA, MCP23017_IODIRB);
	if (ret != HAL_OK) return ret;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <mcp23017_pinMode+0x4a>
 80059c6:	7bfb      	ldrb	r3, [r7, #15]
 80059c8:	e02a      	b.n	8005a20 <mcp23017_pinMode+0xa0>

	/* we also need to control the polarity, will be ignored anyway if output, 1 if pol inverted */
	ret = mcp23017_updateRegisterBit(hdev, pin, polarity == MCP23017_PIN_POLARITY_INVERTED, MCP23017_IPOLA, MCP23017_IPOLB);
 80059ca:	787b      	ldrb	r3, [r7, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	bf0c      	ite	eq
 80059d0:	2301      	moveq	r3, #1
 80059d2:	2300      	movne	r3, #0
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	461a      	mov	r2, r3
 80059d8:	78f9      	ldrb	r1, [r7, #3]
 80059da:	2303      	movs	r3, #3
 80059dc:	9300      	str	r3, [sp, #0]
 80059de:	2302      	movs	r3, #2
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff fefc 	bl	80057de <mcp23017_updateRegisterBit>
 80059e6:	4603      	mov	r3, r0
 80059e8:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 80059ea:	7bfb      	ldrb	r3, [r7, #15]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d001      	beq.n	80059f4 <mcp23017_pinMode+0x74>
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	e015      	b.n	8005a20 <mcp23017_pinMode+0xa0>

	/* then we need to setup the pull up for that pin if MCP23017_PIN_MODE_INPUT_PULLUP was selected */
	ret = mcp23017_updateRegisterBit(hdev, pin, mode == MCP23017_PIN_MODE_INPUT_PULLUP, MCP23017_GPPUA, MCP23017_GPPUB);
 80059f4:	78bb      	ldrb	r3, [r7, #2]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	bf0c      	ite	eq
 80059fa:	2301      	moveq	r3, #1
 80059fc:	2300      	movne	r3, #0
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	461a      	mov	r2, r3
 8005a02:	78f9      	ldrb	r1, [r7, #3]
 8005a04:	230d      	movs	r3, #13
 8005a06:	9300      	str	r3, [sp, #0]
 8005a08:	230c      	movs	r3, #12
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff fee7 	bl	80057de <mcp23017_updateRegisterBit>
 8005a10:	4603      	mov	r3, r0
 8005a12:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <mcp23017_pinMode+0x9e>
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	e000      	b.n	8005a20 <mcp23017_pinMode+0xa0>

	return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <mcp23017_digitalWrite>:
 * @param pin
 * @param data
 * @return
 */
HAL_StatusTypeDef mcp23017_digitalWrite(MCP23017_HandleTypeDef *hdev, uint8_t pin, GPIO_PinState pinState)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
 8005a34:	4613      	mov	r3, r2
 8005a36:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	HAL_StatusTypeDef ret;
	uint8_t bit = mcp23017_bitForPin(pin);
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fe83 	bl	8005746 <mcp23017_bitForPin>
 8005a40:	4603      	mov	r3, r0
 8005a42:	73fb      	strb	r3, [r7, #15]

	// read the current GPIO output latches
	uint8_t regAddr = mcp23017_regForPin(pin, MCP23017_OLATA, MCP23017_OLATB);
 8005a44:	78fb      	ldrb	r3, [r7, #3]
 8005a46:	2215      	movs	r2, #21
 8005a48:	2114      	movs	r1, #20
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff fe66 	bl	800571c <mcp23017_regForPin>
 8005a50:	4603      	mov	r3, r0
 8005a52:	73bb      	strb	r3, [r7, #14]
	ret = mcp23017_readRegister(hdev, regAddr, &data);
 8005a54:	f107 020c 	add.w	r2, r7, #12
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff fe81 	bl	8005764 <mcp23017_readRegister>
 8005a62:	4603      	mov	r3, r0
 8005a64:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) return ret;
 8005a66:	7b7b      	ldrb	r3, [r7, #13]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <mcp23017_digitalWrite+0x48>
 8005a6c:	7b7b      	ldrb	r3, [r7, #13]
 8005a6e:	e026      	b.n	8005abe <mcp23017_digitalWrite+0x96>

	// set the pin and direction
	bitWrite(data, bit, pinState);
 8005a70:	78bb      	ldrb	r3, [r7, #2]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <mcp23017_digitalWrite+0x62>
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	2201      	movs	r2, #1
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	7b3b      	ldrb	r3, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	733b      	strb	r3, [r7, #12]
 8005a88:	e00a      	b.n	8005aa0 <mcp23017_digitalWrite+0x78>
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	43db      	mvns	r3, r3
 8005a96:	b2da      	uxtb	r2, r3
 8005a98:	7b3b      	ldrb	r3, [r7, #12]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	733b      	strb	r3, [r7, #12]

	// write the new GPIO
	regAddr = mcp23017_regForPin(pin, MCP23017_GPIOA, MCP23017_GPIOB);
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	2213      	movs	r2, #19
 8005aa4:	2112      	movs	r1, #18
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7ff fe38 	bl	800571c <mcp23017_regForPin>
 8005aac:	4603      	mov	r3, r0
 8005aae:	73bb      	strb	r3, [r7, #14]
	return (mcp23017_writeRegister(hdev, regAddr, data));
 8005ab0:	7b3a      	ldrb	r2, [r7, #12]
 8005ab2:	7bbb      	ldrb	r3, [r7, #14]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7ff fe72 	bl	80057a0 <mcp23017_writeRegister>
 8005abc:	4603      	mov	r3, r0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
	...

08005ac8 <Ex_gpio_init>:

MCP23017_HandleTypeDef hmcp;


void Ex_gpio_init(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
	mcp23017_init(&hmcp, &hi2c1, MCP23017_ADD_27);
 8005acc:	2227      	movs	r2, #39	@ 0x27
 8005ace:	4918      	ldr	r1, [pc, #96]	@ (8005b30 <Ex_gpio_init+0x68>)
 8005ad0:	4818      	ldr	r0, [pc, #96]	@ (8005b34 <Ex_gpio_init+0x6c>)
 8005ad2:	f7ff fec9 	bl	8005868 <mcp23017_init>
	mcp23017_portMode(&hmcp, MCP23017Port_A, MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2202      	movs	r2, #2
 8005ada:	2100      	movs	r1, #0
 8005adc:	4815      	ldr	r0, [pc, #84]	@ (8005b34 <Ex_gpio_init+0x6c>)
 8005ade:	f7ff ff00 	bl	80058e2 <mcp23017_portMode>
	mcp23017_portMode(&hmcp, MCP23017Port_B, MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	4812      	ldr	r0, [pc, #72]	@ (8005b34 <Ex_gpio_init+0x6c>)
 8005aea:	f7ff fefa 	bl	80058e2 <mcp23017_portMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPB0_Pin | MCP23017_GPB1_Pin | MCP23017_GPB2_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8005aee:	2300      	movs	r3, #0
 8005af0:	2202      	movs	r2, #2
 8005af2:	210b      	movs	r1, #11
 8005af4:	480f      	ldr	r0, [pc, #60]	@ (8005b34 <Ex_gpio_init+0x6c>)
 8005af6:	f7ff ff43 	bl	8005980 <mcp23017_pinMode>
    mcp23017_pinMode(&hmcp,MCP23017_GPB3_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8005afa:	2300      	movs	r3, #0
 8005afc:	2202      	movs	r2, #2
 8005afe:	210b      	movs	r1, #11
 8005b00:	480c      	ldr	r0, [pc, #48]	@ (8005b34 <Ex_gpio_init+0x6c>)
 8005b02:	f7ff ff3d 	bl	8005980 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA0_Pin | MCP23017_GPA1_Pin | MCP23017_GPA2_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8005b06:	2300      	movs	r3, #0
 8005b08:	2202      	movs	r2, #2
 8005b0a:	2103      	movs	r1, #3
 8005b0c:	4809      	ldr	r0, [pc, #36]	@ (8005b34 <Ex_gpio_init+0x6c>)
 8005b0e:	f7ff ff37 	bl	8005980 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA3_Pin | MCP23017_GPA4_Pin | MCP23017_GPA5_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8005b12:	2300      	movs	r3, #0
 8005b14:	2202      	movs	r2, #2
 8005b16:	2107      	movs	r1, #7
 8005b18:	4806      	ldr	r0, [pc, #24]	@ (8005b34 <Ex_gpio_init+0x6c>)
 8005b1a:	f7ff ff31 	bl	8005980 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA6_Pin | MCP23017_GPA7_Pin ,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2202      	movs	r2, #2
 8005b22:	2107      	movs	r1, #7
 8005b24:	4803      	ldr	r0, [pc, #12]	@ (8005b34 <Ex_gpio_init+0x6c>)
 8005b26:	f7ff ff2b 	bl	8005980 <mcp23017_pinMode>

}
 8005b2a:	bf00      	nop
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20002560 	.word	0x20002560
 8005b34:	200025b4 	.word	0x200025b4

08005b38 <Ex_gpio_write>:
void Ex_gpio_write(uint8_t pin, GPIO_PinState pinState)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	4603      	mov	r3, r0
 8005b40:	460a      	mov	r2, r1
 8005b42:	71fb      	strb	r3, [r7, #7]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71bb      	strb	r3, [r7, #6]
    mcp23017_digitalWrite(&hmcp,pin,pinState);
 8005b48:	79ba      	ldrb	r2, [r7, #6]
 8005b4a:	79fb      	ldrb	r3, [r7, #7]
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4803      	ldr	r0, [pc, #12]	@ (8005b5c <Ex_gpio_write+0x24>)
 8005b50:	f7ff ff6a 	bl	8005a28 <mcp23017_digitalWrite>

}
 8005b54:	bf00      	nop
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	200025b4 	.word	0x200025b4

08005b60 <Tempset_35_led>:

void Tempset_35_led(void)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA0_Pin,GPIO_PIN_SET);
 8005b64:	2101      	movs	r1, #1
 8005b66:	2000      	movs	r0, #0
 8005b68:	f7ff ffe6 	bl	8005b38 <Ex_gpio_write>
}
 8005b6c:	bf00      	nop
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <Tempset_40_led>:
void Tempset_40_led(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA1_Pin,GPIO_PIN_SET);
 8005b74:	2101      	movs	r1, #1
 8005b76:	2001      	movs	r0, #1
 8005b78:	f7ff ffde 	bl	8005b38 <Ex_gpio_write>
}
 8005b7c:	bf00      	nop
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <Tempset_43_led>:
void Tempset_43_led(void)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA2_Pin,GPIO_PIN_SET);
 8005b84:	2101      	movs	r1, #1
 8005b86:	2002      	movs	r0, #2
 8005b88:	f7ff ffd6 	bl	8005b38 <Ex_gpio_write>
}
 8005b8c:	bf00      	nop
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <Fanset_low_led>:


void Fanset_low_led()
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPA3_Pin,GPIO_PIN_SET);
 8005b94:	2101      	movs	r1, #1
 8005b96:	2003      	movs	r0, #3
 8005b98:	f7ff ffce 	bl	8005b38 <Ex_gpio_write>

}
 8005b9c:	bf00      	nop
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <Fanset_mid_led>:

void Fanset_mid_led()
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPA4_Pin,GPIO_PIN_SET);
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	2004      	movs	r0, #4
 8005ba8:	f7ff ffc6 	bl	8005b38 <Ex_gpio_write>

}
 8005bac:	bf00      	nop
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <Fanset_high_led>:

void Fanset_high_led()
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPA5_Pin,GPIO_PIN_SET);
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	2005      	movs	r0, #5
 8005bb8:	f7ff ffbe 	bl	8005b38 <Ex_gpio_write>

}
 8005bbc:	bf00      	nop
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <Tempset_amb_led>:
void Tempset_amb_led(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  Ex_gpio_write(MCP23017_GPA6_Pin,GPIO_PIN_SET);
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	2006      	movs	r0, #6
 8005bc8:	f7ff ffb6 	bl	8005b38 <Ex_gpio_write>

}
 8005bcc:	bf00      	nop
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <Standbyset_led>:
void Standbyset_led(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
   Ex_gpio_write(MCP23017_GPA7_Pin,GPIO_PIN_SET);
 8005bd4:	2101      	movs	r1, #1
 8005bd6:	2007      	movs	r0, #7
 8005bd8:	f7ff ffae 	bl	8005b38 <Ex_gpio_write>

}
 8005bdc:	bf00      	nop
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <TempReset_35_led>:
void TempReset_35_led(void)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA0_Pin,GPIO_PIN_RESET);
 8005be4:	2100      	movs	r1, #0
 8005be6:	2000      	movs	r0, #0
 8005be8:	f7ff ffa6 	bl	8005b38 <Ex_gpio_write>
}
 8005bec:	bf00      	nop
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <TempReset_40_led>:
void TempReset_40_led(void)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA1_Pin,GPIO_PIN_RESET);
 8005bf4:	2100      	movs	r1, #0
 8005bf6:	2001      	movs	r0, #1
 8005bf8:	f7ff ff9e 	bl	8005b38 <Ex_gpio_write>
}
 8005bfc:	bf00      	nop
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <TempReset_43_led>:
void TempReset_43_led(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA2_Pin,GPIO_PIN_RESET);
 8005c04:	2100      	movs	r1, #0
 8005c06:	2002      	movs	r0, #2
 8005c08:	f7ff ff96 	bl	8005b38 <Ex_gpio_write>
}
 8005c0c:	bf00      	nop
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <FanReset_low_led>:


void FanReset_low_led()
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPA3_Pin,GPIO_PIN_RESET);
 8005c14:	2100      	movs	r1, #0
 8005c16:	2003      	movs	r0, #3
 8005c18:	f7ff ff8e 	bl	8005b38 <Ex_gpio_write>

}
 8005c1c:	bf00      	nop
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <FanReset_mid_led>:

void FanReset_mid_led()
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPA4_Pin,GPIO_PIN_RESET);
 8005c24:	2100      	movs	r1, #0
 8005c26:	2004      	movs	r0, #4
 8005c28:	f7ff ff86 	bl	8005b38 <Ex_gpio_write>

}
 8005c2c:	bf00      	nop
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <FanReset_high_led>:

void FanReset_high_led()
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPA5_Pin,GPIO_PIN_RESET);
 8005c34:	2100      	movs	r1, #0
 8005c36:	2005      	movs	r0, #5
 8005c38:	f7ff ff7e 	bl	8005b38 <Ex_gpio_write>

}
 8005c3c:	bf00      	nop
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <TempReset_amb_led>:
void TempReset_amb_led(void)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	af00      	add	r7, sp, #0
  Ex_gpio_write(MCP23017_GPA6_Pin,GPIO_PIN_RESET);
 8005c44:	2100      	movs	r1, #0
 8005c46:	2006      	movs	r0, #6
 8005c48:	f7ff ff76 	bl	8005b38 <Ex_gpio_write>

}
 8005c4c:	bf00      	nop
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <StandbyReset_led>:
void StandbyReset_led(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
Ex_gpio_write(MCP23017_GPA7_Pin,GPIO_PIN_RESET);
 8005c54:	2100      	movs	r1, #0
 8005c56:	2007      	movs	r0, #7
 8005c58:	f7ff ff6e 	bl	8005b38 <Ex_gpio_write>

}
 8005c5c:	bf00      	nop
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <led_states>:

uint8_t led_states(led_state state)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	4603      	mov	r3, r0
 8005c68:	71fb      	strb	r3, [r7, #7]
  uint8_t led_status = state;
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	73fb      	strb	r3, [r7, #15]

  switch(led_status)
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d028      	beq.n	8005cc6 <led_states+0x66>
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	dc27      	bgt.n	8005cc8 <led_states+0x68>
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d002      	beq.n	8005c82 <led_states+0x22>
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d011      	beq.n	8005ca4 <led_states+0x44>
 8005c80:	e022      	b.n	8005cc8 <led_states+0x68>
  {
      case LED_OFF:
    	  TempReset_35_led();
 8005c82:	f7ff ffad 	bl	8005be0 <TempReset_35_led>
    	  TempReset_40_led();
 8005c86:	f7ff ffb3 	bl	8005bf0 <TempReset_40_led>
    	  TempReset_43_led();
 8005c8a:	f7ff ffb9 	bl	8005c00 <TempReset_43_led>

    	  FanReset_low_led();
 8005c8e:	f7ff ffbf 	bl	8005c10 <FanReset_low_led>
    	  FanReset_mid_led();
 8005c92:	f7ff ffc5 	bl	8005c20 <FanReset_mid_led>
    	  FanReset_high_led();
 8005c96:	f7ff ffcb 	bl	8005c30 <FanReset_high_led>

          TempReset_amb_led();
 8005c9a:	f7ff ffd1 	bl	8005c40 <TempReset_amb_led>
    	  StandbyReset_led();
 8005c9e:	f7ff ffd7 	bl	8005c50 <StandbyReset_led>

	      break;
 8005ca2:	e011      	b.n	8005cc8 <led_states+0x68>
      case LED_ON:
    	  Tempset_35_led();
 8005ca4:	f7ff ff5c 	bl	8005b60 <Tempset_35_led>
    	  Tempset_40_led();
 8005ca8:	f7ff ff62 	bl	8005b70 <Tempset_40_led>
    	  Tempset_43_led();
 8005cac:	f7ff ff68 	bl	8005b80 <Tempset_43_led>

    	  Fanset_low_led();
 8005cb0:	f7ff ff6e 	bl	8005b90 <Fanset_low_led>
    	  Fanset_mid_led();
 8005cb4:	f7ff ff74 	bl	8005ba0 <Fanset_mid_led>
    	  Fanset_high_led();
 8005cb8:	f7ff ff7a 	bl	8005bb0 <Fanset_high_led>



    	  Tempset_amb_led();
 8005cbc:	f7ff ff80 	bl	8005bc0 <Tempset_amb_led>
    	  Standbyset_led();
 8005cc0:	f7ff ff86 	bl	8005bd0 <Standbyset_led>

      	  break;
 8005cc4:	e000      	b.n	8005cc8 <led_states+0x68>
      case LED_BLINK:
           break;
 8005cc6:	bf00      	nop

  }
  return LED_OK;
 8005cc8:	2307      	movs	r3, #7
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <USART_ReceiveData>:
DEVInfo devInfo;

char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]

  assert_param(IS_USART_ALL_PERIPH(USARTx));

  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce4:	b29b      	uxth	r3, r3
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	807b      	strh	r3, [r7, #2]

  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  USARTx->DR = (Data & (uint16_t)0x01FF);
 8005cfe:	887b      	ldrh	r3, [r7, #2]
 8005d00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	605a      	str	r2, [r3, #4]
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <usart_setup>:

uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8005d1c:	4b15      	ldr	r3, [pc, #84]	@ (8005d74 <usart_setup+0x60>)
 8005d1e:	4a16      	ldr	r2, [pc, #88]	@ (8005d78 <usart_setup+0x64>)
 8005d20:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8005d22:	4a14      	ldr	r2, [pc, #80]	@ (8005d74 <usart_setup+0x60>)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8005d28:	4b12      	ldr	r3, [pc, #72]	@ (8005d74 <usart_setup+0x60>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8005d2e:	4b11      	ldr	r3, [pc, #68]	@ (8005d74 <usart_setup+0x60>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8005d34:	4b0f      	ldr	r3, [pc, #60]	@ (8005d74 <usart_setup+0x60>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8005d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005d74 <usart_setup+0x60>)
 8005d3c:	220c      	movs	r2, #12
 8005d3e:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d40:	4b0c      	ldr	r3, [pc, #48]	@ (8005d74 <usart_setup+0x60>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d46:	4b0b      	ldr	r3, [pc, #44]	@ (8005d74 <usart_setup+0x60>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 8005d4c:	4809      	ldr	r0, [pc, #36]	@ (8005d74 <usart_setup+0x60>)
 8005d4e:	f7fe fa45 	bl	80041dc <HAL_HalfDuplex_Init>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d000      	beq.n	8005d5a <usart_setup+0x46>
	{

		__asm__("NOP");
 8005d58:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 8005d5a:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <usart_setup+0x60>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	4b04      	ldr	r3, [pc, #16]	@ (8005d74 <usart_setup+0x60>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f042 0220 	orr.w	r2, r2, #32
 8005d68:	60da      	str	r2, [r3, #12]
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	200004a8 	.word	0x200004a8
 8005d78:	40011000 	.word	0x40011000

08005d7c <owInit>:

void owInit(OneWire *ow) {
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8005d8c:	e015      	b.n	8005dba <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	4413      	add	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
    k=0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 8005d9c:	e007      	b.n	8005dae <owInit+0x32>
    r[k] = 0;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	3301      	adds	r3, #1
 8005dac:	613b      	str	r3, [r7, #16]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b07      	cmp	r3, #7
 8005db2:	ddf4      	ble.n	8005d9e <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	3301      	adds	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dde6      	ble.n	8005d8e <owInit+0x12>
  }
  k=0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8005dc4:	e008      	b.n	8005dd8 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4413      	add	r3, r2
 8005dcc:	330c      	adds	r3, #12
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	613b      	str	r3, [r7, #16]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	2b07      	cmp	r3, #7
 8005ddc:	ddf3      	ble.n	8005dc6 <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2240      	movs	r2, #64	@ 0x40
 8005de2:	609a      	str	r2, [r3, #8]

}
 8005de4:	bf00      	nop
 8005de6:	371c      	adds	r7, #28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <owReadHandler>:

void owReadHandler() {
 8005df0:	b590      	push	{r4, r7, lr}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 8005df6:	f000 f850 	bl	8005e9a <getUsartIndex>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8005dfe:	4b18      	ldr	r3, [pc, #96]	@ (8005e60 <owReadHandler+0x70>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d025      	beq.n	8005e56 <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8005e0a:	4b15      	ldr	r3, [pc, #84]	@ (8005e60 <owReadHandler+0x70>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d01f      	beq.n	8005e56 <owReadHandler+0x66>

		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 8005e16:	bf00      	nop
 8005e18:	4b11      	ldr	r3, [pc, #68]	@ (8005e60 <owReadHandler+0x70>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f9      	beq.n	8005e18 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);
 8005e24:	79fc      	ldrb	r4, [r7, #7]
 8005e26:	480e      	ldr	r0, [pc, #56]	@ (8005e60 <owReadHandler+0x70>)
 8005e28:	f7ff ff53 	bl	8005cd2 <USART_ReceiveData>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	461a      	mov	r2, r3
 8005e30:	4b0c      	ldr	r3, [pc, #48]	@ (8005e64 <owReadHandler+0x74>)
 8005e32:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);
 8005e36:	79fb      	ldrb	r3, [r7, #7]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	b25b      	sxtb	r3, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	b25a      	sxtb	r2, r3
 8005e44:	4b08      	ldr	r3, [pc, #32]	@ (8005e68 <owReadHandler+0x78>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	b25b      	sxtb	r3, r3
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	b25b      	sxtb	r3, r3
 8005e50:	b2da      	uxtb	r2, r3
 8005e52:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <owReadHandler+0x78>)
 8005e54:	701a      	strb	r2, [r3, #0]
  }
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd90      	pop	{r4, r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	40011000 	.word	0x40011000
 8005e64:	200025c0 	.word	0x200025c0
 8005e68:	200025bc 	.word	0x200025bc

08005e6c <owResetCmd>:

  uint16_t owResetCmd() {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
	uint16_t owPresence;

	usart_setup(9600);
 8005e72:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8005e76:	f7ff ff4d 	bl	8005d14 <usart_setup>

  owSend(0xF0);
 8005e7a:	20f0      	movs	r0, #240	@ 0xf0
 8005e7c:	f000 f816 	bl	8005eac <owSend>
  owPresence = owEchoRead();
 8005e80:	f000 f854 	bl	8005f2c <owEchoRead>
 8005e84:	4603      	mov	r3, r0
 8005e86:	80fb      	strh	r3, [r7, #6]
	usart_setup(115200);
 8005e88:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8005e8c:	f7ff ff42 	bl	8005d14 <usart_setup>
  return owPresence;
 8005e90:	88fb      	ldrh	r3, [r7, #6]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <getUsartIndex>:

uint8_t getUsartIndex() {
 8005e9a:	b480      	push	{r7}
 8005e9c:	af00      	add	r7, sp, #0

	return 0;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr
	...

08005eac <owSend>:

void owSend(uint16_t data) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());
 8005eb6:	f7ff fff0 	bl	8005e9a <getUsartIndex>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	4093      	lsls	r3, r2
 8005ec2:	b25a      	sxtb	r2, r3
 8005ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <owSend+0x50>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	b25b      	sxtb	r3, r3
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	b25b      	sxtb	r3, r3
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <owSend+0x50>)
 8005ed4:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4809      	ldr	r0, [pc, #36]	@ (8005f00 <owSend+0x54>)
 8005edc:	f7ff ff09 	bl	8005cf2 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);
 8005ee0:	bf00      	nop
 8005ee2:	4b08      	ldr	r3, [pc, #32]	@ (8005f04 <owSend+0x58>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eec:	2b40      	cmp	r3, #64	@ 0x40
 8005eee:	d1f8      	bne.n	8005ee2 <owSend+0x36>
}
 8005ef0:	bf00      	nop
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	200025bc 	.word	0x200025bc
 8005f00:	40011000 	.word	0x40011000
 8005f04:	200004a8 	.word	0x200004a8

08005f08 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0;
 8005f12:	88fb      	ldrh	r3, [r7, #6]
 8005f14:	2bff      	cmp	r3, #255	@ 0xff
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
	...

08005f2c <owEchoRead>:

uint16_t owEchoRead() {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();
 8005f32:	f7ff ffb2 	bl	8005e9a <getUsartIndex>
 8005f36:	4603      	mov	r3, r0
 8005f38:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8005f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f3e:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);
 8005f40:	bf00      	nop
 8005f42:	4b0c      	ldr	r3, [pc, #48]	@ (8005f74 <owEchoRead+0x48>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	797b      	ldrb	r3, [r7, #5]
 8005f4c:	fa42 f303 	asr.w	r3, r2, r3
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <owEchoRead+0x36>
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	1e5a      	subs	r2, r3, #1
 8005f5c:	80fa      	strh	r2, [r7, #6]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1ef      	bne.n	8005f42 <owEchoRead+0x16>
  return rc_buffer[i];
 8005f62:	797b      	ldrb	r3, [r7, #5]
 8005f64:	4a04      	ldr	r2, [pc, #16]	@ (8005f78 <owEchoRead+0x4c>)
 8005f66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6a:	b29b      	uxth	r3, r3
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3708      	adds	r7, #8
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	200025bc 	.word	0x200025bc
 8005f78:	200025c0 	.word	0x200025c0

08005f7c <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	6039      	str	r1, [r7, #0]
 8005f86:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 8005f88:	2300      	movs	r3, #0
 8005f8a:	73fb      	strb	r3, [r7, #15]
 8005f8c:	e014      	b.n	8005fb8 <byteToBits+0x3c>
    if (ow_byte & 0x01) {
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <byteToBits+0x24>
      *bits = WIRE_1;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	22ff      	movs	r2, #255	@ 0xff
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e002      	b.n	8005fa6 <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1;
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b07      	cmp	r3, #7
 8005fbc:	d9e7      	bls.n	8005f8e <byteToBits+0x12>
  }
  return bits;
 8005fbe:	683b      	ldr	r3, [r7, #0]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <owSendByte>:

void owSendByte(uint8_t d) {
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);
 8005fd6:	f107 020c 	add.w	r2, r7, #12
 8005fda:	79fb      	ldrb	r3, [r7, #7]
 8005fdc:	4611      	mov	r1, r2
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff ffcc 	bl	8005f7c <byteToBits>
  for (i = 0; i < 8; ++i) {
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	e00a      	b.n	8006000 <owSendByte+0x34>
    owSend(data[i]);
 8005fea:	f107 020c 	add.w	r2, r7, #12
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7ff ff59 	bl	8005eac <owSend>
  for (i = 0; i < 8; ++i) {
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b07      	cmp	r3, #7
 8006004:	ddf1      	ble.n	8005fea <owSendByte+0x1e>
  }
}
 8006006:	bf00      	nop
 8006008:	bf00      	nop
 800600a:	3718      	adds	r7, #24
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <owCRC>:
    bits++;
  }
  return target_byte;
}

uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 800601c:	2300      	movs	r3, #0
 800601e:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8006020:	2300      	movs	r3, #0
 8006022:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8006024:	7b3b      	ldrb	r3, [r7, #12]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4413      	add	r3, r2
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {
 800602e:	2300      	movs	r3, #0
 8006030:	73fb      	strb	r3, [r7, #15]
 8006032:	e018      	b.n	8006066 <owCRC+0x56>
      fb = crc ^ dat;
 8006034:	7b7a      	ldrb	r2, [r7, #13]
 8006036:	7bbb      	ldrb	r3, [r7, #14]
 8006038:	4053      	eors	r3, r2
 800603a:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 800603c:	7afb      	ldrb	r3, [r7, #11]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 8006044:	7b7b      	ldrb	r3, [r7, #13]
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 800604a:	7bbb      	ldrb	r3, [r7, #14]
 800604c:	085b      	lsrs	r3, r3, #1
 800604e:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c;
 8006050:	7afb      	ldrb	r3, [r7, #11]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d104      	bne.n	8006060 <owCRC+0x50>
 8006056:	7b7b      	ldrb	r3, [r7, #13]
 8006058:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 800605c:	43db      	mvns	r3, r3
 800605e:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	3301      	adds	r3, #1
 8006064:	73fb      	strb	r3, [r7, #15]
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	2b07      	cmp	r3, #7
 800606a:	d9e3      	bls.n	8006034 <owCRC+0x24>
    }
    st_byt++;
 800606c:	7b3b      	ldrb	r3, [r7, #12]
 800606e:	3301      	adds	r3, #1
 8006070:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len);
 8006072:	7b3a      	ldrb	r2, [r7, #12]
 8006074:	78fb      	ldrb	r3, [r7, #3]
 8006076:	429a      	cmp	r2, r3
 8006078:	d3d4      	bcc.n	8006024 <owCRC+0x14>
  return crc;
 800607a:	7b7b      	ldrb	r3, [r7, #13]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);
 8006090:	2107      	movs	r1, #7
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff ffbc 	bl	8006010 <owCRC>
 8006098:	4603      	mov	r3, r0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3708      	adds	r7, #8
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <hasNextRom>:

int hasNextRom(OneWire *ow, uint8_t *ROM) {
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b088      	sub	sp, #32
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 80060ac:	2300      	movs	r3, #0
 80060ae:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 80060b0:	f04f 33ff 	mov.w	r3, #4294967295
 80060b4:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) {
 80060ba:	f7ff fed7 	bl	8005e6c <owResetCmd>
 80060be:	4603      	mov	r3, r0
 80060c0:	2bf0      	cmp	r3, #240	@ 0xf0
 80060c2:	d101      	bne.n	80060c8 <hasNextRom+0x26>
    return 0;
 80060c4:	2300      	movs	r3, #0
 80060c6:	e097      	b.n	80061f8 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);
 80060c8:	20f0      	movs	r0, #240	@ 0xf0
 80060ca:	f7ff ff7f 	bl	8005fcc <owSendByte>
  do {
		uint8_t answerBit =0;
 80060ce:	2300      	movs	r3, #0
 80060d0:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 80060d2:	7ffb      	ldrb	r3, [r7, #31]
 80060d4:	08db      	lsrs	r3, r3, #3
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	4413      	add	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ);
 80060e6:	20ff      	movs	r0, #255	@ 0xff
 80060e8:	f7ff fee0 	bl	8005eac <owSend>
    cB = owReadSlot(owEchoRead());
 80060ec:	f7ff ff1e 	bl	8005f2c <owEchoRead>
 80060f0:	4603      	mov	r3, r0
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7ff ff08 	bl	8005f08 <owReadSlot>
 80060f8:	4603      	mov	r3, r0
 80060fa:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ);
 80060fc:	20ff      	movs	r0, #255	@ 0xff
 80060fe:	f7ff fed5 	bl	8005eac <owSend>
    cmp_cB = owReadSlot(owEchoRead());
 8006102:	f7ff ff13 	bl	8005f2c <owEchoRead>
 8006106:	4603      	mov	r3, r0
 8006108:	4618      	mov	r0, r3
 800610a:	f7ff fefd 	bl	8005f08 <owReadSlot>
 800610e:	4603      	mov	r3, r0
 8006110:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)
 8006112:	7afa      	ldrb	r2, [r7, #11]
 8006114:	7abb      	ldrb	r3, [r7, #10]
 8006116:	429a      	cmp	r2, r3
 8006118:	d105      	bne.n	8006126 <hasNextRom+0x84>
 800611a:	7afb      	ldrb	r3, [r7, #11]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d102      	bne.n	8006126 <hasNextRom+0x84>
      return -1;
 8006120:	f04f 33ff 	mov.w	r3, #4294967295
 8006124:	e068      	b.n	80061f8 <hasNextRom+0x156>
    if (cB != cmp_cB) {
 8006126:	7afa      	ldrb	r2, [r7, #11]
 8006128:	7abb      	ldrb	r3, [r7, #10]
 800612a:	429a      	cmp	r2, r3
 800612c:	d002      	beq.n	8006134 <hasNextRom+0x92>
      searchDirection = cB;
 800612e:	7afb      	ldrb	r3, [r7, #11]
 8006130:	75bb      	strb	r3, [r7, #22]
 8006132:	e023      	b.n	800617c <hasNextRom+0xda>
			} else {
				if (ui32BitNumber == ow->lastDiscrepancy)
 8006134:	7ffa      	ldrb	r2, [r7, #31]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	429a      	cmp	r2, r3
 800613c:	d102      	bne.n	8006144 <hasNextRom+0xa2>
        searchDirection = 1;
 800613e:	2301      	movs	r3, #1
 8006140:	75bb      	strb	r3, [r7, #22]
 8006142:	e01b      	b.n	800617c <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {
 8006144:	7ffa      	ldrb	r2, [r7, #31]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	429a      	cmp	r2, r3
 800614c:	dd02      	ble.n	8006154 <hasNextRom+0xb2>
          searchDirection = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	75bb      	strb	r3, [r7, #22]
 8006152:	e00e      	b.n	8006172 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4413      	add	r3, r2
 800615a:	330c      	adds	r3, #12
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	7ffb      	ldrb	r3, [r7, #31]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	fa42 f303 	asr.w	r3, r2, r3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8006172:	7dbb      	ldrb	r3, [r7, #22]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <hasNextRom+0xda>
          zeroFork = ui32BitNumber;
 8006178:	7ffb      	ldrb	r3, [r7, #31]
 800617a:	61bb      	str	r3, [r7, #24]
      }
    }

    if (searchDirection)
 800617c:	7dbb      	ldrb	r3, [r7, #22]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00e      	beq.n	80061a0 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b25a      	sxtb	r2, r3
 8006188:	7ffb      	ldrb	r3, [r7, #31]
 800618a:	f003 0307 	and.w	r3, r3, #7
 800618e:	2101      	movs	r1, #1
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	b25b      	sxtb	r3, r3
 8006196:	4313      	orrs	r3, r2
 8006198:	b25b      	sxtb	r3, r3
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);
 80061a0:	7dbb      	ldrb	r3, [r7, #22]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <hasNextRom+0x108>
 80061a6:	2300      	movs	r3, #0
 80061a8:	e000      	b.n	80061ac <hasNextRom+0x10a>
 80061aa:	23ff      	movs	r3, #255	@ 0xff
 80061ac:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);
 80061ae:	7d7b      	ldrb	r3, [r7, #21]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fe7a 	bl	8005eac <owSend>
    ui32BitNumber++;
 80061b8:	7ffb      	ldrb	r3, [r7, #31]
 80061ba:	3301      	adds	r3, #1
 80061bc:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);
 80061be:	7ffb      	ldrb	r3, [r7, #31]
 80061c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80061c2:	d984      	bls.n	80060ce <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69ba      	ldr	r2, [r7, #24]
 80061c8:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 80061ca:	e00b      	b.n	80061e4 <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	441a      	add	r2, r3
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	7811      	ldrb	r1, [r2, #0]
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	4413      	add	r3, r2
 80061da:	460a      	mov	r2, r1
 80061dc:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	3301      	adds	r3, #1
 80061e2:	75fb      	strb	r3, [r7, #23]
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	2b06      	cmp	r3, #6
 80061e8:	d9f0      	bls.n	80061cc <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	bfcc      	ite	gt
 80061f2:	2301      	movgt	r3, #1
 80061f4:	2300      	movle	r3, #0
 80061f6:	b2db      	uxtb	r3, r3
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <owSearchCmd>:

int owSearchCmd(OneWire *ow) {
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8006208:	2300      	movs	r3, #0
 800620a:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f7ff fdb5 	bl	8005d7c <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device]));
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	4413      	add	r3, r2
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff ff40 	bl	80060a2 <hasNextRom>
 8006222:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	da02      	bge.n	8006230 <owSearchCmd+0x30>
      return -1;
 800622a:	f04f 33ff 	mov.w	r3, #4294967295
 800622e:	e009      	b.n	8006244 <owSearchCmd+0x44>
    device++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3301      	adds	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <owSearchCmd+0x42>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	dde7      	ble.n	8006212 <owSearchCmd+0x12>
		return device;
 8006242:	68fb      	ldr	r3, [r7, #12]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {
  owResetCmd();
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
	int i = 0;
 8006254:	2300      	movs	r3, #0
 8006256:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 8006258:	f7ff fe08 	bl	8005e6c <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);
 800625c:	2055      	movs	r0, #85	@ 0x55
 800625e:	f7ff feb5 	bl	8005fcc <owSendByte>
  for (; i < 8; i++)
 8006262:	e009      	b.n	8006278 <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	4413      	add	r3, r2
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff fead 	bl	8005fcc <owSendByte>
  for (; i < 8; i++)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3301      	adds	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b07      	cmp	r3, #7
 800627c:	ddf2      	ble.n	8006264 <owMatchRomCmd+0x18>
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	3710      	adds	r7, #16
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);
 8006292:	6838      	ldr	r0, [r7, #0]
 8006294:	f7ff ffda 	bl	800624c <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);
 8006298:	2044      	movs	r0, #68	@ 0x44
 800629a:	f7ff fe97 	bl	8005fcc <owSendByte>
}
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <owReadScratchpadCmd>:

uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 80062b2:	2300      	movs	r3, #0
 80062b4:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b10      	cmp	r3, #16
 80062bc:	d001      	beq.n	80062c2 <owReadScratchpadCmd+0x1c>
 80062be:	2b28      	cmp	r3, #40	@ 0x28
 80062c0:	d109      	bne.n	80062d6 <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;
 80062c2:	2348      	movs	r3, #72	@ 0x48
 80062c4:	82bb      	strh	r3, [r7, #20]
      break;
 80062c6:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 80062c8:	68b8      	ldr	r0, [r7, #8]
 80062ca:	f7ff ffbf 	bl	800624c <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);
 80062ce:	20be      	movs	r0, #190	@ 0xbe
 80062d0:	f7ff fe7c 	bl	8005fcc <owSendByte>
  while (b < p) {
 80062d4:	e048      	b.n	8006368 <owReadScratchpadCmd+0xc2>
      return data;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	e04b      	b.n	8006372 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8));
 80062da:	8abb      	ldrh	r3, [r7, #20]
 80062dc:	3b08      	subs	r3, #8
 80062de:	2b00      	cmp	r3, #0
 80062e0:	da00      	bge.n	80062e4 <owReadScratchpadCmd+0x3e>
 80062e2:	3307      	adds	r3, #7
 80062e4:	10db      	asrs	r3, r3, #3
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	8afb      	ldrh	r3, [r7, #22]
 80062ea:	08db      	lsrs	r3, r3, #3
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	74fb      	strb	r3, [r7, #19]
    uint8_t bt;
		owSend(OW_READ);
 80062f4:	20ff      	movs	r0, #255	@ 0xff
 80062f6:	f7ff fdd9 	bl	8005eac <owSend>
    bt = owReadSlot(owEchoRead());
 80062fa:	f7ff fe17 	bl	8005f2c <owEchoRead>
 80062fe:	4603      	mov	r3, r0
 8006300:	4618      	mov	r0, r3
 8006302:	f7ff fe01 	bl	8005f08 <owReadSlot>
 8006306:	4603      	mov	r3, r0
 8006308:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 800630a:	7cbb      	ldrb	r3, [r7, #18]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d113      	bne.n	8006338 <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;
 8006310:	7cfb      	ldrb	r3, [r7, #19]
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4413      	add	r3, r2
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	b25a      	sxtb	r2, r3
 800631a:	8afb      	ldrh	r3, [r7, #22]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	2101      	movs	r1, #1
 8006322:	fa01 f303 	lsl.w	r3, r1, r3
 8006326:	b25b      	sxtb	r3, r3
 8006328:	4313      	orrs	r3, r2
 800632a:	b259      	sxtb	r1, r3
 800632c:	7cfb      	ldrb	r3, [r7, #19]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	4413      	add	r3, r2
 8006332:	b2ca      	uxtb	r2, r1
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	e014      	b.n	8006362 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);
 8006338:	7cfb      	ldrb	r3, [r7, #19]
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4413      	add	r3, r2
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	b25a      	sxtb	r2, r3
 8006342:	8afb      	ldrh	r3, [r7, #22]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	2101      	movs	r1, #1
 800634a:	fa01 f303 	lsl.w	r3, r1, r3
 800634e:	b25b      	sxtb	r3, r3
 8006350:	43db      	mvns	r3, r3
 8006352:	b25b      	sxtb	r3, r3
 8006354:	4013      	ands	r3, r2
 8006356:	b259      	sxtb	r1, r3
 8006358:	7cfb      	ldrb	r3, [r7, #19]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	4413      	add	r3, r2
 800635e:	b2ca      	uxtb	r2, r1
 8006360:	701a      	strb	r2, [r3, #0]
    b++;
 8006362:	8afb      	ldrh	r3, [r7, #22]
 8006364:	3301      	adds	r3, #1
 8006366:	82fb      	strh	r3, [r7, #22]
  while (b < p) {
 8006368:	8afa      	ldrh	r2, [r7, #22]
 800636a:	8abb      	ldrh	r3, [r7, #20]
 800636c:	429a      	cmp	r2, r3
 800636e:	d3b4      	bcc.n	80062da <owReadScratchpadCmd+0x34>
  }
  return data;
 8006370:	687b      	ldr	r3, [r7, #4]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <readTemperature>:
  owSendByte(th);
  owSendByte(tl);
  owSendByte(conf);
}

Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 800637a:	b580      	push	{r7, lr}
 800637c:	b08c      	sub	sp, #48	@ 0x30
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	4613      	mov	r3, r2
 8006386:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 8006388:	2300      	movs	r3, #0
 800638a:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 800638e:	2300      	movs	r3, #0
 8006390:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sp = (Scratchpad_DS18B20 *) &pad;
 8006394:	f107 0314 	add.w	r3, r7, #20
 8006398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 800639a:	f107 0314 	add.w	r3, r7, #20
 800639e:	62bb      	str	r3, [r7, #40]	@ 0x28
  switch (rom->family) {
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	2b10      	cmp	r3, #16
 80063a6:	d022      	beq.n	80063ee <readTemperature+0x74>
 80063a8:	2b28      	cmp	r3, #40	@ 0x28
 80063aa:	d13a      	bne.n	8006422 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);
 80063ac:	f107 0314 	add.w	r3, r7, #20
 80063b0:	461a      	mov	r2, r3
 80063b2:	68b9      	ldr	r1, [r7, #8]
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff ff76 	bl	80062a6 <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);
 80063ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063bc:	79db      	ldrb	r3, [r3, #7]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	b25a      	sxtb	r2, r3
 80063c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c4:	7a1b      	ldrb	r3, [r3, #8]
 80063c6:	091b      	lsrs	r3, r3, #4
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	b25b      	sxtb	r3, r3
 80063cc:	4313      	orrs	r3, r2
 80063ce:	b25b      	sxtb	r3, r3
 80063d0:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	7a1b      	ldrb	r3, [r3, #8]
 80063d8:	f003 020f 	and.w	r2, r3, #15
 80063dc:	4613      	mov	r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	111b      	asrs	r3, r3, #4
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 80063ec:	e01c      	b.n	8006428 <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);
 80063ee:	f107 0314 	add.w	r3, r7, #20
 80063f2:	461a      	mov	r2, r3
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f7ff ff55 	bl	80062a6 <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 80063fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fe:	7a1b      	ldrb	r3, [r3, #8]
 8006400:	085b      	lsrs	r3, r3, #1
 8006402:	b2db      	uxtb	r3, r3
 8006404:	b25b      	sxtb	r3, r3
 8006406:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 800640a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640c:	7a1b      	ldrb	r3, [r3, #8]
 800640e:	f003 0301 	and.w	r3, r3, #1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	461a      	mov	r2, r3
 8006416:	0092      	lsls	r2, r2, #2
 8006418:	4413      	add	r3, r2
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 8006420:	e002      	b.n	8006428 <readTemperature+0xae>
    default:
      return t;
 8006422:	8c3b      	ldrh	r3, [r7, #32]
 8006424:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006426:	e008      	b.n	800643a <readTemperature+0xc0>
  }
  if (reSense) {
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d003      	beq.n	8006436 <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f7ff ff29 	bl	8006288 <owConvertTemperatureCmd>
  }
  return t;
 8006436:	8c3b      	ldrh	r3, [r7, #32]
 8006438:	84bb      	strh	r3, [r7, #36]	@ 0x24
}
 800643a:	2300      	movs	r3, #0
 800643c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8006440:	f362 0307 	bfi	r3, r2, #0, #8
 8006444:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8006448:	f362 230f 	bfi	r3, r2, #8, #8
 800644c:	4618      	mov	r0, r3
 800644e:	3730      	adds	r7, #48	@ 0x30
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <get_ROMid>:
void owRecallE2Cmd(OneWire *ow, RomCode *rom) {
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}

int get_ROMid (void){
 8006454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006456:	b089      	sub	sp, #36	@ 0x24
 8006458:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {
 800645a:	f7ff fd07 	bl	8005e6c <owResetCmd>
 800645e:	4603      	mov	r3, r0
 8006460:	2bf0      	cmp	r3, #240	@ 0xf0
 8006462:	d079      	beq.n	8006558 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);
 8006464:	484e      	ldr	r0, [pc, #312]	@ (80065a0 <get_ROMid+0x14c>)
 8006466:	f7ff fecb 	bl	8006200 <owSearchCmd>
 800646a:	4603      	mov	r3, r0
 800646c:	b2da      	uxtb	r2, r3
 800646e:	4b4d      	ldr	r3, [pc, #308]	@ (80065a4 <get_ROMid+0x150>)
 8006470:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 8006472:	4b4c      	ldr	r3, [pc, #304]	@ (80065a4 <get_ROMid+0x150>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d113      	bne.n	80064a2 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 800647a:	4b4b      	ldr	r3, [pc, #300]	@ (80065a8 <get_ROMid+0x154>)
 800647c:	4a4b      	ldr	r2, [pc, #300]	@ (80065ac <get_ROMid+0x158>)
 800647e:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)
 8006480:	4b4b      	ldr	r3, [pc, #300]	@ (80065b0 <get_ROMid+0x15c>)
 8006482:	2200      	movs	r2, #0
 8006484:	601a      	str	r2, [r3, #0]
 8006486:	e005      	b.n	8006494 <get_ROMid+0x40>
					__asm__("nop");
 8006488:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)
 800648a:	4b49      	ldr	r3, [pc, #292]	@ (80065b0 <get_ROMid+0x15c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3301      	adds	r3, #1
 8006490:	4a47      	ldr	r2, [pc, #284]	@ (80065b0 <get_ROMid+0x15c>)
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	4b46      	ldr	r3, [pc, #280]	@ (80065b0 <get_ROMid+0x15c>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	4b43      	ldr	r3, [pc, #268]	@ (80065a8 <get_ROMid+0x154>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	429a      	cmp	r2, r3
 800649e:	d3f3      	bcc.n	8006488 <get_ROMid+0x34>
				pDelay = 1000000;
 80064a0:	e7eb      	b.n	800647a <get_ROMid+0x26>
			}

		}
		i = 0;
 80064a2:	4b43      	ldr	r3, [pc, #268]	@ (80065b0 <get_ROMid+0x15c>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {
 80064a8:	e04f      	b.n	800654a <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 80064aa:	4b41      	ldr	r3, [pc, #260]	@ (80065b0 <get_ROMid+0x15c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	4a3b      	ldr	r2, [pc, #236]	@ (80065a0 <get_ROMid+0x14c>)
 80064b2:	4413      	add	r3, r2
 80064b4:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff fde6 	bl	8006088 <owCRC8>
 80064bc:	4603      	mov	r3, r0
 80064be:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	79db      	ldrb	r3, [r3, #7]
 80064c4:	78fa      	ldrb	r2, [r7, #3]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d101      	bne.n	80064ce <get_ROMid+0x7a>
 80064ca:	4b3a      	ldr	r3, [pc, #232]	@ (80065b4 <get_ROMid+0x160>)
 80064cc:	e000      	b.n	80064d0 <get_ROMid+0x7c>
 80064ce:	4b3a      	ldr	r3, [pc, #232]	@ (80065b8 <get_ROMid+0x164>)
 80064d0:	4a3a      	ldr	r2, [pc, #232]	@ (80065bc <get_ROMid+0x168>)
 80064d2:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 80064d4:	4b36      	ldr	r3, [pc, #216]	@ (80065b0 <get_ROMid+0x15c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	4b39      	ldr	r3, [pc, #228]	@ (80065c0 <get_ROMid+0x16c>)
 80064dc:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	461e      	mov	r6, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	799b      	ldrb	r3, [r3, #6]
 80064e8:	469c      	mov	ip, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	795b      	ldrb	r3, [r3, #5]
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	791b      	ldrb	r3, [r3, #4]
 80064f4:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 80064fa:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8006500:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8006506:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800650c:	9305      	str	r3, [sp, #20]
 800650e:	9504      	str	r5, [sp, #16]
 8006510:	9403      	str	r4, [sp, #12]
 8006512:	9002      	str	r0, [sp, #8]
 8006514:	9101      	str	r1, [sp, #4]
 8006516:	9200      	str	r2, [sp, #0]
 8006518:	4663      	mov	r3, ip
 800651a:	4632      	mov	r2, r6
 800651c:	4929      	ldr	r1, [pc, #164]	@ (80065c4 <get_ROMid+0x170>)
 800651e:	482a      	ldr	r0, [pc, #168]	@ (80065c8 <get_ROMid+0x174>)
 8006520:	f000 fdf2 	bl	8007108 <siprintf>

			if (crc != r->crc) {
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	79db      	ldrb	r3, [r3, #7]
 8006528:	78fa      	ldrb	r2, [r7, #3]
 800652a:	429a      	cmp	r2, r3
 800652c:	d008      	beq.n	8006540 <get_ROMid+0xec>
				devInfo.device = i;
 800652e:	4b20      	ldr	r3, [pc, #128]	@ (80065b0 <get_ROMid+0x15c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	4b22      	ldr	r3, [pc, #136]	@ (80065c0 <get_ROMid+0x16c>)
 8006536:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 8006538:	4924      	ldr	r1, [pc, #144]	@ (80065cc <get_ROMid+0x178>)
 800653a:	4823      	ldr	r0, [pc, #140]	@ (80065c8 <get_ROMid+0x174>)
 800653c:	f000 fde4 	bl	8007108 <siprintf>
		for (; i < devices; i++) {
 8006540:	4b1b      	ldr	r3, [pc, #108]	@ (80065b0 <get_ROMid+0x15c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3301      	adds	r3, #1
 8006546:	4a1a      	ldr	r2, [pc, #104]	@ (80065b0 <get_ROMid+0x15c>)
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	4b16      	ldr	r3, [pc, #88]	@ (80065a4 <get_ROMid+0x150>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	4b17      	ldr	r3, [pc, #92]	@ (80065b0 <get_ROMid+0x15c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	429a      	cmp	r2, r3
 8006556:	d8a8      	bhi.n	80064aa <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 8006558:	4b13      	ldr	r3, [pc, #76]	@ (80065a8 <get_ROMid+0x154>)
 800655a:	4a14      	ldr	r2, [pc, #80]	@ (80065ac <get_ROMid+0x158>)
 800655c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 800655e:	4b14      	ldr	r3, [pc, #80]	@ (80065b0 <get_ROMid+0x15c>)
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
 8006564:	e005      	b.n	8006572 <get_ROMid+0x11e>
		__asm__("nop");
 8006566:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 8006568:	4b11      	ldr	r3, [pc, #68]	@ (80065b0 <get_ROMid+0x15c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3301      	adds	r3, #1
 800656e:	4a10      	ldr	r2, [pc, #64]	@ (80065b0 <get_ROMid+0x15c>)
 8006570:	6013      	str	r3, [r2, #0]
 8006572:	4b0f      	ldr	r3, [pc, #60]	@ (80065b0 <get_ROMid+0x15c>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b0c      	ldr	r3, [pc, #48]	@ (80065a8 <get_ROMid+0x154>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d3f3      	bcc.n	8006566 <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 800657e:	4b0f      	ldr	r3, [pc, #60]	@ (80065bc <get_ROMid+0x168>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	490c      	ldr	r1, [pc, #48]	@ (80065b4 <get_ROMid+0x160>)
 8006584:	4618      	mov	r0, r3
 8006586:	f7f9 fe43 	bl	8000210 <strcmp>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <get_ROMid+0x140>
 8006590:	2300      	movs	r3, #0
 8006592:	e001      	b.n	8006598 <get_ROMid+0x144>
	else return -1;
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065a0:	200025d4 	.word	0x200025d4
 80065a4:	200025d0 	.word	0x200025d0
 80065a8:	200002c0 	.word	0x200002c0
 80065ac:	000f4240 	.word	0x000f4240
 80065b0:	200025e8 	.word	0x200025e8
 80065b4:	080093f4 	.word	0x080093f4
 80065b8:	080093fc 	.word	0x080093fc
 80065bc:	20002614 	.word	0x20002614
 80065c0:	200025f0 	.word	0x200025f0
 80065c4:	08009408 	.word	0x08009408
 80065c8:	200025f4 	.word	0x200025f4
 80065cc:	08009430 	.word	0x08009430

080065d0 <get_Temperature>:

void get_Temperature (void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
	i=0;
 80065d4:	4b3a      	ldr	r3, [pc, #232]	@ (80066c0 <get_Temperature+0xf0>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 80065da:	e067      	b.n	80066ac <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {
 80065dc:	4b38      	ldr	r3, [pc, #224]	@ (80066c0 <get_Temperature+0xf0>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a38      	ldr	r2, [pc, #224]	@ (80066c4 <get_Temperature+0xf4>)
 80065e2:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80065e6:	2b28      	cmp	r3, #40	@ 0x28
 80065e8:	d006      	beq.n	80065f8 <get_Temperature+0x28>
 80065ea:	2b28      	cmp	r3, #40	@ 0x28
 80065ec:	dc56      	bgt.n	800669c <get_Temperature+0xcc>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d056      	beq.n	80066a0 <get_Temperature+0xd0>
 80065f2:	2b10      	cmp	r3, #16
 80065f4:	d029      	beq.n	800664a <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:

			break;
 80065f6:	e051      	b.n	800669c <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 80065f8:	4b31      	ldr	r3, [pc, #196]	@ (80066c0 <get_Temperature+0xf0>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	4a31      	ldr	r2, [pc, #196]	@ (80066c4 <get_Temperature+0xf4>)
 8006600:	4413      	add	r3, r2
 8006602:	2201      	movs	r2, #1
 8006604:	4619      	mov	r1, r3
 8006606:	482f      	ldr	r0, [pc, #188]	@ (80066c4 <get_Temperature+0xf4>)
 8006608:	f7ff feb7 	bl	800637a <readTemperature>
 800660c:	4603      	mov	r3, r0
 800660e:	4a2e      	ldr	r2, [pc, #184]	@ (80066c8 <get_Temperature+0xf8>)
 8006610:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8006612:	4b2d      	ldr	r3, [pc, #180]	@ (80066c8 <get_Temperature+0xf8>)
 8006614:	f993 3000 	ldrsb.w	r3, [r3]
 8006618:	461a      	mov	r2, r3
 800661a:	4613      	mov	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	461a      	mov	r2, r3
 8006624:	4b28      	ldr	r3, [pc, #160]	@ (80066c8 <get_Temperature+0xf8>)
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	4413      	add	r3, r2
 800662a:	ee07 3a90 	vmov	s15, r3
 800662e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006632:	4b23      	ldr	r3, [pc, #140]	@ (80066c0 <get_Temperature+0xf0>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800663a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800663e:	4a23      	ldr	r2, [pc, #140]	@ (80066cc <get_Temperature+0xfc>)
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4413      	add	r3, r2
 8006644:	edc3 7a00 	vstr	s15, [r3]
			break;
 8006648:	e02b      	b.n	80066a2 <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 800664a:	4b1d      	ldr	r3, [pc, #116]	@ (80066c0 <get_Temperature+0xf0>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	4a1c      	ldr	r2, [pc, #112]	@ (80066c4 <get_Temperature+0xf4>)
 8006652:	4413      	add	r3, r2
 8006654:	2201      	movs	r2, #1
 8006656:	4619      	mov	r1, r3
 8006658:	481a      	ldr	r0, [pc, #104]	@ (80066c4 <get_Temperature+0xf4>)
 800665a:	f7ff fe8e 	bl	800637a <readTemperature>
 800665e:	4603      	mov	r3, r0
 8006660:	4a19      	ldr	r2, [pc, #100]	@ (80066c8 <get_Temperature+0xf8>)
 8006662:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8006664:	4b18      	ldr	r3, [pc, #96]	@ (80066c8 <get_Temperature+0xf8>)
 8006666:	f993 3000 	ldrsb.w	r3, [r3]
 800666a:	461a      	mov	r2, r3
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	461a      	mov	r2, r3
 8006676:	4b14      	ldr	r3, [pc, #80]	@ (80066c8 <get_Temperature+0xf8>)
 8006678:	785b      	ldrb	r3, [r3, #1]
 800667a:	4413      	add	r3, r2
 800667c:	ee07 3a90 	vmov	s15, r3
 8006680:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006684:	4b0e      	ldr	r3, [pc, #56]	@ (80066c0 <get_Temperature+0xf0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800668c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006690:	4a0e      	ldr	r2, [pc, #56]	@ (80066cc <get_Temperature+0xfc>)
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	4413      	add	r3, r2
 8006696:	edc3 7a00 	vstr	s15, [r3]
			break;
 800669a:	e002      	b.n	80066a2 <get_Temperature+0xd2>
			break;
 800669c:	bf00      	nop
 800669e:	e000      	b.n	80066a2 <get_Temperature+0xd2>
			break;
 80066a0:	bf00      	nop
	for (; i < devices; i++) {
 80066a2:	4b07      	ldr	r3, [pc, #28]	@ (80066c0 <get_Temperature+0xf0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	4a05      	ldr	r2, [pc, #20]	@ (80066c0 <get_Temperature+0xf0>)
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	4b08      	ldr	r3, [pc, #32]	@ (80066d0 <get_Temperature+0x100>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	4b03      	ldr	r3, [pc, #12]	@ (80066c0 <get_Temperature+0xf0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d890      	bhi.n	80065dc <get_Temperature+0xc>
		}
	}

}
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	200025e8 	.word	0x200025e8
 80066c4:	200025d4 	.word	0x200025d4
 80066c8:	200025ec 	.word	0x200025ec
 80066cc:	200025cc 	.word	0x200025cc
 80066d0:	200025d0 	.word	0x200025d0

080066d4 <__cvt>:
 80066d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	ec57 6b10 	vmov	r6, r7, d0
 80066dc:	2f00      	cmp	r7, #0
 80066de:	460c      	mov	r4, r1
 80066e0:	4619      	mov	r1, r3
 80066e2:	463b      	mov	r3, r7
 80066e4:	bfbb      	ittet	lt
 80066e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066ea:	461f      	movlt	r7, r3
 80066ec:	2300      	movge	r3, #0
 80066ee:	232d      	movlt	r3, #45	@ 0x2d
 80066f0:	700b      	strb	r3, [r1, #0]
 80066f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066f8:	4691      	mov	r9, r2
 80066fa:	f023 0820 	bic.w	r8, r3, #32
 80066fe:	bfbc      	itt	lt
 8006700:	4632      	movlt	r2, r6
 8006702:	4616      	movlt	r6, r2
 8006704:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006708:	d005      	beq.n	8006716 <__cvt+0x42>
 800670a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800670e:	d100      	bne.n	8006712 <__cvt+0x3e>
 8006710:	3401      	adds	r4, #1
 8006712:	2102      	movs	r1, #2
 8006714:	e000      	b.n	8006718 <__cvt+0x44>
 8006716:	2103      	movs	r1, #3
 8006718:	ab03      	add	r3, sp, #12
 800671a:	9301      	str	r3, [sp, #4]
 800671c:	ab02      	add	r3, sp, #8
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	ec47 6b10 	vmov	d0, r6, r7
 8006724:	4653      	mov	r3, sl
 8006726:	4622      	mov	r2, r4
 8006728:	f000 fe5a 	bl	80073e0 <_dtoa_r>
 800672c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006730:	4605      	mov	r5, r0
 8006732:	d119      	bne.n	8006768 <__cvt+0x94>
 8006734:	f019 0f01 	tst.w	r9, #1
 8006738:	d00e      	beq.n	8006758 <__cvt+0x84>
 800673a:	eb00 0904 	add.w	r9, r0, r4
 800673e:	2200      	movs	r2, #0
 8006740:	2300      	movs	r3, #0
 8006742:	4630      	mov	r0, r6
 8006744:	4639      	mov	r1, r7
 8006746:	f7fa f9ef 	bl	8000b28 <__aeabi_dcmpeq>
 800674a:	b108      	cbz	r0, 8006750 <__cvt+0x7c>
 800674c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006750:	2230      	movs	r2, #48	@ 0x30
 8006752:	9b03      	ldr	r3, [sp, #12]
 8006754:	454b      	cmp	r3, r9
 8006756:	d31e      	bcc.n	8006796 <__cvt+0xc2>
 8006758:	9b03      	ldr	r3, [sp, #12]
 800675a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800675c:	1b5b      	subs	r3, r3, r5
 800675e:	4628      	mov	r0, r5
 8006760:	6013      	str	r3, [r2, #0]
 8006762:	b004      	add	sp, #16
 8006764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006768:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800676c:	eb00 0904 	add.w	r9, r0, r4
 8006770:	d1e5      	bne.n	800673e <__cvt+0x6a>
 8006772:	7803      	ldrb	r3, [r0, #0]
 8006774:	2b30      	cmp	r3, #48	@ 0x30
 8006776:	d10a      	bne.n	800678e <__cvt+0xba>
 8006778:	2200      	movs	r2, #0
 800677a:	2300      	movs	r3, #0
 800677c:	4630      	mov	r0, r6
 800677e:	4639      	mov	r1, r7
 8006780:	f7fa f9d2 	bl	8000b28 <__aeabi_dcmpeq>
 8006784:	b918      	cbnz	r0, 800678e <__cvt+0xba>
 8006786:	f1c4 0401 	rsb	r4, r4, #1
 800678a:	f8ca 4000 	str.w	r4, [sl]
 800678e:	f8da 3000 	ldr.w	r3, [sl]
 8006792:	4499      	add	r9, r3
 8006794:	e7d3      	b.n	800673e <__cvt+0x6a>
 8006796:	1c59      	adds	r1, r3, #1
 8006798:	9103      	str	r1, [sp, #12]
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	e7d9      	b.n	8006752 <__cvt+0x7e>

0800679e <__exponent>:
 800679e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067a0:	2900      	cmp	r1, #0
 80067a2:	bfba      	itte	lt
 80067a4:	4249      	neglt	r1, r1
 80067a6:	232d      	movlt	r3, #45	@ 0x2d
 80067a8:	232b      	movge	r3, #43	@ 0x2b
 80067aa:	2909      	cmp	r1, #9
 80067ac:	7002      	strb	r2, [r0, #0]
 80067ae:	7043      	strb	r3, [r0, #1]
 80067b0:	dd29      	ble.n	8006806 <__exponent+0x68>
 80067b2:	f10d 0307 	add.w	r3, sp, #7
 80067b6:	461d      	mov	r5, r3
 80067b8:	270a      	movs	r7, #10
 80067ba:	461a      	mov	r2, r3
 80067bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80067c0:	fb07 1416 	mls	r4, r7, r6, r1
 80067c4:	3430      	adds	r4, #48	@ 0x30
 80067c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80067ca:	460c      	mov	r4, r1
 80067cc:	2c63      	cmp	r4, #99	@ 0x63
 80067ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80067d2:	4631      	mov	r1, r6
 80067d4:	dcf1      	bgt.n	80067ba <__exponent+0x1c>
 80067d6:	3130      	adds	r1, #48	@ 0x30
 80067d8:	1e94      	subs	r4, r2, #2
 80067da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067de:	1c41      	adds	r1, r0, #1
 80067e0:	4623      	mov	r3, r4
 80067e2:	42ab      	cmp	r3, r5
 80067e4:	d30a      	bcc.n	80067fc <__exponent+0x5e>
 80067e6:	f10d 0309 	add.w	r3, sp, #9
 80067ea:	1a9b      	subs	r3, r3, r2
 80067ec:	42ac      	cmp	r4, r5
 80067ee:	bf88      	it	hi
 80067f0:	2300      	movhi	r3, #0
 80067f2:	3302      	adds	r3, #2
 80067f4:	4403      	add	r3, r0
 80067f6:	1a18      	subs	r0, r3, r0
 80067f8:	b003      	add	sp, #12
 80067fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006800:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006804:	e7ed      	b.n	80067e2 <__exponent+0x44>
 8006806:	2330      	movs	r3, #48	@ 0x30
 8006808:	3130      	adds	r1, #48	@ 0x30
 800680a:	7083      	strb	r3, [r0, #2]
 800680c:	70c1      	strb	r1, [r0, #3]
 800680e:	1d03      	adds	r3, r0, #4
 8006810:	e7f1      	b.n	80067f6 <__exponent+0x58>
	...

08006814 <_printf_float>:
 8006814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006818:	b08d      	sub	sp, #52	@ 0x34
 800681a:	460c      	mov	r4, r1
 800681c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006820:	4616      	mov	r6, r2
 8006822:	461f      	mov	r7, r3
 8006824:	4605      	mov	r5, r0
 8006826:	f000 fcdb 	bl	80071e0 <_localeconv_r>
 800682a:	6803      	ldr	r3, [r0, #0]
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	4618      	mov	r0, r3
 8006830:	f7f9 fd4e 	bl	80002d0 <strlen>
 8006834:	2300      	movs	r3, #0
 8006836:	930a      	str	r3, [sp, #40]	@ 0x28
 8006838:	f8d8 3000 	ldr.w	r3, [r8]
 800683c:	9005      	str	r0, [sp, #20]
 800683e:	3307      	adds	r3, #7
 8006840:	f023 0307 	bic.w	r3, r3, #7
 8006844:	f103 0208 	add.w	r2, r3, #8
 8006848:	f894 a018 	ldrb.w	sl, [r4, #24]
 800684c:	f8d4 b000 	ldr.w	fp, [r4]
 8006850:	f8c8 2000 	str.w	r2, [r8]
 8006854:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006858:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800685c:	9307      	str	r3, [sp, #28]
 800685e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006862:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800686a:	4b9c      	ldr	r3, [pc, #624]	@ (8006adc <_printf_float+0x2c8>)
 800686c:	f04f 32ff 	mov.w	r2, #4294967295
 8006870:	f7fa f98c 	bl	8000b8c <__aeabi_dcmpun>
 8006874:	bb70      	cbnz	r0, 80068d4 <_printf_float+0xc0>
 8006876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800687a:	4b98      	ldr	r3, [pc, #608]	@ (8006adc <_printf_float+0x2c8>)
 800687c:	f04f 32ff 	mov.w	r2, #4294967295
 8006880:	f7fa f966 	bl	8000b50 <__aeabi_dcmple>
 8006884:	bb30      	cbnz	r0, 80068d4 <_printf_float+0xc0>
 8006886:	2200      	movs	r2, #0
 8006888:	2300      	movs	r3, #0
 800688a:	4640      	mov	r0, r8
 800688c:	4649      	mov	r1, r9
 800688e:	f7fa f955 	bl	8000b3c <__aeabi_dcmplt>
 8006892:	b110      	cbz	r0, 800689a <_printf_float+0x86>
 8006894:	232d      	movs	r3, #45	@ 0x2d
 8006896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800689a:	4a91      	ldr	r2, [pc, #580]	@ (8006ae0 <_printf_float+0x2cc>)
 800689c:	4b91      	ldr	r3, [pc, #580]	@ (8006ae4 <_printf_float+0x2d0>)
 800689e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80068a2:	bf94      	ite	ls
 80068a4:	4690      	movls	r8, r2
 80068a6:	4698      	movhi	r8, r3
 80068a8:	2303      	movs	r3, #3
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	f02b 0304 	bic.w	r3, fp, #4
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	f04f 0900 	mov.w	r9, #0
 80068b6:	9700      	str	r7, [sp, #0]
 80068b8:	4633      	mov	r3, r6
 80068ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80068bc:	4621      	mov	r1, r4
 80068be:	4628      	mov	r0, r5
 80068c0:	f000 f9d2 	bl	8006c68 <_printf_common>
 80068c4:	3001      	adds	r0, #1
 80068c6:	f040 808d 	bne.w	80069e4 <_printf_float+0x1d0>
 80068ca:	f04f 30ff 	mov.w	r0, #4294967295
 80068ce:	b00d      	add	sp, #52	@ 0x34
 80068d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d4:	4642      	mov	r2, r8
 80068d6:	464b      	mov	r3, r9
 80068d8:	4640      	mov	r0, r8
 80068da:	4649      	mov	r1, r9
 80068dc:	f7fa f956 	bl	8000b8c <__aeabi_dcmpun>
 80068e0:	b140      	cbz	r0, 80068f4 <_printf_float+0xe0>
 80068e2:	464b      	mov	r3, r9
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bfbc      	itt	lt
 80068e8:	232d      	movlt	r3, #45	@ 0x2d
 80068ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068ee:	4a7e      	ldr	r2, [pc, #504]	@ (8006ae8 <_printf_float+0x2d4>)
 80068f0:	4b7e      	ldr	r3, [pc, #504]	@ (8006aec <_printf_float+0x2d8>)
 80068f2:	e7d4      	b.n	800689e <_printf_float+0x8a>
 80068f4:	6863      	ldr	r3, [r4, #4]
 80068f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068fa:	9206      	str	r2, [sp, #24]
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	d13b      	bne.n	8006978 <_printf_float+0x164>
 8006900:	2306      	movs	r3, #6
 8006902:	6063      	str	r3, [r4, #4]
 8006904:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006908:	2300      	movs	r3, #0
 800690a:	6022      	str	r2, [r4, #0]
 800690c:	9303      	str	r3, [sp, #12]
 800690e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006910:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006914:	ab09      	add	r3, sp, #36	@ 0x24
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	6861      	ldr	r1, [r4, #4]
 800691a:	ec49 8b10 	vmov	d0, r8, r9
 800691e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006922:	4628      	mov	r0, r5
 8006924:	f7ff fed6 	bl	80066d4 <__cvt>
 8006928:	9b06      	ldr	r3, [sp, #24]
 800692a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800692c:	2b47      	cmp	r3, #71	@ 0x47
 800692e:	4680      	mov	r8, r0
 8006930:	d129      	bne.n	8006986 <_printf_float+0x172>
 8006932:	1cc8      	adds	r0, r1, #3
 8006934:	db02      	blt.n	800693c <_printf_float+0x128>
 8006936:	6863      	ldr	r3, [r4, #4]
 8006938:	4299      	cmp	r1, r3
 800693a:	dd41      	ble.n	80069c0 <_printf_float+0x1ac>
 800693c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006940:	fa5f fa8a 	uxtb.w	sl, sl
 8006944:	3901      	subs	r1, #1
 8006946:	4652      	mov	r2, sl
 8006948:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800694c:	9109      	str	r1, [sp, #36]	@ 0x24
 800694e:	f7ff ff26 	bl	800679e <__exponent>
 8006952:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006954:	1813      	adds	r3, r2, r0
 8006956:	2a01      	cmp	r2, #1
 8006958:	4681      	mov	r9, r0
 800695a:	6123      	str	r3, [r4, #16]
 800695c:	dc02      	bgt.n	8006964 <_printf_float+0x150>
 800695e:	6822      	ldr	r2, [r4, #0]
 8006960:	07d2      	lsls	r2, r2, #31
 8006962:	d501      	bpl.n	8006968 <_printf_float+0x154>
 8006964:	3301      	adds	r3, #1
 8006966:	6123      	str	r3, [r4, #16]
 8006968:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0a2      	beq.n	80068b6 <_printf_float+0xa2>
 8006970:	232d      	movs	r3, #45	@ 0x2d
 8006972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006976:	e79e      	b.n	80068b6 <_printf_float+0xa2>
 8006978:	9a06      	ldr	r2, [sp, #24]
 800697a:	2a47      	cmp	r2, #71	@ 0x47
 800697c:	d1c2      	bne.n	8006904 <_printf_float+0xf0>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1c0      	bne.n	8006904 <_printf_float+0xf0>
 8006982:	2301      	movs	r3, #1
 8006984:	e7bd      	b.n	8006902 <_printf_float+0xee>
 8006986:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800698a:	d9db      	bls.n	8006944 <_printf_float+0x130>
 800698c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006990:	d118      	bne.n	80069c4 <_printf_float+0x1b0>
 8006992:	2900      	cmp	r1, #0
 8006994:	6863      	ldr	r3, [r4, #4]
 8006996:	dd0b      	ble.n	80069b0 <_printf_float+0x19c>
 8006998:	6121      	str	r1, [r4, #16]
 800699a:	b913      	cbnz	r3, 80069a2 <_printf_float+0x18e>
 800699c:	6822      	ldr	r2, [r4, #0]
 800699e:	07d0      	lsls	r0, r2, #31
 80069a0:	d502      	bpl.n	80069a8 <_printf_float+0x194>
 80069a2:	3301      	adds	r3, #1
 80069a4:	440b      	add	r3, r1
 80069a6:	6123      	str	r3, [r4, #16]
 80069a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80069aa:	f04f 0900 	mov.w	r9, #0
 80069ae:	e7db      	b.n	8006968 <_printf_float+0x154>
 80069b0:	b913      	cbnz	r3, 80069b8 <_printf_float+0x1a4>
 80069b2:	6822      	ldr	r2, [r4, #0]
 80069b4:	07d2      	lsls	r2, r2, #31
 80069b6:	d501      	bpl.n	80069bc <_printf_float+0x1a8>
 80069b8:	3302      	adds	r3, #2
 80069ba:	e7f4      	b.n	80069a6 <_printf_float+0x192>
 80069bc:	2301      	movs	r3, #1
 80069be:	e7f2      	b.n	80069a6 <_printf_float+0x192>
 80069c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80069c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069c6:	4299      	cmp	r1, r3
 80069c8:	db05      	blt.n	80069d6 <_printf_float+0x1c2>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	6121      	str	r1, [r4, #16]
 80069ce:	07d8      	lsls	r0, r3, #31
 80069d0:	d5ea      	bpl.n	80069a8 <_printf_float+0x194>
 80069d2:	1c4b      	adds	r3, r1, #1
 80069d4:	e7e7      	b.n	80069a6 <_printf_float+0x192>
 80069d6:	2900      	cmp	r1, #0
 80069d8:	bfd4      	ite	le
 80069da:	f1c1 0202 	rsble	r2, r1, #2
 80069de:	2201      	movgt	r2, #1
 80069e0:	4413      	add	r3, r2
 80069e2:	e7e0      	b.n	80069a6 <_printf_float+0x192>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	055a      	lsls	r2, r3, #21
 80069e8:	d407      	bmi.n	80069fa <_printf_float+0x1e6>
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	4642      	mov	r2, r8
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	d12b      	bne.n	8006a50 <_printf_float+0x23c>
 80069f8:	e767      	b.n	80068ca <_printf_float+0xb6>
 80069fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069fe:	f240 80dd 	bls.w	8006bbc <_printf_float+0x3a8>
 8006a02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a06:	2200      	movs	r2, #0
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f7fa f88d 	bl	8000b28 <__aeabi_dcmpeq>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	d033      	beq.n	8006a7a <_printf_float+0x266>
 8006a12:	4a37      	ldr	r2, [pc, #220]	@ (8006af0 <_printf_float+0x2dc>)
 8006a14:	2301      	movs	r3, #1
 8006a16:	4631      	mov	r1, r6
 8006a18:	4628      	mov	r0, r5
 8006a1a:	47b8      	blx	r7
 8006a1c:	3001      	adds	r0, #1
 8006a1e:	f43f af54 	beq.w	80068ca <_printf_float+0xb6>
 8006a22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a26:	4543      	cmp	r3, r8
 8006a28:	db02      	blt.n	8006a30 <_printf_float+0x21c>
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	07d8      	lsls	r0, r3, #31
 8006a2e:	d50f      	bpl.n	8006a50 <_printf_float+0x23c>
 8006a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	f43f af45 	beq.w	80068ca <_printf_float+0xb6>
 8006a40:	f04f 0900 	mov.w	r9, #0
 8006a44:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a48:	f104 0a1a 	add.w	sl, r4, #26
 8006a4c:	45c8      	cmp	r8, r9
 8006a4e:	dc09      	bgt.n	8006a64 <_printf_float+0x250>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	079b      	lsls	r3, r3, #30
 8006a54:	f100 8103 	bmi.w	8006c5e <_printf_float+0x44a>
 8006a58:	68e0      	ldr	r0, [r4, #12]
 8006a5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a5c:	4298      	cmp	r0, r3
 8006a5e:	bfb8      	it	lt
 8006a60:	4618      	movlt	r0, r3
 8006a62:	e734      	b.n	80068ce <_printf_float+0xba>
 8006a64:	2301      	movs	r3, #1
 8006a66:	4652      	mov	r2, sl
 8006a68:	4631      	mov	r1, r6
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	47b8      	blx	r7
 8006a6e:	3001      	adds	r0, #1
 8006a70:	f43f af2b 	beq.w	80068ca <_printf_float+0xb6>
 8006a74:	f109 0901 	add.w	r9, r9, #1
 8006a78:	e7e8      	b.n	8006a4c <_printf_float+0x238>
 8006a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	dc39      	bgt.n	8006af4 <_printf_float+0x2e0>
 8006a80:	4a1b      	ldr	r2, [pc, #108]	@ (8006af0 <_printf_float+0x2dc>)
 8006a82:	2301      	movs	r3, #1
 8006a84:	4631      	mov	r1, r6
 8006a86:	4628      	mov	r0, r5
 8006a88:	47b8      	blx	r7
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	f43f af1d 	beq.w	80068ca <_printf_float+0xb6>
 8006a90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a94:	ea59 0303 	orrs.w	r3, r9, r3
 8006a98:	d102      	bne.n	8006aa0 <_printf_float+0x28c>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	07d9      	lsls	r1, r3, #31
 8006a9e:	d5d7      	bpl.n	8006a50 <_printf_float+0x23c>
 8006aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	47b8      	blx	r7
 8006aaa:	3001      	adds	r0, #1
 8006aac:	f43f af0d 	beq.w	80068ca <_printf_float+0xb6>
 8006ab0:	f04f 0a00 	mov.w	sl, #0
 8006ab4:	f104 0b1a 	add.w	fp, r4, #26
 8006ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aba:	425b      	negs	r3, r3
 8006abc:	4553      	cmp	r3, sl
 8006abe:	dc01      	bgt.n	8006ac4 <_printf_float+0x2b0>
 8006ac0:	464b      	mov	r3, r9
 8006ac2:	e793      	b.n	80069ec <_printf_float+0x1d8>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	465a      	mov	r2, fp
 8006ac8:	4631      	mov	r1, r6
 8006aca:	4628      	mov	r0, r5
 8006acc:	47b8      	blx	r7
 8006ace:	3001      	adds	r0, #1
 8006ad0:	f43f aefb 	beq.w	80068ca <_printf_float+0xb6>
 8006ad4:	f10a 0a01 	add.w	sl, sl, #1
 8006ad8:	e7ee      	b.n	8006ab8 <_printf_float+0x2a4>
 8006ada:	bf00      	nop
 8006adc:	7fefffff 	.word	0x7fefffff
 8006ae0:	0800b730 	.word	0x0800b730
 8006ae4:	0800b734 	.word	0x0800b734
 8006ae8:	0800b738 	.word	0x0800b738
 8006aec:	0800b73c 	.word	0x0800b73c
 8006af0:	0800b740 	.word	0x0800b740
 8006af4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006af6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006afa:	4553      	cmp	r3, sl
 8006afc:	bfa8      	it	ge
 8006afe:	4653      	movge	r3, sl
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	4699      	mov	r9, r3
 8006b04:	dc36      	bgt.n	8006b74 <_printf_float+0x360>
 8006b06:	f04f 0b00 	mov.w	fp, #0
 8006b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b0e:	f104 021a 	add.w	r2, r4, #26
 8006b12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b14:	9306      	str	r3, [sp, #24]
 8006b16:	eba3 0309 	sub.w	r3, r3, r9
 8006b1a:	455b      	cmp	r3, fp
 8006b1c:	dc31      	bgt.n	8006b82 <_printf_float+0x36e>
 8006b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b20:	459a      	cmp	sl, r3
 8006b22:	dc3a      	bgt.n	8006b9a <_printf_float+0x386>
 8006b24:	6823      	ldr	r3, [r4, #0]
 8006b26:	07da      	lsls	r2, r3, #31
 8006b28:	d437      	bmi.n	8006b9a <_printf_float+0x386>
 8006b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b2c:	ebaa 0903 	sub.w	r9, sl, r3
 8006b30:	9b06      	ldr	r3, [sp, #24]
 8006b32:	ebaa 0303 	sub.w	r3, sl, r3
 8006b36:	4599      	cmp	r9, r3
 8006b38:	bfa8      	it	ge
 8006b3a:	4699      	movge	r9, r3
 8006b3c:	f1b9 0f00 	cmp.w	r9, #0
 8006b40:	dc33      	bgt.n	8006baa <_printf_float+0x396>
 8006b42:	f04f 0800 	mov.w	r8, #0
 8006b46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b4a:	f104 0b1a 	add.w	fp, r4, #26
 8006b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b50:	ebaa 0303 	sub.w	r3, sl, r3
 8006b54:	eba3 0309 	sub.w	r3, r3, r9
 8006b58:	4543      	cmp	r3, r8
 8006b5a:	f77f af79 	ble.w	8006a50 <_printf_float+0x23c>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	465a      	mov	r2, fp
 8006b62:	4631      	mov	r1, r6
 8006b64:	4628      	mov	r0, r5
 8006b66:	47b8      	blx	r7
 8006b68:	3001      	adds	r0, #1
 8006b6a:	f43f aeae 	beq.w	80068ca <_printf_float+0xb6>
 8006b6e:	f108 0801 	add.w	r8, r8, #1
 8006b72:	e7ec      	b.n	8006b4e <_printf_float+0x33a>
 8006b74:	4642      	mov	r2, r8
 8006b76:	4631      	mov	r1, r6
 8006b78:	4628      	mov	r0, r5
 8006b7a:	47b8      	blx	r7
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d1c2      	bne.n	8006b06 <_printf_float+0x2f2>
 8006b80:	e6a3      	b.n	80068ca <_printf_float+0xb6>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4631      	mov	r1, r6
 8006b86:	4628      	mov	r0, r5
 8006b88:	9206      	str	r2, [sp, #24]
 8006b8a:	47b8      	blx	r7
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f43f ae9c 	beq.w	80068ca <_printf_float+0xb6>
 8006b92:	9a06      	ldr	r2, [sp, #24]
 8006b94:	f10b 0b01 	add.w	fp, fp, #1
 8006b98:	e7bb      	b.n	8006b12 <_printf_float+0x2fe>
 8006b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b9e:	4631      	mov	r1, r6
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	47b8      	blx	r7
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	d1c0      	bne.n	8006b2a <_printf_float+0x316>
 8006ba8:	e68f      	b.n	80068ca <_printf_float+0xb6>
 8006baa:	9a06      	ldr	r2, [sp, #24]
 8006bac:	464b      	mov	r3, r9
 8006bae:	4442      	add	r2, r8
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d1c3      	bne.n	8006b42 <_printf_float+0x32e>
 8006bba:	e686      	b.n	80068ca <_printf_float+0xb6>
 8006bbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006bc0:	f1ba 0f01 	cmp.w	sl, #1
 8006bc4:	dc01      	bgt.n	8006bca <_printf_float+0x3b6>
 8006bc6:	07db      	lsls	r3, r3, #31
 8006bc8:	d536      	bpl.n	8006c38 <_printf_float+0x424>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	4642      	mov	r2, r8
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	f43f ae78 	beq.w	80068ca <_printf_float+0xb6>
 8006bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bde:	4631      	mov	r1, r6
 8006be0:	4628      	mov	r0, r5
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	f43f ae70 	beq.w	80068ca <_printf_float+0xb6>
 8006bea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bf6:	f7f9 ff97 	bl	8000b28 <__aeabi_dcmpeq>
 8006bfa:	b9c0      	cbnz	r0, 8006c2e <_printf_float+0x41a>
 8006bfc:	4653      	mov	r3, sl
 8006bfe:	f108 0201 	add.w	r2, r8, #1
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	47b8      	blx	r7
 8006c08:	3001      	adds	r0, #1
 8006c0a:	d10c      	bne.n	8006c26 <_printf_float+0x412>
 8006c0c:	e65d      	b.n	80068ca <_printf_float+0xb6>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	465a      	mov	r2, fp
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f43f ae56 	beq.w	80068ca <_printf_float+0xb6>
 8006c1e:	f108 0801 	add.w	r8, r8, #1
 8006c22:	45d0      	cmp	r8, sl
 8006c24:	dbf3      	blt.n	8006c0e <_printf_float+0x3fa>
 8006c26:	464b      	mov	r3, r9
 8006c28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c2c:	e6df      	b.n	80069ee <_printf_float+0x1da>
 8006c2e:	f04f 0800 	mov.w	r8, #0
 8006c32:	f104 0b1a 	add.w	fp, r4, #26
 8006c36:	e7f4      	b.n	8006c22 <_printf_float+0x40e>
 8006c38:	2301      	movs	r3, #1
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	e7e1      	b.n	8006c02 <_printf_float+0x3ee>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	464a      	mov	r2, r9
 8006c42:	4631      	mov	r1, r6
 8006c44:	4628      	mov	r0, r5
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f43f ae3e 	beq.w	80068ca <_printf_float+0xb6>
 8006c4e:	f108 0801 	add.w	r8, r8, #1
 8006c52:	68e3      	ldr	r3, [r4, #12]
 8006c54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c56:	1a5b      	subs	r3, r3, r1
 8006c58:	4543      	cmp	r3, r8
 8006c5a:	dcf0      	bgt.n	8006c3e <_printf_float+0x42a>
 8006c5c:	e6fc      	b.n	8006a58 <_printf_float+0x244>
 8006c5e:	f04f 0800 	mov.w	r8, #0
 8006c62:	f104 0919 	add.w	r9, r4, #25
 8006c66:	e7f4      	b.n	8006c52 <_printf_float+0x43e>

08006c68 <_printf_common>:
 8006c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c6c:	4616      	mov	r6, r2
 8006c6e:	4698      	mov	r8, r3
 8006c70:	688a      	ldr	r2, [r1, #8]
 8006c72:	690b      	ldr	r3, [r1, #16]
 8006c74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	bfb8      	it	lt
 8006c7c:	4613      	movlt	r3, r2
 8006c7e:	6033      	str	r3, [r6, #0]
 8006c80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c84:	4607      	mov	r7, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	b10a      	cbz	r2, 8006c8e <_printf_common+0x26>
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	6033      	str	r3, [r6, #0]
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	0699      	lsls	r1, r3, #26
 8006c92:	bf42      	ittt	mi
 8006c94:	6833      	ldrmi	r3, [r6, #0]
 8006c96:	3302      	addmi	r3, #2
 8006c98:	6033      	strmi	r3, [r6, #0]
 8006c9a:	6825      	ldr	r5, [r4, #0]
 8006c9c:	f015 0506 	ands.w	r5, r5, #6
 8006ca0:	d106      	bne.n	8006cb0 <_printf_common+0x48>
 8006ca2:	f104 0a19 	add.w	sl, r4, #25
 8006ca6:	68e3      	ldr	r3, [r4, #12]
 8006ca8:	6832      	ldr	r2, [r6, #0]
 8006caa:	1a9b      	subs	r3, r3, r2
 8006cac:	42ab      	cmp	r3, r5
 8006cae:	dc26      	bgt.n	8006cfe <_printf_common+0x96>
 8006cb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006cb4:	6822      	ldr	r2, [r4, #0]
 8006cb6:	3b00      	subs	r3, #0
 8006cb8:	bf18      	it	ne
 8006cba:	2301      	movne	r3, #1
 8006cbc:	0692      	lsls	r2, r2, #26
 8006cbe:	d42b      	bmi.n	8006d18 <_printf_common+0xb0>
 8006cc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006cc4:	4641      	mov	r1, r8
 8006cc6:	4638      	mov	r0, r7
 8006cc8:	47c8      	blx	r9
 8006cca:	3001      	adds	r0, #1
 8006ccc:	d01e      	beq.n	8006d0c <_printf_common+0xa4>
 8006cce:	6823      	ldr	r3, [r4, #0]
 8006cd0:	6922      	ldr	r2, [r4, #16]
 8006cd2:	f003 0306 	and.w	r3, r3, #6
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	bf02      	ittt	eq
 8006cda:	68e5      	ldreq	r5, [r4, #12]
 8006cdc:	6833      	ldreq	r3, [r6, #0]
 8006cde:	1aed      	subeq	r5, r5, r3
 8006ce0:	68a3      	ldr	r3, [r4, #8]
 8006ce2:	bf0c      	ite	eq
 8006ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ce8:	2500      	movne	r5, #0
 8006cea:	4293      	cmp	r3, r2
 8006cec:	bfc4      	itt	gt
 8006cee:	1a9b      	subgt	r3, r3, r2
 8006cf0:	18ed      	addgt	r5, r5, r3
 8006cf2:	2600      	movs	r6, #0
 8006cf4:	341a      	adds	r4, #26
 8006cf6:	42b5      	cmp	r5, r6
 8006cf8:	d11a      	bne.n	8006d30 <_printf_common+0xc8>
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	e008      	b.n	8006d10 <_printf_common+0xa8>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	4652      	mov	r2, sl
 8006d02:	4641      	mov	r1, r8
 8006d04:	4638      	mov	r0, r7
 8006d06:	47c8      	blx	r9
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d103      	bne.n	8006d14 <_printf_common+0xac>
 8006d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d14:	3501      	adds	r5, #1
 8006d16:	e7c6      	b.n	8006ca6 <_printf_common+0x3e>
 8006d18:	18e1      	adds	r1, r4, r3
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	2030      	movs	r0, #48	@ 0x30
 8006d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d22:	4422      	add	r2, r4
 8006d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d2c:	3302      	adds	r3, #2
 8006d2e:	e7c7      	b.n	8006cc0 <_printf_common+0x58>
 8006d30:	2301      	movs	r3, #1
 8006d32:	4622      	mov	r2, r4
 8006d34:	4641      	mov	r1, r8
 8006d36:	4638      	mov	r0, r7
 8006d38:	47c8      	blx	r9
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d0e6      	beq.n	8006d0c <_printf_common+0xa4>
 8006d3e:	3601      	adds	r6, #1
 8006d40:	e7d9      	b.n	8006cf6 <_printf_common+0x8e>
	...

08006d44 <_printf_i>:
 8006d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d48:	7e0f      	ldrb	r7, [r1, #24]
 8006d4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d4c:	2f78      	cmp	r7, #120	@ 0x78
 8006d4e:	4691      	mov	r9, r2
 8006d50:	4680      	mov	r8, r0
 8006d52:	460c      	mov	r4, r1
 8006d54:	469a      	mov	sl, r3
 8006d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d5a:	d807      	bhi.n	8006d6c <_printf_i+0x28>
 8006d5c:	2f62      	cmp	r7, #98	@ 0x62
 8006d5e:	d80a      	bhi.n	8006d76 <_printf_i+0x32>
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	f000 80d2 	beq.w	8006f0a <_printf_i+0x1c6>
 8006d66:	2f58      	cmp	r7, #88	@ 0x58
 8006d68:	f000 80b9 	beq.w	8006ede <_printf_i+0x19a>
 8006d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d74:	e03a      	b.n	8006dec <_printf_i+0xa8>
 8006d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d7a:	2b15      	cmp	r3, #21
 8006d7c:	d8f6      	bhi.n	8006d6c <_printf_i+0x28>
 8006d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8006d84 <_printf_i+0x40>)
 8006d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d84:	08006ddd 	.word	0x08006ddd
 8006d88:	08006df1 	.word	0x08006df1
 8006d8c:	08006d6d 	.word	0x08006d6d
 8006d90:	08006d6d 	.word	0x08006d6d
 8006d94:	08006d6d 	.word	0x08006d6d
 8006d98:	08006d6d 	.word	0x08006d6d
 8006d9c:	08006df1 	.word	0x08006df1
 8006da0:	08006d6d 	.word	0x08006d6d
 8006da4:	08006d6d 	.word	0x08006d6d
 8006da8:	08006d6d 	.word	0x08006d6d
 8006dac:	08006d6d 	.word	0x08006d6d
 8006db0:	08006ef1 	.word	0x08006ef1
 8006db4:	08006e1b 	.word	0x08006e1b
 8006db8:	08006eab 	.word	0x08006eab
 8006dbc:	08006d6d 	.word	0x08006d6d
 8006dc0:	08006d6d 	.word	0x08006d6d
 8006dc4:	08006f13 	.word	0x08006f13
 8006dc8:	08006d6d 	.word	0x08006d6d
 8006dcc:	08006e1b 	.word	0x08006e1b
 8006dd0:	08006d6d 	.word	0x08006d6d
 8006dd4:	08006d6d 	.word	0x08006d6d
 8006dd8:	08006eb3 	.word	0x08006eb3
 8006ddc:	6833      	ldr	r3, [r6, #0]
 8006dde:	1d1a      	adds	r2, r3, #4
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	6032      	str	r2, [r6, #0]
 8006de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006dec:	2301      	movs	r3, #1
 8006dee:	e09d      	b.n	8006f2c <_printf_i+0x1e8>
 8006df0:	6833      	ldr	r3, [r6, #0]
 8006df2:	6820      	ldr	r0, [r4, #0]
 8006df4:	1d19      	adds	r1, r3, #4
 8006df6:	6031      	str	r1, [r6, #0]
 8006df8:	0606      	lsls	r6, r0, #24
 8006dfa:	d501      	bpl.n	8006e00 <_printf_i+0xbc>
 8006dfc:	681d      	ldr	r5, [r3, #0]
 8006dfe:	e003      	b.n	8006e08 <_printf_i+0xc4>
 8006e00:	0645      	lsls	r5, r0, #25
 8006e02:	d5fb      	bpl.n	8006dfc <_printf_i+0xb8>
 8006e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e08:	2d00      	cmp	r5, #0
 8006e0a:	da03      	bge.n	8006e14 <_printf_i+0xd0>
 8006e0c:	232d      	movs	r3, #45	@ 0x2d
 8006e0e:	426d      	negs	r5, r5
 8006e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e14:	4859      	ldr	r0, [pc, #356]	@ (8006f7c <_printf_i+0x238>)
 8006e16:	230a      	movs	r3, #10
 8006e18:	e011      	b.n	8006e3e <_printf_i+0xfa>
 8006e1a:	6821      	ldr	r1, [r4, #0]
 8006e1c:	6833      	ldr	r3, [r6, #0]
 8006e1e:	0608      	lsls	r0, r1, #24
 8006e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e24:	d402      	bmi.n	8006e2c <_printf_i+0xe8>
 8006e26:	0649      	lsls	r1, r1, #25
 8006e28:	bf48      	it	mi
 8006e2a:	b2ad      	uxthmi	r5, r5
 8006e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e2e:	4853      	ldr	r0, [pc, #332]	@ (8006f7c <_printf_i+0x238>)
 8006e30:	6033      	str	r3, [r6, #0]
 8006e32:	bf14      	ite	ne
 8006e34:	230a      	movne	r3, #10
 8006e36:	2308      	moveq	r3, #8
 8006e38:	2100      	movs	r1, #0
 8006e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e3e:	6866      	ldr	r6, [r4, #4]
 8006e40:	60a6      	str	r6, [r4, #8]
 8006e42:	2e00      	cmp	r6, #0
 8006e44:	bfa2      	ittt	ge
 8006e46:	6821      	ldrge	r1, [r4, #0]
 8006e48:	f021 0104 	bicge.w	r1, r1, #4
 8006e4c:	6021      	strge	r1, [r4, #0]
 8006e4e:	b90d      	cbnz	r5, 8006e54 <_printf_i+0x110>
 8006e50:	2e00      	cmp	r6, #0
 8006e52:	d04b      	beq.n	8006eec <_printf_i+0x1a8>
 8006e54:	4616      	mov	r6, r2
 8006e56:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e5a:	fb03 5711 	mls	r7, r3, r1, r5
 8006e5e:	5dc7      	ldrb	r7, [r0, r7]
 8006e60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e64:	462f      	mov	r7, r5
 8006e66:	42bb      	cmp	r3, r7
 8006e68:	460d      	mov	r5, r1
 8006e6a:	d9f4      	bls.n	8006e56 <_printf_i+0x112>
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	d10b      	bne.n	8006e88 <_printf_i+0x144>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	07df      	lsls	r7, r3, #31
 8006e74:	d508      	bpl.n	8006e88 <_printf_i+0x144>
 8006e76:	6923      	ldr	r3, [r4, #16]
 8006e78:	6861      	ldr	r1, [r4, #4]
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	bfde      	ittt	le
 8006e7e:	2330      	movle	r3, #48	@ 0x30
 8006e80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e88:	1b92      	subs	r2, r2, r6
 8006e8a:	6122      	str	r2, [r4, #16]
 8006e8c:	f8cd a000 	str.w	sl, [sp]
 8006e90:	464b      	mov	r3, r9
 8006e92:	aa03      	add	r2, sp, #12
 8006e94:	4621      	mov	r1, r4
 8006e96:	4640      	mov	r0, r8
 8006e98:	f7ff fee6 	bl	8006c68 <_printf_common>
 8006e9c:	3001      	adds	r0, #1
 8006e9e:	d14a      	bne.n	8006f36 <_printf_i+0x1f2>
 8006ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea4:	b004      	add	sp, #16
 8006ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	f043 0320 	orr.w	r3, r3, #32
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	4833      	ldr	r0, [pc, #204]	@ (8006f80 <_printf_i+0x23c>)
 8006eb4:	2778      	movs	r7, #120	@ 0x78
 8006eb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	6831      	ldr	r1, [r6, #0]
 8006ebe:	061f      	lsls	r7, r3, #24
 8006ec0:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ec4:	d402      	bmi.n	8006ecc <_printf_i+0x188>
 8006ec6:	065f      	lsls	r7, r3, #25
 8006ec8:	bf48      	it	mi
 8006eca:	b2ad      	uxthmi	r5, r5
 8006ecc:	6031      	str	r1, [r6, #0]
 8006ece:	07d9      	lsls	r1, r3, #31
 8006ed0:	bf44      	itt	mi
 8006ed2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ed6:	6023      	strmi	r3, [r4, #0]
 8006ed8:	b11d      	cbz	r5, 8006ee2 <_printf_i+0x19e>
 8006eda:	2310      	movs	r3, #16
 8006edc:	e7ac      	b.n	8006e38 <_printf_i+0xf4>
 8006ede:	4827      	ldr	r0, [pc, #156]	@ (8006f7c <_printf_i+0x238>)
 8006ee0:	e7e9      	b.n	8006eb6 <_printf_i+0x172>
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	f023 0320 	bic.w	r3, r3, #32
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	e7f6      	b.n	8006eda <_printf_i+0x196>
 8006eec:	4616      	mov	r6, r2
 8006eee:	e7bd      	b.n	8006e6c <_printf_i+0x128>
 8006ef0:	6833      	ldr	r3, [r6, #0]
 8006ef2:	6825      	ldr	r5, [r4, #0]
 8006ef4:	6961      	ldr	r1, [r4, #20]
 8006ef6:	1d18      	adds	r0, r3, #4
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	062e      	lsls	r6, r5, #24
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	d501      	bpl.n	8006f04 <_printf_i+0x1c0>
 8006f00:	6019      	str	r1, [r3, #0]
 8006f02:	e002      	b.n	8006f0a <_printf_i+0x1c6>
 8006f04:	0668      	lsls	r0, r5, #25
 8006f06:	d5fb      	bpl.n	8006f00 <_printf_i+0x1bc>
 8006f08:	8019      	strh	r1, [r3, #0]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6123      	str	r3, [r4, #16]
 8006f0e:	4616      	mov	r6, r2
 8006f10:	e7bc      	b.n	8006e8c <_printf_i+0x148>
 8006f12:	6833      	ldr	r3, [r6, #0]
 8006f14:	1d1a      	adds	r2, r3, #4
 8006f16:	6032      	str	r2, [r6, #0]
 8006f18:	681e      	ldr	r6, [r3, #0]
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f7f9 f986 	bl	8000230 <memchr>
 8006f24:	b108      	cbz	r0, 8006f2a <_printf_i+0x1e6>
 8006f26:	1b80      	subs	r0, r0, r6
 8006f28:	6060      	str	r0, [r4, #4]
 8006f2a:	6863      	ldr	r3, [r4, #4]
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f34:	e7aa      	b.n	8006e8c <_printf_i+0x148>
 8006f36:	6923      	ldr	r3, [r4, #16]
 8006f38:	4632      	mov	r2, r6
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	47d0      	blx	sl
 8006f40:	3001      	adds	r0, #1
 8006f42:	d0ad      	beq.n	8006ea0 <_printf_i+0x15c>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	079b      	lsls	r3, r3, #30
 8006f48:	d413      	bmi.n	8006f72 <_printf_i+0x22e>
 8006f4a:	68e0      	ldr	r0, [r4, #12]
 8006f4c:	9b03      	ldr	r3, [sp, #12]
 8006f4e:	4298      	cmp	r0, r3
 8006f50:	bfb8      	it	lt
 8006f52:	4618      	movlt	r0, r3
 8006f54:	e7a6      	b.n	8006ea4 <_printf_i+0x160>
 8006f56:	2301      	movs	r3, #1
 8006f58:	4632      	mov	r2, r6
 8006f5a:	4649      	mov	r1, r9
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	47d0      	blx	sl
 8006f60:	3001      	adds	r0, #1
 8006f62:	d09d      	beq.n	8006ea0 <_printf_i+0x15c>
 8006f64:	3501      	adds	r5, #1
 8006f66:	68e3      	ldr	r3, [r4, #12]
 8006f68:	9903      	ldr	r1, [sp, #12]
 8006f6a:	1a5b      	subs	r3, r3, r1
 8006f6c:	42ab      	cmp	r3, r5
 8006f6e:	dcf2      	bgt.n	8006f56 <_printf_i+0x212>
 8006f70:	e7eb      	b.n	8006f4a <_printf_i+0x206>
 8006f72:	2500      	movs	r5, #0
 8006f74:	f104 0619 	add.w	r6, r4, #25
 8006f78:	e7f5      	b.n	8006f66 <_printf_i+0x222>
 8006f7a:	bf00      	nop
 8006f7c:	0800b742 	.word	0x0800b742
 8006f80:	0800b753 	.word	0x0800b753

08006f84 <std>:
 8006f84:	2300      	movs	r3, #0
 8006f86:	b510      	push	{r4, lr}
 8006f88:	4604      	mov	r4, r0
 8006f8a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f92:	6083      	str	r3, [r0, #8]
 8006f94:	8181      	strh	r1, [r0, #12]
 8006f96:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f98:	81c2      	strh	r2, [r0, #14]
 8006f9a:	6183      	str	r3, [r0, #24]
 8006f9c:	4619      	mov	r1, r3
 8006f9e:	2208      	movs	r2, #8
 8006fa0:	305c      	adds	r0, #92	@ 0x5c
 8006fa2:	f000 f914 	bl	80071ce <memset>
 8006fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fdc <std+0x58>)
 8006fa8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006faa:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe0 <std+0x5c>)
 8006fac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006fae:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe4 <std+0x60>)
 8006fb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8006fe8 <std+0x64>)
 8006fb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006fec <std+0x68>)
 8006fb8:	6224      	str	r4, [r4, #32]
 8006fba:	429c      	cmp	r4, r3
 8006fbc:	d006      	beq.n	8006fcc <std+0x48>
 8006fbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006fc2:	4294      	cmp	r4, r2
 8006fc4:	d002      	beq.n	8006fcc <std+0x48>
 8006fc6:	33d0      	adds	r3, #208	@ 0xd0
 8006fc8:	429c      	cmp	r4, r3
 8006fca:	d105      	bne.n	8006fd8 <std+0x54>
 8006fcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fd4:	f000 b978 	b.w	80072c8 <__retarget_lock_init_recursive>
 8006fd8:	bd10      	pop	{r4, pc}
 8006fda:	bf00      	nop
 8006fdc:	08007149 	.word	0x08007149
 8006fe0:	0800716b 	.word	0x0800716b
 8006fe4:	080071a3 	.word	0x080071a3
 8006fe8:	080071c7 	.word	0x080071c7
 8006fec:	20002618 	.word	0x20002618

08006ff0 <stdio_exit_handler>:
 8006ff0:	4a02      	ldr	r2, [pc, #8]	@ (8006ffc <stdio_exit_handler+0xc>)
 8006ff2:	4903      	ldr	r1, [pc, #12]	@ (8007000 <stdio_exit_handler+0x10>)
 8006ff4:	4803      	ldr	r0, [pc, #12]	@ (8007004 <stdio_exit_handler+0x14>)
 8006ff6:	f000 b869 	b.w	80070cc <_fwalk_sglue>
 8006ffa:	bf00      	nop
 8006ffc:	200002c4 	.word	0x200002c4
 8007000:	08008c25 	.word	0x08008c25
 8007004:	200002d4 	.word	0x200002d4

08007008 <cleanup_stdio>:
 8007008:	6841      	ldr	r1, [r0, #4]
 800700a:	4b0c      	ldr	r3, [pc, #48]	@ (800703c <cleanup_stdio+0x34>)
 800700c:	4299      	cmp	r1, r3
 800700e:	b510      	push	{r4, lr}
 8007010:	4604      	mov	r4, r0
 8007012:	d001      	beq.n	8007018 <cleanup_stdio+0x10>
 8007014:	f001 fe06 	bl	8008c24 <_fflush_r>
 8007018:	68a1      	ldr	r1, [r4, #8]
 800701a:	4b09      	ldr	r3, [pc, #36]	@ (8007040 <cleanup_stdio+0x38>)
 800701c:	4299      	cmp	r1, r3
 800701e:	d002      	beq.n	8007026 <cleanup_stdio+0x1e>
 8007020:	4620      	mov	r0, r4
 8007022:	f001 fdff 	bl	8008c24 <_fflush_r>
 8007026:	68e1      	ldr	r1, [r4, #12]
 8007028:	4b06      	ldr	r3, [pc, #24]	@ (8007044 <cleanup_stdio+0x3c>)
 800702a:	4299      	cmp	r1, r3
 800702c:	d004      	beq.n	8007038 <cleanup_stdio+0x30>
 800702e:	4620      	mov	r0, r4
 8007030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007034:	f001 bdf6 	b.w	8008c24 <_fflush_r>
 8007038:	bd10      	pop	{r4, pc}
 800703a:	bf00      	nop
 800703c:	20002618 	.word	0x20002618
 8007040:	20002680 	.word	0x20002680
 8007044:	200026e8 	.word	0x200026e8

08007048 <global_stdio_init.part.0>:
 8007048:	b510      	push	{r4, lr}
 800704a:	4b0b      	ldr	r3, [pc, #44]	@ (8007078 <global_stdio_init.part.0+0x30>)
 800704c:	4c0b      	ldr	r4, [pc, #44]	@ (800707c <global_stdio_init.part.0+0x34>)
 800704e:	4a0c      	ldr	r2, [pc, #48]	@ (8007080 <global_stdio_init.part.0+0x38>)
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	4620      	mov	r0, r4
 8007054:	2200      	movs	r2, #0
 8007056:	2104      	movs	r1, #4
 8007058:	f7ff ff94 	bl	8006f84 <std>
 800705c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007060:	2201      	movs	r2, #1
 8007062:	2109      	movs	r1, #9
 8007064:	f7ff ff8e 	bl	8006f84 <std>
 8007068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800706c:	2202      	movs	r2, #2
 800706e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007072:	2112      	movs	r1, #18
 8007074:	f7ff bf86 	b.w	8006f84 <std>
 8007078:	20002750 	.word	0x20002750
 800707c:	20002618 	.word	0x20002618
 8007080:	08006ff1 	.word	0x08006ff1

08007084 <__sfp_lock_acquire>:
 8007084:	4801      	ldr	r0, [pc, #4]	@ (800708c <__sfp_lock_acquire+0x8>)
 8007086:	f000 b920 	b.w	80072ca <__retarget_lock_acquire_recursive>
 800708a:	bf00      	nop
 800708c:	20002759 	.word	0x20002759

08007090 <__sfp_lock_release>:
 8007090:	4801      	ldr	r0, [pc, #4]	@ (8007098 <__sfp_lock_release+0x8>)
 8007092:	f000 b91b 	b.w	80072cc <__retarget_lock_release_recursive>
 8007096:	bf00      	nop
 8007098:	20002759 	.word	0x20002759

0800709c <__sinit>:
 800709c:	b510      	push	{r4, lr}
 800709e:	4604      	mov	r4, r0
 80070a0:	f7ff fff0 	bl	8007084 <__sfp_lock_acquire>
 80070a4:	6a23      	ldr	r3, [r4, #32]
 80070a6:	b11b      	cbz	r3, 80070b0 <__sinit+0x14>
 80070a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ac:	f7ff bff0 	b.w	8007090 <__sfp_lock_release>
 80070b0:	4b04      	ldr	r3, [pc, #16]	@ (80070c4 <__sinit+0x28>)
 80070b2:	6223      	str	r3, [r4, #32]
 80070b4:	4b04      	ldr	r3, [pc, #16]	@ (80070c8 <__sinit+0x2c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1f5      	bne.n	80070a8 <__sinit+0xc>
 80070bc:	f7ff ffc4 	bl	8007048 <global_stdio_init.part.0>
 80070c0:	e7f2      	b.n	80070a8 <__sinit+0xc>
 80070c2:	bf00      	nop
 80070c4:	08007009 	.word	0x08007009
 80070c8:	20002750 	.word	0x20002750

080070cc <_fwalk_sglue>:
 80070cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070d0:	4607      	mov	r7, r0
 80070d2:	4688      	mov	r8, r1
 80070d4:	4614      	mov	r4, r2
 80070d6:	2600      	movs	r6, #0
 80070d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070dc:	f1b9 0901 	subs.w	r9, r9, #1
 80070e0:	d505      	bpl.n	80070ee <_fwalk_sglue+0x22>
 80070e2:	6824      	ldr	r4, [r4, #0]
 80070e4:	2c00      	cmp	r4, #0
 80070e6:	d1f7      	bne.n	80070d8 <_fwalk_sglue+0xc>
 80070e8:	4630      	mov	r0, r6
 80070ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ee:	89ab      	ldrh	r3, [r5, #12]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d907      	bls.n	8007104 <_fwalk_sglue+0x38>
 80070f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070f8:	3301      	adds	r3, #1
 80070fa:	d003      	beq.n	8007104 <_fwalk_sglue+0x38>
 80070fc:	4629      	mov	r1, r5
 80070fe:	4638      	mov	r0, r7
 8007100:	47c0      	blx	r8
 8007102:	4306      	orrs	r6, r0
 8007104:	3568      	adds	r5, #104	@ 0x68
 8007106:	e7e9      	b.n	80070dc <_fwalk_sglue+0x10>

08007108 <siprintf>:
 8007108:	b40e      	push	{r1, r2, r3}
 800710a:	b500      	push	{lr}
 800710c:	b09c      	sub	sp, #112	@ 0x70
 800710e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007110:	9002      	str	r0, [sp, #8]
 8007112:	9006      	str	r0, [sp, #24]
 8007114:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007118:	4809      	ldr	r0, [pc, #36]	@ (8007140 <siprintf+0x38>)
 800711a:	9107      	str	r1, [sp, #28]
 800711c:	9104      	str	r1, [sp, #16]
 800711e:	4909      	ldr	r1, [pc, #36]	@ (8007144 <siprintf+0x3c>)
 8007120:	f853 2b04 	ldr.w	r2, [r3], #4
 8007124:	9105      	str	r1, [sp, #20]
 8007126:	6800      	ldr	r0, [r0, #0]
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	a902      	add	r1, sp, #8
 800712c:	f001 fbfa 	bl	8008924 <_svfiprintf_r>
 8007130:	9b02      	ldr	r3, [sp, #8]
 8007132:	2200      	movs	r2, #0
 8007134:	701a      	strb	r2, [r3, #0]
 8007136:	b01c      	add	sp, #112	@ 0x70
 8007138:	f85d eb04 	ldr.w	lr, [sp], #4
 800713c:	b003      	add	sp, #12
 800713e:	4770      	bx	lr
 8007140:	200002d0 	.word	0x200002d0
 8007144:	ffff0208 	.word	0xffff0208

08007148 <__sread>:
 8007148:	b510      	push	{r4, lr}
 800714a:	460c      	mov	r4, r1
 800714c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007150:	f000 f86c 	bl	800722c <_read_r>
 8007154:	2800      	cmp	r0, #0
 8007156:	bfab      	itete	ge
 8007158:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800715a:	89a3      	ldrhlt	r3, [r4, #12]
 800715c:	181b      	addge	r3, r3, r0
 800715e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007162:	bfac      	ite	ge
 8007164:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007166:	81a3      	strhlt	r3, [r4, #12]
 8007168:	bd10      	pop	{r4, pc}

0800716a <__swrite>:
 800716a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800716e:	461f      	mov	r7, r3
 8007170:	898b      	ldrh	r3, [r1, #12]
 8007172:	05db      	lsls	r3, r3, #23
 8007174:	4605      	mov	r5, r0
 8007176:	460c      	mov	r4, r1
 8007178:	4616      	mov	r6, r2
 800717a:	d505      	bpl.n	8007188 <__swrite+0x1e>
 800717c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007180:	2302      	movs	r3, #2
 8007182:	2200      	movs	r2, #0
 8007184:	f000 f840 	bl	8007208 <_lseek_r>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800718e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	4632      	mov	r2, r6
 8007196:	463b      	mov	r3, r7
 8007198:	4628      	mov	r0, r5
 800719a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800719e:	f000 b857 	b.w	8007250 <_write_r>

080071a2 <__sseek>:
 80071a2:	b510      	push	{r4, lr}
 80071a4:	460c      	mov	r4, r1
 80071a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071aa:	f000 f82d 	bl	8007208 <_lseek_r>
 80071ae:	1c43      	adds	r3, r0, #1
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	bf15      	itete	ne
 80071b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80071b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80071ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80071be:	81a3      	strheq	r3, [r4, #12]
 80071c0:	bf18      	it	ne
 80071c2:	81a3      	strhne	r3, [r4, #12]
 80071c4:	bd10      	pop	{r4, pc}

080071c6 <__sclose>:
 80071c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071ca:	f000 b80d 	b.w	80071e8 <_close_r>

080071ce <memset>:
 80071ce:	4402      	add	r2, r0
 80071d0:	4603      	mov	r3, r0
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d100      	bne.n	80071d8 <memset+0xa>
 80071d6:	4770      	bx	lr
 80071d8:	f803 1b01 	strb.w	r1, [r3], #1
 80071dc:	e7f9      	b.n	80071d2 <memset+0x4>
	...

080071e0 <_localeconv_r>:
 80071e0:	4800      	ldr	r0, [pc, #0]	@ (80071e4 <_localeconv_r+0x4>)
 80071e2:	4770      	bx	lr
 80071e4:	20000410 	.word	0x20000410

080071e8 <_close_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4d06      	ldr	r5, [pc, #24]	@ (8007204 <_close_r+0x1c>)
 80071ec:	2300      	movs	r3, #0
 80071ee:	4604      	mov	r4, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	f7fa fae5 	bl	80017c2 <_close>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_close_r+0x1a>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_close_r+0x1a>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	20002754 	.word	0x20002754

08007208 <_lseek_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d07      	ldr	r5, [pc, #28]	@ (8007228 <_lseek_r+0x20>)
 800720c:	4604      	mov	r4, r0
 800720e:	4608      	mov	r0, r1
 8007210:	4611      	mov	r1, r2
 8007212:	2200      	movs	r2, #0
 8007214:	602a      	str	r2, [r5, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f7fa fafa 	bl	8001810 <_lseek>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_lseek_r+0x1e>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_lseek_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	20002754 	.word	0x20002754

0800722c <_read_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4d07      	ldr	r5, [pc, #28]	@ (800724c <_read_r+0x20>)
 8007230:	4604      	mov	r4, r0
 8007232:	4608      	mov	r0, r1
 8007234:	4611      	mov	r1, r2
 8007236:	2200      	movs	r2, #0
 8007238:	602a      	str	r2, [r5, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	f7fa fa88 	bl	8001750 <_read>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d102      	bne.n	800724a <_read_r+0x1e>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b103      	cbz	r3, 800724a <_read_r+0x1e>
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	20002754 	.word	0x20002754

08007250 <_write_r>:
 8007250:	b538      	push	{r3, r4, r5, lr}
 8007252:	4d07      	ldr	r5, [pc, #28]	@ (8007270 <_write_r+0x20>)
 8007254:	4604      	mov	r4, r0
 8007256:	4608      	mov	r0, r1
 8007258:	4611      	mov	r1, r2
 800725a:	2200      	movs	r2, #0
 800725c:	602a      	str	r2, [r5, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	f7fa fa93 	bl	800178a <_write>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d102      	bne.n	800726e <_write_r+0x1e>
 8007268:	682b      	ldr	r3, [r5, #0]
 800726a:	b103      	cbz	r3, 800726e <_write_r+0x1e>
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	20002754 	.word	0x20002754

08007274 <__errno>:
 8007274:	4b01      	ldr	r3, [pc, #4]	@ (800727c <__errno+0x8>)
 8007276:	6818      	ldr	r0, [r3, #0]
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	200002d0 	.word	0x200002d0

08007280 <__libc_init_array>:
 8007280:	b570      	push	{r4, r5, r6, lr}
 8007282:	4d0d      	ldr	r5, [pc, #52]	@ (80072b8 <__libc_init_array+0x38>)
 8007284:	4c0d      	ldr	r4, [pc, #52]	@ (80072bc <__libc_init_array+0x3c>)
 8007286:	1b64      	subs	r4, r4, r5
 8007288:	10a4      	asrs	r4, r4, #2
 800728a:	2600      	movs	r6, #0
 800728c:	42a6      	cmp	r6, r4
 800728e:	d109      	bne.n	80072a4 <__libc_init_array+0x24>
 8007290:	4d0b      	ldr	r5, [pc, #44]	@ (80072c0 <__libc_init_array+0x40>)
 8007292:	4c0c      	ldr	r4, [pc, #48]	@ (80072c4 <__libc_init_array+0x44>)
 8007294:	f002 f864 	bl	8009360 <_init>
 8007298:	1b64      	subs	r4, r4, r5
 800729a:	10a4      	asrs	r4, r4, #2
 800729c:	2600      	movs	r6, #0
 800729e:	42a6      	cmp	r6, r4
 80072a0:	d105      	bne.n	80072ae <__libc_init_array+0x2e>
 80072a2:	bd70      	pop	{r4, r5, r6, pc}
 80072a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a8:	4798      	blx	r3
 80072aa:	3601      	adds	r6, #1
 80072ac:	e7ee      	b.n	800728c <__libc_init_array+0xc>
 80072ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b2:	4798      	blx	r3
 80072b4:	3601      	adds	r6, #1
 80072b6:	e7f2      	b.n	800729e <__libc_init_array+0x1e>
 80072b8:	0800baa8 	.word	0x0800baa8
 80072bc:	0800baa8 	.word	0x0800baa8
 80072c0:	0800baa8 	.word	0x0800baa8
 80072c4:	0800baac 	.word	0x0800baac

080072c8 <__retarget_lock_init_recursive>:
 80072c8:	4770      	bx	lr

080072ca <__retarget_lock_acquire_recursive>:
 80072ca:	4770      	bx	lr

080072cc <__retarget_lock_release_recursive>:
 80072cc:	4770      	bx	lr

080072ce <quorem>:
 80072ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d2:	6903      	ldr	r3, [r0, #16]
 80072d4:	690c      	ldr	r4, [r1, #16]
 80072d6:	42a3      	cmp	r3, r4
 80072d8:	4607      	mov	r7, r0
 80072da:	db7e      	blt.n	80073da <quorem+0x10c>
 80072dc:	3c01      	subs	r4, #1
 80072de:	f101 0814 	add.w	r8, r1, #20
 80072e2:	00a3      	lsls	r3, r4, #2
 80072e4:	f100 0514 	add.w	r5, r0, #20
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072ee:	9301      	str	r3, [sp, #4]
 80072f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072f8:	3301      	adds	r3, #1
 80072fa:	429a      	cmp	r2, r3
 80072fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007300:	fbb2 f6f3 	udiv	r6, r2, r3
 8007304:	d32e      	bcc.n	8007364 <quorem+0x96>
 8007306:	f04f 0a00 	mov.w	sl, #0
 800730a:	46c4      	mov	ip, r8
 800730c:	46ae      	mov	lr, r5
 800730e:	46d3      	mov	fp, sl
 8007310:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007314:	b298      	uxth	r0, r3
 8007316:	fb06 a000 	mla	r0, r6, r0, sl
 800731a:	0c02      	lsrs	r2, r0, #16
 800731c:	0c1b      	lsrs	r3, r3, #16
 800731e:	fb06 2303 	mla	r3, r6, r3, r2
 8007322:	f8de 2000 	ldr.w	r2, [lr]
 8007326:	b280      	uxth	r0, r0
 8007328:	b292      	uxth	r2, r2
 800732a:	1a12      	subs	r2, r2, r0
 800732c:	445a      	add	r2, fp
 800732e:	f8de 0000 	ldr.w	r0, [lr]
 8007332:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007336:	b29b      	uxth	r3, r3
 8007338:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800733c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007340:	b292      	uxth	r2, r2
 8007342:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007346:	45e1      	cmp	r9, ip
 8007348:	f84e 2b04 	str.w	r2, [lr], #4
 800734c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007350:	d2de      	bcs.n	8007310 <quorem+0x42>
 8007352:	9b00      	ldr	r3, [sp, #0]
 8007354:	58eb      	ldr	r3, [r5, r3]
 8007356:	b92b      	cbnz	r3, 8007364 <quorem+0x96>
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	3b04      	subs	r3, #4
 800735c:	429d      	cmp	r5, r3
 800735e:	461a      	mov	r2, r3
 8007360:	d32f      	bcc.n	80073c2 <quorem+0xf4>
 8007362:	613c      	str	r4, [r7, #16]
 8007364:	4638      	mov	r0, r7
 8007366:	f001 f979 	bl	800865c <__mcmp>
 800736a:	2800      	cmp	r0, #0
 800736c:	db25      	blt.n	80073ba <quorem+0xec>
 800736e:	4629      	mov	r1, r5
 8007370:	2000      	movs	r0, #0
 8007372:	f858 2b04 	ldr.w	r2, [r8], #4
 8007376:	f8d1 c000 	ldr.w	ip, [r1]
 800737a:	fa1f fe82 	uxth.w	lr, r2
 800737e:	fa1f f38c 	uxth.w	r3, ip
 8007382:	eba3 030e 	sub.w	r3, r3, lr
 8007386:	4403      	add	r3, r0
 8007388:	0c12      	lsrs	r2, r2, #16
 800738a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800738e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007392:	b29b      	uxth	r3, r3
 8007394:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007398:	45c1      	cmp	r9, r8
 800739a:	f841 3b04 	str.w	r3, [r1], #4
 800739e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80073a2:	d2e6      	bcs.n	8007372 <quorem+0xa4>
 80073a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073ac:	b922      	cbnz	r2, 80073b8 <quorem+0xea>
 80073ae:	3b04      	subs	r3, #4
 80073b0:	429d      	cmp	r5, r3
 80073b2:	461a      	mov	r2, r3
 80073b4:	d30b      	bcc.n	80073ce <quorem+0x100>
 80073b6:	613c      	str	r4, [r7, #16]
 80073b8:	3601      	adds	r6, #1
 80073ba:	4630      	mov	r0, r6
 80073bc:	b003      	add	sp, #12
 80073be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c2:	6812      	ldr	r2, [r2, #0]
 80073c4:	3b04      	subs	r3, #4
 80073c6:	2a00      	cmp	r2, #0
 80073c8:	d1cb      	bne.n	8007362 <quorem+0x94>
 80073ca:	3c01      	subs	r4, #1
 80073cc:	e7c6      	b.n	800735c <quorem+0x8e>
 80073ce:	6812      	ldr	r2, [r2, #0]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	2a00      	cmp	r2, #0
 80073d4:	d1ef      	bne.n	80073b6 <quorem+0xe8>
 80073d6:	3c01      	subs	r4, #1
 80073d8:	e7ea      	b.n	80073b0 <quorem+0xe2>
 80073da:	2000      	movs	r0, #0
 80073dc:	e7ee      	b.n	80073bc <quorem+0xee>
	...

080073e0 <_dtoa_r>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	69c7      	ldr	r7, [r0, #28]
 80073e6:	b099      	sub	sp, #100	@ 0x64
 80073e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073ec:	ec55 4b10 	vmov	r4, r5, d0
 80073f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80073f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80073f4:	4683      	mov	fp, r0
 80073f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80073f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073fa:	b97f      	cbnz	r7, 800741c <_dtoa_r+0x3c>
 80073fc:	2010      	movs	r0, #16
 80073fe:	f000 fdfd 	bl	8007ffc <malloc>
 8007402:	4602      	mov	r2, r0
 8007404:	f8cb 001c 	str.w	r0, [fp, #28]
 8007408:	b920      	cbnz	r0, 8007414 <_dtoa_r+0x34>
 800740a:	4ba7      	ldr	r3, [pc, #668]	@ (80076a8 <_dtoa_r+0x2c8>)
 800740c:	21ef      	movs	r1, #239	@ 0xef
 800740e:	48a7      	ldr	r0, [pc, #668]	@ (80076ac <_dtoa_r+0x2cc>)
 8007410:	f001 fc68 	bl	8008ce4 <__assert_func>
 8007414:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007418:	6007      	str	r7, [r0, #0]
 800741a:	60c7      	str	r7, [r0, #12]
 800741c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007420:	6819      	ldr	r1, [r3, #0]
 8007422:	b159      	cbz	r1, 800743c <_dtoa_r+0x5c>
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	604a      	str	r2, [r1, #4]
 8007428:	2301      	movs	r3, #1
 800742a:	4093      	lsls	r3, r2
 800742c:	608b      	str	r3, [r1, #8]
 800742e:	4658      	mov	r0, fp
 8007430:	f000 feda 	bl	80081e8 <_Bfree>
 8007434:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	1e2b      	subs	r3, r5, #0
 800743e:	bfb9      	ittee	lt
 8007440:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007444:	9303      	strlt	r3, [sp, #12]
 8007446:	2300      	movge	r3, #0
 8007448:	6033      	strge	r3, [r6, #0]
 800744a:	9f03      	ldr	r7, [sp, #12]
 800744c:	4b98      	ldr	r3, [pc, #608]	@ (80076b0 <_dtoa_r+0x2d0>)
 800744e:	bfbc      	itt	lt
 8007450:	2201      	movlt	r2, #1
 8007452:	6032      	strlt	r2, [r6, #0]
 8007454:	43bb      	bics	r3, r7
 8007456:	d112      	bne.n	800747e <_dtoa_r+0x9e>
 8007458:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800745a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800745e:	6013      	str	r3, [r2, #0]
 8007460:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007464:	4323      	orrs	r3, r4
 8007466:	f000 854d 	beq.w	8007f04 <_dtoa_r+0xb24>
 800746a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800746c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80076c4 <_dtoa_r+0x2e4>
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 854f 	beq.w	8007f14 <_dtoa_r+0xb34>
 8007476:	f10a 0303 	add.w	r3, sl, #3
 800747a:	f000 bd49 	b.w	8007f10 <_dtoa_r+0xb30>
 800747e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	ec51 0b17 	vmov	r0, r1, d7
 8007488:	2300      	movs	r3, #0
 800748a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800748e:	f7f9 fb4b 	bl	8000b28 <__aeabi_dcmpeq>
 8007492:	4680      	mov	r8, r0
 8007494:	b158      	cbz	r0, 80074ae <_dtoa_r+0xce>
 8007496:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007498:	2301      	movs	r3, #1
 800749a:	6013      	str	r3, [r2, #0]
 800749c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800749e:	b113      	cbz	r3, 80074a6 <_dtoa_r+0xc6>
 80074a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80074a2:	4b84      	ldr	r3, [pc, #528]	@ (80076b4 <_dtoa_r+0x2d4>)
 80074a4:	6013      	str	r3, [r2, #0]
 80074a6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80076c8 <_dtoa_r+0x2e8>
 80074aa:	f000 bd33 	b.w	8007f14 <_dtoa_r+0xb34>
 80074ae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80074b2:	aa16      	add	r2, sp, #88	@ 0x58
 80074b4:	a917      	add	r1, sp, #92	@ 0x5c
 80074b6:	4658      	mov	r0, fp
 80074b8:	f001 f980 	bl	80087bc <__d2b>
 80074bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80074c0:	4681      	mov	r9, r0
 80074c2:	2e00      	cmp	r6, #0
 80074c4:	d077      	beq.n	80075b6 <_dtoa_r+0x1d6>
 80074c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074c8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80074cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80074d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80074dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074e0:	4619      	mov	r1, r3
 80074e2:	2200      	movs	r2, #0
 80074e4:	4b74      	ldr	r3, [pc, #464]	@ (80076b8 <_dtoa_r+0x2d8>)
 80074e6:	f7f8 feff 	bl	80002e8 <__aeabi_dsub>
 80074ea:	a369      	add	r3, pc, #420	@ (adr r3, 8007690 <_dtoa_r+0x2b0>)
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f7f9 f8b2 	bl	8000658 <__aeabi_dmul>
 80074f4:	a368      	add	r3, pc, #416	@ (adr r3, 8007698 <_dtoa_r+0x2b8>)
 80074f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074fa:	f7f8 fef7 	bl	80002ec <__adddf3>
 80074fe:	4604      	mov	r4, r0
 8007500:	4630      	mov	r0, r6
 8007502:	460d      	mov	r5, r1
 8007504:	f7f9 f83e 	bl	8000584 <__aeabi_i2d>
 8007508:	a365      	add	r3, pc, #404	@ (adr r3, 80076a0 <_dtoa_r+0x2c0>)
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f9 f8a3 	bl	8000658 <__aeabi_dmul>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4620      	mov	r0, r4
 8007518:	4629      	mov	r1, r5
 800751a:	f7f8 fee7 	bl	80002ec <__adddf3>
 800751e:	4604      	mov	r4, r0
 8007520:	460d      	mov	r5, r1
 8007522:	f7f9 fb49 	bl	8000bb8 <__aeabi_d2iz>
 8007526:	2200      	movs	r2, #0
 8007528:	4607      	mov	r7, r0
 800752a:	2300      	movs	r3, #0
 800752c:	4620      	mov	r0, r4
 800752e:	4629      	mov	r1, r5
 8007530:	f7f9 fb04 	bl	8000b3c <__aeabi_dcmplt>
 8007534:	b140      	cbz	r0, 8007548 <_dtoa_r+0x168>
 8007536:	4638      	mov	r0, r7
 8007538:	f7f9 f824 	bl	8000584 <__aeabi_i2d>
 800753c:	4622      	mov	r2, r4
 800753e:	462b      	mov	r3, r5
 8007540:	f7f9 faf2 	bl	8000b28 <__aeabi_dcmpeq>
 8007544:	b900      	cbnz	r0, 8007548 <_dtoa_r+0x168>
 8007546:	3f01      	subs	r7, #1
 8007548:	2f16      	cmp	r7, #22
 800754a:	d851      	bhi.n	80075f0 <_dtoa_r+0x210>
 800754c:	4b5b      	ldr	r3, [pc, #364]	@ (80076bc <_dtoa_r+0x2dc>)
 800754e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007556:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800755a:	f7f9 faef 	bl	8000b3c <__aeabi_dcmplt>
 800755e:	2800      	cmp	r0, #0
 8007560:	d048      	beq.n	80075f4 <_dtoa_r+0x214>
 8007562:	3f01      	subs	r7, #1
 8007564:	2300      	movs	r3, #0
 8007566:	9312      	str	r3, [sp, #72]	@ 0x48
 8007568:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800756a:	1b9b      	subs	r3, r3, r6
 800756c:	1e5a      	subs	r2, r3, #1
 800756e:	bf44      	itt	mi
 8007570:	f1c3 0801 	rsbmi	r8, r3, #1
 8007574:	2300      	movmi	r3, #0
 8007576:	9208      	str	r2, [sp, #32]
 8007578:	bf54      	ite	pl
 800757a:	f04f 0800 	movpl.w	r8, #0
 800757e:	9308      	strmi	r3, [sp, #32]
 8007580:	2f00      	cmp	r7, #0
 8007582:	db39      	blt.n	80075f8 <_dtoa_r+0x218>
 8007584:	9b08      	ldr	r3, [sp, #32]
 8007586:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007588:	443b      	add	r3, r7
 800758a:	9308      	str	r3, [sp, #32]
 800758c:	2300      	movs	r3, #0
 800758e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007592:	2b09      	cmp	r3, #9
 8007594:	d864      	bhi.n	8007660 <_dtoa_r+0x280>
 8007596:	2b05      	cmp	r3, #5
 8007598:	bfc4      	itt	gt
 800759a:	3b04      	subgt	r3, #4
 800759c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800759e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075a0:	f1a3 0302 	sub.w	r3, r3, #2
 80075a4:	bfcc      	ite	gt
 80075a6:	2400      	movgt	r4, #0
 80075a8:	2401      	movle	r4, #1
 80075aa:	2b03      	cmp	r3, #3
 80075ac:	d863      	bhi.n	8007676 <_dtoa_r+0x296>
 80075ae:	e8df f003 	tbb	[pc, r3]
 80075b2:	372a      	.short	0x372a
 80075b4:	5535      	.short	0x5535
 80075b6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80075ba:	441e      	add	r6, r3
 80075bc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80075c0:	2b20      	cmp	r3, #32
 80075c2:	bfc1      	itttt	gt
 80075c4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80075c8:	409f      	lslgt	r7, r3
 80075ca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80075ce:	fa24 f303 	lsrgt.w	r3, r4, r3
 80075d2:	bfd6      	itet	le
 80075d4:	f1c3 0320 	rsble	r3, r3, #32
 80075d8:	ea47 0003 	orrgt.w	r0, r7, r3
 80075dc:	fa04 f003 	lslle.w	r0, r4, r3
 80075e0:	f7f8 ffc0 	bl	8000564 <__aeabi_ui2d>
 80075e4:	2201      	movs	r2, #1
 80075e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075ea:	3e01      	subs	r6, #1
 80075ec:	9214      	str	r2, [sp, #80]	@ 0x50
 80075ee:	e777      	b.n	80074e0 <_dtoa_r+0x100>
 80075f0:	2301      	movs	r3, #1
 80075f2:	e7b8      	b.n	8007566 <_dtoa_r+0x186>
 80075f4:	9012      	str	r0, [sp, #72]	@ 0x48
 80075f6:	e7b7      	b.n	8007568 <_dtoa_r+0x188>
 80075f8:	427b      	negs	r3, r7
 80075fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80075fc:	2300      	movs	r3, #0
 80075fe:	eba8 0807 	sub.w	r8, r8, r7
 8007602:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007604:	e7c4      	b.n	8007590 <_dtoa_r+0x1b0>
 8007606:	2300      	movs	r3, #0
 8007608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800760a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800760c:	2b00      	cmp	r3, #0
 800760e:	dc35      	bgt.n	800767c <_dtoa_r+0x29c>
 8007610:	2301      	movs	r3, #1
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	9307      	str	r3, [sp, #28]
 8007616:	461a      	mov	r2, r3
 8007618:	920e      	str	r2, [sp, #56]	@ 0x38
 800761a:	e00b      	b.n	8007634 <_dtoa_r+0x254>
 800761c:	2301      	movs	r3, #1
 800761e:	e7f3      	b.n	8007608 <_dtoa_r+0x228>
 8007620:	2300      	movs	r3, #0
 8007622:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007624:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	3301      	adds	r3, #1
 800762c:	2b01      	cmp	r3, #1
 800762e:	9307      	str	r3, [sp, #28]
 8007630:	bfb8      	it	lt
 8007632:	2301      	movlt	r3, #1
 8007634:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007638:	2100      	movs	r1, #0
 800763a:	2204      	movs	r2, #4
 800763c:	f102 0514 	add.w	r5, r2, #20
 8007640:	429d      	cmp	r5, r3
 8007642:	d91f      	bls.n	8007684 <_dtoa_r+0x2a4>
 8007644:	6041      	str	r1, [r0, #4]
 8007646:	4658      	mov	r0, fp
 8007648:	f000 fd8e 	bl	8008168 <_Balloc>
 800764c:	4682      	mov	sl, r0
 800764e:	2800      	cmp	r0, #0
 8007650:	d13c      	bne.n	80076cc <_dtoa_r+0x2ec>
 8007652:	4b1b      	ldr	r3, [pc, #108]	@ (80076c0 <_dtoa_r+0x2e0>)
 8007654:	4602      	mov	r2, r0
 8007656:	f240 11af 	movw	r1, #431	@ 0x1af
 800765a:	e6d8      	b.n	800740e <_dtoa_r+0x2e>
 800765c:	2301      	movs	r3, #1
 800765e:	e7e0      	b.n	8007622 <_dtoa_r+0x242>
 8007660:	2401      	movs	r4, #1
 8007662:	2300      	movs	r3, #0
 8007664:	9309      	str	r3, [sp, #36]	@ 0x24
 8007666:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007668:	f04f 33ff 	mov.w	r3, #4294967295
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	9307      	str	r3, [sp, #28]
 8007670:	2200      	movs	r2, #0
 8007672:	2312      	movs	r3, #18
 8007674:	e7d0      	b.n	8007618 <_dtoa_r+0x238>
 8007676:	2301      	movs	r3, #1
 8007678:	930b      	str	r3, [sp, #44]	@ 0x2c
 800767a:	e7f5      	b.n	8007668 <_dtoa_r+0x288>
 800767c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	e7d7      	b.n	8007634 <_dtoa_r+0x254>
 8007684:	3101      	adds	r1, #1
 8007686:	0052      	lsls	r2, r2, #1
 8007688:	e7d8      	b.n	800763c <_dtoa_r+0x25c>
 800768a:	bf00      	nop
 800768c:	f3af 8000 	nop.w
 8007690:	636f4361 	.word	0x636f4361
 8007694:	3fd287a7 	.word	0x3fd287a7
 8007698:	8b60c8b3 	.word	0x8b60c8b3
 800769c:	3fc68a28 	.word	0x3fc68a28
 80076a0:	509f79fb 	.word	0x509f79fb
 80076a4:	3fd34413 	.word	0x3fd34413
 80076a8:	0800b771 	.word	0x0800b771
 80076ac:	0800b788 	.word	0x0800b788
 80076b0:	7ff00000 	.word	0x7ff00000
 80076b4:	0800b741 	.word	0x0800b741
 80076b8:	3ff80000 	.word	0x3ff80000
 80076bc:	0800b880 	.word	0x0800b880
 80076c0:	0800b7e0 	.word	0x0800b7e0
 80076c4:	0800b76d 	.word	0x0800b76d
 80076c8:	0800b740 	.word	0x0800b740
 80076cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076d0:	6018      	str	r0, [r3, #0]
 80076d2:	9b07      	ldr	r3, [sp, #28]
 80076d4:	2b0e      	cmp	r3, #14
 80076d6:	f200 80a4 	bhi.w	8007822 <_dtoa_r+0x442>
 80076da:	2c00      	cmp	r4, #0
 80076dc:	f000 80a1 	beq.w	8007822 <_dtoa_r+0x442>
 80076e0:	2f00      	cmp	r7, #0
 80076e2:	dd33      	ble.n	800774c <_dtoa_r+0x36c>
 80076e4:	4bad      	ldr	r3, [pc, #692]	@ (800799c <_dtoa_r+0x5bc>)
 80076e6:	f007 020f 	and.w	r2, r7, #15
 80076ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076ee:	ed93 7b00 	vldr	d7, [r3]
 80076f2:	05f8      	lsls	r0, r7, #23
 80076f4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076fc:	d516      	bpl.n	800772c <_dtoa_r+0x34c>
 80076fe:	4ba8      	ldr	r3, [pc, #672]	@ (80079a0 <_dtoa_r+0x5c0>)
 8007700:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007704:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007708:	f7f9 f8d0 	bl	80008ac <__aeabi_ddiv>
 800770c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007710:	f004 040f 	and.w	r4, r4, #15
 8007714:	2603      	movs	r6, #3
 8007716:	4da2      	ldr	r5, [pc, #648]	@ (80079a0 <_dtoa_r+0x5c0>)
 8007718:	b954      	cbnz	r4, 8007730 <_dtoa_r+0x350>
 800771a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800771e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007722:	f7f9 f8c3 	bl	80008ac <__aeabi_ddiv>
 8007726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800772a:	e028      	b.n	800777e <_dtoa_r+0x39e>
 800772c:	2602      	movs	r6, #2
 800772e:	e7f2      	b.n	8007716 <_dtoa_r+0x336>
 8007730:	07e1      	lsls	r1, r4, #31
 8007732:	d508      	bpl.n	8007746 <_dtoa_r+0x366>
 8007734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800773c:	f7f8 ff8c 	bl	8000658 <__aeabi_dmul>
 8007740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007744:	3601      	adds	r6, #1
 8007746:	1064      	asrs	r4, r4, #1
 8007748:	3508      	adds	r5, #8
 800774a:	e7e5      	b.n	8007718 <_dtoa_r+0x338>
 800774c:	f000 80d2 	beq.w	80078f4 <_dtoa_r+0x514>
 8007750:	427c      	negs	r4, r7
 8007752:	4b92      	ldr	r3, [pc, #584]	@ (800799c <_dtoa_r+0x5bc>)
 8007754:	4d92      	ldr	r5, [pc, #584]	@ (80079a0 <_dtoa_r+0x5c0>)
 8007756:	f004 020f 	and.w	r2, r4, #15
 800775a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007766:	f7f8 ff77 	bl	8000658 <__aeabi_dmul>
 800776a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800776e:	1124      	asrs	r4, r4, #4
 8007770:	2300      	movs	r3, #0
 8007772:	2602      	movs	r6, #2
 8007774:	2c00      	cmp	r4, #0
 8007776:	f040 80b2 	bne.w	80078de <_dtoa_r+0x4fe>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1d3      	bne.n	8007726 <_dtoa_r+0x346>
 800777e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007780:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80b7 	beq.w	80078f8 <_dtoa_r+0x518>
 800778a:	4b86      	ldr	r3, [pc, #536]	@ (80079a4 <_dtoa_r+0x5c4>)
 800778c:	2200      	movs	r2, #0
 800778e:	4620      	mov	r0, r4
 8007790:	4629      	mov	r1, r5
 8007792:	f7f9 f9d3 	bl	8000b3c <__aeabi_dcmplt>
 8007796:	2800      	cmp	r0, #0
 8007798:	f000 80ae 	beq.w	80078f8 <_dtoa_r+0x518>
 800779c:	9b07      	ldr	r3, [sp, #28]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	f000 80aa 	beq.w	80078f8 <_dtoa_r+0x518>
 80077a4:	9b00      	ldr	r3, [sp, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	dd37      	ble.n	800781a <_dtoa_r+0x43a>
 80077aa:	1e7b      	subs	r3, r7, #1
 80077ac:	9304      	str	r3, [sp, #16]
 80077ae:	4620      	mov	r0, r4
 80077b0:	4b7d      	ldr	r3, [pc, #500]	@ (80079a8 <_dtoa_r+0x5c8>)
 80077b2:	2200      	movs	r2, #0
 80077b4:	4629      	mov	r1, r5
 80077b6:	f7f8 ff4f 	bl	8000658 <__aeabi_dmul>
 80077ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077be:	9c00      	ldr	r4, [sp, #0]
 80077c0:	3601      	adds	r6, #1
 80077c2:	4630      	mov	r0, r6
 80077c4:	f7f8 fede 	bl	8000584 <__aeabi_i2d>
 80077c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077cc:	f7f8 ff44 	bl	8000658 <__aeabi_dmul>
 80077d0:	4b76      	ldr	r3, [pc, #472]	@ (80079ac <_dtoa_r+0x5cc>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	f7f8 fd8a 	bl	80002ec <__adddf3>
 80077d8:	4605      	mov	r5, r0
 80077da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077de:	2c00      	cmp	r4, #0
 80077e0:	f040 808d 	bne.w	80078fe <_dtoa_r+0x51e>
 80077e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e8:	4b71      	ldr	r3, [pc, #452]	@ (80079b0 <_dtoa_r+0x5d0>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	f7f8 fd7c 	bl	80002e8 <__aeabi_dsub>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077f8:	462a      	mov	r2, r5
 80077fa:	4633      	mov	r3, r6
 80077fc:	f7f9 f9bc 	bl	8000b78 <__aeabi_dcmpgt>
 8007800:	2800      	cmp	r0, #0
 8007802:	f040 828b 	bne.w	8007d1c <_dtoa_r+0x93c>
 8007806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800780a:	462a      	mov	r2, r5
 800780c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007810:	f7f9 f994 	bl	8000b3c <__aeabi_dcmplt>
 8007814:	2800      	cmp	r0, #0
 8007816:	f040 8128 	bne.w	8007a6a <_dtoa_r+0x68a>
 800781a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800781e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007822:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007824:	2b00      	cmp	r3, #0
 8007826:	f2c0 815a 	blt.w	8007ade <_dtoa_r+0x6fe>
 800782a:	2f0e      	cmp	r7, #14
 800782c:	f300 8157 	bgt.w	8007ade <_dtoa_r+0x6fe>
 8007830:	4b5a      	ldr	r3, [pc, #360]	@ (800799c <_dtoa_r+0x5bc>)
 8007832:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007836:	ed93 7b00 	vldr	d7, [r3]
 800783a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800783c:	2b00      	cmp	r3, #0
 800783e:	ed8d 7b00 	vstr	d7, [sp]
 8007842:	da03      	bge.n	800784c <_dtoa_r+0x46c>
 8007844:	9b07      	ldr	r3, [sp, #28]
 8007846:	2b00      	cmp	r3, #0
 8007848:	f340 8101 	ble.w	8007a4e <_dtoa_r+0x66e>
 800784c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007850:	4656      	mov	r6, sl
 8007852:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007856:	4620      	mov	r0, r4
 8007858:	4629      	mov	r1, r5
 800785a:	f7f9 f827 	bl	80008ac <__aeabi_ddiv>
 800785e:	f7f9 f9ab 	bl	8000bb8 <__aeabi_d2iz>
 8007862:	4680      	mov	r8, r0
 8007864:	f7f8 fe8e 	bl	8000584 <__aeabi_i2d>
 8007868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800786c:	f7f8 fef4 	bl	8000658 <__aeabi_dmul>
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4620      	mov	r0, r4
 8007876:	4629      	mov	r1, r5
 8007878:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800787c:	f7f8 fd34 	bl	80002e8 <__aeabi_dsub>
 8007880:	f806 4b01 	strb.w	r4, [r6], #1
 8007884:	9d07      	ldr	r5, [sp, #28]
 8007886:	eba6 040a 	sub.w	r4, r6, sl
 800788a:	42a5      	cmp	r5, r4
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	f040 8117 	bne.w	8007ac2 <_dtoa_r+0x6e2>
 8007894:	f7f8 fd2a 	bl	80002ec <__adddf3>
 8007898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800789c:	4604      	mov	r4, r0
 800789e:	460d      	mov	r5, r1
 80078a0:	f7f9 f96a 	bl	8000b78 <__aeabi_dcmpgt>
 80078a4:	2800      	cmp	r0, #0
 80078a6:	f040 80f9 	bne.w	8007a9c <_dtoa_r+0x6bc>
 80078aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ae:	4620      	mov	r0, r4
 80078b0:	4629      	mov	r1, r5
 80078b2:	f7f9 f939 	bl	8000b28 <__aeabi_dcmpeq>
 80078b6:	b118      	cbz	r0, 80078c0 <_dtoa_r+0x4e0>
 80078b8:	f018 0f01 	tst.w	r8, #1
 80078bc:	f040 80ee 	bne.w	8007a9c <_dtoa_r+0x6bc>
 80078c0:	4649      	mov	r1, r9
 80078c2:	4658      	mov	r0, fp
 80078c4:	f000 fc90 	bl	80081e8 <_Bfree>
 80078c8:	2300      	movs	r3, #0
 80078ca:	7033      	strb	r3, [r6, #0]
 80078cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078ce:	3701      	adds	r7, #1
 80078d0:	601f      	str	r7, [r3, #0]
 80078d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 831d 	beq.w	8007f14 <_dtoa_r+0xb34>
 80078da:	601e      	str	r6, [r3, #0]
 80078dc:	e31a      	b.n	8007f14 <_dtoa_r+0xb34>
 80078de:	07e2      	lsls	r2, r4, #31
 80078e0:	d505      	bpl.n	80078ee <_dtoa_r+0x50e>
 80078e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078e6:	f7f8 feb7 	bl	8000658 <__aeabi_dmul>
 80078ea:	3601      	adds	r6, #1
 80078ec:	2301      	movs	r3, #1
 80078ee:	1064      	asrs	r4, r4, #1
 80078f0:	3508      	adds	r5, #8
 80078f2:	e73f      	b.n	8007774 <_dtoa_r+0x394>
 80078f4:	2602      	movs	r6, #2
 80078f6:	e742      	b.n	800777e <_dtoa_r+0x39e>
 80078f8:	9c07      	ldr	r4, [sp, #28]
 80078fa:	9704      	str	r7, [sp, #16]
 80078fc:	e761      	b.n	80077c2 <_dtoa_r+0x3e2>
 80078fe:	4b27      	ldr	r3, [pc, #156]	@ (800799c <_dtoa_r+0x5bc>)
 8007900:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007902:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007906:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800790a:	4454      	add	r4, sl
 800790c:	2900      	cmp	r1, #0
 800790e:	d053      	beq.n	80079b8 <_dtoa_r+0x5d8>
 8007910:	4928      	ldr	r1, [pc, #160]	@ (80079b4 <_dtoa_r+0x5d4>)
 8007912:	2000      	movs	r0, #0
 8007914:	f7f8 ffca 	bl	80008ac <__aeabi_ddiv>
 8007918:	4633      	mov	r3, r6
 800791a:	462a      	mov	r2, r5
 800791c:	f7f8 fce4 	bl	80002e8 <__aeabi_dsub>
 8007920:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007924:	4656      	mov	r6, sl
 8007926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800792a:	f7f9 f945 	bl	8000bb8 <__aeabi_d2iz>
 800792e:	4605      	mov	r5, r0
 8007930:	f7f8 fe28 	bl	8000584 <__aeabi_i2d>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800793c:	f7f8 fcd4 	bl	80002e8 <__aeabi_dsub>
 8007940:	3530      	adds	r5, #48	@ 0x30
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800794a:	f806 5b01 	strb.w	r5, [r6], #1
 800794e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007952:	f7f9 f8f3 	bl	8000b3c <__aeabi_dcmplt>
 8007956:	2800      	cmp	r0, #0
 8007958:	d171      	bne.n	8007a3e <_dtoa_r+0x65e>
 800795a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800795e:	4911      	ldr	r1, [pc, #68]	@ (80079a4 <_dtoa_r+0x5c4>)
 8007960:	2000      	movs	r0, #0
 8007962:	f7f8 fcc1 	bl	80002e8 <__aeabi_dsub>
 8007966:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800796a:	f7f9 f8e7 	bl	8000b3c <__aeabi_dcmplt>
 800796e:	2800      	cmp	r0, #0
 8007970:	f040 8095 	bne.w	8007a9e <_dtoa_r+0x6be>
 8007974:	42a6      	cmp	r6, r4
 8007976:	f43f af50 	beq.w	800781a <_dtoa_r+0x43a>
 800797a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800797e:	4b0a      	ldr	r3, [pc, #40]	@ (80079a8 <_dtoa_r+0x5c8>)
 8007980:	2200      	movs	r2, #0
 8007982:	f7f8 fe69 	bl	8000658 <__aeabi_dmul>
 8007986:	4b08      	ldr	r3, [pc, #32]	@ (80079a8 <_dtoa_r+0x5c8>)
 8007988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800798c:	2200      	movs	r2, #0
 800798e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007992:	f7f8 fe61 	bl	8000658 <__aeabi_dmul>
 8007996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800799a:	e7c4      	b.n	8007926 <_dtoa_r+0x546>
 800799c:	0800b880 	.word	0x0800b880
 80079a0:	0800b858 	.word	0x0800b858
 80079a4:	3ff00000 	.word	0x3ff00000
 80079a8:	40240000 	.word	0x40240000
 80079ac:	401c0000 	.word	0x401c0000
 80079b0:	40140000 	.word	0x40140000
 80079b4:	3fe00000 	.word	0x3fe00000
 80079b8:	4631      	mov	r1, r6
 80079ba:	4628      	mov	r0, r5
 80079bc:	f7f8 fe4c 	bl	8000658 <__aeabi_dmul>
 80079c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80079c4:	9415      	str	r4, [sp, #84]	@ 0x54
 80079c6:	4656      	mov	r6, sl
 80079c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079cc:	f7f9 f8f4 	bl	8000bb8 <__aeabi_d2iz>
 80079d0:	4605      	mov	r5, r0
 80079d2:	f7f8 fdd7 	bl	8000584 <__aeabi_i2d>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079de:	f7f8 fc83 	bl	80002e8 <__aeabi_dsub>
 80079e2:	3530      	adds	r5, #48	@ 0x30
 80079e4:	f806 5b01 	strb.w	r5, [r6], #1
 80079e8:	4602      	mov	r2, r0
 80079ea:	460b      	mov	r3, r1
 80079ec:	42a6      	cmp	r6, r4
 80079ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079f2:	f04f 0200 	mov.w	r2, #0
 80079f6:	d124      	bne.n	8007a42 <_dtoa_r+0x662>
 80079f8:	4bac      	ldr	r3, [pc, #688]	@ (8007cac <_dtoa_r+0x8cc>)
 80079fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079fe:	f7f8 fc75 	bl	80002ec <__adddf3>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
 8007a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a0a:	f7f9 f8b5 	bl	8000b78 <__aeabi_dcmpgt>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d145      	bne.n	8007a9e <_dtoa_r+0x6be>
 8007a12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a16:	49a5      	ldr	r1, [pc, #660]	@ (8007cac <_dtoa_r+0x8cc>)
 8007a18:	2000      	movs	r0, #0
 8007a1a:	f7f8 fc65 	bl	80002e8 <__aeabi_dsub>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	460b      	mov	r3, r1
 8007a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a26:	f7f9 f889 	bl	8000b3c <__aeabi_dcmplt>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	f43f aef5 	beq.w	800781a <_dtoa_r+0x43a>
 8007a30:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007a32:	1e73      	subs	r3, r6, #1
 8007a34:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a3a:	2b30      	cmp	r3, #48	@ 0x30
 8007a3c:	d0f8      	beq.n	8007a30 <_dtoa_r+0x650>
 8007a3e:	9f04      	ldr	r7, [sp, #16]
 8007a40:	e73e      	b.n	80078c0 <_dtoa_r+0x4e0>
 8007a42:	4b9b      	ldr	r3, [pc, #620]	@ (8007cb0 <_dtoa_r+0x8d0>)
 8007a44:	f7f8 fe08 	bl	8000658 <__aeabi_dmul>
 8007a48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a4c:	e7bc      	b.n	80079c8 <_dtoa_r+0x5e8>
 8007a4e:	d10c      	bne.n	8007a6a <_dtoa_r+0x68a>
 8007a50:	4b98      	ldr	r3, [pc, #608]	@ (8007cb4 <_dtoa_r+0x8d4>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a58:	f7f8 fdfe 	bl	8000658 <__aeabi_dmul>
 8007a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a60:	f7f9 f880 	bl	8000b64 <__aeabi_dcmpge>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f000 8157 	beq.w	8007d18 <_dtoa_r+0x938>
 8007a6a:	2400      	movs	r4, #0
 8007a6c:	4625      	mov	r5, r4
 8007a6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a70:	43db      	mvns	r3, r3
 8007a72:	9304      	str	r3, [sp, #16]
 8007a74:	4656      	mov	r6, sl
 8007a76:	2700      	movs	r7, #0
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4658      	mov	r0, fp
 8007a7c:	f000 fbb4 	bl	80081e8 <_Bfree>
 8007a80:	2d00      	cmp	r5, #0
 8007a82:	d0dc      	beq.n	8007a3e <_dtoa_r+0x65e>
 8007a84:	b12f      	cbz	r7, 8007a92 <_dtoa_r+0x6b2>
 8007a86:	42af      	cmp	r7, r5
 8007a88:	d003      	beq.n	8007a92 <_dtoa_r+0x6b2>
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	4658      	mov	r0, fp
 8007a8e:	f000 fbab 	bl	80081e8 <_Bfree>
 8007a92:	4629      	mov	r1, r5
 8007a94:	4658      	mov	r0, fp
 8007a96:	f000 fba7 	bl	80081e8 <_Bfree>
 8007a9a:	e7d0      	b.n	8007a3e <_dtoa_r+0x65e>
 8007a9c:	9704      	str	r7, [sp, #16]
 8007a9e:	4633      	mov	r3, r6
 8007aa0:	461e      	mov	r6, r3
 8007aa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007aa6:	2a39      	cmp	r2, #57	@ 0x39
 8007aa8:	d107      	bne.n	8007aba <_dtoa_r+0x6da>
 8007aaa:	459a      	cmp	sl, r3
 8007aac:	d1f8      	bne.n	8007aa0 <_dtoa_r+0x6c0>
 8007aae:	9a04      	ldr	r2, [sp, #16]
 8007ab0:	3201      	adds	r2, #1
 8007ab2:	9204      	str	r2, [sp, #16]
 8007ab4:	2230      	movs	r2, #48	@ 0x30
 8007ab6:	f88a 2000 	strb.w	r2, [sl]
 8007aba:	781a      	ldrb	r2, [r3, #0]
 8007abc:	3201      	adds	r2, #1
 8007abe:	701a      	strb	r2, [r3, #0]
 8007ac0:	e7bd      	b.n	8007a3e <_dtoa_r+0x65e>
 8007ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8007cb0 <_dtoa_r+0x8d0>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f7f8 fdc7 	bl	8000658 <__aeabi_dmul>
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	4604      	mov	r4, r0
 8007ad0:	460d      	mov	r5, r1
 8007ad2:	f7f9 f829 	bl	8000b28 <__aeabi_dcmpeq>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f43f aebb 	beq.w	8007852 <_dtoa_r+0x472>
 8007adc:	e6f0      	b.n	80078c0 <_dtoa_r+0x4e0>
 8007ade:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ae0:	2a00      	cmp	r2, #0
 8007ae2:	f000 80db 	beq.w	8007c9c <_dtoa_r+0x8bc>
 8007ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ae8:	2a01      	cmp	r2, #1
 8007aea:	f300 80bf 	bgt.w	8007c6c <_dtoa_r+0x88c>
 8007aee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007af0:	2a00      	cmp	r2, #0
 8007af2:	f000 80b7 	beq.w	8007c64 <_dtoa_r+0x884>
 8007af6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007afa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007afc:	4646      	mov	r6, r8
 8007afe:	9a08      	ldr	r2, [sp, #32]
 8007b00:	2101      	movs	r1, #1
 8007b02:	441a      	add	r2, r3
 8007b04:	4658      	mov	r0, fp
 8007b06:	4498      	add	r8, r3
 8007b08:	9208      	str	r2, [sp, #32]
 8007b0a:	f000 fc21 	bl	8008350 <__i2b>
 8007b0e:	4605      	mov	r5, r0
 8007b10:	b15e      	cbz	r6, 8007b2a <_dtoa_r+0x74a>
 8007b12:	9b08      	ldr	r3, [sp, #32]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	dd08      	ble.n	8007b2a <_dtoa_r+0x74a>
 8007b18:	42b3      	cmp	r3, r6
 8007b1a:	9a08      	ldr	r2, [sp, #32]
 8007b1c:	bfa8      	it	ge
 8007b1e:	4633      	movge	r3, r6
 8007b20:	eba8 0803 	sub.w	r8, r8, r3
 8007b24:	1af6      	subs	r6, r6, r3
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	9308      	str	r3, [sp, #32]
 8007b2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b2c:	b1f3      	cbz	r3, 8007b6c <_dtoa_r+0x78c>
 8007b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 80b7 	beq.w	8007ca4 <_dtoa_r+0x8c4>
 8007b36:	b18c      	cbz	r4, 8007b5c <_dtoa_r+0x77c>
 8007b38:	4629      	mov	r1, r5
 8007b3a:	4622      	mov	r2, r4
 8007b3c:	4658      	mov	r0, fp
 8007b3e:	f000 fcc7 	bl	80084d0 <__pow5mult>
 8007b42:	464a      	mov	r2, r9
 8007b44:	4601      	mov	r1, r0
 8007b46:	4605      	mov	r5, r0
 8007b48:	4658      	mov	r0, fp
 8007b4a:	f000 fc17 	bl	800837c <__multiply>
 8007b4e:	4649      	mov	r1, r9
 8007b50:	9004      	str	r0, [sp, #16]
 8007b52:	4658      	mov	r0, fp
 8007b54:	f000 fb48 	bl	80081e8 <_Bfree>
 8007b58:	9b04      	ldr	r3, [sp, #16]
 8007b5a:	4699      	mov	r9, r3
 8007b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b5e:	1b1a      	subs	r2, r3, r4
 8007b60:	d004      	beq.n	8007b6c <_dtoa_r+0x78c>
 8007b62:	4649      	mov	r1, r9
 8007b64:	4658      	mov	r0, fp
 8007b66:	f000 fcb3 	bl	80084d0 <__pow5mult>
 8007b6a:	4681      	mov	r9, r0
 8007b6c:	2101      	movs	r1, #1
 8007b6e:	4658      	mov	r0, fp
 8007b70:	f000 fbee 	bl	8008350 <__i2b>
 8007b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b76:	4604      	mov	r4, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 81cf 	beq.w	8007f1c <_dtoa_r+0xb3c>
 8007b7e:	461a      	mov	r2, r3
 8007b80:	4601      	mov	r1, r0
 8007b82:	4658      	mov	r0, fp
 8007b84:	f000 fca4 	bl	80084d0 <__pow5mult>
 8007b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	f300 8095 	bgt.w	8007cbc <_dtoa_r+0x8dc>
 8007b92:	9b02      	ldr	r3, [sp, #8]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f040 8087 	bne.w	8007ca8 <_dtoa_r+0x8c8>
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	f040 8089 	bne.w	8007cb8 <_dtoa_r+0x8d8>
 8007ba6:	9b03      	ldr	r3, [sp, #12]
 8007ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bac:	0d1b      	lsrs	r3, r3, #20
 8007bae:	051b      	lsls	r3, r3, #20
 8007bb0:	b12b      	cbz	r3, 8007bbe <_dtoa_r+0x7de>
 8007bb2:	9b08      	ldr	r3, [sp, #32]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	9308      	str	r3, [sp, #32]
 8007bb8:	f108 0801 	add.w	r8, r8, #1
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 81b0 	beq.w	8007f28 <_dtoa_r+0xb48>
 8007bc8:	6923      	ldr	r3, [r4, #16]
 8007bca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bce:	6918      	ldr	r0, [r3, #16]
 8007bd0:	f000 fb72 	bl	80082b8 <__hi0bits>
 8007bd4:	f1c0 0020 	rsb	r0, r0, #32
 8007bd8:	9b08      	ldr	r3, [sp, #32]
 8007bda:	4418      	add	r0, r3
 8007bdc:	f010 001f 	ands.w	r0, r0, #31
 8007be0:	d077      	beq.n	8007cd2 <_dtoa_r+0x8f2>
 8007be2:	f1c0 0320 	rsb	r3, r0, #32
 8007be6:	2b04      	cmp	r3, #4
 8007be8:	dd6b      	ble.n	8007cc2 <_dtoa_r+0x8e2>
 8007bea:	9b08      	ldr	r3, [sp, #32]
 8007bec:	f1c0 001c 	rsb	r0, r0, #28
 8007bf0:	4403      	add	r3, r0
 8007bf2:	4480      	add	r8, r0
 8007bf4:	4406      	add	r6, r0
 8007bf6:	9308      	str	r3, [sp, #32]
 8007bf8:	f1b8 0f00 	cmp.w	r8, #0
 8007bfc:	dd05      	ble.n	8007c0a <_dtoa_r+0x82a>
 8007bfe:	4649      	mov	r1, r9
 8007c00:	4642      	mov	r2, r8
 8007c02:	4658      	mov	r0, fp
 8007c04:	f000 fcbe 	bl	8008584 <__lshift>
 8007c08:	4681      	mov	r9, r0
 8007c0a:	9b08      	ldr	r3, [sp, #32]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	dd05      	ble.n	8007c1c <_dtoa_r+0x83c>
 8007c10:	4621      	mov	r1, r4
 8007c12:	461a      	mov	r2, r3
 8007c14:	4658      	mov	r0, fp
 8007c16:	f000 fcb5 	bl	8008584 <__lshift>
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d059      	beq.n	8007cd6 <_dtoa_r+0x8f6>
 8007c22:	4621      	mov	r1, r4
 8007c24:	4648      	mov	r0, r9
 8007c26:	f000 fd19 	bl	800865c <__mcmp>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	da53      	bge.n	8007cd6 <_dtoa_r+0x8f6>
 8007c2e:	1e7b      	subs	r3, r7, #1
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	4649      	mov	r1, r9
 8007c34:	2300      	movs	r3, #0
 8007c36:	220a      	movs	r2, #10
 8007c38:	4658      	mov	r0, fp
 8007c3a:	f000 faf7 	bl	800822c <__multadd>
 8007c3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c40:	4681      	mov	r9, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 8172 	beq.w	8007f2c <_dtoa_r+0xb4c>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4629      	mov	r1, r5
 8007c4c:	220a      	movs	r2, #10
 8007c4e:	4658      	mov	r0, fp
 8007c50:	f000 faec 	bl	800822c <__multadd>
 8007c54:	9b00      	ldr	r3, [sp, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	4605      	mov	r5, r0
 8007c5a:	dc67      	bgt.n	8007d2c <_dtoa_r+0x94c>
 8007c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	dc41      	bgt.n	8007ce6 <_dtoa_r+0x906>
 8007c62:	e063      	b.n	8007d2c <_dtoa_r+0x94c>
 8007c64:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c6a:	e746      	b.n	8007afa <_dtoa_r+0x71a>
 8007c6c:	9b07      	ldr	r3, [sp, #28]
 8007c6e:	1e5c      	subs	r4, r3, #1
 8007c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	bfbf      	itttt	lt
 8007c76:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c78:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007c7a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c7c:	1ae3      	sublt	r3, r4, r3
 8007c7e:	bfb4      	ite	lt
 8007c80:	18d2      	addlt	r2, r2, r3
 8007c82:	1b1c      	subge	r4, r3, r4
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	bfbc      	itt	lt
 8007c88:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007c8a:	2400      	movlt	r4, #0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bfb5      	itete	lt
 8007c90:	eba8 0603 	sublt.w	r6, r8, r3
 8007c94:	9b07      	ldrge	r3, [sp, #28]
 8007c96:	2300      	movlt	r3, #0
 8007c98:	4646      	movge	r6, r8
 8007c9a:	e730      	b.n	8007afe <_dtoa_r+0x71e>
 8007c9c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c9e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ca0:	4646      	mov	r6, r8
 8007ca2:	e735      	b.n	8007b10 <_dtoa_r+0x730>
 8007ca4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ca6:	e75c      	b.n	8007b62 <_dtoa_r+0x782>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e788      	b.n	8007bbe <_dtoa_r+0x7de>
 8007cac:	3fe00000 	.word	0x3fe00000
 8007cb0:	40240000 	.word	0x40240000
 8007cb4:	40140000 	.word	0x40140000
 8007cb8:	9b02      	ldr	r3, [sp, #8]
 8007cba:	e780      	b.n	8007bbe <_dtoa_r+0x7de>
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cc0:	e782      	b.n	8007bc8 <_dtoa_r+0x7e8>
 8007cc2:	d099      	beq.n	8007bf8 <_dtoa_r+0x818>
 8007cc4:	9a08      	ldr	r2, [sp, #32]
 8007cc6:	331c      	adds	r3, #28
 8007cc8:	441a      	add	r2, r3
 8007cca:	4498      	add	r8, r3
 8007ccc:	441e      	add	r6, r3
 8007cce:	9208      	str	r2, [sp, #32]
 8007cd0:	e792      	b.n	8007bf8 <_dtoa_r+0x818>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	e7f6      	b.n	8007cc4 <_dtoa_r+0x8e4>
 8007cd6:	9b07      	ldr	r3, [sp, #28]
 8007cd8:	9704      	str	r7, [sp, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	dc20      	bgt.n	8007d20 <_dtoa_r+0x940>
 8007cde:	9300      	str	r3, [sp, #0]
 8007ce0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce2:	2b02      	cmp	r3, #2
 8007ce4:	dd1e      	ble.n	8007d24 <_dtoa_r+0x944>
 8007ce6:	9b00      	ldr	r3, [sp, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f47f aec0 	bne.w	8007a6e <_dtoa_r+0x68e>
 8007cee:	4621      	mov	r1, r4
 8007cf0:	2205      	movs	r2, #5
 8007cf2:	4658      	mov	r0, fp
 8007cf4:	f000 fa9a 	bl	800822c <__multadd>
 8007cf8:	4601      	mov	r1, r0
 8007cfa:	4604      	mov	r4, r0
 8007cfc:	4648      	mov	r0, r9
 8007cfe:	f000 fcad 	bl	800865c <__mcmp>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	f77f aeb3 	ble.w	8007a6e <_dtoa_r+0x68e>
 8007d08:	4656      	mov	r6, sl
 8007d0a:	2331      	movs	r3, #49	@ 0x31
 8007d0c:	f806 3b01 	strb.w	r3, [r6], #1
 8007d10:	9b04      	ldr	r3, [sp, #16]
 8007d12:	3301      	adds	r3, #1
 8007d14:	9304      	str	r3, [sp, #16]
 8007d16:	e6ae      	b.n	8007a76 <_dtoa_r+0x696>
 8007d18:	9c07      	ldr	r4, [sp, #28]
 8007d1a:	9704      	str	r7, [sp, #16]
 8007d1c:	4625      	mov	r5, r4
 8007d1e:	e7f3      	b.n	8007d08 <_dtoa_r+0x928>
 8007d20:	9b07      	ldr	r3, [sp, #28]
 8007d22:	9300      	str	r3, [sp, #0]
 8007d24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 8104 	beq.w	8007f34 <_dtoa_r+0xb54>
 8007d2c:	2e00      	cmp	r6, #0
 8007d2e:	dd05      	ble.n	8007d3c <_dtoa_r+0x95c>
 8007d30:	4629      	mov	r1, r5
 8007d32:	4632      	mov	r2, r6
 8007d34:	4658      	mov	r0, fp
 8007d36:	f000 fc25 	bl	8008584 <__lshift>
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d05a      	beq.n	8007df8 <_dtoa_r+0xa18>
 8007d42:	6869      	ldr	r1, [r5, #4]
 8007d44:	4658      	mov	r0, fp
 8007d46:	f000 fa0f 	bl	8008168 <_Balloc>
 8007d4a:	4606      	mov	r6, r0
 8007d4c:	b928      	cbnz	r0, 8007d5a <_dtoa_r+0x97a>
 8007d4e:	4b84      	ldr	r3, [pc, #528]	@ (8007f60 <_dtoa_r+0xb80>)
 8007d50:	4602      	mov	r2, r0
 8007d52:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d56:	f7ff bb5a 	b.w	800740e <_dtoa_r+0x2e>
 8007d5a:	692a      	ldr	r2, [r5, #16]
 8007d5c:	3202      	adds	r2, #2
 8007d5e:	0092      	lsls	r2, r2, #2
 8007d60:	f105 010c 	add.w	r1, r5, #12
 8007d64:	300c      	adds	r0, #12
 8007d66:	f000 ffaf 	bl	8008cc8 <memcpy>
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	4631      	mov	r1, r6
 8007d6e:	4658      	mov	r0, fp
 8007d70:	f000 fc08 	bl	8008584 <__lshift>
 8007d74:	f10a 0301 	add.w	r3, sl, #1
 8007d78:	9307      	str	r3, [sp, #28]
 8007d7a:	9b00      	ldr	r3, [sp, #0]
 8007d7c:	4453      	add	r3, sl
 8007d7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d80:	9b02      	ldr	r3, [sp, #8]
 8007d82:	f003 0301 	and.w	r3, r3, #1
 8007d86:	462f      	mov	r7, r5
 8007d88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d8a:	4605      	mov	r5, r0
 8007d8c:	9b07      	ldr	r3, [sp, #28]
 8007d8e:	4621      	mov	r1, r4
 8007d90:	3b01      	subs	r3, #1
 8007d92:	4648      	mov	r0, r9
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	f7ff fa9a 	bl	80072ce <quorem>
 8007d9a:	4639      	mov	r1, r7
 8007d9c:	9002      	str	r0, [sp, #8]
 8007d9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007da2:	4648      	mov	r0, r9
 8007da4:	f000 fc5a 	bl	800865c <__mcmp>
 8007da8:	462a      	mov	r2, r5
 8007daa:	9008      	str	r0, [sp, #32]
 8007dac:	4621      	mov	r1, r4
 8007dae:	4658      	mov	r0, fp
 8007db0:	f000 fc70 	bl	8008694 <__mdiff>
 8007db4:	68c2      	ldr	r2, [r0, #12]
 8007db6:	4606      	mov	r6, r0
 8007db8:	bb02      	cbnz	r2, 8007dfc <_dtoa_r+0xa1c>
 8007dba:	4601      	mov	r1, r0
 8007dbc:	4648      	mov	r0, r9
 8007dbe:	f000 fc4d 	bl	800865c <__mcmp>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	4631      	mov	r1, r6
 8007dc6:	4658      	mov	r0, fp
 8007dc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007dca:	f000 fa0d 	bl	80081e8 <_Bfree>
 8007dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dd0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dd2:	9e07      	ldr	r6, [sp, #28]
 8007dd4:	ea43 0102 	orr.w	r1, r3, r2
 8007dd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dda:	4319      	orrs	r1, r3
 8007ddc:	d110      	bne.n	8007e00 <_dtoa_r+0xa20>
 8007dde:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007de2:	d029      	beq.n	8007e38 <_dtoa_r+0xa58>
 8007de4:	9b08      	ldr	r3, [sp, #32]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dd02      	ble.n	8007df0 <_dtoa_r+0xa10>
 8007dea:	9b02      	ldr	r3, [sp, #8]
 8007dec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007df0:	9b00      	ldr	r3, [sp, #0]
 8007df2:	f883 8000 	strb.w	r8, [r3]
 8007df6:	e63f      	b.n	8007a78 <_dtoa_r+0x698>
 8007df8:	4628      	mov	r0, r5
 8007dfa:	e7bb      	b.n	8007d74 <_dtoa_r+0x994>
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	e7e1      	b.n	8007dc4 <_dtoa_r+0x9e4>
 8007e00:	9b08      	ldr	r3, [sp, #32]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	db04      	blt.n	8007e10 <_dtoa_r+0xa30>
 8007e06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e0c:	430b      	orrs	r3, r1
 8007e0e:	d120      	bne.n	8007e52 <_dtoa_r+0xa72>
 8007e10:	2a00      	cmp	r2, #0
 8007e12:	dded      	ble.n	8007df0 <_dtoa_r+0xa10>
 8007e14:	4649      	mov	r1, r9
 8007e16:	2201      	movs	r2, #1
 8007e18:	4658      	mov	r0, fp
 8007e1a:	f000 fbb3 	bl	8008584 <__lshift>
 8007e1e:	4621      	mov	r1, r4
 8007e20:	4681      	mov	r9, r0
 8007e22:	f000 fc1b 	bl	800865c <__mcmp>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	dc03      	bgt.n	8007e32 <_dtoa_r+0xa52>
 8007e2a:	d1e1      	bne.n	8007df0 <_dtoa_r+0xa10>
 8007e2c:	f018 0f01 	tst.w	r8, #1
 8007e30:	d0de      	beq.n	8007df0 <_dtoa_r+0xa10>
 8007e32:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e36:	d1d8      	bne.n	8007dea <_dtoa_r+0xa0a>
 8007e38:	9a00      	ldr	r2, [sp, #0]
 8007e3a:	2339      	movs	r3, #57	@ 0x39
 8007e3c:	7013      	strb	r3, [r2, #0]
 8007e3e:	4633      	mov	r3, r6
 8007e40:	461e      	mov	r6, r3
 8007e42:	3b01      	subs	r3, #1
 8007e44:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e48:	2a39      	cmp	r2, #57	@ 0x39
 8007e4a:	d052      	beq.n	8007ef2 <_dtoa_r+0xb12>
 8007e4c:	3201      	adds	r2, #1
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	e612      	b.n	8007a78 <_dtoa_r+0x698>
 8007e52:	2a00      	cmp	r2, #0
 8007e54:	dd07      	ble.n	8007e66 <_dtoa_r+0xa86>
 8007e56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e5a:	d0ed      	beq.n	8007e38 <_dtoa_r+0xa58>
 8007e5c:	9a00      	ldr	r2, [sp, #0]
 8007e5e:	f108 0301 	add.w	r3, r8, #1
 8007e62:	7013      	strb	r3, [r2, #0]
 8007e64:	e608      	b.n	8007a78 <_dtoa_r+0x698>
 8007e66:	9b07      	ldr	r3, [sp, #28]
 8007e68:	9a07      	ldr	r2, [sp, #28]
 8007e6a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d028      	beq.n	8007ec6 <_dtoa_r+0xae6>
 8007e74:	4649      	mov	r1, r9
 8007e76:	2300      	movs	r3, #0
 8007e78:	220a      	movs	r2, #10
 8007e7a:	4658      	mov	r0, fp
 8007e7c:	f000 f9d6 	bl	800822c <__multadd>
 8007e80:	42af      	cmp	r7, r5
 8007e82:	4681      	mov	r9, r0
 8007e84:	f04f 0300 	mov.w	r3, #0
 8007e88:	f04f 020a 	mov.w	r2, #10
 8007e8c:	4639      	mov	r1, r7
 8007e8e:	4658      	mov	r0, fp
 8007e90:	d107      	bne.n	8007ea2 <_dtoa_r+0xac2>
 8007e92:	f000 f9cb 	bl	800822c <__multadd>
 8007e96:	4607      	mov	r7, r0
 8007e98:	4605      	mov	r5, r0
 8007e9a:	9b07      	ldr	r3, [sp, #28]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	9307      	str	r3, [sp, #28]
 8007ea0:	e774      	b.n	8007d8c <_dtoa_r+0x9ac>
 8007ea2:	f000 f9c3 	bl	800822c <__multadd>
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4607      	mov	r7, r0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	220a      	movs	r2, #10
 8007eae:	4658      	mov	r0, fp
 8007eb0:	f000 f9bc 	bl	800822c <__multadd>
 8007eb4:	4605      	mov	r5, r0
 8007eb6:	e7f0      	b.n	8007e9a <_dtoa_r+0xaba>
 8007eb8:	9b00      	ldr	r3, [sp, #0]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	bfcc      	ite	gt
 8007ebe:	461e      	movgt	r6, r3
 8007ec0:	2601      	movle	r6, #1
 8007ec2:	4456      	add	r6, sl
 8007ec4:	2700      	movs	r7, #0
 8007ec6:	4649      	mov	r1, r9
 8007ec8:	2201      	movs	r2, #1
 8007eca:	4658      	mov	r0, fp
 8007ecc:	f000 fb5a 	bl	8008584 <__lshift>
 8007ed0:	4621      	mov	r1, r4
 8007ed2:	4681      	mov	r9, r0
 8007ed4:	f000 fbc2 	bl	800865c <__mcmp>
 8007ed8:	2800      	cmp	r0, #0
 8007eda:	dcb0      	bgt.n	8007e3e <_dtoa_r+0xa5e>
 8007edc:	d102      	bne.n	8007ee4 <_dtoa_r+0xb04>
 8007ede:	f018 0f01 	tst.w	r8, #1
 8007ee2:	d1ac      	bne.n	8007e3e <_dtoa_r+0xa5e>
 8007ee4:	4633      	mov	r3, r6
 8007ee6:	461e      	mov	r6, r3
 8007ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eec:	2a30      	cmp	r2, #48	@ 0x30
 8007eee:	d0fa      	beq.n	8007ee6 <_dtoa_r+0xb06>
 8007ef0:	e5c2      	b.n	8007a78 <_dtoa_r+0x698>
 8007ef2:	459a      	cmp	sl, r3
 8007ef4:	d1a4      	bne.n	8007e40 <_dtoa_r+0xa60>
 8007ef6:	9b04      	ldr	r3, [sp, #16]
 8007ef8:	3301      	adds	r3, #1
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	2331      	movs	r3, #49	@ 0x31
 8007efe:	f88a 3000 	strb.w	r3, [sl]
 8007f02:	e5b9      	b.n	8007a78 <_dtoa_r+0x698>
 8007f04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f06:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f64 <_dtoa_r+0xb84>
 8007f0a:	b11b      	cbz	r3, 8007f14 <_dtoa_r+0xb34>
 8007f0c:	f10a 0308 	add.w	r3, sl, #8
 8007f10:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f12:	6013      	str	r3, [r2, #0]
 8007f14:	4650      	mov	r0, sl
 8007f16:	b019      	add	sp, #100	@ 0x64
 8007f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	f77f ae37 	ble.w	8007b92 <_dtoa_r+0x7b2>
 8007f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f28:	2001      	movs	r0, #1
 8007f2a:	e655      	b.n	8007bd8 <_dtoa_r+0x7f8>
 8007f2c:	9b00      	ldr	r3, [sp, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f77f aed6 	ble.w	8007ce0 <_dtoa_r+0x900>
 8007f34:	4656      	mov	r6, sl
 8007f36:	4621      	mov	r1, r4
 8007f38:	4648      	mov	r0, r9
 8007f3a:	f7ff f9c8 	bl	80072ce <quorem>
 8007f3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f42:	f806 8b01 	strb.w	r8, [r6], #1
 8007f46:	9b00      	ldr	r3, [sp, #0]
 8007f48:	eba6 020a 	sub.w	r2, r6, sl
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	ddb3      	ble.n	8007eb8 <_dtoa_r+0xad8>
 8007f50:	4649      	mov	r1, r9
 8007f52:	2300      	movs	r3, #0
 8007f54:	220a      	movs	r2, #10
 8007f56:	4658      	mov	r0, fp
 8007f58:	f000 f968 	bl	800822c <__multadd>
 8007f5c:	4681      	mov	r9, r0
 8007f5e:	e7ea      	b.n	8007f36 <_dtoa_r+0xb56>
 8007f60:	0800b7e0 	.word	0x0800b7e0
 8007f64:	0800b764 	.word	0x0800b764

08007f68 <_free_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	2900      	cmp	r1, #0
 8007f6e:	d041      	beq.n	8007ff4 <_free_r+0x8c>
 8007f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f74:	1f0c      	subs	r4, r1, #4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfb8      	it	lt
 8007f7a:	18e4      	addlt	r4, r4, r3
 8007f7c:	f000 f8e8 	bl	8008150 <__malloc_lock>
 8007f80:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff8 <_free_r+0x90>)
 8007f82:	6813      	ldr	r3, [r2, #0]
 8007f84:	b933      	cbnz	r3, 8007f94 <_free_r+0x2c>
 8007f86:	6063      	str	r3, [r4, #4]
 8007f88:	6014      	str	r4, [r2, #0]
 8007f8a:	4628      	mov	r0, r5
 8007f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f90:	f000 b8e4 	b.w	800815c <__malloc_unlock>
 8007f94:	42a3      	cmp	r3, r4
 8007f96:	d908      	bls.n	8007faa <_free_r+0x42>
 8007f98:	6820      	ldr	r0, [r4, #0]
 8007f9a:	1821      	adds	r1, r4, r0
 8007f9c:	428b      	cmp	r3, r1
 8007f9e:	bf01      	itttt	eq
 8007fa0:	6819      	ldreq	r1, [r3, #0]
 8007fa2:	685b      	ldreq	r3, [r3, #4]
 8007fa4:	1809      	addeq	r1, r1, r0
 8007fa6:	6021      	streq	r1, [r4, #0]
 8007fa8:	e7ed      	b.n	8007f86 <_free_r+0x1e>
 8007faa:	461a      	mov	r2, r3
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	b10b      	cbz	r3, 8007fb4 <_free_r+0x4c>
 8007fb0:	42a3      	cmp	r3, r4
 8007fb2:	d9fa      	bls.n	8007faa <_free_r+0x42>
 8007fb4:	6811      	ldr	r1, [r2, #0]
 8007fb6:	1850      	adds	r0, r2, r1
 8007fb8:	42a0      	cmp	r0, r4
 8007fba:	d10b      	bne.n	8007fd4 <_free_r+0x6c>
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	4401      	add	r1, r0
 8007fc0:	1850      	adds	r0, r2, r1
 8007fc2:	4283      	cmp	r3, r0
 8007fc4:	6011      	str	r1, [r2, #0]
 8007fc6:	d1e0      	bne.n	8007f8a <_free_r+0x22>
 8007fc8:	6818      	ldr	r0, [r3, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	6053      	str	r3, [r2, #4]
 8007fce:	4408      	add	r0, r1
 8007fd0:	6010      	str	r0, [r2, #0]
 8007fd2:	e7da      	b.n	8007f8a <_free_r+0x22>
 8007fd4:	d902      	bls.n	8007fdc <_free_r+0x74>
 8007fd6:	230c      	movs	r3, #12
 8007fd8:	602b      	str	r3, [r5, #0]
 8007fda:	e7d6      	b.n	8007f8a <_free_r+0x22>
 8007fdc:	6820      	ldr	r0, [r4, #0]
 8007fde:	1821      	adds	r1, r4, r0
 8007fe0:	428b      	cmp	r3, r1
 8007fe2:	bf04      	itt	eq
 8007fe4:	6819      	ldreq	r1, [r3, #0]
 8007fe6:	685b      	ldreq	r3, [r3, #4]
 8007fe8:	6063      	str	r3, [r4, #4]
 8007fea:	bf04      	itt	eq
 8007fec:	1809      	addeq	r1, r1, r0
 8007fee:	6021      	streq	r1, [r4, #0]
 8007ff0:	6054      	str	r4, [r2, #4]
 8007ff2:	e7ca      	b.n	8007f8a <_free_r+0x22>
 8007ff4:	bd38      	pop	{r3, r4, r5, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20002760 	.word	0x20002760

08007ffc <malloc>:
 8007ffc:	4b02      	ldr	r3, [pc, #8]	@ (8008008 <malloc+0xc>)
 8007ffe:	4601      	mov	r1, r0
 8008000:	6818      	ldr	r0, [r3, #0]
 8008002:	f000 b825 	b.w	8008050 <_malloc_r>
 8008006:	bf00      	nop
 8008008:	200002d0 	.word	0x200002d0

0800800c <sbrk_aligned>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	4e0f      	ldr	r6, [pc, #60]	@ (800804c <sbrk_aligned+0x40>)
 8008010:	460c      	mov	r4, r1
 8008012:	6831      	ldr	r1, [r6, #0]
 8008014:	4605      	mov	r5, r0
 8008016:	b911      	cbnz	r1, 800801e <sbrk_aligned+0x12>
 8008018:	f000 fe46 	bl	8008ca8 <_sbrk_r>
 800801c:	6030      	str	r0, [r6, #0]
 800801e:	4621      	mov	r1, r4
 8008020:	4628      	mov	r0, r5
 8008022:	f000 fe41 	bl	8008ca8 <_sbrk_r>
 8008026:	1c43      	adds	r3, r0, #1
 8008028:	d103      	bne.n	8008032 <sbrk_aligned+0x26>
 800802a:	f04f 34ff 	mov.w	r4, #4294967295
 800802e:	4620      	mov	r0, r4
 8008030:	bd70      	pop	{r4, r5, r6, pc}
 8008032:	1cc4      	adds	r4, r0, #3
 8008034:	f024 0403 	bic.w	r4, r4, #3
 8008038:	42a0      	cmp	r0, r4
 800803a:	d0f8      	beq.n	800802e <sbrk_aligned+0x22>
 800803c:	1a21      	subs	r1, r4, r0
 800803e:	4628      	mov	r0, r5
 8008040:	f000 fe32 	bl	8008ca8 <_sbrk_r>
 8008044:	3001      	adds	r0, #1
 8008046:	d1f2      	bne.n	800802e <sbrk_aligned+0x22>
 8008048:	e7ef      	b.n	800802a <sbrk_aligned+0x1e>
 800804a:	bf00      	nop
 800804c:	2000275c 	.word	0x2000275c

08008050 <_malloc_r>:
 8008050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008054:	1ccd      	adds	r5, r1, #3
 8008056:	f025 0503 	bic.w	r5, r5, #3
 800805a:	3508      	adds	r5, #8
 800805c:	2d0c      	cmp	r5, #12
 800805e:	bf38      	it	cc
 8008060:	250c      	movcc	r5, #12
 8008062:	2d00      	cmp	r5, #0
 8008064:	4606      	mov	r6, r0
 8008066:	db01      	blt.n	800806c <_malloc_r+0x1c>
 8008068:	42a9      	cmp	r1, r5
 800806a:	d904      	bls.n	8008076 <_malloc_r+0x26>
 800806c:	230c      	movs	r3, #12
 800806e:	6033      	str	r3, [r6, #0]
 8008070:	2000      	movs	r0, #0
 8008072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008076:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800814c <_malloc_r+0xfc>
 800807a:	f000 f869 	bl	8008150 <__malloc_lock>
 800807e:	f8d8 3000 	ldr.w	r3, [r8]
 8008082:	461c      	mov	r4, r3
 8008084:	bb44      	cbnz	r4, 80080d8 <_malloc_r+0x88>
 8008086:	4629      	mov	r1, r5
 8008088:	4630      	mov	r0, r6
 800808a:	f7ff ffbf 	bl	800800c <sbrk_aligned>
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	4604      	mov	r4, r0
 8008092:	d158      	bne.n	8008146 <_malloc_r+0xf6>
 8008094:	f8d8 4000 	ldr.w	r4, [r8]
 8008098:	4627      	mov	r7, r4
 800809a:	2f00      	cmp	r7, #0
 800809c:	d143      	bne.n	8008126 <_malloc_r+0xd6>
 800809e:	2c00      	cmp	r4, #0
 80080a0:	d04b      	beq.n	800813a <_malloc_r+0xea>
 80080a2:	6823      	ldr	r3, [r4, #0]
 80080a4:	4639      	mov	r1, r7
 80080a6:	4630      	mov	r0, r6
 80080a8:	eb04 0903 	add.w	r9, r4, r3
 80080ac:	f000 fdfc 	bl	8008ca8 <_sbrk_r>
 80080b0:	4581      	cmp	r9, r0
 80080b2:	d142      	bne.n	800813a <_malloc_r+0xea>
 80080b4:	6821      	ldr	r1, [r4, #0]
 80080b6:	1a6d      	subs	r5, r5, r1
 80080b8:	4629      	mov	r1, r5
 80080ba:	4630      	mov	r0, r6
 80080bc:	f7ff ffa6 	bl	800800c <sbrk_aligned>
 80080c0:	3001      	adds	r0, #1
 80080c2:	d03a      	beq.n	800813a <_malloc_r+0xea>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	442b      	add	r3, r5
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	f8d8 3000 	ldr.w	r3, [r8]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	bb62      	cbnz	r2, 800812c <_malloc_r+0xdc>
 80080d2:	f8c8 7000 	str.w	r7, [r8]
 80080d6:	e00f      	b.n	80080f8 <_malloc_r+0xa8>
 80080d8:	6822      	ldr	r2, [r4, #0]
 80080da:	1b52      	subs	r2, r2, r5
 80080dc:	d420      	bmi.n	8008120 <_malloc_r+0xd0>
 80080de:	2a0b      	cmp	r2, #11
 80080e0:	d917      	bls.n	8008112 <_malloc_r+0xc2>
 80080e2:	1961      	adds	r1, r4, r5
 80080e4:	42a3      	cmp	r3, r4
 80080e6:	6025      	str	r5, [r4, #0]
 80080e8:	bf18      	it	ne
 80080ea:	6059      	strne	r1, [r3, #4]
 80080ec:	6863      	ldr	r3, [r4, #4]
 80080ee:	bf08      	it	eq
 80080f0:	f8c8 1000 	streq.w	r1, [r8]
 80080f4:	5162      	str	r2, [r4, r5]
 80080f6:	604b      	str	r3, [r1, #4]
 80080f8:	4630      	mov	r0, r6
 80080fa:	f000 f82f 	bl	800815c <__malloc_unlock>
 80080fe:	f104 000b 	add.w	r0, r4, #11
 8008102:	1d23      	adds	r3, r4, #4
 8008104:	f020 0007 	bic.w	r0, r0, #7
 8008108:	1ac2      	subs	r2, r0, r3
 800810a:	bf1c      	itt	ne
 800810c:	1a1b      	subne	r3, r3, r0
 800810e:	50a3      	strne	r3, [r4, r2]
 8008110:	e7af      	b.n	8008072 <_malloc_r+0x22>
 8008112:	6862      	ldr	r2, [r4, #4]
 8008114:	42a3      	cmp	r3, r4
 8008116:	bf0c      	ite	eq
 8008118:	f8c8 2000 	streq.w	r2, [r8]
 800811c:	605a      	strne	r2, [r3, #4]
 800811e:	e7eb      	b.n	80080f8 <_malloc_r+0xa8>
 8008120:	4623      	mov	r3, r4
 8008122:	6864      	ldr	r4, [r4, #4]
 8008124:	e7ae      	b.n	8008084 <_malloc_r+0x34>
 8008126:	463c      	mov	r4, r7
 8008128:	687f      	ldr	r7, [r7, #4]
 800812a:	e7b6      	b.n	800809a <_malloc_r+0x4a>
 800812c:	461a      	mov	r2, r3
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	42a3      	cmp	r3, r4
 8008132:	d1fb      	bne.n	800812c <_malloc_r+0xdc>
 8008134:	2300      	movs	r3, #0
 8008136:	6053      	str	r3, [r2, #4]
 8008138:	e7de      	b.n	80080f8 <_malloc_r+0xa8>
 800813a:	230c      	movs	r3, #12
 800813c:	6033      	str	r3, [r6, #0]
 800813e:	4630      	mov	r0, r6
 8008140:	f000 f80c 	bl	800815c <__malloc_unlock>
 8008144:	e794      	b.n	8008070 <_malloc_r+0x20>
 8008146:	6005      	str	r5, [r0, #0]
 8008148:	e7d6      	b.n	80080f8 <_malloc_r+0xa8>
 800814a:	bf00      	nop
 800814c:	20002760 	.word	0x20002760

08008150 <__malloc_lock>:
 8008150:	4801      	ldr	r0, [pc, #4]	@ (8008158 <__malloc_lock+0x8>)
 8008152:	f7ff b8ba 	b.w	80072ca <__retarget_lock_acquire_recursive>
 8008156:	bf00      	nop
 8008158:	20002758 	.word	0x20002758

0800815c <__malloc_unlock>:
 800815c:	4801      	ldr	r0, [pc, #4]	@ (8008164 <__malloc_unlock+0x8>)
 800815e:	f7ff b8b5 	b.w	80072cc <__retarget_lock_release_recursive>
 8008162:	bf00      	nop
 8008164:	20002758 	.word	0x20002758

08008168 <_Balloc>:
 8008168:	b570      	push	{r4, r5, r6, lr}
 800816a:	69c6      	ldr	r6, [r0, #28]
 800816c:	4604      	mov	r4, r0
 800816e:	460d      	mov	r5, r1
 8008170:	b976      	cbnz	r6, 8008190 <_Balloc+0x28>
 8008172:	2010      	movs	r0, #16
 8008174:	f7ff ff42 	bl	8007ffc <malloc>
 8008178:	4602      	mov	r2, r0
 800817a:	61e0      	str	r0, [r4, #28]
 800817c:	b920      	cbnz	r0, 8008188 <_Balloc+0x20>
 800817e:	4b18      	ldr	r3, [pc, #96]	@ (80081e0 <_Balloc+0x78>)
 8008180:	4818      	ldr	r0, [pc, #96]	@ (80081e4 <_Balloc+0x7c>)
 8008182:	216b      	movs	r1, #107	@ 0x6b
 8008184:	f000 fdae 	bl	8008ce4 <__assert_func>
 8008188:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800818c:	6006      	str	r6, [r0, #0]
 800818e:	60c6      	str	r6, [r0, #12]
 8008190:	69e6      	ldr	r6, [r4, #28]
 8008192:	68f3      	ldr	r3, [r6, #12]
 8008194:	b183      	cbz	r3, 80081b8 <_Balloc+0x50>
 8008196:	69e3      	ldr	r3, [r4, #28]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800819e:	b9b8      	cbnz	r0, 80081d0 <_Balloc+0x68>
 80081a0:	2101      	movs	r1, #1
 80081a2:	fa01 f605 	lsl.w	r6, r1, r5
 80081a6:	1d72      	adds	r2, r6, #5
 80081a8:	0092      	lsls	r2, r2, #2
 80081aa:	4620      	mov	r0, r4
 80081ac:	f000 fdb8 	bl	8008d20 <_calloc_r>
 80081b0:	b160      	cbz	r0, 80081cc <_Balloc+0x64>
 80081b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081b6:	e00e      	b.n	80081d6 <_Balloc+0x6e>
 80081b8:	2221      	movs	r2, #33	@ 0x21
 80081ba:	2104      	movs	r1, #4
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 fdaf 	bl	8008d20 <_calloc_r>
 80081c2:	69e3      	ldr	r3, [r4, #28]
 80081c4:	60f0      	str	r0, [r6, #12]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d1e4      	bne.n	8008196 <_Balloc+0x2e>
 80081cc:	2000      	movs	r0, #0
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
 80081d0:	6802      	ldr	r2, [r0, #0]
 80081d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081d6:	2300      	movs	r3, #0
 80081d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081dc:	e7f7      	b.n	80081ce <_Balloc+0x66>
 80081de:	bf00      	nop
 80081e0:	0800b771 	.word	0x0800b771
 80081e4:	0800b7f1 	.word	0x0800b7f1

080081e8 <_Bfree>:
 80081e8:	b570      	push	{r4, r5, r6, lr}
 80081ea:	69c6      	ldr	r6, [r0, #28]
 80081ec:	4605      	mov	r5, r0
 80081ee:	460c      	mov	r4, r1
 80081f0:	b976      	cbnz	r6, 8008210 <_Bfree+0x28>
 80081f2:	2010      	movs	r0, #16
 80081f4:	f7ff ff02 	bl	8007ffc <malloc>
 80081f8:	4602      	mov	r2, r0
 80081fa:	61e8      	str	r0, [r5, #28]
 80081fc:	b920      	cbnz	r0, 8008208 <_Bfree+0x20>
 80081fe:	4b09      	ldr	r3, [pc, #36]	@ (8008224 <_Bfree+0x3c>)
 8008200:	4809      	ldr	r0, [pc, #36]	@ (8008228 <_Bfree+0x40>)
 8008202:	218f      	movs	r1, #143	@ 0x8f
 8008204:	f000 fd6e 	bl	8008ce4 <__assert_func>
 8008208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800820c:	6006      	str	r6, [r0, #0]
 800820e:	60c6      	str	r6, [r0, #12]
 8008210:	b13c      	cbz	r4, 8008222 <_Bfree+0x3a>
 8008212:	69eb      	ldr	r3, [r5, #28]
 8008214:	6862      	ldr	r2, [r4, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800821c:	6021      	str	r1, [r4, #0]
 800821e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	0800b771 	.word	0x0800b771
 8008228:	0800b7f1 	.word	0x0800b7f1

0800822c <__multadd>:
 800822c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008230:	690d      	ldr	r5, [r1, #16]
 8008232:	4607      	mov	r7, r0
 8008234:	460c      	mov	r4, r1
 8008236:	461e      	mov	r6, r3
 8008238:	f101 0c14 	add.w	ip, r1, #20
 800823c:	2000      	movs	r0, #0
 800823e:	f8dc 3000 	ldr.w	r3, [ip]
 8008242:	b299      	uxth	r1, r3
 8008244:	fb02 6101 	mla	r1, r2, r1, r6
 8008248:	0c1e      	lsrs	r6, r3, #16
 800824a:	0c0b      	lsrs	r3, r1, #16
 800824c:	fb02 3306 	mla	r3, r2, r6, r3
 8008250:	b289      	uxth	r1, r1
 8008252:	3001      	adds	r0, #1
 8008254:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008258:	4285      	cmp	r5, r0
 800825a:	f84c 1b04 	str.w	r1, [ip], #4
 800825e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008262:	dcec      	bgt.n	800823e <__multadd+0x12>
 8008264:	b30e      	cbz	r6, 80082aa <__multadd+0x7e>
 8008266:	68a3      	ldr	r3, [r4, #8]
 8008268:	42ab      	cmp	r3, r5
 800826a:	dc19      	bgt.n	80082a0 <__multadd+0x74>
 800826c:	6861      	ldr	r1, [r4, #4]
 800826e:	4638      	mov	r0, r7
 8008270:	3101      	adds	r1, #1
 8008272:	f7ff ff79 	bl	8008168 <_Balloc>
 8008276:	4680      	mov	r8, r0
 8008278:	b928      	cbnz	r0, 8008286 <__multadd+0x5a>
 800827a:	4602      	mov	r2, r0
 800827c:	4b0c      	ldr	r3, [pc, #48]	@ (80082b0 <__multadd+0x84>)
 800827e:	480d      	ldr	r0, [pc, #52]	@ (80082b4 <__multadd+0x88>)
 8008280:	21ba      	movs	r1, #186	@ 0xba
 8008282:	f000 fd2f 	bl	8008ce4 <__assert_func>
 8008286:	6922      	ldr	r2, [r4, #16]
 8008288:	3202      	adds	r2, #2
 800828a:	f104 010c 	add.w	r1, r4, #12
 800828e:	0092      	lsls	r2, r2, #2
 8008290:	300c      	adds	r0, #12
 8008292:	f000 fd19 	bl	8008cc8 <memcpy>
 8008296:	4621      	mov	r1, r4
 8008298:	4638      	mov	r0, r7
 800829a:	f7ff ffa5 	bl	80081e8 <_Bfree>
 800829e:	4644      	mov	r4, r8
 80082a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082a4:	3501      	adds	r5, #1
 80082a6:	615e      	str	r6, [r3, #20]
 80082a8:	6125      	str	r5, [r4, #16]
 80082aa:	4620      	mov	r0, r4
 80082ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082b0:	0800b7e0 	.word	0x0800b7e0
 80082b4:	0800b7f1 	.word	0x0800b7f1

080082b8 <__hi0bits>:
 80082b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80082bc:	4603      	mov	r3, r0
 80082be:	bf36      	itet	cc
 80082c0:	0403      	lslcc	r3, r0, #16
 80082c2:	2000      	movcs	r0, #0
 80082c4:	2010      	movcc	r0, #16
 80082c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80082ca:	bf3c      	itt	cc
 80082cc:	021b      	lslcc	r3, r3, #8
 80082ce:	3008      	addcc	r0, #8
 80082d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082d4:	bf3c      	itt	cc
 80082d6:	011b      	lslcc	r3, r3, #4
 80082d8:	3004      	addcc	r0, #4
 80082da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082de:	bf3c      	itt	cc
 80082e0:	009b      	lslcc	r3, r3, #2
 80082e2:	3002      	addcc	r0, #2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	db05      	blt.n	80082f4 <__hi0bits+0x3c>
 80082e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80082ec:	f100 0001 	add.w	r0, r0, #1
 80082f0:	bf08      	it	eq
 80082f2:	2020      	moveq	r0, #32
 80082f4:	4770      	bx	lr

080082f6 <__lo0bits>:
 80082f6:	6803      	ldr	r3, [r0, #0]
 80082f8:	4602      	mov	r2, r0
 80082fa:	f013 0007 	ands.w	r0, r3, #7
 80082fe:	d00b      	beq.n	8008318 <__lo0bits+0x22>
 8008300:	07d9      	lsls	r1, r3, #31
 8008302:	d421      	bmi.n	8008348 <__lo0bits+0x52>
 8008304:	0798      	lsls	r0, r3, #30
 8008306:	bf49      	itett	mi
 8008308:	085b      	lsrmi	r3, r3, #1
 800830a:	089b      	lsrpl	r3, r3, #2
 800830c:	2001      	movmi	r0, #1
 800830e:	6013      	strmi	r3, [r2, #0]
 8008310:	bf5c      	itt	pl
 8008312:	6013      	strpl	r3, [r2, #0]
 8008314:	2002      	movpl	r0, #2
 8008316:	4770      	bx	lr
 8008318:	b299      	uxth	r1, r3
 800831a:	b909      	cbnz	r1, 8008320 <__lo0bits+0x2a>
 800831c:	0c1b      	lsrs	r3, r3, #16
 800831e:	2010      	movs	r0, #16
 8008320:	b2d9      	uxtb	r1, r3
 8008322:	b909      	cbnz	r1, 8008328 <__lo0bits+0x32>
 8008324:	3008      	adds	r0, #8
 8008326:	0a1b      	lsrs	r3, r3, #8
 8008328:	0719      	lsls	r1, r3, #28
 800832a:	bf04      	itt	eq
 800832c:	091b      	lsreq	r3, r3, #4
 800832e:	3004      	addeq	r0, #4
 8008330:	0799      	lsls	r1, r3, #30
 8008332:	bf04      	itt	eq
 8008334:	089b      	lsreq	r3, r3, #2
 8008336:	3002      	addeq	r0, #2
 8008338:	07d9      	lsls	r1, r3, #31
 800833a:	d403      	bmi.n	8008344 <__lo0bits+0x4e>
 800833c:	085b      	lsrs	r3, r3, #1
 800833e:	f100 0001 	add.w	r0, r0, #1
 8008342:	d003      	beq.n	800834c <__lo0bits+0x56>
 8008344:	6013      	str	r3, [r2, #0]
 8008346:	4770      	bx	lr
 8008348:	2000      	movs	r0, #0
 800834a:	4770      	bx	lr
 800834c:	2020      	movs	r0, #32
 800834e:	4770      	bx	lr

08008350 <__i2b>:
 8008350:	b510      	push	{r4, lr}
 8008352:	460c      	mov	r4, r1
 8008354:	2101      	movs	r1, #1
 8008356:	f7ff ff07 	bl	8008168 <_Balloc>
 800835a:	4602      	mov	r2, r0
 800835c:	b928      	cbnz	r0, 800836a <__i2b+0x1a>
 800835e:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <__i2b+0x24>)
 8008360:	4805      	ldr	r0, [pc, #20]	@ (8008378 <__i2b+0x28>)
 8008362:	f240 1145 	movw	r1, #325	@ 0x145
 8008366:	f000 fcbd 	bl	8008ce4 <__assert_func>
 800836a:	2301      	movs	r3, #1
 800836c:	6144      	str	r4, [r0, #20]
 800836e:	6103      	str	r3, [r0, #16]
 8008370:	bd10      	pop	{r4, pc}
 8008372:	bf00      	nop
 8008374:	0800b7e0 	.word	0x0800b7e0
 8008378:	0800b7f1 	.word	0x0800b7f1

0800837c <__multiply>:
 800837c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008380:	4614      	mov	r4, r2
 8008382:	690a      	ldr	r2, [r1, #16]
 8008384:	6923      	ldr	r3, [r4, #16]
 8008386:	429a      	cmp	r2, r3
 8008388:	bfa8      	it	ge
 800838a:	4623      	movge	r3, r4
 800838c:	460f      	mov	r7, r1
 800838e:	bfa4      	itt	ge
 8008390:	460c      	movge	r4, r1
 8008392:	461f      	movge	r7, r3
 8008394:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008398:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800839c:	68a3      	ldr	r3, [r4, #8]
 800839e:	6861      	ldr	r1, [r4, #4]
 80083a0:	eb0a 0609 	add.w	r6, sl, r9
 80083a4:	42b3      	cmp	r3, r6
 80083a6:	b085      	sub	sp, #20
 80083a8:	bfb8      	it	lt
 80083aa:	3101      	addlt	r1, #1
 80083ac:	f7ff fedc 	bl	8008168 <_Balloc>
 80083b0:	b930      	cbnz	r0, 80083c0 <__multiply+0x44>
 80083b2:	4602      	mov	r2, r0
 80083b4:	4b44      	ldr	r3, [pc, #272]	@ (80084c8 <__multiply+0x14c>)
 80083b6:	4845      	ldr	r0, [pc, #276]	@ (80084cc <__multiply+0x150>)
 80083b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80083bc:	f000 fc92 	bl	8008ce4 <__assert_func>
 80083c0:	f100 0514 	add.w	r5, r0, #20
 80083c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083c8:	462b      	mov	r3, r5
 80083ca:	2200      	movs	r2, #0
 80083cc:	4543      	cmp	r3, r8
 80083ce:	d321      	bcc.n	8008414 <__multiply+0x98>
 80083d0:	f107 0114 	add.w	r1, r7, #20
 80083d4:	f104 0214 	add.w	r2, r4, #20
 80083d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80083dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	1b13      	subs	r3, r2, r4
 80083e4:	3b15      	subs	r3, #21
 80083e6:	f023 0303 	bic.w	r3, r3, #3
 80083ea:	3304      	adds	r3, #4
 80083ec:	f104 0715 	add.w	r7, r4, #21
 80083f0:	42ba      	cmp	r2, r7
 80083f2:	bf38      	it	cc
 80083f4:	2304      	movcc	r3, #4
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	9103      	str	r1, [sp, #12]
 80083fc:	428b      	cmp	r3, r1
 80083fe:	d80c      	bhi.n	800841a <__multiply+0x9e>
 8008400:	2e00      	cmp	r6, #0
 8008402:	dd03      	ble.n	800840c <__multiply+0x90>
 8008404:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008408:	2b00      	cmp	r3, #0
 800840a:	d05b      	beq.n	80084c4 <__multiply+0x148>
 800840c:	6106      	str	r6, [r0, #16]
 800840e:	b005      	add	sp, #20
 8008410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008414:	f843 2b04 	str.w	r2, [r3], #4
 8008418:	e7d8      	b.n	80083cc <__multiply+0x50>
 800841a:	f8b1 a000 	ldrh.w	sl, [r1]
 800841e:	f1ba 0f00 	cmp.w	sl, #0
 8008422:	d024      	beq.n	800846e <__multiply+0xf2>
 8008424:	f104 0e14 	add.w	lr, r4, #20
 8008428:	46a9      	mov	r9, r5
 800842a:	f04f 0c00 	mov.w	ip, #0
 800842e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008432:	f8d9 3000 	ldr.w	r3, [r9]
 8008436:	fa1f fb87 	uxth.w	fp, r7
 800843a:	b29b      	uxth	r3, r3
 800843c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008440:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008444:	f8d9 7000 	ldr.w	r7, [r9]
 8008448:	4463      	add	r3, ip
 800844a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800844e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008452:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008456:	b29b      	uxth	r3, r3
 8008458:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800845c:	4572      	cmp	r2, lr
 800845e:	f849 3b04 	str.w	r3, [r9], #4
 8008462:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008466:	d8e2      	bhi.n	800842e <__multiply+0xb2>
 8008468:	9b01      	ldr	r3, [sp, #4]
 800846a:	f845 c003 	str.w	ip, [r5, r3]
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008474:	3104      	adds	r1, #4
 8008476:	f1b9 0f00 	cmp.w	r9, #0
 800847a:	d021      	beq.n	80084c0 <__multiply+0x144>
 800847c:	682b      	ldr	r3, [r5, #0]
 800847e:	f104 0c14 	add.w	ip, r4, #20
 8008482:	46ae      	mov	lr, r5
 8008484:	f04f 0a00 	mov.w	sl, #0
 8008488:	f8bc b000 	ldrh.w	fp, [ip]
 800848c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008490:	fb09 770b 	mla	r7, r9, fp, r7
 8008494:	4457      	add	r7, sl
 8008496:	b29b      	uxth	r3, r3
 8008498:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800849c:	f84e 3b04 	str.w	r3, [lr], #4
 80084a0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084a8:	f8be 3000 	ldrh.w	r3, [lr]
 80084ac:	fb09 330a 	mla	r3, r9, sl, r3
 80084b0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80084b4:	4562      	cmp	r2, ip
 80084b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084ba:	d8e5      	bhi.n	8008488 <__multiply+0x10c>
 80084bc:	9f01      	ldr	r7, [sp, #4]
 80084be:	51eb      	str	r3, [r5, r7]
 80084c0:	3504      	adds	r5, #4
 80084c2:	e799      	b.n	80083f8 <__multiply+0x7c>
 80084c4:	3e01      	subs	r6, #1
 80084c6:	e79b      	b.n	8008400 <__multiply+0x84>
 80084c8:	0800b7e0 	.word	0x0800b7e0
 80084cc:	0800b7f1 	.word	0x0800b7f1

080084d0 <__pow5mult>:
 80084d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084d4:	4615      	mov	r5, r2
 80084d6:	f012 0203 	ands.w	r2, r2, #3
 80084da:	4607      	mov	r7, r0
 80084dc:	460e      	mov	r6, r1
 80084de:	d007      	beq.n	80084f0 <__pow5mult+0x20>
 80084e0:	4c25      	ldr	r4, [pc, #148]	@ (8008578 <__pow5mult+0xa8>)
 80084e2:	3a01      	subs	r2, #1
 80084e4:	2300      	movs	r3, #0
 80084e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084ea:	f7ff fe9f 	bl	800822c <__multadd>
 80084ee:	4606      	mov	r6, r0
 80084f0:	10ad      	asrs	r5, r5, #2
 80084f2:	d03d      	beq.n	8008570 <__pow5mult+0xa0>
 80084f4:	69fc      	ldr	r4, [r7, #28]
 80084f6:	b97c      	cbnz	r4, 8008518 <__pow5mult+0x48>
 80084f8:	2010      	movs	r0, #16
 80084fa:	f7ff fd7f 	bl	8007ffc <malloc>
 80084fe:	4602      	mov	r2, r0
 8008500:	61f8      	str	r0, [r7, #28]
 8008502:	b928      	cbnz	r0, 8008510 <__pow5mult+0x40>
 8008504:	4b1d      	ldr	r3, [pc, #116]	@ (800857c <__pow5mult+0xac>)
 8008506:	481e      	ldr	r0, [pc, #120]	@ (8008580 <__pow5mult+0xb0>)
 8008508:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800850c:	f000 fbea 	bl	8008ce4 <__assert_func>
 8008510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008514:	6004      	str	r4, [r0, #0]
 8008516:	60c4      	str	r4, [r0, #12]
 8008518:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800851c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008520:	b94c      	cbnz	r4, 8008536 <__pow5mult+0x66>
 8008522:	f240 2171 	movw	r1, #625	@ 0x271
 8008526:	4638      	mov	r0, r7
 8008528:	f7ff ff12 	bl	8008350 <__i2b>
 800852c:	2300      	movs	r3, #0
 800852e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008532:	4604      	mov	r4, r0
 8008534:	6003      	str	r3, [r0, #0]
 8008536:	f04f 0900 	mov.w	r9, #0
 800853a:	07eb      	lsls	r3, r5, #31
 800853c:	d50a      	bpl.n	8008554 <__pow5mult+0x84>
 800853e:	4631      	mov	r1, r6
 8008540:	4622      	mov	r2, r4
 8008542:	4638      	mov	r0, r7
 8008544:	f7ff ff1a 	bl	800837c <__multiply>
 8008548:	4631      	mov	r1, r6
 800854a:	4680      	mov	r8, r0
 800854c:	4638      	mov	r0, r7
 800854e:	f7ff fe4b 	bl	80081e8 <_Bfree>
 8008552:	4646      	mov	r6, r8
 8008554:	106d      	asrs	r5, r5, #1
 8008556:	d00b      	beq.n	8008570 <__pow5mult+0xa0>
 8008558:	6820      	ldr	r0, [r4, #0]
 800855a:	b938      	cbnz	r0, 800856c <__pow5mult+0x9c>
 800855c:	4622      	mov	r2, r4
 800855e:	4621      	mov	r1, r4
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff ff0b 	bl	800837c <__multiply>
 8008566:	6020      	str	r0, [r4, #0]
 8008568:	f8c0 9000 	str.w	r9, [r0]
 800856c:	4604      	mov	r4, r0
 800856e:	e7e4      	b.n	800853a <__pow5mult+0x6a>
 8008570:	4630      	mov	r0, r6
 8008572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008576:	bf00      	nop
 8008578:	0800b84c 	.word	0x0800b84c
 800857c:	0800b771 	.word	0x0800b771
 8008580:	0800b7f1 	.word	0x0800b7f1

08008584 <__lshift>:
 8008584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008588:	460c      	mov	r4, r1
 800858a:	6849      	ldr	r1, [r1, #4]
 800858c:	6923      	ldr	r3, [r4, #16]
 800858e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008592:	68a3      	ldr	r3, [r4, #8]
 8008594:	4607      	mov	r7, r0
 8008596:	4691      	mov	r9, r2
 8008598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800859c:	f108 0601 	add.w	r6, r8, #1
 80085a0:	42b3      	cmp	r3, r6
 80085a2:	db0b      	blt.n	80085bc <__lshift+0x38>
 80085a4:	4638      	mov	r0, r7
 80085a6:	f7ff fddf 	bl	8008168 <_Balloc>
 80085aa:	4605      	mov	r5, r0
 80085ac:	b948      	cbnz	r0, 80085c2 <__lshift+0x3e>
 80085ae:	4602      	mov	r2, r0
 80085b0:	4b28      	ldr	r3, [pc, #160]	@ (8008654 <__lshift+0xd0>)
 80085b2:	4829      	ldr	r0, [pc, #164]	@ (8008658 <__lshift+0xd4>)
 80085b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80085b8:	f000 fb94 	bl	8008ce4 <__assert_func>
 80085bc:	3101      	adds	r1, #1
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	e7ee      	b.n	80085a0 <__lshift+0x1c>
 80085c2:	2300      	movs	r3, #0
 80085c4:	f100 0114 	add.w	r1, r0, #20
 80085c8:	f100 0210 	add.w	r2, r0, #16
 80085cc:	4618      	mov	r0, r3
 80085ce:	4553      	cmp	r3, sl
 80085d0:	db33      	blt.n	800863a <__lshift+0xb6>
 80085d2:	6920      	ldr	r0, [r4, #16]
 80085d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085d8:	f104 0314 	add.w	r3, r4, #20
 80085dc:	f019 091f 	ands.w	r9, r9, #31
 80085e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085e8:	d02b      	beq.n	8008642 <__lshift+0xbe>
 80085ea:	f1c9 0e20 	rsb	lr, r9, #32
 80085ee:	468a      	mov	sl, r1
 80085f0:	2200      	movs	r2, #0
 80085f2:	6818      	ldr	r0, [r3, #0]
 80085f4:	fa00 f009 	lsl.w	r0, r0, r9
 80085f8:	4310      	orrs	r0, r2
 80085fa:	f84a 0b04 	str.w	r0, [sl], #4
 80085fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008602:	459c      	cmp	ip, r3
 8008604:	fa22 f20e 	lsr.w	r2, r2, lr
 8008608:	d8f3      	bhi.n	80085f2 <__lshift+0x6e>
 800860a:	ebac 0304 	sub.w	r3, ip, r4
 800860e:	3b15      	subs	r3, #21
 8008610:	f023 0303 	bic.w	r3, r3, #3
 8008614:	3304      	adds	r3, #4
 8008616:	f104 0015 	add.w	r0, r4, #21
 800861a:	4584      	cmp	ip, r0
 800861c:	bf38      	it	cc
 800861e:	2304      	movcc	r3, #4
 8008620:	50ca      	str	r2, [r1, r3]
 8008622:	b10a      	cbz	r2, 8008628 <__lshift+0xa4>
 8008624:	f108 0602 	add.w	r6, r8, #2
 8008628:	3e01      	subs	r6, #1
 800862a:	4638      	mov	r0, r7
 800862c:	612e      	str	r6, [r5, #16]
 800862e:	4621      	mov	r1, r4
 8008630:	f7ff fdda 	bl	80081e8 <_Bfree>
 8008634:	4628      	mov	r0, r5
 8008636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863a:	f842 0f04 	str.w	r0, [r2, #4]!
 800863e:	3301      	adds	r3, #1
 8008640:	e7c5      	b.n	80085ce <__lshift+0x4a>
 8008642:	3904      	subs	r1, #4
 8008644:	f853 2b04 	ldr.w	r2, [r3], #4
 8008648:	f841 2f04 	str.w	r2, [r1, #4]!
 800864c:	459c      	cmp	ip, r3
 800864e:	d8f9      	bhi.n	8008644 <__lshift+0xc0>
 8008650:	e7ea      	b.n	8008628 <__lshift+0xa4>
 8008652:	bf00      	nop
 8008654:	0800b7e0 	.word	0x0800b7e0
 8008658:	0800b7f1 	.word	0x0800b7f1

0800865c <__mcmp>:
 800865c:	690a      	ldr	r2, [r1, #16]
 800865e:	4603      	mov	r3, r0
 8008660:	6900      	ldr	r0, [r0, #16]
 8008662:	1a80      	subs	r0, r0, r2
 8008664:	b530      	push	{r4, r5, lr}
 8008666:	d10e      	bne.n	8008686 <__mcmp+0x2a>
 8008668:	3314      	adds	r3, #20
 800866a:	3114      	adds	r1, #20
 800866c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008670:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008674:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008678:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800867c:	4295      	cmp	r5, r2
 800867e:	d003      	beq.n	8008688 <__mcmp+0x2c>
 8008680:	d205      	bcs.n	800868e <__mcmp+0x32>
 8008682:	f04f 30ff 	mov.w	r0, #4294967295
 8008686:	bd30      	pop	{r4, r5, pc}
 8008688:	42a3      	cmp	r3, r4
 800868a:	d3f3      	bcc.n	8008674 <__mcmp+0x18>
 800868c:	e7fb      	b.n	8008686 <__mcmp+0x2a>
 800868e:	2001      	movs	r0, #1
 8008690:	e7f9      	b.n	8008686 <__mcmp+0x2a>
	...

08008694 <__mdiff>:
 8008694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008698:	4689      	mov	r9, r1
 800869a:	4606      	mov	r6, r0
 800869c:	4611      	mov	r1, r2
 800869e:	4648      	mov	r0, r9
 80086a0:	4614      	mov	r4, r2
 80086a2:	f7ff ffdb 	bl	800865c <__mcmp>
 80086a6:	1e05      	subs	r5, r0, #0
 80086a8:	d112      	bne.n	80086d0 <__mdiff+0x3c>
 80086aa:	4629      	mov	r1, r5
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7ff fd5b 	bl	8008168 <_Balloc>
 80086b2:	4602      	mov	r2, r0
 80086b4:	b928      	cbnz	r0, 80086c2 <__mdiff+0x2e>
 80086b6:	4b3f      	ldr	r3, [pc, #252]	@ (80087b4 <__mdiff+0x120>)
 80086b8:	f240 2137 	movw	r1, #567	@ 0x237
 80086bc:	483e      	ldr	r0, [pc, #248]	@ (80087b8 <__mdiff+0x124>)
 80086be:	f000 fb11 	bl	8008ce4 <__assert_func>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086c8:	4610      	mov	r0, r2
 80086ca:	b003      	add	sp, #12
 80086cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d0:	bfbc      	itt	lt
 80086d2:	464b      	movlt	r3, r9
 80086d4:	46a1      	movlt	r9, r4
 80086d6:	4630      	mov	r0, r6
 80086d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80086dc:	bfba      	itte	lt
 80086de:	461c      	movlt	r4, r3
 80086e0:	2501      	movlt	r5, #1
 80086e2:	2500      	movge	r5, #0
 80086e4:	f7ff fd40 	bl	8008168 <_Balloc>
 80086e8:	4602      	mov	r2, r0
 80086ea:	b918      	cbnz	r0, 80086f4 <__mdiff+0x60>
 80086ec:	4b31      	ldr	r3, [pc, #196]	@ (80087b4 <__mdiff+0x120>)
 80086ee:	f240 2145 	movw	r1, #581	@ 0x245
 80086f2:	e7e3      	b.n	80086bc <__mdiff+0x28>
 80086f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80086f8:	6926      	ldr	r6, [r4, #16]
 80086fa:	60c5      	str	r5, [r0, #12]
 80086fc:	f109 0310 	add.w	r3, r9, #16
 8008700:	f109 0514 	add.w	r5, r9, #20
 8008704:	f104 0e14 	add.w	lr, r4, #20
 8008708:	f100 0b14 	add.w	fp, r0, #20
 800870c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008710:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008714:	9301      	str	r3, [sp, #4]
 8008716:	46d9      	mov	r9, fp
 8008718:	f04f 0c00 	mov.w	ip, #0
 800871c:	9b01      	ldr	r3, [sp, #4]
 800871e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008722:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008726:	9301      	str	r3, [sp, #4]
 8008728:	fa1f f38a 	uxth.w	r3, sl
 800872c:	4619      	mov	r1, r3
 800872e:	b283      	uxth	r3, r0
 8008730:	1acb      	subs	r3, r1, r3
 8008732:	0c00      	lsrs	r0, r0, #16
 8008734:	4463      	add	r3, ip
 8008736:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800873a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800873e:	b29b      	uxth	r3, r3
 8008740:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008744:	4576      	cmp	r6, lr
 8008746:	f849 3b04 	str.w	r3, [r9], #4
 800874a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800874e:	d8e5      	bhi.n	800871c <__mdiff+0x88>
 8008750:	1b33      	subs	r3, r6, r4
 8008752:	3b15      	subs	r3, #21
 8008754:	f023 0303 	bic.w	r3, r3, #3
 8008758:	3415      	adds	r4, #21
 800875a:	3304      	adds	r3, #4
 800875c:	42a6      	cmp	r6, r4
 800875e:	bf38      	it	cc
 8008760:	2304      	movcc	r3, #4
 8008762:	441d      	add	r5, r3
 8008764:	445b      	add	r3, fp
 8008766:	461e      	mov	r6, r3
 8008768:	462c      	mov	r4, r5
 800876a:	4544      	cmp	r4, r8
 800876c:	d30e      	bcc.n	800878c <__mdiff+0xf8>
 800876e:	f108 0103 	add.w	r1, r8, #3
 8008772:	1b49      	subs	r1, r1, r5
 8008774:	f021 0103 	bic.w	r1, r1, #3
 8008778:	3d03      	subs	r5, #3
 800877a:	45a8      	cmp	r8, r5
 800877c:	bf38      	it	cc
 800877e:	2100      	movcc	r1, #0
 8008780:	440b      	add	r3, r1
 8008782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008786:	b191      	cbz	r1, 80087ae <__mdiff+0x11a>
 8008788:	6117      	str	r7, [r2, #16]
 800878a:	e79d      	b.n	80086c8 <__mdiff+0x34>
 800878c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008790:	46e6      	mov	lr, ip
 8008792:	0c08      	lsrs	r0, r1, #16
 8008794:	fa1c fc81 	uxtah	ip, ip, r1
 8008798:	4471      	add	r1, lr
 800879a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800879e:	b289      	uxth	r1, r1
 80087a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80087a4:	f846 1b04 	str.w	r1, [r6], #4
 80087a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087ac:	e7dd      	b.n	800876a <__mdiff+0xd6>
 80087ae:	3f01      	subs	r7, #1
 80087b0:	e7e7      	b.n	8008782 <__mdiff+0xee>
 80087b2:	bf00      	nop
 80087b4:	0800b7e0 	.word	0x0800b7e0
 80087b8:	0800b7f1 	.word	0x0800b7f1

080087bc <__d2b>:
 80087bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087c0:	460f      	mov	r7, r1
 80087c2:	2101      	movs	r1, #1
 80087c4:	ec59 8b10 	vmov	r8, r9, d0
 80087c8:	4616      	mov	r6, r2
 80087ca:	f7ff fccd 	bl	8008168 <_Balloc>
 80087ce:	4604      	mov	r4, r0
 80087d0:	b930      	cbnz	r0, 80087e0 <__d2b+0x24>
 80087d2:	4602      	mov	r2, r0
 80087d4:	4b23      	ldr	r3, [pc, #140]	@ (8008864 <__d2b+0xa8>)
 80087d6:	4824      	ldr	r0, [pc, #144]	@ (8008868 <__d2b+0xac>)
 80087d8:	f240 310f 	movw	r1, #783	@ 0x30f
 80087dc:	f000 fa82 	bl	8008ce4 <__assert_func>
 80087e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80087e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087e8:	b10d      	cbz	r5, 80087ee <__d2b+0x32>
 80087ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80087ee:	9301      	str	r3, [sp, #4]
 80087f0:	f1b8 0300 	subs.w	r3, r8, #0
 80087f4:	d023      	beq.n	800883e <__d2b+0x82>
 80087f6:	4668      	mov	r0, sp
 80087f8:	9300      	str	r3, [sp, #0]
 80087fa:	f7ff fd7c 	bl	80082f6 <__lo0bits>
 80087fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008802:	b1d0      	cbz	r0, 800883a <__d2b+0x7e>
 8008804:	f1c0 0320 	rsb	r3, r0, #32
 8008808:	fa02 f303 	lsl.w	r3, r2, r3
 800880c:	430b      	orrs	r3, r1
 800880e:	40c2      	lsrs	r2, r0
 8008810:	6163      	str	r3, [r4, #20]
 8008812:	9201      	str	r2, [sp, #4]
 8008814:	9b01      	ldr	r3, [sp, #4]
 8008816:	61a3      	str	r3, [r4, #24]
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf0c      	ite	eq
 800881c:	2201      	moveq	r2, #1
 800881e:	2202      	movne	r2, #2
 8008820:	6122      	str	r2, [r4, #16]
 8008822:	b1a5      	cbz	r5, 800884e <__d2b+0x92>
 8008824:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008828:	4405      	add	r5, r0
 800882a:	603d      	str	r5, [r7, #0]
 800882c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008830:	6030      	str	r0, [r6, #0]
 8008832:	4620      	mov	r0, r4
 8008834:	b003      	add	sp, #12
 8008836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800883a:	6161      	str	r1, [r4, #20]
 800883c:	e7ea      	b.n	8008814 <__d2b+0x58>
 800883e:	a801      	add	r0, sp, #4
 8008840:	f7ff fd59 	bl	80082f6 <__lo0bits>
 8008844:	9b01      	ldr	r3, [sp, #4]
 8008846:	6163      	str	r3, [r4, #20]
 8008848:	3020      	adds	r0, #32
 800884a:	2201      	movs	r2, #1
 800884c:	e7e8      	b.n	8008820 <__d2b+0x64>
 800884e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008852:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008856:	6038      	str	r0, [r7, #0]
 8008858:	6918      	ldr	r0, [r3, #16]
 800885a:	f7ff fd2d 	bl	80082b8 <__hi0bits>
 800885e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008862:	e7e5      	b.n	8008830 <__d2b+0x74>
 8008864:	0800b7e0 	.word	0x0800b7e0
 8008868:	0800b7f1 	.word	0x0800b7f1

0800886c <__ssputs_r>:
 800886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	688e      	ldr	r6, [r1, #8]
 8008872:	461f      	mov	r7, r3
 8008874:	42be      	cmp	r6, r7
 8008876:	680b      	ldr	r3, [r1, #0]
 8008878:	4682      	mov	sl, r0
 800887a:	460c      	mov	r4, r1
 800887c:	4690      	mov	r8, r2
 800887e:	d82d      	bhi.n	80088dc <__ssputs_r+0x70>
 8008880:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008884:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008888:	d026      	beq.n	80088d8 <__ssputs_r+0x6c>
 800888a:	6965      	ldr	r5, [r4, #20]
 800888c:	6909      	ldr	r1, [r1, #16]
 800888e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008892:	eba3 0901 	sub.w	r9, r3, r1
 8008896:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800889a:	1c7b      	adds	r3, r7, #1
 800889c:	444b      	add	r3, r9
 800889e:	106d      	asrs	r5, r5, #1
 80088a0:	429d      	cmp	r5, r3
 80088a2:	bf38      	it	cc
 80088a4:	461d      	movcc	r5, r3
 80088a6:	0553      	lsls	r3, r2, #21
 80088a8:	d527      	bpl.n	80088fa <__ssputs_r+0x8e>
 80088aa:	4629      	mov	r1, r5
 80088ac:	f7ff fbd0 	bl	8008050 <_malloc_r>
 80088b0:	4606      	mov	r6, r0
 80088b2:	b360      	cbz	r0, 800890e <__ssputs_r+0xa2>
 80088b4:	6921      	ldr	r1, [r4, #16]
 80088b6:	464a      	mov	r2, r9
 80088b8:	f000 fa06 	bl	8008cc8 <memcpy>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088c6:	81a3      	strh	r3, [r4, #12]
 80088c8:	6126      	str	r6, [r4, #16]
 80088ca:	6165      	str	r5, [r4, #20]
 80088cc:	444e      	add	r6, r9
 80088ce:	eba5 0509 	sub.w	r5, r5, r9
 80088d2:	6026      	str	r6, [r4, #0]
 80088d4:	60a5      	str	r5, [r4, #8]
 80088d6:	463e      	mov	r6, r7
 80088d8:	42be      	cmp	r6, r7
 80088da:	d900      	bls.n	80088de <__ssputs_r+0x72>
 80088dc:	463e      	mov	r6, r7
 80088de:	6820      	ldr	r0, [r4, #0]
 80088e0:	4632      	mov	r2, r6
 80088e2:	4641      	mov	r1, r8
 80088e4:	f000 f9c6 	bl	8008c74 <memmove>
 80088e8:	68a3      	ldr	r3, [r4, #8]
 80088ea:	1b9b      	subs	r3, r3, r6
 80088ec:	60a3      	str	r3, [r4, #8]
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	4433      	add	r3, r6
 80088f2:	6023      	str	r3, [r4, #0]
 80088f4:	2000      	movs	r0, #0
 80088f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088fa:	462a      	mov	r2, r5
 80088fc:	f000 fa36 	bl	8008d6c <_realloc_r>
 8008900:	4606      	mov	r6, r0
 8008902:	2800      	cmp	r0, #0
 8008904:	d1e0      	bne.n	80088c8 <__ssputs_r+0x5c>
 8008906:	6921      	ldr	r1, [r4, #16]
 8008908:	4650      	mov	r0, sl
 800890a:	f7ff fb2d 	bl	8007f68 <_free_r>
 800890e:	230c      	movs	r3, #12
 8008910:	f8ca 3000 	str.w	r3, [sl]
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	f04f 30ff 	mov.w	r0, #4294967295
 8008920:	e7e9      	b.n	80088f6 <__ssputs_r+0x8a>
	...

08008924 <_svfiprintf_r>:
 8008924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008928:	4698      	mov	r8, r3
 800892a:	898b      	ldrh	r3, [r1, #12]
 800892c:	061b      	lsls	r3, r3, #24
 800892e:	b09d      	sub	sp, #116	@ 0x74
 8008930:	4607      	mov	r7, r0
 8008932:	460d      	mov	r5, r1
 8008934:	4614      	mov	r4, r2
 8008936:	d510      	bpl.n	800895a <_svfiprintf_r+0x36>
 8008938:	690b      	ldr	r3, [r1, #16]
 800893a:	b973      	cbnz	r3, 800895a <_svfiprintf_r+0x36>
 800893c:	2140      	movs	r1, #64	@ 0x40
 800893e:	f7ff fb87 	bl	8008050 <_malloc_r>
 8008942:	6028      	str	r0, [r5, #0]
 8008944:	6128      	str	r0, [r5, #16]
 8008946:	b930      	cbnz	r0, 8008956 <_svfiprintf_r+0x32>
 8008948:	230c      	movs	r3, #12
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	f04f 30ff 	mov.w	r0, #4294967295
 8008950:	b01d      	add	sp, #116	@ 0x74
 8008952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008956:	2340      	movs	r3, #64	@ 0x40
 8008958:	616b      	str	r3, [r5, #20]
 800895a:	2300      	movs	r3, #0
 800895c:	9309      	str	r3, [sp, #36]	@ 0x24
 800895e:	2320      	movs	r3, #32
 8008960:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008964:	f8cd 800c 	str.w	r8, [sp, #12]
 8008968:	2330      	movs	r3, #48	@ 0x30
 800896a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b08 <_svfiprintf_r+0x1e4>
 800896e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008972:	f04f 0901 	mov.w	r9, #1
 8008976:	4623      	mov	r3, r4
 8008978:	469a      	mov	sl, r3
 800897a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800897e:	b10a      	cbz	r2, 8008984 <_svfiprintf_r+0x60>
 8008980:	2a25      	cmp	r2, #37	@ 0x25
 8008982:	d1f9      	bne.n	8008978 <_svfiprintf_r+0x54>
 8008984:	ebba 0b04 	subs.w	fp, sl, r4
 8008988:	d00b      	beq.n	80089a2 <_svfiprintf_r+0x7e>
 800898a:	465b      	mov	r3, fp
 800898c:	4622      	mov	r2, r4
 800898e:	4629      	mov	r1, r5
 8008990:	4638      	mov	r0, r7
 8008992:	f7ff ff6b 	bl	800886c <__ssputs_r>
 8008996:	3001      	adds	r0, #1
 8008998:	f000 80a7 	beq.w	8008aea <_svfiprintf_r+0x1c6>
 800899c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800899e:	445a      	add	r2, fp
 80089a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80089a2:	f89a 3000 	ldrb.w	r3, [sl]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f000 809f 	beq.w	8008aea <_svfiprintf_r+0x1c6>
 80089ac:	2300      	movs	r3, #0
 80089ae:	f04f 32ff 	mov.w	r2, #4294967295
 80089b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089b6:	f10a 0a01 	add.w	sl, sl, #1
 80089ba:	9304      	str	r3, [sp, #16]
 80089bc:	9307      	str	r3, [sp, #28]
 80089be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80089c4:	4654      	mov	r4, sl
 80089c6:	2205      	movs	r2, #5
 80089c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089cc:	484e      	ldr	r0, [pc, #312]	@ (8008b08 <_svfiprintf_r+0x1e4>)
 80089ce:	f7f7 fc2f 	bl	8000230 <memchr>
 80089d2:	9a04      	ldr	r2, [sp, #16]
 80089d4:	b9d8      	cbnz	r0, 8008a0e <_svfiprintf_r+0xea>
 80089d6:	06d0      	lsls	r0, r2, #27
 80089d8:	bf44      	itt	mi
 80089da:	2320      	movmi	r3, #32
 80089dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089e0:	0711      	lsls	r1, r2, #28
 80089e2:	bf44      	itt	mi
 80089e4:	232b      	movmi	r3, #43	@ 0x2b
 80089e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ea:	f89a 3000 	ldrb.w	r3, [sl]
 80089ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80089f0:	d015      	beq.n	8008a1e <_svfiprintf_r+0xfa>
 80089f2:	9a07      	ldr	r2, [sp, #28]
 80089f4:	4654      	mov	r4, sl
 80089f6:	2000      	movs	r0, #0
 80089f8:	f04f 0c0a 	mov.w	ip, #10
 80089fc:	4621      	mov	r1, r4
 80089fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a02:	3b30      	subs	r3, #48	@ 0x30
 8008a04:	2b09      	cmp	r3, #9
 8008a06:	d94b      	bls.n	8008aa0 <_svfiprintf_r+0x17c>
 8008a08:	b1b0      	cbz	r0, 8008a38 <_svfiprintf_r+0x114>
 8008a0a:	9207      	str	r2, [sp, #28]
 8008a0c:	e014      	b.n	8008a38 <_svfiprintf_r+0x114>
 8008a0e:	eba0 0308 	sub.w	r3, r0, r8
 8008a12:	fa09 f303 	lsl.w	r3, r9, r3
 8008a16:	4313      	orrs	r3, r2
 8008a18:	9304      	str	r3, [sp, #16]
 8008a1a:	46a2      	mov	sl, r4
 8008a1c:	e7d2      	b.n	80089c4 <_svfiprintf_r+0xa0>
 8008a1e:	9b03      	ldr	r3, [sp, #12]
 8008a20:	1d19      	adds	r1, r3, #4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	9103      	str	r1, [sp, #12]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bfbb      	ittet	lt
 8008a2a:	425b      	neglt	r3, r3
 8008a2c:	f042 0202 	orrlt.w	r2, r2, #2
 8008a30:	9307      	strge	r3, [sp, #28]
 8008a32:	9307      	strlt	r3, [sp, #28]
 8008a34:	bfb8      	it	lt
 8008a36:	9204      	strlt	r2, [sp, #16]
 8008a38:	7823      	ldrb	r3, [r4, #0]
 8008a3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a3c:	d10a      	bne.n	8008a54 <_svfiprintf_r+0x130>
 8008a3e:	7863      	ldrb	r3, [r4, #1]
 8008a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a42:	d132      	bne.n	8008aaa <_svfiprintf_r+0x186>
 8008a44:	9b03      	ldr	r3, [sp, #12]
 8008a46:	1d1a      	adds	r2, r3, #4
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	9203      	str	r2, [sp, #12]
 8008a4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a50:	3402      	adds	r4, #2
 8008a52:	9305      	str	r3, [sp, #20]
 8008a54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b18 <_svfiprintf_r+0x1f4>
 8008a58:	7821      	ldrb	r1, [r4, #0]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	4650      	mov	r0, sl
 8008a5e:	f7f7 fbe7 	bl	8000230 <memchr>
 8008a62:	b138      	cbz	r0, 8008a74 <_svfiprintf_r+0x150>
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	eba0 000a 	sub.w	r0, r0, sl
 8008a6a:	2240      	movs	r2, #64	@ 0x40
 8008a6c:	4082      	lsls	r2, r0
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	3401      	adds	r4, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a78:	4824      	ldr	r0, [pc, #144]	@ (8008b0c <_svfiprintf_r+0x1e8>)
 8008a7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a7e:	2206      	movs	r2, #6
 8008a80:	f7f7 fbd6 	bl	8000230 <memchr>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d036      	beq.n	8008af6 <_svfiprintf_r+0x1d2>
 8008a88:	4b21      	ldr	r3, [pc, #132]	@ (8008b10 <_svfiprintf_r+0x1ec>)
 8008a8a:	bb1b      	cbnz	r3, 8008ad4 <_svfiprintf_r+0x1b0>
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	3307      	adds	r3, #7
 8008a90:	f023 0307 	bic.w	r3, r3, #7
 8008a94:	3308      	adds	r3, #8
 8008a96:	9303      	str	r3, [sp, #12]
 8008a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9a:	4433      	add	r3, r6
 8008a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a9e:	e76a      	b.n	8008976 <_svfiprintf_r+0x52>
 8008aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	e7a8      	b.n	80089fc <_svfiprintf_r+0xd8>
 8008aaa:	2300      	movs	r3, #0
 8008aac:	3401      	adds	r4, #1
 8008aae:	9305      	str	r3, [sp, #20]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	f04f 0c0a 	mov.w	ip, #10
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008abc:	3a30      	subs	r2, #48	@ 0x30
 8008abe:	2a09      	cmp	r2, #9
 8008ac0:	d903      	bls.n	8008aca <_svfiprintf_r+0x1a6>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0c6      	beq.n	8008a54 <_svfiprintf_r+0x130>
 8008ac6:	9105      	str	r1, [sp, #20]
 8008ac8:	e7c4      	b.n	8008a54 <_svfiprintf_r+0x130>
 8008aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ace:	4604      	mov	r4, r0
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e7f0      	b.n	8008ab6 <_svfiprintf_r+0x192>
 8008ad4:	ab03      	add	r3, sp, #12
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	462a      	mov	r2, r5
 8008ada:	4b0e      	ldr	r3, [pc, #56]	@ (8008b14 <_svfiprintf_r+0x1f0>)
 8008adc:	a904      	add	r1, sp, #16
 8008ade:	4638      	mov	r0, r7
 8008ae0:	f7fd fe98 	bl	8006814 <_printf_float>
 8008ae4:	1c42      	adds	r2, r0, #1
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	d1d6      	bne.n	8008a98 <_svfiprintf_r+0x174>
 8008aea:	89ab      	ldrh	r3, [r5, #12]
 8008aec:	065b      	lsls	r3, r3, #25
 8008aee:	f53f af2d 	bmi.w	800894c <_svfiprintf_r+0x28>
 8008af2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008af4:	e72c      	b.n	8008950 <_svfiprintf_r+0x2c>
 8008af6:	ab03      	add	r3, sp, #12
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	462a      	mov	r2, r5
 8008afc:	4b05      	ldr	r3, [pc, #20]	@ (8008b14 <_svfiprintf_r+0x1f0>)
 8008afe:	a904      	add	r1, sp, #16
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7fe f91f 	bl	8006d44 <_printf_i>
 8008b06:	e7ed      	b.n	8008ae4 <_svfiprintf_r+0x1c0>
 8008b08:	0800b948 	.word	0x0800b948
 8008b0c:	0800b952 	.word	0x0800b952
 8008b10:	08006815 	.word	0x08006815
 8008b14:	0800886d 	.word	0x0800886d
 8008b18:	0800b94e 	.word	0x0800b94e

08008b1c <__sflush_r>:
 8008b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b24:	0716      	lsls	r6, r2, #28
 8008b26:	4605      	mov	r5, r0
 8008b28:	460c      	mov	r4, r1
 8008b2a:	d454      	bmi.n	8008bd6 <__sflush_r+0xba>
 8008b2c:	684b      	ldr	r3, [r1, #4]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dc02      	bgt.n	8008b38 <__sflush_r+0x1c>
 8008b32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	dd48      	ble.n	8008bca <__sflush_r+0xae>
 8008b38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b3a:	2e00      	cmp	r6, #0
 8008b3c:	d045      	beq.n	8008bca <__sflush_r+0xae>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b44:	682f      	ldr	r7, [r5, #0]
 8008b46:	6a21      	ldr	r1, [r4, #32]
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	d030      	beq.n	8008bae <__sflush_r+0x92>
 8008b4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b4e:	89a3      	ldrh	r3, [r4, #12]
 8008b50:	0759      	lsls	r1, r3, #29
 8008b52:	d505      	bpl.n	8008b60 <__sflush_r+0x44>
 8008b54:	6863      	ldr	r3, [r4, #4]
 8008b56:	1ad2      	subs	r2, r2, r3
 8008b58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b5a:	b10b      	cbz	r3, 8008b60 <__sflush_r+0x44>
 8008b5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b5e:	1ad2      	subs	r2, r2, r3
 8008b60:	2300      	movs	r3, #0
 8008b62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b64:	6a21      	ldr	r1, [r4, #32]
 8008b66:	4628      	mov	r0, r5
 8008b68:	47b0      	blx	r6
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	89a3      	ldrh	r3, [r4, #12]
 8008b6e:	d106      	bne.n	8008b7e <__sflush_r+0x62>
 8008b70:	6829      	ldr	r1, [r5, #0]
 8008b72:	291d      	cmp	r1, #29
 8008b74:	d82b      	bhi.n	8008bce <__sflush_r+0xb2>
 8008b76:	4a2a      	ldr	r2, [pc, #168]	@ (8008c20 <__sflush_r+0x104>)
 8008b78:	410a      	asrs	r2, r1
 8008b7a:	07d6      	lsls	r6, r2, #31
 8008b7c:	d427      	bmi.n	8008bce <__sflush_r+0xb2>
 8008b7e:	2200      	movs	r2, #0
 8008b80:	6062      	str	r2, [r4, #4]
 8008b82:	04d9      	lsls	r1, r3, #19
 8008b84:	6922      	ldr	r2, [r4, #16]
 8008b86:	6022      	str	r2, [r4, #0]
 8008b88:	d504      	bpl.n	8008b94 <__sflush_r+0x78>
 8008b8a:	1c42      	adds	r2, r0, #1
 8008b8c:	d101      	bne.n	8008b92 <__sflush_r+0x76>
 8008b8e:	682b      	ldr	r3, [r5, #0]
 8008b90:	b903      	cbnz	r3, 8008b94 <__sflush_r+0x78>
 8008b92:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b96:	602f      	str	r7, [r5, #0]
 8008b98:	b1b9      	cbz	r1, 8008bca <__sflush_r+0xae>
 8008b9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b9e:	4299      	cmp	r1, r3
 8008ba0:	d002      	beq.n	8008ba8 <__sflush_r+0x8c>
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f7ff f9e0 	bl	8007f68 <_free_r>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bac:	e00d      	b.n	8008bca <__sflush_r+0xae>
 8008bae:	2301      	movs	r3, #1
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	47b0      	blx	r6
 8008bb4:	4602      	mov	r2, r0
 8008bb6:	1c50      	adds	r0, r2, #1
 8008bb8:	d1c9      	bne.n	8008b4e <__sflush_r+0x32>
 8008bba:	682b      	ldr	r3, [r5, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d0c6      	beq.n	8008b4e <__sflush_r+0x32>
 8008bc0:	2b1d      	cmp	r3, #29
 8008bc2:	d001      	beq.n	8008bc8 <__sflush_r+0xac>
 8008bc4:	2b16      	cmp	r3, #22
 8008bc6:	d11e      	bne.n	8008c06 <__sflush_r+0xea>
 8008bc8:	602f      	str	r7, [r5, #0]
 8008bca:	2000      	movs	r0, #0
 8008bcc:	e022      	b.n	8008c14 <__sflush_r+0xf8>
 8008bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bd2:	b21b      	sxth	r3, r3
 8008bd4:	e01b      	b.n	8008c0e <__sflush_r+0xf2>
 8008bd6:	690f      	ldr	r7, [r1, #16]
 8008bd8:	2f00      	cmp	r7, #0
 8008bda:	d0f6      	beq.n	8008bca <__sflush_r+0xae>
 8008bdc:	0793      	lsls	r3, r2, #30
 8008bde:	680e      	ldr	r6, [r1, #0]
 8008be0:	bf08      	it	eq
 8008be2:	694b      	ldreq	r3, [r1, #20]
 8008be4:	600f      	str	r7, [r1, #0]
 8008be6:	bf18      	it	ne
 8008be8:	2300      	movne	r3, #0
 8008bea:	eba6 0807 	sub.w	r8, r6, r7
 8008bee:	608b      	str	r3, [r1, #8]
 8008bf0:	f1b8 0f00 	cmp.w	r8, #0
 8008bf4:	dde9      	ble.n	8008bca <__sflush_r+0xae>
 8008bf6:	6a21      	ldr	r1, [r4, #32]
 8008bf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bfa:	4643      	mov	r3, r8
 8008bfc:	463a      	mov	r2, r7
 8008bfe:	4628      	mov	r0, r5
 8008c00:	47b0      	blx	r6
 8008c02:	2800      	cmp	r0, #0
 8008c04:	dc08      	bgt.n	8008c18 <__sflush_r+0xfc>
 8008c06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c0e:	81a3      	strh	r3, [r4, #12]
 8008c10:	f04f 30ff 	mov.w	r0, #4294967295
 8008c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c18:	4407      	add	r7, r0
 8008c1a:	eba8 0800 	sub.w	r8, r8, r0
 8008c1e:	e7e7      	b.n	8008bf0 <__sflush_r+0xd4>
 8008c20:	dfbffffe 	.word	0xdfbffffe

08008c24 <_fflush_r>:
 8008c24:	b538      	push	{r3, r4, r5, lr}
 8008c26:	690b      	ldr	r3, [r1, #16]
 8008c28:	4605      	mov	r5, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	b913      	cbnz	r3, 8008c34 <_fflush_r+0x10>
 8008c2e:	2500      	movs	r5, #0
 8008c30:	4628      	mov	r0, r5
 8008c32:	bd38      	pop	{r3, r4, r5, pc}
 8008c34:	b118      	cbz	r0, 8008c3e <_fflush_r+0x1a>
 8008c36:	6a03      	ldr	r3, [r0, #32]
 8008c38:	b90b      	cbnz	r3, 8008c3e <_fflush_r+0x1a>
 8008c3a:	f7fe fa2f 	bl	800709c <__sinit>
 8008c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0f3      	beq.n	8008c2e <_fflush_r+0xa>
 8008c46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c48:	07d0      	lsls	r0, r2, #31
 8008c4a:	d404      	bmi.n	8008c56 <_fflush_r+0x32>
 8008c4c:	0599      	lsls	r1, r3, #22
 8008c4e:	d402      	bmi.n	8008c56 <_fflush_r+0x32>
 8008c50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c52:	f7fe fb3a 	bl	80072ca <__retarget_lock_acquire_recursive>
 8008c56:	4628      	mov	r0, r5
 8008c58:	4621      	mov	r1, r4
 8008c5a:	f7ff ff5f 	bl	8008b1c <__sflush_r>
 8008c5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c60:	07da      	lsls	r2, r3, #31
 8008c62:	4605      	mov	r5, r0
 8008c64:	d4e4      	bmi.n	8008c30 <_fflush_r+0xc>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	059b      	lsls	r3, r3, #22
 8008c6a:	d4e1      	bmi.n	8008c30 <_fflush_r+0xc>
 8008c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c6e:	f7fe fb2d 	bl	80072cc <__retarget_lock_release_recursive>
 8008c72:	e7dd      	b.n	8008c30 <_fflush_r+0xc>

08008c74 <memmove>:
 8008c74:	4288      	cmp	r0, r1
 8008c76:	b510      	push	{r4, lr}
 8008c78:	eb01 0402 	add.w	r4, r1, r2
 8008c7c:	d902      	bls.n	8008c84 <memmove+0x10>
 8008c7e:	4284      	cmp	r4, r0
 8008c80:	4623      	mov	r3, r4
 8008c82:	d807      	bhi.n	8008c94 <memmove+0x20>
 8008c84:	1e43      	subs	r3, r0, #1
 8008c86:	42a1      	cmp	r1, r4
 8008c88:	d008      	beq.n	8008c9c <memmove+0x28>
 8008c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008c92:	e7f8      	b.n	8008c86 <memmove+0x12>
 8008c94:	4402      	add	r2, r0
 8008c96:	4601      	mov	r1, r0
 8008c98:	428a      	cmp	r2, r1
 8008c9a:	d100      	bne.n	8008c9e <memmove+0x2a>
 8008c9c:	bd10      	pop	{r4, pc}
 8008c9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ca2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ca6:	e7f7      	b.n	8008c98 <memmove+0x24>

08008ca8 <_sbrk_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d06      	ldr	r5, [pc, #24]	@ (8008cc4 <_sbrk_r+0x1c>)
 8008cac:	2300      	movs	r3, #0
 8008cae:	4604      	mov	r4, r0
 8008cb0:	4608      	mov	r0, r1
 8008cb2:	602b      	str	r3, [r5, #0]
 8008cb4:	f7f8 fdba 	bl	800182c <_sbrk>
 8008cb8:	1c43      	adds	r3, r0, #1
 8008cba:	d102      	bne.n	8008cc2 <_sbrk_r+0x1a>
 8008cbc:	682b      	ldr	r3, [r5, #0]
 8008cbe:	b103      	cbz	r3, 8008cc2 <_sbrk_r+0x1a>
 8008cc0:	6023      	str	r3, [r4, #0]
 8008cc2:	bd38      	pop	{r3, r4, r5, pc}
 8008cc4:	20002754 	.word	0x20002754

08008cc8 <memcpy>:
 8008cc8:	440a      	add	r2, r1
 8008cca:	4291      	cmp	r1, r2
 8008ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cd0:	d100      	bne.n	8008cd4 <memcpy+0xc>
 8008cd2:	4770      	bx	lr
 8008cd4:	b510      	push	{r4, lr}
 8008cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cde:	4291      	cmp	r1, r2
 8008ce0:	d1f9      	bne.n	8008cd6 <memcpy+0xe>
 8008ce2:	bd10      	pop	{r4, pc}

08008ce4 <__assert_func>:
 8008ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ce6:	4614      	mov	r4, r2
 8008ce8:	461a      	mov	r2, r3
 8008cea:	4b09      	ldr	r3, [pc, #36]	@ (8008d10 <__assert_func+0x2c>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	4605      	mov	r5, r0
 8008cf0:	68d8      	ldr	r0, [r3, #12]
 8008cf2:	b954      	cbnz	r4, 8008d0a <__assert_func+0x26>
 8008cf4:	4b07      	ldr	r3, [pc, #28]	@ (8008d14 <__assert_func+0x30>)
 8008cf6:	461c      	mov	r4, r3
 8008cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008cfc:	9100      	str	r1, [sp, #0]
 8008cfe:	462b      	mov	r3, r5
 8008d00:	4905      	ldr	r1, [pc, #20]	@ (8008d18 <__assert_func+0x34>)
 8008d02:	f000 f86f 	bl	8008de4 <fiprintf>
 8008d06:	f000 f87f 	bl	8008e08 <abort>
 8008d0a:	4b04      	ldr	r3, [pc, #16]	@ (8008d1c <__assert_func+0x38>)
 8008d0c:	e7f4      	b.n	8008cf8 <__assert_func+0x14>
 8008d0e:	bf00      	nop
 8008d10:	200002d0 	.word	0x200002d0
 8008d14:	0800b99e 	.word	0x0800b99e
 8008d18:	0800b970 	.word	0x0800b970
 8008d1c:	0800b963 	.word	0x0800b963

08008d20 <_calloc_r>:
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	fba1 5402 	umull	r5, r4, r1, r2
 8008d26:	b93c      	cbnz	r4, 8008d38 <_calloc_r+0x18>
 8008d28:	4629      	mov	r1, r5
 8008d2a:	f7ff f991 	bl	8008050 <_malloc_r>
 8008d2e:	4606      	mov	r6, r0
 8008d30:	b928      	cbnz	r0, 8008d3e <_calloc_r+0x1e>
 8008d32:	2600      	movs	r6, #0
 8008d34:	4630      	mov	r0, r6
 8008d36:	bd70      	pop	{r4, r5, r6, pc}
 8008d38:	220c      	movs	r2, #12
 8008d3a:	6002      	str	r2, [r0, #0]
 8008d3c:	e7f9      	b.n	8008d32 <_calloc_r+0x12>
 8008d3e:	462a      	mov	r2, r5
 8008d40:	4621      	mov	r1, r4
 8008d42:	f7fe fa44 	bl	80071ce <memset>
 8008d46:	e7f5      	b.n	8008d34 <_calloc_r+0x14>

08008d48 <__ascii_mbtowc>:
 8008d48:	b082      	sub	sp, #8
 8008d4a:	b901      	cbnz	r1, 8008d4e <__ascii_mbtowc+0x6>
 8008d4c:	a901      	add	r1, sp, #4
 8008d4e:	b142      	cbz	r2, 8008d62 <__ascii_mbtowc+0x1a>
 8008d50:	b14b      	cbz	r3, 8008d66 <__ascii_mbtowc+0x1e>
 8008d52:	7813      	ldrb	r3, [r2, #0]
 8008d54:	600b      	str	r3, [r1, #0]
 8008d56:	7812      	ldrb	r2, [r2, #0]
 8008d58:	1e10      	subs	r0, r2, #0
 8008d5a:	bf18      	it	ne
 8008d5c:	2001      	movne	r0, #1
 8008d5e:	b002      	add	sp, #8
 8008d60:	4770      	bx	lr
 8008d62:	4610      	mov	r0, r2
 8008d64:	e7fb      	b.n	8008d5e <__ascii_mbtowc+0x16>
 8008d66:	f06f 0001 	mvn.w	r0, #1
 8008d6a:	e7f8      	b.n	8008d5e <__ascii_mbtowc+0x16>

08008d6c <_realloc_r>:
 8008d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d70:	4680      	mov	r8, r0
 8008d72:	4615      	mov	r5, r2
 8008d74:	460c      	mov	r4, r1
 8008d76:	b921      	cbnz	r1, 8008d82 <_realloc_r+0x16>
 8008d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d7c:	4611      	mov	r1, r2
 8008d7e:	f7ff b967 	b.w	8008050 <_malloc_r>
 8008d82:	b92a      	cbnz	r2, 8008d90 <_realloc_r+0x24>
 8008d84:	f7ff f8f0 	bl	8007f68 <_free_r>
 8008d88:	2400      	movs	r4, #0
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d90:	f000 f841 	bl	8008e16 <_malloc_usable_size_r>
 8008d94:	4285      	cmp	r5, r0
 8008d96:	4606      	mov	r6, r0
 8008d98:	d802      	bhi.n	8008da0 <_realloc_r+0x34>
 8008d9a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d9e:	d8f4      	bhi.n	8008d8a <_realloc_r+0x1e>
 8008da0:	4629      	mov	r1, r5
 8008da2:	4640      	mov	r0, r8
 8008da4:	f7ff f954 	bl	8008050 <_malloc_r>
 8008da8:	4607      	mov	r7, r0
 8008daa:	2800      	cmp	r0, #0
 8008dac:	d0ec      	beq.n	8008d88 <_realloc_r+0x1c>
 8008dae:	42b5      	cmp	r5, r6
 8008db0:	462a      	mov	r2, r5
 8008db2:	4621      	mov	r1, r4
 8008db4:	bf28      	it	cs
 8008db6:	4632      	movcs	r2, r6
 8008db8:	f7ff ff86 	bl	8008cc8 <memcpy>
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	f7ff f8d2 	bl	8007f68 <_free_r>
 8008dc4:	463c      	mov	r4, r7
 8008dc6:	e7e0      	b.n	8008d8a <_realloc_r+0x1e>

08008dc8 <__ascii_wctomb>:
 8008dc8:	4603      	mov	r3, r0
 8008dca:	4608      	mov	r0, r1
 8008dcc:	b141      	cbz	r1, 8008de0 <__ascii_wctomb+0x18>
 8008dce:	2aff      	cmp	r2, #255	@ 0xff
 8008dd0:	d904      	bls.n	8008ddc <__ascii_wctomb+0x14>
 8008dd2:	228a      	movs	r2, #138	@ 0x8a
 8008dd4:	601a      	str	r2, [r3, #0]
 8008dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008dda:	4770      	bx	lr
 8008ddc:	700a      	strb	r2, [r1, #0]
 8008dde:	2001      	movs	r0, #1
 8008de0:	4770      	bx	lr
	...

08008de4 <fiprintf>:
 8008de4:	b40e      	push	{r1, r2, r3}
 8008de6:	b503      	push	{r0, r1, lr}
 8008de8:	4601      	mov	r1, r0
 8008dea:	ab03      	add	r3, sp, #12
 8008dec:	4805      	ldr	r0, [pc, #20]	@ (8008e04 <fiprintf+0x20>)
 8008dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008df2:	6800      	ldr	r0, [r0, #0]
 8008df4:	9301      	str	r3, [sp, #4]
 8008df6:	f000 f83f 	bl	8008e78 <_vfiprintf_r>
 8008dfa:	b002      	add	sp, #8
 8008dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e00:	b003      	add	sp, #12
 8008e02:	4770      	bx	lr
 8008e04:	200002d0 	.word	0x200002d0

08008e08 <abort>:
 8008e08:	b508      	push	{r3, lr}
 8008e0a:	2006      	movs	r0, #6
 8008e0c:	f000 fa08 	bl	8009220 <raise>
 8008e10:	2001      	movs	r0, #1
 8008e12:	f7f8 fc92 	bl	800173a <_exit>

08008e16 <_malloc_usable_size_r>:
 8008e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e1a:	1f18      	subs	r0, r3, #4
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	bfbc      	itt	lt
 8008e20:	580b      	ldrlt	r3, [r1, r0]
 8008e22:	18c0      	addlt	r0, r0, r3
 8008e24:	4770      	bx	lr

08008e26 <__sfputc_r>:
 8008e26:	6893      	ldr	r3, [r2, #8]
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	b410      	push	{r4}
 8008e2e:	6093      	str	r3, [r2, #8]
 8008e30:	da08      	bge.n	8008e44 <__sfputc_r+0x1e>
 8008e32:	6994      	ldr	r4, [r2, #24]
 8008e34:	42a3      	cmp	r3, r4
 8008e36:	db01      	blt.n	8008e3c <__sfputc_r+0x16>
 8008e38:	290a      	cmp	r1, #10
 8008e3a:	d103      	bne.n	8008e44 <__sfputc_r+0x1e>
 8008e3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e40:	f000 b932 	b.w	80090a8 <__swbuf_r>
 8008e44:	6813      	ldr	r3, [r2, #0]
 8008e46:	1c58      	adds	r0, r3, #1
 8008e48:	6010      	str	r0, [r2, #0]
 8008e4a:	7019      	strb	r1, [r3, #0]
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <__sfputs_r>:
 8008e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e56:	4606      	mov	r6, r0
 8008e58:	460f      	mov	r7, r1
 8008e5a:	4614      	mov	r4, r2
 8008e5c:	18d5      	adds	r5, r2, r3
 8008e5e:	42ac      	cmp	r4, r5
 8008e60:	d101      	bne.n	8008e66 <__sfputs_r+0x12>
 8008e62:	2000      	movs	r0, #0
 8008e64:	e007      	b.n	8008e76 <__sfputs_r+0x22>
 8008e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e6a:	463a      	mov	r2, r7
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff ffda 	bl	8008e26 <__sfputc_r>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	d1f3      	bne.n	8008e5e <__sfputs_r+0xa>
 8008e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e78 <_vfiprintf_r>:
 8008e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e7c:	460d      	mov	r5, r1
 8008e7e:	b09d      	sub	sp, #116	@ 0x74
 8008e80:	4614      	mov	r4, r2
 8008e82:	4698      	mov	r8, r3
 8008e84:	4606      	mov	r6, r0
 8008e86:	b118      	cbz	r0, 8008e90 <_vfiprintf_r+0x18>
 8008e88:	6a03      	ldr	r3, [r0, #32]
 8008e8a:	b90b      	cbnz	r3, 8008e90 <_vfiprintf_r+0x18>
 8008e8c:	f7fe f906 	bl	800709c <__sinit>
 8008e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e92:	07d9      	lsls	r1, r3, #31
 8008e94:	d405      	bmi.n	8008ea2 <_vfiprintf_r+0x2a>
 8008e96:	89ab      	ldrh	r3, [r5, #12]
 8008e98:	059a      	lsls	r2, r3, #22
 8008e9a:	d402      	bmi.n	8008ea2 <_vfiprintf_r+0x2a>
 8008e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e9e:	f7fe fa14 	bl	80072ca <__retarget_lock_acquire_recursive>
 8008ea2:	89ab      	ldrh	r3, [r5, #12]
 8008ea4:	071b      	lsls	r3, r3, #28
 8008ea6:	d501      	bpl.n	8008eac <_vfiprintf_r+0x34>
 8008ea8:	692b      	ldr	r3, [r5, #16]
 8008eaa:	b99b      	cbnz	r3, 8008ed4 <_vfiprintf_r+0x5c>
 8008eac:	4629      	mov	r1, r5
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f000 f938 	bl	8009124 <__swsetup_r>
 8008eb4:	b170      	cbz	r0, 8008ed4 <_vfiprintf_r+0x5c>
 8008eb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008eb8:	07dc      	lsls	r4, r3, #31
 8008eba:	d504      	bpl.n	8008ec6 <_vfiprintf_r+0x4e>
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec0:	b01d      	add	sp, #116	@ 0x74
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	0598      	lsls	r0, r3, #22
 8008eca:	d4f7      	bmi.n	8008ebc <_vfiprintf_r+0x44>
 8008ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ece:	f7fe f9fd 	bl	80072cc <__retarget_lock_release_recursive>
 8008ed2:	e7f3      	b.n	8008ebc <_vfiprintf_r+0x44>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ed8:	2320      	movs	r3, #32
 8008eda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ede:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ee2:	2330      	movs	r3, #48	@ 0x30
 8008ee4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009094 <_vfiprintf_r+0x21c>
 8008ee8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eec:	f04f 0901 	mov.w	r9, #1
 8008ef0:	4623      	mov	r3, r4
 8008ef2:	469a      	mov	sl, r3
 8008ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ef8:	b10a      	cbz	r2, 8008efe <_vfiprintf_r+0x86>
 8008efa:	2a25      	cmp	r2, #37	@ 0x25
 8008efc:	d1f9      	bne.n	8008ef2 <_vfiprintf_r+0x7a>
 8008efe:	ebba 0b04 	subs.w	fp, sl, r4
 8008f02:	d00b      	beq.n	8008f1c <_vfiprintf_r+0xa4>
 8008f04:	465b      	mov	r3, fp
 8008f06:	4622      	mov	r2, r4
 8008f08:	4629      	mov	r1, r5
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7ff ffa2 	bl	8008e54 <__sfputs_r>
 8008f10:	3001      	adds	r0, #1
 8008f12:	f000 80a7 	beq.w	8009064 <_vfiprintf_r+0x1ec>
 8008f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f18:	445a      	add	r2, fp
 8008f1a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 809f 	beq.w	8009064 <_vfiprintf_r+0x1ec>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f30:	f10a 0a01 	add.w	sl, sl, #1
 8008f34:	9304      	str	r3, [sp, #16]
 8008f36:	9307      	str	r3, [sp, #28]
 8008f38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f3c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f3e:	4654      	mov	r4, sl
 8008f40:	2205      	movs	r2, #5
 8008f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f46:	4853      	ldr	r0, [pc, #332]	@ (8009094 <_vfiprintf_r+0x21c>)
 8008f48:	f7f7 f972 	bl	8000230 <memchr>
 8008f4c:	9a04      	ldr	r2, [sp, #16]
 8008f4e:	b9d8      	cbnz	r0, 8008f88 <_vfiprintf_r+0x110>
 8008f50:	06d1      	lsls	r1, r2, #27
 8008f52:	bf44      	itt	mi
 8008f54:	2320      	movmi	r3, #32
 8008f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f5a:	0713      	lsls	r3, r2, #28
 8008f5c:	bf44      	itt	mi
 8008f5e:	232b      	movmi	r3, #43	@ 0x2b
 8008f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f64:	f89a 3000 	ldrb.w	r3, [sl]
 8008f68:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f6a:	d015      	beq.n	8008f98 <_vfiprintf_r+0x120>
 8008f6c:	9a07      	ldr	r2, [sp, #28]
 8008f6e:	4654      	mov	r4, sl
 8008f70:	2000      	movs	r0, #0
 8008f72:	f04f 0c0a 	mov.w	ip, #10
 8008f76:	4621      	mov	r1, r4
 8008f78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f7c:	3b30      	subs	r3, #48	@ 0x30
 8008f7e:	2b09      	cmp	r3, #9
 8008f80:	d94b      	bls.n	800901a <_vfiprintf_r+0x1a2>
 8008f82:	b1b0      	cbz	r0, 8008fb2 <_vfiprintf_r+0x13a>
 8008f84:	9207      	str	r2, [sp, #28]
 8008f86:	e014      	b.n	8008fb2 <_vfiprintf_r+0x13a>
 8008f88:	eba0 0308 	sub.w	r3, r0, r8
 8008f8c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f90:	4313      	orrs	r3, r2
 8008f92:	9304      	str	r3, [sp, #16]
 8008f94:	46a2      	mov	sl, r4
 8008f96:	e7d2      	b.n	8008f3e <_vfiprintf_r+0xc6>
 8008f98:	9b03      	ldr	r3, [sp, #12]
 8008f9a:	1d19      	adds	r1, r3, #4
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	9103      	str	r1, [sp, #12]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bfbb      	ittet	lt
 8008fa4:	425b      	neglt	r3, r3
 8008fa6:	f042 0202 	orrlt.w	r2, r2, #2
 8008faa:	9307      	strge	r3, [sp, #28]
 8008fac:	9307      	strlt	r3, [sp, #28]
 8008fae:	bfb8      	it	lt
 8008fb0:	9204      	strlt	r2, [sp, #16]
 8008fb2:	7823      	ldrb	r3, [r4, #0]
 8008fb4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fb6:	d10a      	bne.n	8008fce <_vfiprintf_r+0x156>
 8008fb8:	7863      	ldrb	r3, [r4, #1]
 8008fba:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fbc:	d132      	bne.n	8009024 <_vfiprintf_r+0x1ac>
 8008fbe:	9b03      	ldr	r3, [sp, #12]
 8008fc0:	1d1a      	adds	r2, r3, #4
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	9203      	str	r2, [sp, #12]
 8008fc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fca:	3402      	adds	r4, #2
 8008fcc:	9305      	str	r3, [sp, #20]
 8008fce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80090a4 <_vfiprintf_r+0x22c>
 8008fd2:	7821      	ldrb	r1, [r4, #0]
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	4650      	mov	r0, sl
 8008fd8:	f7f7 f92a 	bl	8000230 <memchr>
 8008fdc:	b138      	cbz	r0, 8008fee <_vfiprintf_r+0x176>
 8008fde:	9b04      	ldr	r3, [sp, #16]
 8008fe0:	eba0 000a 	sub.w	r0, r0, sl
 8008fe4:	2240      	movs	r2, #64	@ 0x40
 8008fe6:	4082      	lsls	r2, r0
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	3401      	adds	r4, #1
 8008fec:	9304      	str	r3, [sp, #16]
 8008fee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ff2:	4829      	ldr	r0, [pc, #164]	@ (8009098 <_vfiprintf_r+0x220>)
 8008ff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ff8:	2206      	movs	r2, #6
 8008ffa:	f7f7 f919 	bl	8000230 <memchr>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d03f      	beq.n	8009082 <_vfiprintf_r+0x20a>
 8009002:	4b26      	ldr	r3, [pc, #152]	@ (800909c <_vfiprintf_r+0x224>)
 8009004:	bb1b      	cbnz	r3, 800904e <_vfiprintf_r+0x1d6>
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	3307      	adds	r3, #7
 800900a:	f023 0307 	bic.w	r3, r3, #7
 800900e:	3308      	adds	r3, #8
 8009010:	9303      	str	r3, [sp, #12]
 8009012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009014:	443b      	add	r3, r7
 8009016:	9309      	str	r3, [sp, #36]	@ 0x24
 8009018:	e76a      	b.n	8008ef0 <_vfiprintf_r+0x78>
 800901a:	fb0c 3202 	mla	r2, ip, r2, r3
 800901e:	460c      	mov	r4, r1
 8009020:	2001      	movs	r0, #1
 8009022:	e7a8      	b.n	8008f76 <_vfiprintf_r+0xfe>
 8009024:	2300      	movs	r3, #0
 8009026:	3401      	adds	r4, #1
 8009028:	9305      	str	r3, [sp, #20]
 800902a:	4619      	mov	r1, r3
 800902c:	f04f 0c0a 	mov.w	ip, #10
 8009030:	4620      	mov	r0, r4
 8009032:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009036:	3a30      	subs	r2, #48	@ 0x30
 8009038:	2a09      	cmp	r2, #9
 800903a:	d903      	bls.n	8009044 <_vfiprintf_r+0x1cc>
 800903c:	2b00      	cmp	r3, #0
 800903e:	d0c6      	beq.n	8008fce <_vfiprintf_r+0x156>
 8009040:	9105      	str	r1, [sp, #20]
 8009042:	e7c4      	b.n	8008fce <_vfiprintf_r+0x156>
 8009044:	fb0c 2101 	mla	r1, ip, r1, r2
 8009048:	4604      	mov	r4, r0
 800904a:	2301      	movs	r3, #1
 800904c:	e7f0      	b.n	8009030 <_vfiprintf_r+0x1b8>
 800904e:	ab03      	add	r3, sp, #12
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	462a      	mov	r2, r5
 8009054:	4b12      	ldr	r3, [pc, #72]	@ (80090a0 <_vfiprintf_r+0x228>)
 8009056:	a904      	add	r1, sp, #16
 8009058:	4630      	mov	r0, r6
 800905a:	f7fd fbdb 	bl	8006814 <_printf_float>
 800905e:	4607      	mov	r7, r0
 8009060:	1c78      	adds	r0, r7, #1
 8009062:	d1d6      	bne.n	8009012 <_vfiprintf_r+0x19a>
 8009064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009066:	07d9      	lsls	r1, r3, #31
 8009068:	d405      	bmi.n	8009076 <_vfiprintf_r+0x1fe>
 800906a:	89ab      	ldrh	r3, [r5, #12]
 800906c:	059a      	lsls	r2, r3, #22
 800906e:	d402      	bmi.n	8009076 <_vfiprintf_r+0x1fe>
 8009070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009072:	f7fe f92b 	bl	80072cc <__retarget_lock_release_recursive>
 8009076:	89ab      	ldrh	r3, [r5, #12]
 8009078:	065b      	lsls	r3, r3, #25
 800907a:	f53f af1f 	bmi.w	8008ebc <_vfiprintf_r+0x44>
 800907e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009080:	e71e      	b.n	8008ec0 <_vfiprintf_r+0x48>
 8009082:	ab03      	add	r3, sp, #12
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	462a      	mov	r2, r5
 8009088:	4b05      	ldr	r3, [pc, #20]	@ (80090a0 <_vfiprintf_r+0x228>)
 800908a:	a904      	add	r1, sp, #16
 800908c:	4630      	mov	r0, r6
 800908e:	f7fd fe59 	bl	8006d44 <_printf_i>
 8009092:	e7e4      	b.n	800905e <_vfiprintf_r+0x1e6>
 8009094:	0800b948 	.word	0x0800b948
 8009098:	0800b952 	.word	0x0800b952
 800909c:	08006815 	.word	0x08006815
 80090a0:	08008e55 	.word	0x08008e55
 80090a4:	0800b94e 	.word	0x0800b94e

080090a8 <__swbuf_r>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	460e      	mov	r6, r1
 80090ac:	4614      	mov	r4, r2
 80090ae:	4605      	mov	r5, r0
 80090b0:	b118      	cbz	r0, 80090ba <__swbuf_r+0x12>
 80090b2:	6a03      	ldr	r3, [r0, #32]
 80090b4:	b90b      	cbnz	r3, 80090ba <__swbuf_r+0x12>
 80090b6:	f7fd fff1 	bl	800709c <__sinit>
 80090ba:	69a3      	ldr	r3, [r4, #24]
 80090bc:	60a3      	str	r3, [r4, #8]
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	071a      	lsls	r2, r3, #28
 80090c2:	d501      	bpl.n	80090c8 <__swbuf_r+0x20>
 80090c4:	6923      	ldr	r3, [r4, #16]
 80090c6:	b943      	cbnz	r3, 80090da <__swbuf_r+0x32>
 80090c8:	4621      	mov	r1, r4
 80090ca:	4628      	mov	r0, r5
 80090cc:	f000 f82a 	bl	8009124 <__swsetup_r>
 80090d0:	b118      	cbz	r0, 80090da <__swbuf_r+0x32>
 80090d2:	f04f 37ff 	mov.w	r7, #4294967295
 80090d6:	4638      	mov	r0, r7
 80090d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	6922      	ldr	r2, [r4, #16]
 80090de:	1a98      	subs	r0, r3, r2
 80090e0:	6963      	ldr	r3, [r4, #20]
 80090e2:	b2f6      	uxtb	r6, r6
 80090e4:	4283      	cmp	r3, r0
 80090e6:	4637      	mov	r7, r6
 80090e8:	dc05      	bgt.n	80090f6 <__swbuf_r+0x4e>
 80090ea:	4621      	mov	r1, r4
 80090ec:	4628      	mov	r0, r5
 80090ee:	f7ff fd99 	bl	8008c24 <_fflush_r>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d1ed      	bne.n	80090d2 <__swbuf_r+0x2a>
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	3b01      	subs	r3, #1
 80090fa:	60a3      	str	r3, [r4, #8]
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	1c5a      	adds	r2, r3, #1
 8009100:	6022      	str	r2, [r4, #0]
 8009102:	701e      	strb	r6, [r3, #0]
 8009104:	6962      	ldr	r2, [r4, #20]
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	429a      	cmp	r2, r3
 800910a:	d004      	beq.n	8009116 <__swbuf_r+0x6e>
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	07db      	lsls	r3, r3, #31
 8009110:	d5e1      	bpl.n	80090d6 <__swbuf_r+0x2e>
 8009112:	2e0a      	cmp	r6, #10
 8009114:	d1df      	bne.n	80090d6 <__swbuf_r+0x2e>
 8009116:	4621      	mov	r1, r4
 8009118:	4628      	mov	r0, r5
 800911a:	f7ff fd83 	bl	8008c24 <_fflush_r>
 800911e:	2800      	cmp	r0, #0
 8009120:	d0d9      	beq.n	80090d6 <__swbuf_r+0x2e>
 8009122:	e7d6      	b.n	80090d2 <__swbuf_r+0x2a>

08009124 <__swsetup_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4b29      	ldr	r3, [pc, #164]	@ (80091cc <__swsetup_r+0xa8>)
 8009128:	4605      	mov	r5, r0
 800912a:	6818      	ldr	r0, [r3, #0]
 800912c:	460c      	mov	r4, r1
 800912e:	b118      	cbz	r0, 8009138 <__swsetup_r+0x14>
 8009130:	6a03      	ldr	r3, [r0, #32]
 8009132:	b90b      	cbnz	r3, 8009138 <__swsetup_r+0x14>
 8009134:	f7fd ffb2 	bl	800709c <__sinit>
 8009138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800913c:	0719      	lsls	r1, r3, #28
 800913e:	d422      	bmi.n	8009186 <__swsetup_r+0x62>
 8009140:	06da      	lsls	r2, r3, #27
 8009142:	d407      	bmi.n	8009154 <__swsetup_r+0x30>
 8009144:	2209      	movs	r2, #9
 8009146:	602a      	str	r2, [r5, #0]
 8009148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800914c:	81a3      	strh	r3, [r4, #12]
 800914e:	f04f 30ff 	mov.w	r0, #4294967295
 8009152:	e033      	b.n	80091bc <__swsetup_r+0x98>
 8009154:	0758      	lsls	r0, r3, #29
 8009156:	d512      	bpl.n	800917e <__swsetup_r+0x5a>
 8009158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800915a:	b141      	cbz	r1, 800916e <__swsetup_r+0x4a>
 800915c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009160:	4299      	cmp	r1, r3
 8009162:	d002      	beq.n	800916a <__swsetup_r+0x46>
 8009164:	4628      	mov	r0, r5
 8009166:	f7fe feff 	bl	8007f68 <_free_r>
 800916a:	2300      	movs	r3, #0
 800916c:	6363      	str	r3, [r4, #52]	@ 0x34
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	2300      	movs	r3, #0
 8009178:	6063      	str	r3, [r4, #4]
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	f043 0308 	orr.w	r3, r3, #8
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	b94b      	cbnz	r3, 800919e <__swsetup_r+0x7a>
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009194:	d003      	beq.n	800919e <__swsetup_r+0x7a>
 8009196:	4621      	mov	r1, r4
 8009198:	4628      	mov	r0, r5
 800919a:	f000 f883 	bl	80092a4 <__smakebuf_r>
 800919e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a2:	f013 0201 	ands.w	r2, r3, #1
 80091a6:	d00a      	beq.n	80091be <__swsetup_r+0x9a>
 80091a8:	2200      	movs	r2, #0
 80091aa:	60a2      	str	r2, [r4, #8]
 80091ac:	6962      	ldr	r2, [r4, #20]
 80091ae:	4252      	negs	r2, r2
 80091b0:	61a2      	str	r2, [r4, #24]
 80091b2:	6922      	ldr	r2, [r4, #16]
 80091b4:	b942      	cbnz	r2, 80091c8 <__swsetup_r+0xa4>
 80091b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091ba:	d1c5      	bne.n	8009148 <__swsetup_r+0x24>
 80091bc:	bd38      	pop	{r3, r4, r5, pc}
 80091be:	0799      	lsls	r1, r3, #30
 80091c0:	bf58      	it	pl
 80091c2:	6962      	ldrpl	r2, [r4, #20]
 80091c4:	60a2      	str	r2, [r4, #8]
 80091c6:	e7f4      	b.n	80091b2 <__swsetup_r+0x8e>
 80091c8:	2000      	movs	r0, #0
 80091ca:	e7f7      	b.n	80091bc <__swsetup_r+0x98>
 80091cc:	200002d0 	.word	0x200002d0

080091d0 <_raise_r>:
 80091d0:	291f      	cmp	r1, #31
 80091d2:	b538      	push	{r3, r4, r5, lr}
 80091d4:	4605      	mov	r5, r0
 80091d6:	460c      	mov	r4, r1
 80091d8:	d904      	bls.n	80091e4 <_raise_r+0x14>
 80091da:	2316      	movs	r3, #22
 80091dc:	6003      	str	r3, [r0, #0]
 80091de:	f04f 30ff 	mov.w	r0, #4294967295
 80091e2:	bd38      	pop	{r3, r4, r5, pc}
 80091e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80091e6:	b112      	cbz	r2, 80091ee <_raise_r+0x1e>
 80091e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80091ec:	b94b      	cbnz	r3, 8009202 <_raise_r+0x32>
 80091ee:	4628      	mov	r0, r5
 80091f0:	f000 f830 	bl	8009254 <_getpid_r>
 80091f4:	4622      	mov	r2, r4
 80091f6:	4601      	mov	r1, r0
 80091f8:	4628      	mov	r0, r5
 80091fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091fe:	f000 b817 	b.w	8009230 <_kill_r>
 8009202:	2b01      	cmp	r3, #1
 8009204:	d00a      	beq.n	800921c <_raise_r+0x4c>
 8009206:	1c59      	adds	r1, r3, #1
 8009208:	d103      	bne.n	8009212 <_raise_r+0x42>
 800920a:	2316      	movs	r3, #22
 800920c:	6003      	str	r3, [r0, #0]
 800920e:	2001      	movs	r0, #1
 8009210:	e7e7      	b.n	80091e2 <_raise_r+0x12>
 8009212:	2100      	movs	r1, #0
 8009214:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009218:	4620      	mov	r0, r4
 800921a:	4798      	blx	r3
 800921c:	2000      	movs	r0, #0
 800921e:	e7e0      	b.n	80091e2 <_raise_r+0x12>

08009220 <raise>:
 8009220:	4b02      	ldr	r3, [pc, #8]	@ (800922c <raise+0xc>)
 8009222:	4601      	mov	r1, r0
 8009224:	6818      	ldr	r0, [r3, #0]
 8009226:	f7ff bfd3 	b.w	80091d0 <_raise_r>
 800922a:	bf00      	nop
 800922c:	200002d0 	.word	0x200002d0

08009230 <_kill_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	4d07      	ldr	r5, [pc, #28]	@ (8009250 <_kill_r+0x20>)
 8009234:	2300      	movs	r3, #0
 8009236:	4604      	mov	r4, r0
 8009238:	4608      	mov	r0, r1
 800923a:	4611      	mov	r1, r2
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	f7f8 fa6c 	bl	800171a <_kill>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	d102      	bne.n	800924c <_kill_r+0x1c>
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	b103      	cbz	r3, 800924c <_kill_r+0x1c>
 800924a:	6023      	str	r3, [r4, #0]
 800924c:	bd38      	pop	{r3, r4, r5, pc}
 800924e:	bf00      	nop
 8009250:	20002754 	.word	0x20002754

08009254 <_getpid_r>:
 8009254:	f7f8 ba59 	b.w	800170a <_getpid>

08009258 <__swhatbuf_r>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	460c      	mov	r4, r1
 800925c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009260:	2900      	cmp	r1, #0
 8009262:	b096      	sub	sp, #88	@ 0x58
 8009264:	4615      	mov	r5, r2
 8009266:	461e      	mov	r6, r3
 8009268:	da0d      	bge.n	8009286 <__swhatbuf_r+0x2e>
 800926a:	89a3      	ldrh	r3, [r4, #12]
 800926c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009270:	f04f 0100 	mov.w	r1, #0
 8009274:	bf14      	ite	ne
 8009276:	2340      	movne	r3, #64	@ 0x40
 8009278:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800927c:	2000      	movs	r0, #0
 800927e:	6031      	str	r1, [r6, #0]
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	b016      	add	sp, #88	@ 0x58
 8009284:	bd70      	pop	{r4, r5, r6, pc}
 8009286:	466a      	mov	r2, sp
 8009288:	f000 f848 	bl	800931c <_fstat_r>
 800928c:	2800      	cmp	r0, #0
 800928e:	dbec      	blt.n	800926a <__swhatbuf_r+0x12>
 8009290:	9901      	ldr	r1, [sp, #4]
 8009292:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009296:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800929a:	4259      	negs	r1, r3
 800929c:	4159      	adcs	r1, r3
 800929e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092a2:	e7eb      	b.n	800927c <__swhatbuf_r+0x24>

080092a4 <__smakebuf_r>:
 80092a4:	898b      	ldrh	r3, [r1, #12]
 80092a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092a8:	079d      	lsls	r5, r3, #30
 80092aa:	4606      	mov	r6, r0
 80092ac:	460c      	mov	r4, r1
 80092ae:	d507      	bpl.n	80092c0 <__smakebuf_r+0x1c>
 80092b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092b4:	6023      	str	r3, [r4, #0]
 80092b6:	6123      	str	r3, [r4, #16]
 80092b8:	2301      	movs	r3, #1
 80092ba:	6163      	str	r3, [r4, #20]
 80092bc:	b003      	add	sp, #12
 80092be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092c0:	ab01      	add	r3, sp, #4
 80092c2:	466a      	mov	r2, sp
 80092c4:	f7ff ffc8 	bl	8009258 <__swhatbuf_r>
 80092c8:	9f00      	ldr	r7, [sp, #0]
 80092ca:	4605      	mov	r5, r0
 80092cc:	4639      	mov	r1, r7
 80092ce:	4630      	mov	r0, r6
 80092d0:	f7fe febe 	bl	8008050 <_malloc_r>
 80092d4:	b948      	cbnz	r0, 80092ea <__smakebuf_r+0x46>
 80092d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092da:	059a      	lsls	r2, r3, #22
 80092dc:	d4ee      	bmi.n	80092bc <__smakebuf_r+0x18>
 80092de:	f023 0303 	bic.w	r3, r3, #3
 80092e2:	f043 0302 	orr.w	r3, r3, #2
 80092e6:	81a3      	strh	r3, [r4, #12]
 80092e8:	e7e2      	b.n	80092b0 <__smakebuf_r+0xc>
 80092ea:	89a3      	ldrh	r3, [r4, #12]
 80092ec:	6020      	str	r0, [r4, #0]
 80092ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092f2:	81a3      	strh	r3, [r4, #12]
 80092f4:	9b01      	ldr	r3, [sp, #4]
 80092f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092fa:	b15b      	cbz	r3, 8009314 <__smakebuf_r+0x70>
 80092fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009300:	4630      	mov	r0, r6
 8009302:	f000 f81d 	bl	8009340 <_isatty_r>
 8009306:	b128      	cbz	r0, 8009314 <__smakebuf_r+0x70>
 8009308:	89a3      	ldrh	r3, [r4, #12]
 800930a:	f023 0303 	bic.w	r3, r3, #3
 800930e:	f043 0301 	orr.w	r3, r3, #1
 8009312:	81a3      	strh	r3, [r4, #12]
 8009314:	89a3      	ldrh	r3, [r4, #12]
 8009316:	431d      	orrs	r5, r3
 8009318:	81a5      	strh	r5, [r4, #12]
 800931a:	e7cf      	b.n	80092bc <__smakebuf_r+0x18>

0800931c <_fstat_r>:
 800931c:	b538      	push	{r3, r4, r5, lr}
 800931e:	4d07      	ldr	r5, [pc, #28]	@ (800933c <_fstat_r+0x20>)
 8009320:	2300      	movs	r3, #0
 8009322:	4604      	mov	r4, r0
 8009324:	4608      	mov	r0, r1
 8009326:	4611      	mov	r1, r2
 8009328:	602b      	str	r3, [r5, #0]
 800932a:	f7f8 fa56 	bl	80017da <_fstat>
 800932e:	1c43      	adds	r3, r0, #1
 8009330:	d102      	bne.n	8009338 <_fstat_r+0x1c>
 8009332:	682b      	ldr	r3, [r5, #0]
 8009334:	b103      	cbz	r3, 8009338 <_fstat_r+0x1c>
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	bd38      	pop	{r3, r4, r5, pc}
 800933a:	bf00      	nop
 800933c:	20002754 	.word	0x20002754

08009340 <_isatty_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d06      	ldr	r5, [pc, #24]	@ (800935c <_isatty_r+0x1c>)
 8009344:	2300      	movs	r3, #0
 8009346:	4604      	mov	r4, r0
 8009348:	4608      	mov	r0, r1
 800934a:	602b      	str	r3, [r5, #0]
 800934c:	f7f8 fa55 	bl	80017fa <_isatty>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d102      	bne.n	800935a <_isatty_r+0x1a>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	b103      	cbz	r3, 800935a <_isatty_r+0x1a>
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	bd38      	pop	{r3, r4, r5, pc}
 800935c:	20002754 	.word	0x20002754

08009360 <_init>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	bf00      	nop
 8009364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009366:	bc08      	pop	{r3}
 8009368:	469e      	mov	lr, r3
 800936a:	4770      	bx	lr

0800936c <_fini>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	bf00      	nop
 8009370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009372:	bc08      	pop	{r3}
 8009374:	469e      	mov	lr, r3
 8009376:	4770      	bx	lr
