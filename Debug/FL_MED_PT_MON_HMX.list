
FL_MED_PT_MON_HMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005070  0800c5a0  0800c5a0  0000d5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011610  08011610  000167d4  2**0
                  CONTENTS
  4 .ARM          00000008  08011610  08011610  00012610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011618  08011618  000167d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011618  08011618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801161c  0801161c  0001261c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000037d4  20000000  08011620  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000242c  200037d4  08014df4  000167d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005c00  08014df4  00016c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000167d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e83  00000000  00000000  00016804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f03  00000000  00000000  0002f687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001828  00000000  00000000  00033590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012bb  00000000  00000000  00034db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a906  00000000  00000000  00036073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fa3a  00000000  00000000  00050979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099346  00000000  00000000  000703b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001096f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000747c  00000000  00000000  0010973c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00110bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200037d4 	.word	0x200037d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c588 	.word	0x0800c588

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200037d8 	.word	0x200037d8
 800020c:	0800c588 	.word	0x0800c588

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Display_app_init>:
char day_data[20];

uint8_t tx_buf[256 * 64 / 2];

void Display_app_init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	 Display_init();
 8000efc:	f007 f88d 	bl	800801a <Display_init>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <Set_Display_buffsize>:

void Set_Display_buffsize(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	 set_buffer_size(256, 64);
 8000f08:	2140      	movs	r1, #64	@ 0x40
 8000f0a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f0e:	f007 f953 	bl	80081b8 <set_buffer_size>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <Display_refresh>:

void Display_refresh(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	 Set_Display_buffsize();
 8000f1c:	f7ff fff2 	bl	8000f04 <Set_Display_buffsize>
	 fill_buffer(tx_buf, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	4807      	ldr	r0, [pc, #28]	@ (8000f40 <Display_refresh+0x28>)
 8000f24:	f007 f95c 	bl	80081e0 <fill_buffer>
	 send_buffer_to_OLED(tx_buf, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <Display_refresh+0x28>)
 8000f2e:	f007 fb61 	bl	80085f4 <send_buffer_to_OLED>
     //HAL_Delay(10);
     fill_buffer(tx_buf, 0);
 8000f32:	2100      	movs	r1, #0
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <Display_refresh+0x28>)
 8000f36:	f007 f953 	bl	80081e0 <fill_buffer>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20003918 	.word	0x20003918

08000f44 <Display_company_name>:
	send_buffer_to_OLED(tx_buf, 0, 0);
	HAL_Delay(5000);

}
void Display_company_name(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af02      	add	r7, sp, #8
	select_font(&FreeMonoBold12pt7b);
 8000f4a:	4814      	ldr	r0, [pc, #80]	@ (8000f9c <Display_company_name+0x58>)
 8000f4c:	f007 fa22 	bl	8008394 <select_font>
	draw_bitmap_4bpp(tx_buf, matrix, 0, 0, 32, 43);
 8000f50:	232b      	movs	r3, #43	@ 0x2b
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	2320      	movs	r3, #32
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4910      	ldr	r1, [pc, #64]	@ (8000fa0 <Display_company_name+0x5c>)
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <Display_company_name+0x60>)
 8000f60:	f007 faf4 	bl	800854c <draw_bitmap_4bpp>
    draw_text(tx_buf, "HEALOMEX BIO", 32, 20, 15);
 8000f64:	230f      	movs	r3, #15
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2314      	movs	r3, #20
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	490e      	ldr	r1, [pc, #56]	@ (8000fa8 <Display_company_name+0x64>)
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <Display_company_name+0x60>)
 8000f70:	f007 fab8 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "SCIENCES PVT LTD", 32, 45, 15);
 8000f74:	230f      	movs	r3, #15
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	232d      	movs	r3, #45	@ 0x2d
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	490b      	ldr	r1, [pc, #44]	@ (8000fac <Display_company_name+0x68>)
 8000f7e:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <Display_company_name+0x60>)
 8000f80:	f007 fab0 	bl	80084e4 <draw_text>
    send_buffer_to_OLED(tx_buf, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <Display_company_name+0x60>)
 8000f8a:	f007 fb33 	bl	80085f4 <send_buffer_to_OLED>
	HAL_Delay(3000);
 8000f8e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000f92:	f002 f809 	bl	8002fa8 <HAL_Delay>

}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	0800d070 	.word	0x0800d070
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20003918 	.word	0x20003918
 8000fa8:	0800c5a0 	.word	0x0800c5a0
 8000fac:	0800c5b0 	.word	0x0800c5b0

08000fb0 <Display_contct_num>:
void Display_contct_num(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af02      	add	r7, sp, #8
	select_font(&FreeMonoBold12pt7b);
 8000fb6:	480f      	ldr	r0, [pc, #60]	@ (8000ff4 <Display_contct_num+0x44>)
 8000fb8:	f007 f9ec 	bl	8008394 <select_font>
    draw_text(tx_buf, "CONTACT", 10, 20, 15);
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2314      	movs	r3, #20
 8000fc2:	220a      	movs	r2, #10
 8000fc4:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <Display_contct_num+0x48>)
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fc8:	f007 fa8c 	bl	80084e4 <draw_text>
	draw_text(tx_buf, "+91 9603966993", 10, 45, 15);
 8000fcc:	230f      	movs	r3, #15
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	232d      	movs	r3, #45	@ 0x2d
 8000fd2:	220a      	movs	r2, #10
 8000fd4:	490a      	ldr	r1, [pc, #40]	@ (8001000 <Display_contct_num+0x50>)
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fd8:	f007 fa84 	bl	80084e4 <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fe2:	f007 fb07 	bl	80085f4 <send_buffer_to_OLED>
    HAL_Delay(2000);
 8000fe6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fea:	f001 ffdd 	bl	8002fa8 <HAL_Delay>
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0800d070 	.word	0x0800d070
 8000ff8:	0800c5c4 	.word	0x0800c5c4
 8000ffc:	20003918 	.word	0x20003918
 8001000:	0800c5cc 	.word	0x0800c5cc

08001004 <Display_Managmnt_sys>:
void Display_Managmnt_sys(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af02      	add	r7, sp, #8
	select_font(&FreeMono9pt7b);
 800100a:	481b      	ldr	r0, [pc, #108]	@ (8001078 <Display_Managmnt_sys+0x74>)
 800100c:	f007 f9c2 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMPERATURE", 10, 20, 15);
 8001010:	230f      	movs	r3, #15
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2314      	movs	r3, #20
 8001016:	220a      	movs	r2, #10
 8001018:	4918      	ldr	r1, [pc, #96]	@ (800107c <Display_Managmnt_sys+0x78>)
 800101a:	4819      	ldr	r0, [pc, #100]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 800101c:	f007 fa62 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, p_warm, 200, 10, 40, 42);
 8001020:	232a      	movs	r3, #42	@ 0x2a
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	2328      	movs	r3, #40	@ 0x28
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	230a      	movs	r3, #10
 800102a:	22c8      	movs	r2, #200	@ 0xc8
 800102c:	4915      	ldr	r1, [pc, #84]	@ (8001084 <Display_Managmnt_sys+0x80>)
 800102e:	4814      	ldr	r0, [pc, #80]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001030:	f007 fa8c 	bl	800854c <draw_bitmap_4bpp>
	select_font(&Font5x7FixedMono);
 8001034:	4814      	ldr	r0, [pc, #80]	@ (8001088 <Display_Managmnt_sys+0x84>)
 8001036:	f007 f9ad 	bl	8008394 <select_font>
	draw_text(tx_buf, "HMX-V01", 150, 20, 15);
 800103a:	230f      	movs	r3, #15
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2314      	movs	r3, #20
 8001040:	2296      	movs	r2, #150	@ 0x96
 8001042:	4912      	ldr	r1, [pc, #72]	@ (800108c <Display_Managmnt_sys+0x88>)
 8001044:	480e      	ldr	r0, [pc, #56]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001046:	f007 fa4d 	bl	80084e4 <draw_text>
	select_font(&FreeMono9pt7b);
 800104a:	480b      	ldr	r0, [pc, #44]	@ (8001078 <Display_Managmnt_sys+0x74>)
 800104c:	f007 f9a2 	bl	8008394 <select_font>
	draw_text(tx_buf, "MANAGEMENT SYSTEM", 10, 45, 15);
 8001050:	230f      	movs	r3, #15
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	232d      	movs	r3, #45	@ 0x2d
 8001056:	220a      	movs	r2, #10
 8001058:	490d      	ldr	r1, [pc, #52]	@ (8001090 <Display_Managmnt_sys+0x8c>)
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 800105c:	f007 fa42 	bl	80084e4 <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	4806      	ldr	r0, [pc, #24]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001066:	f007 fac5 	bl	80085f4 <send_buffer_to_OLED>
	HAL_Delay(5000);
 800106a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800106e:	f001 ff9b 	bl	8002fa8 <HAL_Delay>
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	0800db4c 	.word	0x0800db4c
 800107c:	0800c5dc 	.word	0x0800c5dc
 8001080:	20003918 	.word	0x20003918
 8001084:	200032b0 	.word	0x200032b0
 8001088:	0800d4f8 	.word	0x0800d4f8
 800108c:	0800c5e8 	.word	0x0800c5e8
 8001090:	0800c5f0 	.word	0x0800c5f0

08001094 <fan_Hspeed>:

void fan_Hspeed()
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af02      	add	r7, sp, #8
	select_font(&Font5x7FixedMono);
 800109a:	48be      	ldr	r0, [pc, #760]	@ (8001394 <fan_Hspeed+0x300>)
 800109c:	f007 f97a 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80010a0:	230f      	movs	r3, #15
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	230a      	movs	r3, #10
 80010a6:	220a      	movs	r2, #10
 80010a8:	49bb      	ldr	r1, [pc, #748]	@ (8001398 <fan_Hspeed+0x304>)
 80010aa:	48bc      	ldr	r0, [pc, #752]	@ (800139c <fan_Hspeed+0x308>)
 80010ac:	f007 fa1a 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80010b0:	48bb      	ldr	r0, [pc, #748]	@ (80013a0 <fan_Hspeed+0x30c>)
 80010b2:	f007 f96f 	bl	8008394 <select_font>
	sprintf(data,"%.1f%.f",Temp[0],Temp[1]);
 80010b6:	4bbb      	ldr	r3, [pc, #748]	@ (80013a4 <fan_Hspeed+0x310>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa74 	bl	80005a8 <__aeabi_f2d>
 80010c0:	4604      	mov	r4, r0
 80010c2:	460d      	mov	r5, r1
 80010c4:	4bb7      	ldr	r3, [pc, #732]	@ (80013a4 <fan_Hspeed+0x310>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa6d 	bl	80005a8 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	e9cd 2300 	strd	r2, r3, [sp]
 80010d6:	4622      	mov	r2, r4
 80010d8:	462b      	mov	r3, r5
 80010da:	49b3      	ldr	r1, [pc, #716]	@ (80013a8 <fan_Hspeed+0x314>)
 80010dc:	48b3      	ldr	r0, [pc, #716]	@ (80013ac <fan_Hspeed+0x318>)
 80010de:	f009 f925 	bl	800a32c <siprintf>
	draw_text(tx_buf, data, 5, 55, 15);
 80010e2:	230f      	movs	r3, #15
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2337      	movs	r3, #55	@ 0x37
 80010e8:	2205      	movs	r2, #5
 80010ea:	49b0      	ldr	r1, [pc, #704]	@ (80013ac <fan_Hspeed+0x318>)
 80010ec:	48ab      	ldr	r0, [pc, #684]	@ (800139c <fan_Hspeed+0x308>)
 80010ee:	f007 f9f9 	bl	80084e4 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 80010f2:	48af      	ldr	r0, [pc, #700]	@ (80013b0 <fan_Hspeed+0x31c>)
 80010f4:	f007 f94e 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80010f8:	230f      	movs	r3, #15
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2337      	movs	r3, #55	@ 0x37
 80010fe:	2294      	movs	r2, #148	@ 0x94
 8001100:	49ac      	ldr	r1, [pc, #688]	@ (80013b4 <fan_Hspeed+0x320>)
 8001102:	48a6      	ldr	r0, [pc, #664]	@ (800139c <fan_Hspeed+0x308>)
 8001104:	f007 f9ee 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001108:	48a2      	ldr	r0, [pc, #648]	@ (8001394 <fan_Hspeed+0x300>)
 800110a:	f007 f943 	bl	8008394 <select_font>
    draw_text(tx_buf, "H",  170, 8, 15);
 800110e:	230f      	movs	r3, #15
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	2308      	movs	r3, #8
 8001114:	22aa      	movs	r2, #170	@ 0xaa
 8001116:	49a8      	ldr	r1, [pc, #672]	@ (80013b8 <fan_Hspeed+0x324>)
 8001118:	48a0      	ldr	r0, [pc, #640]	@ (800139c <fan_Hspeed+0x308>)
 800111a:	f007 f9e3 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_1gif,145,8, 64, 64);
 800111e:	2340      	movs	r3, #64	@ 0x40
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	2340      	movs	r3, #64	@ 0x40
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2308      	movs	r3, #8
 8001128:	2291      	movs	r2, #145	@ 0x91
 800112a:	49a4      	ldr	r1, [pc, #656]	@ (80013bc <fan_Hspeed+0x328>)
 800112c:	489b      	ldr	r0, [pc, #620]	@ (800139c <fan_Hspeed+0x308>)
 800112e:	f007 fa0d 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 8001132:	f000 fdbb 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	4898      	ldr	r0, [pc, #608]	@ (800139c <fan_Hspeed+0x308>)
 800113c:	f007 fa5a 	bl	80085f4 <send_buffer_to_OLED>
    draw_rect_filled(tx_buf,0,0,256,64,0);
 8001140:	2300      	movs	r3, #0
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	2340      	movs	r3, #64	@ 0x40
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	4892      	ldr	r0, [pc, #584]	@ (800139c <fan_Hspeed+0x308>)
 8001152:	f007 f8f1 	bl	8008338 <draw_rect_filled>
	select_font(&Font5x7FixedMono);
 8001156:	488f      	ldr	r0, [pc, #572]	@ (8001394 <fan_Hspeed+0x300>)
 8001158:	f007 f91c 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800115c:	230f      	movs	r3, #15
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	230a      	movs	r3, #10
 8001162:	220a      	movs	r2, #10
 8001164:	498c      	ldr	r1, [pc, #560]	@ (8001398 <fan_Hspeed+0x304>)
 8001166:	488d      	ldr	r0, [pc, #564]	@ (800139c <fan_Hspeed+0x308>)
 8001168:	f007 f9bc 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 800116c:	488c      	ldr	r0, [pc, #560]	@ (80013a0 <fan_Hspeed+0x30c>)
 800116e:	f007 f911 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001172:	230f      	movs	r3, #15
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2337      	movs	r3, #55	@ 0x37
 8001178:	2205      	movs	r2, #5
 800117a:	498c      	ldr	r1, [pc, #560]	@ (80013ac <fan_Hspeed+0x318>)
 800117c:	4887      	ldr	r0, [pc, #540]	@ (800139c <fan_Hspeed+0x308>)
 800117e:	f007 f9b1 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001182:	4884      	ldr	r0, [pc, #528]	@ (8001394 <fan_Hspeed+0x300>)
 8001184:	f007 f906 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001188:	230f      	movs	r3, #15
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	2337      	movs	r3, #55	@ 0x37
 800118e:	2294      	movs	r2, #148	@ 0x94
 8001190:	4988      	ldr	r1, [pc, #544]	@ (80013b4 <fan_Hspeed+0x320>)
 8001192:	4882      	ldr	r0, [pc, #520]	@ (800139c <fan_Hspeed+0x308>)
 8001194:	f007 f9a6 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "H",  170, 8, 15);
 8001198:	230f      	movs	r3, #15
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2308      	movs	r3, #8
 800119e:	22aa      	movs	r2, #170	@ 0xaa
 80011a0:	4985      	ldr	r1, [pc, #532]	@ (80013b8 <fan_Hspeed+0x324>)
 80011a2:	487e      	ldr	r0, [pc, #504]	@ (800139c <fan_Hspeed+0x308>)
 80011a4:	f007 f99e 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_2gif, 145, 8, 64, 64);
 80011a8:	2340      	movs	r3, #64	@ 0x40
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2340      	movs	r3, #64	@ 0x40
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2308      	movs	r3, #8
 80011b2:	2291      	movs	r2, #145	@ 0x91
 80011b4:	4982      	ldr	r1, [pc, #520]	@ (80013c0 <fan_Hspeed+0x32c>)
 80011b6:	4879      	ldr	r0, [pc, #484]	@ (800139c <fan_Hspeed+0x308>)
 80011b8:	f007 f9c8 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 80011bc:	f000 fd76 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	4875      	ldr	r0, [pc, #468]	@ (800139c <fan_Hspeed+0x308>)
 80011c6:	f007 fa15 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80011ca:	2300      	movs	r3, #0
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	2340      	movs	r3, #64	@ 0x40
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	4870      	ldr	r0, [pc, #448]	@ (800139c <fan_Hspeed+0x308>)
 80011dc:	f007 f8ac 	bl	8008338 <draw_rect_filled>
	select_font(&Font5x7FixedMono);
 80011e0:	486c      	ldr	r0, [pc, #432]	@ (8001394 <fan_Hspeed+0x300>)
 80011e2:	f007 f8d7 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80011e6:	230f      	movs	r3, #15
 80011e8:	9300      	str	r3, [sp, #0]
 80011ea:	230a      	movs	r3, #10
 80011ec:	220a      	movs	r2, #10
 80011ee:	496a      	ldr	r1, [pc, #424]	@ (8001398 <fan_Hspeed+0x304>)
 80011f0:	486a      	ldr	r0, [pc, #424]	@ (800139c <fan_Hspeed+0x308>)
 80011f2:	f007 f977 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80011f6:	486a      	ldr	r0, [pc, #424]	@ (80013a0 <fan_Hspeed+0x30c>)
 80011f8:	f007 f8cc 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 80011fc:	230f      	movs	r3, #15
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2337      	movs	r3, #55	@ 0x37
 8001202:	2205      	movs	r2, #5
 8001204:	4969      	ldr	r1, [pc, #420]	@ (80013ac <fan_Hspeed+0x318>)
 8001206:	4865      	ldr	r0, [pc, #404]	@ (800139c <fan_Hspeed+0x308>)
 8001208:	f007 f96c 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 800120c:	4861      	ldr	r0, [pc, #388]	@ (8001394 <fan_Hspeed+0x300>)
 800120e:	f007 f8c1 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001212:	230f      	movs	r3, #15
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2337      	movs	r3, #55	@ 0x37
 8001218:	2294      	movs	r2, #148	@ 0x94
 800121a:	4966      	ldr	r1, [pc, #408]	@ (80013b4 <fan_Hspeed+0x320>)
 800121c:	485f      	ldr	r0, [pc, #380]	@ (800139c <fan_Hspeed+0x308>)
 800121e:	f007 f961 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "H",  170, 8, 15);
 8001222:	230f      	movs	r3, #15
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2308      	movs	r3, #8
 8001228:	22aa      	movs	r2, #170	@ 0xaa
 800122a:	4963      	ldr	r1, [pc, #396]	@ (80013b8 <fan_Hspeed+0x324>)
 800122c:	485b      	ldr	r0, [pc, #364]	@ (800139c <fan_Hspeed+0x308>)
 800122e:	f007 f959 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_3gif, 145, 8, 64, 64);
 8001232:	2340      	movs	r3, #64	@ 0x40
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	2340      	movs	r3, #64	@ 0x40
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2308      	movs	r3, #8
 800123c:	2291      	movs	r2, #145	@ 0x91
 800123e:	4961      	ldr	r1, [pc, #388]	@ (80013c4 <fan_Hspeed+0x330>)
 8001240:	4856      	ldr	r0, [pc, #344]	@ (800139c <fan_Hspeed+0x308>)
 8001242:	f007 f983 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 8001246:	f000 fd31 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	4853      	ldr	r0, [pc, #332]	@ (800139c <fan_Hspeed+0x308>)
 8001250:	f007 f9d0 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001254:	2300      	movs	r3, #0
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	2340      	movs	r3, #64	@ 0x40
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	484d      	ldr	r0, [pc, #308]	@ (800139c <fan_Hspeed+0x308>)
 8001266:	f007 f867 	bl	8008338 <draw_rect_filled>
	select_font(&Font5x7FixedMono);
 800126a:	484a      	ldr	r0, [pc, #296]	@ (8001394 <fan_Hspeed+0x300>)
 800126c:	f007 f892 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001270:	230f      	movs	r3, #15
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	230a      	movs	r3, #10
 8001276:	220a      	movs	r2, #10
 8001278:	4947      	ldr	r1, [pc, #284]	@ (8001398 <fan_Hspeed+0x304>)
 800127a:	4848      	ldr	r0, [pc, #288]	@ (800139c <fan_Hspeed+0x308>)
 800127c:	f007 f932 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001280:	4847      	ldr	r0, [pc, #284]	@ (80013a0 <fan_Hspeed+0x30c>)
 8001282:	f007 f887 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001286:	230f      	movs	r3, #15
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2337      	movs	r3, #55	@ 0x37
 800128c:	2205      	movs	r2, #5
 800128e:	4947      	ldr	r1, [pc, #284]	@ (80013ac <fan_Hspeed+0x318>)
 8001290:	4842      	ldr	r0, [pc, #264]	@ (800139c <fan_Hspeed+0x308>)
 8001292:	f007 f927 	bl	80084e4 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 8001296:	4846      	ldr	r0, [pc, #280]	@ (80013b0 <fan_Hspeed+0x31c>)
 8001298:	f007 f87c 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800129c:	230f      	movs	r3, #15
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2337      	movs	r3, #55	@ 0x37
 80012a2:	2294      	movs	r2, #148	@ 0x94
 80012a4:	4943      	ldr	r1, [pc, #268]	@ (80013b4 <fan_Hspeed+0x320>)
 80012a6:	483d      	ldr	r0, [pc, #244]	@ (800139c <fan_Hspeed+0x308>)
 80012a8:	f007 f91c 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 80012ac:	4839      	ldr	r0, [pc, #228]	@ (8001394 <fan_Hspeed+0x300>)
 80012ae:	f007 f871 	bl	8008394 <select_font>
    draw_text(tx_buf, "H",  170, 8, 15);
 80012b2:	230f      	movs	r3, #15
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2308      	movs	r3, #8
 80012b8:	22aa      	movs	r2, #170	@ 0xaa
 80012ba:	493f      	ldr	r1, [pc, #252]	@ (80013b8 <fan_Hspeed+0x324>)
 80012bc:	4837      	ldr	r0, [pc, #220]	@ (800139c <fan_Hspeed+0x308>)
 80012be:	f007 f911 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_4gif, 145, 8, 64, 64);
 80012c2:	2340      	movs	r3, #64	@ 0x40
 80012c4:	9301      	str	r3, [sp, #4]
 80012c6:	2340      	movs	r3, #64	@ 0x40
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	2308      	movs	r3, #8
 80012cc:	2291      	movs	r2, #145	@ 0x91
 80012ce:	493e      	ldr	r1, [pc, #248]	@ (80013c8 <fan_Hspeed+0x334>)
 80012d0:	4832      	ldr	r0, [pc, #200]	@ (800139c <fan_Hspeed+0x308>)
 80012d2:	f007 f93b 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 80012d6:	f000 fce9 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2100      	movs	r1, #0
 80012de:	482f      	ldr	r0, [pc, #188]	@ (800139c <fan_Hspeed+0x308>)
 80012e0:	f007 f988 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80012e4:	2300      	movs	r3, #0
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	2340      	movs	r3, #64	@ 0x40
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	4829      	ldr	r0, [pc, #164]	@ (800139c <fan_Hspeed+0x308>)
 80012f6:	f007 f81f 	bl	8008338 <draw_rect_filled>
	select_font(&Font5x7FixedMono);
 80012fa:	4826      	ldr	r0, [pc, #152]	@ (8001394 <fan_Hspeed+0x300>)
 80012fc:	f007 f84a 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001300:	230f      	movs	r3, #15
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	230a      	movs	r3, #10
 8001306:	220a      	movs	r2, #10
 8001308:	4923      	ldr	r1, [pc, #140]	@ (8001398 <fan_Hspeed+0x304>)
 800130a:	4824      	ldr	r0, [pc, #144]	@ (800139c <fan_Hspeed+0x308>)
 800130c:	f007 f8ea 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001310:	4823      	ldr	r0, [pc, #140]	@ (80013a0 <fan_Hspeed+0x30c>)
 8001312:	f007 f83f 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001316:	230f      	movs	r3, #15
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2337      	movs	r3, #55	@ 0x37
 800131c:	2205      	movs	r2, #5
 800131e:	4923      	ldr	r1, [pc, #140]	@ (80013ac <fan_Hspeed+0x318>)
 8001320:	481e      	ldr	r0, [pc, #120]	@ (800139c <fan_Hspeed+0x308>)
 8001322:	f007 f8df 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001326:	481b      	ldr	r0, [pc, #108]	@ (8001394 <fan_Hspeed+0x300>)
 8001328:	f007 f834 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800132c:	230f      	movs	r3, #15
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2337      	movs	r3, #55	@ 0x37
 8001332:	2294      	movs	r2, #148	@ 0x94
 8001334:	491f      	ldr	r1, [pc, #124]	@ (80013b4 <fan_Hspeed+0x320>)
 8001336:	4819      	ldr	r0, [pc, #100]	@ (800139c <fan_Hspeed+0x308>)
 8001338:	f007 f8d4 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "H", 170, 8, 15);
 800133c:	230f      	movs	r3, #15
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2308      	movs	r3, #8
 8001342:	22aa      	movs	r2, #170	@ 0xaa
 8001344:	491c      	ldr	r1, [pc, #112]	@ (80013b8 <fan_Hspeed+0x324>)
 8001346:	4815      	ldr	r0, [pc, #84]	@ (800139c <fan_Hspeed+0x308>)
 8001348:	f007 f8cc 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_5gif, 145, 8, 64, 64);
 800134c:	2340      	movs	r3, #64	@ 0x40
 800134e:	9301      	str	r3, [sp, #4]
 8001350:	2340      	movs	r3, #64	@ 0x40
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2308      	movs	r3, #8
 8001356:	2291      	movs	r2, #145	@ 0x91
 8001358:	491c      	ldr	r1, [pc, #112]	@ (80013cc <fan_Hspeed+0x338>)
 800135a:	4810      	ldr	r0, [pc, #64]	@ (800139c <fan_Hspeed+0x308>)
 800135c:	f007 f8f6 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 8001360:	f000 fca4 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001364:	2200      	movs	r2, #0
 8001366:	2100      	movs	r1, #0
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <fan_Hspeed+0x308>)
 800136a:	f007 f943 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 800136e:	2300      	movs	r3, #0
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	2340      	movs	r3, #64	@ 0x40
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	4807      	ldr	r0, [pc, #28]	@ (800139c <fan_Hspeed+0x308>)
 8001380:	f006 ffda 	bl	8008338 <draw_rect_filled>
	select_font(&Font5x7FixedMono);
 8001384:	4803      	ldr	r0, [pc, #12]	@ (8001394 <fan_Hspeed+0x300>)
 8001386:	f007 f805 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800138a:	230f      	movs	r3, #15
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	230a      	movs	r3, #10
 8001390:	e01e      	b.n	80013d0 <fan_Hspeed+0x33c>
 8001392:	bf00      	nop
 8001394:	0800d4f8 	.word	0x0800d4f8
 8001398:	0800c604 	.word	0x0800c604
 800139c:	20003918 	.word	0x20003918
 80013a0:	08011274 	.word	0x08011274
 80013a4:	20005a68 	.word	0x20005a68
 80013a8:	0800c60c 	.word	0x0800c60c
 80013ac:	200038e4 	.word	0x200038e4
 80013b0:	0800e36c 	.word	0x0800e36c
 80013b4:	0800c614 	.word	0x0800c614
 80013b8:	0800c618 	.word	0x0800c618
 80013bc:	200002b0 	.word	0x200002b0
 80013c0:	20000ab0 	.word	0x20000ab0
 80013c4:	200012b0 	.word	0x200012b0
 80013c8:	20001ab0 	.word	0x20001ab0
 80013cc:	200022b0 	.word	0x200022b0
 80013d0:	220a      	movs	r2, #10
 80013d2:	4922      	ldr	r1, [pc, #136]	@ (800145c <fan_Hspeed+0x3c8>)
 80013d4:	4822      	ldr	r0, [pc, #136]	@ (8001460 <fan_Hspeed+0x3cc>)
 80013d6:	f007 f885 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80013da:	4822      	ldr	r0, [pc, #136]	@ (8001464 <fan_Hspeed+0x3d0>)
 80013dc:	f006 ffda 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 80013e0:	230f      	movs	r3, #15
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2337      	movs	r3, #55	@ 0x37
 80013e6:	2205      	movs	r2, #5
 80013e8:	491f      	ldr	r1, [pc, #124]	@ (8001468 <fan_Hspeed+0x3d4>)
 80013ea:	481d      	ldr	r0, [pc, #116]	@ (8001460 <fan_Hspeed+0x3cc>)
 80013ec:	f007 f87a 	bl	80084e4 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 80013f0:	481e      	ldr	r0, [pc, #120]	@ (800146c <fan_Hspeed+0x3d8>)
 80013f2:	f006 ffcf 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80013f6:	230f      	movs	r3, #15
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2337      	movs	r3, #55	@ 0x37
 80013fc:	2294      	movs	r2, #148	@ 0x94
 80013fe:	491c      	ldr	r1, [pc, #112]	@ (8001470 <fan_Hspeed+0x3dc>)
 8001400:	4817      	ldr	r0, [pc, #92]	@ (8001460 <fan_Hspeed+0x3cc>)
 8001402:	f007 f86f 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001406:	481b      	ldr	r0, [pc, #108]	@ (8001474 <fan_Hspeed+0x3e0>)
 8001408:	f006 ffc4 	bl	8008394 <select_font>
    draw_text(tx_buf, "H",  170, 8, 15);
 800140c:	230f      	movs	r3, #15
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	2308      	movs	r3, #8
 8001412:	22aa      	movs	r2, #170	@ 0xaa
 8001414:	4918      	ldr	r1, [pc, #96]	@ (8001478 <fan_Hspeed+0x3e4>)
 8001416:	4812      	ldr	r0, [pc, #72]	@ (8001460 <fan_Hspeed+0x3cc>)
 8001418:	f007 f864 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_6gif, 145, 8, 64, 64);
 800141c:	2340      	movs	r3, #64	@ 0x40
 800141e:	9301      	str	r3, [sp, #4]
 8001420:	2340      	movs	r3, #64	@ 0x40
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	2308      	movs	r3, #8
 8001426:	2291      	movs	r2, #145	@ 0x91
 8001428:	4914      	ldr	r1, [pc, #80]	@ (800147c <fan_Hspeed+0x3e8>)
 800142a:	480d      	ldr	r0, [pc, #52]	@ (8001460 <fan_Hspeed+0x3cc>)
 800142c:	f007 f88e 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 8001430:	f000 fc3c 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	4809      	ldr	r0, [pc, #36]	@ (8001460 <fan_Hspeed+0x3cc>)
 800143a:	f007 f8db 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 800143e:	2300      	movs	r3, #0
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	2340      	movs	r3, #64	@ 0x40
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	4804      	ldr	r0, [pc, #16]	@ (8001460 <fan_Hspeed+0x3cc>)
 8001450:	f006 ff72 	bl	8008338 <draw_rect_filled>



}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bdb0      	pop	{r4, r5, r7, pc}
 800145a:	bf00      	nop
 800145c:	0800c604 	.word	0x0800c604
 8001460:	20003918 	.word	0x20003918
 8001464:	08011274 	.word	0x08011274
 8001468:	200038e4 	.word	0x200038e4
 800146c:	0800e36c 	.word	0x0800e36c
 8001470:	0800c614 	.word	0x0800c614
 8001474:	0800d4f8 	.word	0x0800d4f8
 8001478:	0800c618 	.word	0x0800c618
 800147c:	20002ab0 	.word	0x20002ab0

08001480 <fan_Mspeed>:

void fan_Mspeed()
{
 8001480:	b5b0      	push	{r4, r5, r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af02      	add	r7, sp, #8
	select_font(&Font5x7FixedMono);
 8001486:	48bf      	ldr	r0, [pc, #764]	@ (8001784 <fan_Mspeed+0x304>)
 8001488:	f006 ff84 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800148c:	230f      	movs	r3, #15
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	230a      	movs	r3, #10
 8001492:	220a      	movs	r2, #10
 8001494:	49bc      	ldr	r1, [pc, #752]	@ (8001788 <fan_Mspeed+0x308>)
 8001496:	48bd      	ldr	r0, [pc, #756]	@ (800178c <fan_Mspeed+0x30c>)
 8001498:	f007 f824 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 800149c:	48bc      	ldr	r0, [pc, #752]	@ (8001790 <fan_Mspeed+0x310>)
 800149e:	f006 ff79 	bl	8008394 <select_font>
	sprintf(data,"%.1f%.f",Temp[0],Temp[1]);
 80014a2:	4bbc      	ldr	r3, [pc, #752]	@ (8001794 <fan_Mspeed+0x314>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff f87e 	bl	80005a8 <__aeabi_f2d>
 80014ac:	4604      	mov	r4, r0
 80014ae:	460d      	mov	r5, r1
 80014b0:	4bb8      	ldr	r3, [pc, #736]	@ (8001794 <fan_Mspeed+0x314>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f877 	bl	80005a8 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	e9cd 2300 	strd	r2, r3, [sp]
 80014c2:	4622      	mov	r2, r4
 80014c4:	462b      	mov	r3, r5
 80014c6:	49b4      	ldr	r1, [pc, #720]	@ (8001798 <fan_Mspeed+0x318>)
 80014c8:	48b4      	ldr	r0, [pc, #720]	@ (800179c <fan_Mspeed+0x31c>)
 80014ca:	f008 ff2f 	bl	800a32c <siprintf>
	draw_text(tx_buf, data, 5, 55, 15);
 80014ce:	230f      	movs	r3, #15
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2337      	movs	r3, #55	@ 0x37
 80014d4:	2205      	movs	r2, #5
 80014d6:	49b1      	ldr	r1, [pc, #708]	@ (800179c <fan_Mspeed+0x31c>)
 80014d8:	48ac      	ldr	r0, [pc, #688]	@ (800178c <fan_Mspeed+0x30c>)
 80014da:	f007 f803 	bl	80084e4 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 80014de:	48b0      	ldr	r0, [pc, #704]	@ (80017a0 <fan_Mspeed+0x320>)
 80014e0:	f006 ff58 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80014e4:	230f      	movs	r3, #15
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2337      	movs	r3, #55	@ 0x37
 80014ea:	2294      	movs	r2, #148	@ 0x94
 80014ec:	49ad      	ldr	r1, [pc, #692]	@ (80017a4 <fan_Mspeed+0x324>)
 80014ee:	48a7      	ldr	r0, [pc, #668]	@ (800178c <fan_Mspeed+0x30c>)
 80014f0:	f006 fff8 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 80014f4:	48a3      	ldr	r0, [pc, #652]	@ (8001784 <fan_Mspeed+0x304>)
 80014f6:	f006 ff4d 	bl	8008394 <select_font>
    draw_text(tx_buf, "M", 170, 8, 15);
 80014fa:	230f      	movs	r3, #15
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2308      	movs	r3, #8
 8001500:	22aa      	movs	r2, #170	@ 0xaa
 8001502:	49a9      	ldr	r1, [pc, #676]	@ (80017a8 <fan_Mspeed+0x328>)
 8001504:	48a1      	ldr	r0, [pc, #644]	@ (800178c <fan_Mspeed+0x30c>)
 8001506:	f006 ffed 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_1gif,145,8, 64, 64);
 800150a:	2340      	movs	r3, #64	@ 0x40
 800150c:	9301      	str	r3, [sp, #4]
 800150e:	2340      	movs	r3, #64	@ 0x40
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2308      	movs	r3, #8
 8001514:	2291      	movs	r2, #145	@ 0x91
 8001516:	49a5      	ldr	r1, [pc, #660]	@ (80017ac <fan_Mspeed+0x32c>)
 8001518:	489c      	ldr	r0, [pc, #624]	@ (800178c <fan_Mspeed+0x30c>)
 800151a:	f007 f817 	bl	800854c <draw_bitmap_4bpp>
	Display_RTC_clock();
 800151e:	f000 fbc5 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	4899      	ldr	r0, [pc, #612]	@ (800178c <fan_Mspeed+0x30c>)
 8001528:	f007 f864 	bl	80085f4 <send_buffer_to_OLED>
    draw_rect_filled(tx_buf,0,0,256,64,0);
 800152c:	2300      	movs	r3, #0
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	2340      	movs	r3, #64	@ 0x40
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	4893      	ldr	r0, [pc, #588]	@ (800178c <fan_Mspeed+0x30c>)
 800153e:	f006 fefb 	bl	8008338 <draw_rect_filled>
	HAL_Delay(50);
 8001542:	2032      	movs	r0, #50	@ 0x32
 8001544:	f001 fd30 	bl	8002fa8 <HAL_Delay>
	select_font(&Font5x7FixedMono);
 8001548:	488e      	ldr	r0, [pc, #568]	@ (8001784 <fan_Mspeed+0x304>)
 800154a:	f006 ff23 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800154e:	230f      	movs	r3, #15
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	230a      	movs	r3, #10
 8001554:	220a      	movs	r2, #10
 8001556:	498c      	ldr	r1, [pc, #560]	@ (8001788 <fan_Mspeed+0x308>)
 8001558:	488c      	ldr	r0, [pc, #560]	@ (800178c <fan_Mspeed+0x30c>)
 800155a:	f006 ffc3 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 800155e:	488c      	ldr	r0, [pc, #560]	@ (8001790 <fan_Mspeed+0x310>)
 8001560:	f006 ff18 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001564:	230f      	movs	r3, #15
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2337      	movs	r3, #55	@ 0x37
 800156a:	2205      	movs	r2, #5
 800156c:	498b      	ldr	r1, [pc, #556]	@ (800179c <fan_Mspeed+0x31c>)
 800156e:	4887      	ldr	r0, [pc, #540]	@ (800178c <fan_Mspeed+0x30c>)
 8001570:	f006 ffb8 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001574:	4883      	ldr	r0, [pc, #524]	@ (8001784 <fan_Mspeed+0x304>)
 8001576:	f006 ff0d 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800157a:	230f      	movs	r3, #15
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2337      	movs	r3, #55	@ 0x37
 8001580:	2294      	movs	r2, #148	@ 0x94
 8001582:	4988      	ldr	r1, [pc, #544]	@ (80017a4 <fan_Mspeed+0x324>)
 8001584:	4881      	ldr	r0, [pc, #516]	@ (800178c <fan_Mspeed+0x30c>)
 8001586:	f006 ffad 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "M", 170, 8, 15);
 800158a:	230f      	movs	r3, #15
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	2308      	movs	r3, #8
 8001590:	22aa      	movs	r2, #170	@ 0xaa
 8001592:	4985      	ldr	r1, [pc, #532]	@ (80017a8 <fan_Mspeed+0x328>)
 8001594:	487d      	ldr	r0, [pc, #500]	@ (800178c <fan_Mspeed+0x30c>)
 8001596:	f006 ffa5 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_2gif, 145, 8, 64, 64);
 800159a:	2340      	movs	r3, #64	@ 0x40
 800159c:	9301      	str	r3, [sp, #4]
 800159e:	2340      	movs	r3, #64	@ 0x40
 80015a0:	9300      	str	r3, [sp, #0]
 80015a2:	2308      	movs	r3, #8
 80015a4:	2291      	movs	r2, #145	@ 0x91
 80015a6:	4982      	ldr	r1, [pc, #520]	@ (80017b0 <fan_Mspeed+0x330>)
 80015a8:	4878      	ldr	r0, [pc, #480]	@ (800178c <fan_Mspeed+0x30c>)
 80015aa:	f006 ffcf 	bl	800854c <draw_bitmap_4bpp>
	Display_RTC_clock();
 80015ae:	f000 fb7d 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	4875      	ldr	r0, [pc, #468]	@ (800178c <fan_Mspeed+0x30c>)
 80015b8:	f007 f81c 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80015bc:	2300      	movs	r3, #0
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	2340      	movs	r3, #64	@ 0x40
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015c8:	2200      	movs	r2, #0
 80015ca:	2100      	movs	r1, #0
 80015cc:	486f      	ldr	r0, [pc, #444]	@ (800178c <fan_Mspeed+0x30c>)
 80015ce:	f006 feb3 	bl	8008338 <draw_rect_filled>
	HAL_Delay(50);
 80015d2:	2032      	movs	r0, #50	@ 0x32
 80015d4:	f001 fce8 	bl	8002fa8 <HAL_Delay>
	select_font(&Font5x7FixedMono);
 80015d8:	486a      	ldr	r0, [pc, #424]	@ (8001784 <fan_Mspeed+0x304>)
 80015da:	f006 fedb 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80015de:	230f      	movs	r3, #15
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	230a      	movs	r3, #10
 80015e4:	220a      	movs	r2, #10
 80015e6:	4968      	ldr	r1, [pc, #416]	@ (8001788 <fan_Mspeed+0x308>)
 80015e8:	4868      	ldr	r0, [pc, #416]	@ (800178c <fan_Mspeed+0x30c>)
 80015ea:	f006 ff7b 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80015ee:	4868      	ldr	r0, [pc, #416]	@ (8001790 <fan_Mspeed+0x310>)
 80015f0:	f006 fed0 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 80015f4:	230f      	movs	r3, #15
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2337      	movs	r3, #55	@ 0x37
 80015fa:	2205      	movs	r2, #5
 80015fc:	4967      	ldr	r1, [pc, #412]	@ (800179c <fan_Mspeed+0x31c>)
 80015fe:	4863      	ldr	r0, [pc, #396]	@ (800178c <fan_Mspeed+0x30c>)
 8001600:	f006 ff70 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001604:	485f      	ldr	r0, [pc, #380]	@ (8001784 <fan_Mspeed+0x304>)
 8001606:	f006 fec5 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800160a:	230f      	movs	r3, #15
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2337      	movs	r3, #55	@ 0x37
 8001610:	2294      	movs	r2, #148	@ 0x94
 8001612:	4964      	ldr	r1, [pc, #400]	@ (80017a4 <fan_Mspeed+0x324>)
 8001614:	485d      	ldr	r0, [pc, #372]	@ (800178c <fan_Mspeed+0x30c>)
 8001616:	f006 ff65 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "M", 170, 8, 15);
 800161a:	230f      	movs	r3, #15
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2308      	movs	r3, #8
 8001620:	22aa      	movs	r2, #170	@ 0xaa
 8001622:	4961      	ldr	r1, [pc, #388]	@ (80017a8 <fan_Mspeed+0x328>)
 8001624:	4859      	ldr	r0, [pc, #356]	@ (800178c <fan_Mspeed+0x30c>)
 8001626:	f006 ff5d 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_3gif, 145, 8, 64, 64);
 800162a:	2340      	movs	r3, #64	@ 0x40
 800162c:	9301      	str	r3, [sp, #4]
 800162e:	2340      	movs	r3, #64	@ 0x40
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	2308      	movs	r3, #8
 8001634:	2291      	movs	r2, #145	@ 0x91
 8001636:	495f      	ldr	r1, [pc, #380]	@ (80017b4 <fan_Mspeed+0x334>)
 8001638:	4854      	ldr	r0, [pc, #336]	@ (800178c <fan_Mspeed+0x30c>)
 800163a:	f006 ff87 	bl	800854c <draw_bitmap_4bpp>
	Display_RTC_clock();
 800163e:	f000 fb35 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	4851      	ldr	r0, [pc, #324]	@ (800178c <fan_Mspeed+0x30c>)
 8001648:	f006 ffd4 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 800164c:	2300      	movs	r3, #0
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2340      	movs	r3, #64	@ 0x40
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001658:	2200      	movs	r2, #0
 800165a:	2100      	movs	r1, #0
 800165c:	484b      	ldr	r0, [pc, #300]	@ (800178c <fan_Mspeed+0x30c>)
 800165e:	f006 fe6b 	bl	8008338 <draw_rect_filled>
    HAL_Delay(50);
 8001662:	2032      	movs	r0, #50	@ 0x32
 8001664:	f001 fca0 	bl	8002fa8 <HAL_Delay>
	select_font(&Font5x7FixedMono);
 8001668:	4846      	ldr	r0, [pc, #280]	@ (8001784 <fan_Mspeed+0x304>)
 800166a:	f006 fe93 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800166e:	230f      	movs	r3, #15
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	230a      	movs	r3, #10
 8001674:	220a      	movs	r2, #10
 8001676:	4944      	ldr	r1, [pc, #272]	@ (8001788 <fan_Mspeed+0x308>)
 8001678:	4844      	ldr	r0, [pc, #272]	@ (800178c <fan_Mspeed+0x30c>)
 800167a:	f006 ff33 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 800167e:	4844      	ldr	r0, [pc, #272]	@ (8001790 <fan_Mspeed+0x310>)
 8001680:	f006 fe88 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001684:	230f      	movs	r3, #15
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2337      	movs	r3, #55	@ 0x37
 800168a:	2205      	movs	r2, #5
 800168c:	4943      	ldr	r1, [pc, #268]	@ (800179c <fan_Mspeed+0x31c>)
 800168e:	483f      	ldr	r0, [pc, #252]	@ (800178c <fan_Mspeed+0x30c>)
 8001690:	f006 ff28 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001694:	483b      	ldr	r0, [pc, #236]	@ (8001784 <fan_Mspeed+0x304>)
 8001696:	f006 fe7d 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800169a:	230f      	movs	r3, #15
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2337      	movs	r3, #55	@ 0x37
 80016a0:	2294      	movs	r2, #148	@ 0x94
 80016a2:	4940      	ldr	r1, [pc, #256]	@ (80017a4 <fan_Mspeed+0x324>)
 80016a4:	4839      	ldr	r0, [pc, #228]	@ (800178c <fan_Mspeed+0x30c>)
 80016a6:	f006 ff1d 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "M", 170, 8, 15);
 80016aa:	230f      	movs	r3, #15
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2308      	movs	r3, #8
 80016b0:	22aa      	movs	r2, #170	@ 0xaa
 80016b2:	493d      	ldr	r1, [pc, #244]	@ (80017a8 <fan_Mspeed+0x328>)
 80016b4:	4835      	ldr	r0, [pc, #212]	@ (800178c <fan_Mspeed+0x30c>)
 80016b6:	f006 ff15 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_4gif, 145, 8, 64, 64);
 80016ba:	2340      	movs	r3, #64	@ 0x40
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	2340      	movs	r3, #64	@ 0x40
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	2308      	movs	r3, #8
 80016c4:	2291      	movs	r2, #145	@ 0x91
 80016c6:	493c      	ldr	r1, [pc, #240]	@ (80017b8 <fan_Mspeed+0x338>)
 80016c8:	4830      	ldr	r0, [pc, #192]	@ (800178c <fan_Mspeed+0x30c>)
 80016ca:	f006 ff3f 	bl	800854c <draw_bitmap_4bpp>
	Display_RTC_clock();
 80016ce:	f000 faed 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	482d      	ldr	r0, [pc, #180]	@ (800178c <fan_Mspeed+0x30c>)
 80016d8:	f006 ff8c 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80016dc:	2300      	movs	r3, #0
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	2340      	movs	r3, #64	@ 0x40
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	4827      	ldr	r0, [pc, #156]	@ (800178c <fan_Mspeed+0x30c>)
 80016ee:	f006 fe23 	bl	8008338 <draw_rect_filled>
	HAL_Delay(50);
 80016f2:	2032      	movs	r0, #50	@ 0x32
 80016f4:	f001 fc58 	bl	8002fa8 <HAL_Delay>
	select_font(&Font5x7FixedMono);
 80016f8:	4822      	ldr	r0, [pc, #136]	@ (8001784 <fan_Mspeed+0x304>)
 80016fa:	f006 fe4b 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80016fe:	230f      	movs	r3, #15
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	230a      	movs	r3, #10
 8001704:	220a      	movs	r2, #10
 8001706:	4920      	ldr	r1, [pc, #128]	@ (8001788 <fan_Mspeed+0x308>)
 8001708:	4820      	ldr	r0, [pc, #128]	@ (800178c <fan_Mspeed+0x30c>)
 800170a:	f006 feeb 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 800170e:	4820      	ldr	r0, [pc, #128]	@ (8001790 <fan_Mspeed+0x310>)
 8001710:	f006 fe40 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001714:	230f      	movs	r3, #15
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2337      	movs	r3, #55	@ 0x37
 800171a:	2205      	movs	r2, #5
 800171c:	491f      	ldr	r1, [pc, #124]	@ (800179c <fan_Mspeed+0x31c>)
 800171e:	481b      	ldr	r0, [pc, #108]	@ (800178c <fan_Mspeed+0x30c>)
 8001720:	f006 fee0 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001724:	4817      	ldr	r0, [pc, #92]	@ (8001784 <fan_Mspeed+0x304>)
 8001726:	f006 fe35 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800172a:	230f      	movs	r3, #15
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	2337      	movs	r3, #55	@ 0x37
 8001730:	2294      	movs	r2, #148	@ 0x94
 8001732:	491c      	ldr	r1, [pc, #112]	@ (80017a4 <fan_Mspeed+0x324>)
 8001734:	4815      	ldr	r0, [pc, #84]	@ (800178c <fan_Mspeed+0x30c>)
 8001736:	f006 fed5 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "M", 170, 8, 15);
 800173a:	230f      	movs	r3, #15
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	2308      	movs	r3, #8
 8001740:	22aa      	movs	r2, #170	@ 0xaa
 8001742:	4919      	ldr	r1, [pc, #100]	@ (80017a8 <fan_Mspeed+0x328>)
 8001744:	4811      	ldr	r0, [pc, #68]	@ (800178c <fan_Mspeed+0x30c>)
 8001746:	f006 fecd 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_5gif, 145, 8, 64, 64);
 800174a:	2340      	movs	r3, #64	@ 0x40
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	2340      	movs	r3, #64	@ 0x40
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2308      	movs	r3, #8
 8001754:	2291      	movs	r2, #145	@ 0x91
 8001756:	4919      	ldr	r1, [pc, #100]	@ (80017bc <fan_Mspeed+0x33c>)
 8001758:	480c      	ldr	r0, [pc, #48]	@ (800178c <fan_Mspeed+0x30c>)
 800175a:	f006 fef7 	bl	800854c <draw_bitmap_4bpp>
	Display_RTC_clock();
 800175e:	f000 faa5 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	4809      	ldr	r0, [pc, #36]	@ (800178c <fan_Mspeed+0x30c>)
 8001768:	f006 ff44 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 800176c:	2300      	movs	r3, #0
 800176e:	9301      	str	r3, [sp, #4]
 8001770:	2340      	movs	r3, #64	@ 0x40
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001778:	2200      	movs	r2, #0
 800177a:	2100      	movs	r1, #0
 800177c:	4803      	ldr	r0, [pc, #12]	@ (800178c <fan_Mspeed+0x30c>)
 800177e:	f006 fddb 	bl	8008338 <draw_rect_filled>
 8001782:	e01d      	b.n	80017c0 <fan_Mspeed+0x340>
 8001784:	0800d4f8 	.word	0x0800d4f8
 8001788:	0800c604 	.word	0x0800c604
 800178c:	20003918 	.word	0x20003918
 8001790:	08011274 	.word	0x08011274
 8001794:	20005a68 	.word	0x20005a68
 8001798:	0800c60c 	.word	0x0800c60c
 800179c:	200038e4 	.word	0x200038e4
 80017a0:	0800e36c 	.word	0x0800e36c
 80017a4:	0800c614 	.word	0x0800c614
 80017a8:	0800c61c 	.word	0x0800c61c
 80017ac:	200002b0 	.word	0x200002b0
 80017b0:	20000ab0 	.word	0x20000ab0
 80017b4:	200012b0 	.word	0x200012b0
 80017b8:	20001ab0 	.word	0x20001ab0
 80017bc:	200022b0 	.word	0x200022b0
	HAL_Delay(50);
 80017c0:	2032      	movs	r0, #50	@ 0x32
 80017c2:	f001 fbf1 	bl	8002fa8 <HAL_Delay>
	select_font(&Font5x7FixedMono);
 80017c6:	4825      	ldr	r0, [pc, #148]	@ (800185c <fan_Mspeed+0x3dc>)
 80017c8:	f006 fde4 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80017cc:	230f      	movs	r3, #15
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	230a      	movs	r3, #10
 80017d2:	220a      	movs	r2, #10
 80017d4:	4922      	ldr	r1, [pc, #136]	@ (8001860 <fan_Mspeed+0x3e0>)
 80017d6:	4823      	ldr	r0, [pc, #140]	@ (8001864 <fan_Mspeed+0x3e4>)
 80017d8:	f006 fe84 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80017dc:	4822      	ldr	r0, [pc, #136]	@ (8001868 <fan_Mspeed+0x3e8>)
 80017de:	f006 fdd9 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 80017e2:	230f      	movs	r3, #15
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2337      	movs	r3, #55	@ 0x37
 80017e8:	2205      	movs	r2, #5
 80017ea:	4920      	ldr	r1, [pc, #128]	@ (800186c <fan_Mspeed+0x3ec>)
 80017ec:	481d      	ldr	r0, [pc, #116]	@ (8001864 <fan_Mspeed+0x3e4>)
 80017ee:	f006 fe79 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 80017f2:	481a      	ldr	r0, [pc, #104]	@ (800185c <fan_Mspeed+0x3dc>)
 80017f4:	f006 fdce 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80017f8:	230f      	movs	r3, #15
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2337      	movs	r3, #55	@ 0x37
 80017fe:	2294      	movs	r2, #148	@ 0x94
 8001800:	491b      	ldr	r1, [pc, #108]	@ (8001870 <fan_Mspeed+0x3f0>)
 8001802:	4818      	ldr	r0, [pc, #96]	@ (8001864 <fan_Mspeed+0x3e4>)
 8001804:	f006 fe6e 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "M", 170, 8, 15);
 8001808:	230f      	movs	r3, #15
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2308      	movs	r3, #8
 800180e:	22aa      	movs	r2, #170	@ 0xaa
 8001810:	4918      	ldr	r1, [pc, #96]	@ (8001874 <fan_Mspeed+0x3f4>)
 8001812:	4814      	ldr	r0, [pc, #80]	@ (8001864 <fan_Mspeed+0x3e4>)
 8001814:	f006 fe66 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_6gif, 145, 8, 64, 64);
 8001818:	2340      	movs	r3, #64	@ 0x40
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2340      	movs	r3, #64	@ 0x40
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2308      	movs	r3, #8
 8001822:	2291      	movs	r2, #145	@ 0x91
 8001824:	4914      	ldr	r1, [pc, #80]	@ (8001878 <fan_Mspeed+0x3f8>)
 8001826:	480f      	ldr	r0, [pc, #60]	@ (8001864 <fan_Mspeed+0x3e4>)
 8001828:	f006 fe90 	bl	800854c <draw_bitmap_4bpp>
	Display_RTC_clock();
 800182c:	f000 fa3e 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	480b      	ldr	r0, [pc, #44]	@ (8001864 <fan_Mspeed+0x3e4>)
 8001836:	f006 fedd 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 800183a:	2300      	movs	r3, #0
 800183c:	9301      	str	r3, [sp, #4]
 800183e:	2340      	movs	r3, #64	@ 0x40
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	4806      	ldr	r0, [pc, #24]	@ (8001864 <fan_Mspeed+0x3e4>)
 800184c:	f006 fd74 	bl	8008338 <draw_rect_filled>
	HAL_Delay(50);
 8001850:	2032      	movs	r0, #50	@ 0x32
 8001852:	f001 fba9 	bl	8002fa8 <HAL_Delay>


}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}
 800185c:	0800d4f8 	.word	0x0800d4f8
 8001860:	0800c604 	.word	0x0800c604
 8001864:	20003918 	.word	0x20003918
 8001868:	08011274 	.word	0x08011274
 800186c:	200038e4 	.word	0x200038e4
 8001870:	0800c614 	.word	0x0800c614
 8001874:	0800c61c 	.word	0x0800c61c
 8001878:	20002ab0 	.word	0x20002ab0

0800187c <fan_Lspeed>:

void fan_Lspeed()
{
 800187c:	b5b0      	push	{r4, r5, r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af02      	add	r7, sp, #8
	select_font(&Font5x7FixedMono);
 8001882:	48bf      	ldr	r0, [pc, #764]	@ (8001b80 <fan_Lspeed+0x304>)
 8001884:	f006 fd86 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001888:	230f      	movs	r3, #15
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	230a      	movs	r3, #10
 800188e:	220a      	movs	r2, #10
 8001890:	49bc      	ldr	r1, [pc, #752]	@ (8001b84 <fan_Lspeed+0x308>)
 8001892:	48bd      	ldr	r0, [pc, #756]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001894:	f006 fe26 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001898:	48bc      	ldr	r0, [pc, #752]	@ (8001b8c <fan_Lspeed+0x310>)
 800189a:	f006 fd7b 	bl	8008394 <select_font>
	sprintf(data,"%.1f%.f",Temp[0],Temp[1]);
 800189e:	4bbc      	ldr	r3, [pc, #752]	@ (8001b90 <fan_Lspeed+0x314>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe80 	bl	80005a8 <__aeabi_f2d>
 80018a8:	4604      	mov	r4, r0
 80018aa:	460d      	mov	r5, r1
 80018ac:	4bb8      	ldr	r3, [pc, #736]	@ (8001b90 <fan_Lspeed+0x314>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7fe fe79 	bl	80005a8 <__aeabi_f2d>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	e9cd 2300 	strd	r2, r3, [sp]
 80018be:	4622      	mov	r2, r4
 80018c0:	462b      	mov	r3, r5
 80018c2:	49b4      	ldr	r1, [pc, #720]	@ (8001b94 <fan_Lspeed+0x318>)
 80018c4:	48b4      	ldr	r0, [pc, #720]	@ (8001b98 <fan_Lspeed+0x31c>)
 80018c6:	f008 fd31 	bl	800a32c <siprintf>
	draw_text(tx_buf, data, 5, 55, 15);
 80018ca:	230f      	movs	r3, #15
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2337      	movs	r3, #55	@ 0x37
 80018d0:	2205      	movs	r2, #5
 80018d2:	49b1      	ldr	r1, [pc, #708]	@ (8001b98 <fan_Lspeed+0x31c>)
 80018d4:	48ac      	ldr	r0, [pc, #688]	@ (8001b88 <fan_Lspeed+0x30c>)
 80018d6:	f006 fe05 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 80018da:	48a9      	ldr	r0, [pc, #676]	@ (8001b80 <fan_Lspeed+0x304>)
 80018dc:	f006 fd5a 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80018e0:	230f      	movs	r3, #15
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2337      	movs	r3, #55	@ 0x37
 80018e6:	2294      	movs	r2, #148	@ 0x94
 80018e8:	49ac      	ldr	r1, [pc, #688]	@ (8001b9c <fan_Lspeed+0x320>)
 80018ea:	48a7      	ldr	r0, [pc, #668]	@ (8001b88 <fan_Lspeed+0x30c>)
 80018ec:	f006 fdfa 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "L", 170, 8, 15);
 80018f0:	230f      	movs	r3, #15
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2308      	movs	r3, #8
 80018f6:	22aa      	movs	r2, #170	@ 0xaa
 80018f8:	49a9      	ldr	r1, [pc, #676]	@ (8001ba0 <fan_Lspeed+0x324>)
 80018fa:	48a3      	ldr	r0, [pc, #652]	@ (8001b88 <fan_Lspeed+0x30c>)
 80018fc:	f006 fdf2 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_1gif,145,8, 64, 64);
 8001900:	2340      	movs	r3, #64	@ 0x40
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2340      	movs	r3, #64	@ 0x40
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2308      	movs	r3, #8
 800190a:	2291      	movs	r2, #145	@ 0x91
 800190c:	49a5      	ldr	r1, [pc, #660]	@ (8001ba4 <fan_Lspeed+0x328>)
 800190e:	489e      	ldr	r0, [pc, #632]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001910:	f006 fe1c 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 8001914:	f000 f9ca 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001918:	2200      	movs	r2, #0
 800191a:	2100      	movs	r1, #0
 800191c:	489a      	ldr	r0, [pc, #616]	@ (8001b88 <fan_Lspeed+0x30c>)
 800191e:	f006 fe69 	bl	80085f4 <send_buffer_to_OLED>
    draw_rect_filled(tx_buf,0,0,256,64,0);
 8001922:	2300      	movs	r3, #0
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	2340      	movs	r3, #64	@ 0x40
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800192e:	2200      	movs	r2, #0
 8001930:	2100      	movs	r1, #0
 8001932:	4895      	ldr	r0, [pc, #596]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001934:	f006 fd00 	bl	8008338 <draw_rect_filled>
	HAL_Delay(100);
 8001938:	2064      	movs	r0, #100	@ 0x64
 800193a:	f001 fb35 	bl	8002fa8 <HAL_Delay>
	select_font(&Font5x7FixedMono);
 800193e:	4890      	ldr	r0, [pc, #576]	@ (8001b80 <fan_Lspeed+0x304>)
 8001940:	f006 fd28 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001944:	230f      	movs	r3, #15
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	230a      	movs	r3, #10
 800194a:	220a      	movs	r2, #10
 800194c:	498d      	ldr	r1, [pc, #564]	@ (8001b84 <fan_Lspeed+0x308>)
 800194e:	488e      	ldr	r0, [pc, #568]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001950:	f006 fdc8 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001954:	488d      	ldr	r0, [pc, #564]	@ (8001b8c <fan_Lspeed+0x310>)
 8001956:	f006 fd1d 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 800195a:	230f      	movs	r3, #15
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2337      	movs	r3, #55	@ 0x37
 8001960:	2205      	movs	r2, #5
 8001962:	498d      	ldr	r1, [pc, #564]	@ (8001b98 <fan_Lspeed+0x31c>)
 8001964:	4888      	ldr	r0, [pc, #544]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001966:	f006 fdbd 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 800196a:	4885      	ldr	r0, [pc, #532]	@ (8001b80 <fan_Lspeed+0x304>)
 800196c:	f006 fd12 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001970:	230f      	movs	r3, #15
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2337      	movs	r3, #55	@ 0x37
 8001976:	2294      	movs	r2, #148	@ 0x94
 8001978:	4988      	ldr	r1, [pc, #544]	@ (8001b9c <fan_Lspeed+0x320>)
 800197a:	4883      	ldr	r0, [pc, #524]	@ (8001b88 <fan_Lspeed+0x30c>)
 800197c:	f006 fdb2 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "L", 170, 8, 15);
 8001980:	230f      	movs	r3, #15
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	2308      	movs	r3, #8
 8001986:	22aa      	movs	r2, #170	@ 0xaa
 8001988:	4985      	ldr	r1, [pc, #532]	@ (8001ba0 <fan_Lspeed+0x324>)
 800198a:	487f      	ldr	r0, [pc, #508]	@ (8001b88 <fan_Lspeed+0x30c>)
 800198c:	f006 fdaa 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_2gif, 145, 8, 64, 64);
 8001990:	2340      	movs	r3, #64	@ 0x40
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2340      	movs	r3, #64	@ 0x40
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2308      	movs	r3, #8
 800199a:	2291      	movs	r2, #145	@ 0x91
 800199c:	4982      	ldr	r1, [pc, #520]	@ (8001ba8 <fan_Lspeed+0x32c>)
 800199e:	487a      	ldr	r0, [pc, #488]	@ (8001b88 <fan_Lspeed+0x30c>)
 80019a0:	f006 fdd4 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 80019a4:	f000 f982 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80019a8:	2200      	movs	r2, #0
 80019aa:	2100      	movs	r1, #0
 80019ac:	4876      	ldr	r0, [pc, #472]	@ (8001b88 <fan_Lspeed+0x30c>)
 80019ae:	f006 fe21 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80019b2:	2300      	movs	r3, #0
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2340      	movs	r3, #64	@ 0x40
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	4871      	ldr	r0, [pc, #452]	@ (8001b88 <fan_Lspeed+0x30c>)
 80019c4:	f006 fcb8 	bl	8008338 <draw_rect_filled>
	HAL_Delay(100);
 80019c8:	2064      	movs	r0, #100	@ 0x64
 80019ca:	f001 faed 	bl	8002fa8 <HAL_Delay>
	select_font(&Font5x7FixedMono);
 80019ce:	486c      	ldr	r0, [pc, #432]	@ (8001b80 <fan_Lspeed+0x304>)
 80019d0:	f006 fce0 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80019d4:	230f      	movs	r3, #15
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	230a      	movs	r3, #10
 80019da:	220a      	movs	r2, #10
 80019dc:	4969      	ldr	r1, [pc, #420]	@ (8001b84 <fan_Lspeed+0x308>)
 80019de:	486a      	ldr	r0, [pc, #424]	@ (8001b88 <fan_Lspeed+0x30c>)
 80019e0:	f006 fd80 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80019e4:	4869      	ldr	r0, [pc, #420]	@ (8001b8c <fan_Lspeed+0x310>)
 80019e6:	f006 fcd5 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 80019ea:	230f      	movs	r3, #15
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	2337      	movs	r3, #55	@ 0x37
 80019f0:	2205      	movs	r2, #5
 80019f2:	4969      	ldr	r1, [pc, #420]	@ (8001b98 <fan_Lspeed+0x31c>)
 80019f4:	4864      	ldr	r0, [pc, #400]	@ (8001b88 <fan_Lspeed+0x30c>)
 80019f6:	f006 fd75 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 80019fa:	4861      	ldr	r0, [pc, #388]	@ (8001b80 <fan_Lspeed+0x304>)
 80019fc:	f006 fcca 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001a00:	230f      	movs	r3, #15
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	2337      	movs	r3, #55	@ 0x37
 8001a06:	2294      	movs	r2, #148	@ 0x94
 8001a08:	4964      	ldr	r1, [pc, #400]	@ (8001b9c <fan_Lspeed+0x320>)
 8001a0a:	485f      	ldr	r0, [pc, #380]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001a0c:	f006 fd6a 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "L",  170, 8, 15);
 8001a10:	230f      	movs	r3, #15
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	2308      	movs	r3, #8
 8001a16:	22aa      	movs	r2, #170	@ 0xaa
 8001a18:	4961      	ldr	r1, [pc, #388]	@ (8001ba0 <fan_Lspeed+0x324>)
 8001a1a:	485b      	ldr	r0, [pc, #364]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001a1c:	f006 fd62 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_3gif, 145, 8, 64, 64);
 8001a20:	2340      	movs	r3, #64	@ 0x40
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	2340      	movs	r3, #64	@ 0x40
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2308      	movs	r3, #8
 8001a2a:	2291      	movs	r2, #145	@ 0x91
 8001a2c:	495f      	ldr	r1, [pc, #380]	@ (8001bac <fan_Lspeed+0x330>)
 8001a2e:	4856      	ldr	r0, [pc, #344]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001a30:	f006 fd8c 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 8001a34:	f000 f93a 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4852      	ldr	r0, [pc, #328]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001a3e:	f006 fdd9 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001a42:	2300      	movs	r3, #0
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	484d      	ldr	r0, [pc, #308]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001a54:	f006 fc70 	bl	8008338 <draw_rect_filled>
    HAL_Delay(100);
 8001a58:	2064      	movs	r0, #100	@ 0x64
 8001a5a:	f001 faa5 	bl	8002fa8 <HAL_Delay>
    select_font(&Font5x7FixedMono);
 8001a5e:	4848      	ldr	r0, [pc, #288]	@ (8001b80 <fan_Lspeed+0x304>)
 8001a60:	f006 fc98 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001a64:	230f      	movs	r3, #15
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	230a      	movs	r3, #10
 8001a6a:	220a      	movs	r2, #10
 8001a6c:	4945      	ldr	r1, [pc, #276]	@ (8001b84 <fan_Lspeed+0x308>)
 8001a6e:	4846      	ldr	r0, [pc, #280]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001a70:	f006 fd38 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001a74:	4845      	ldr	r0, [pc, #276]	@ (8001b8c <fan_Lspeed+0x310>)
 8001a76:	f006 fc8d 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001a7a:	230f      	movs	r3, #15
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2337      	movs	r3, #55	@ 0x37
 8001a80:	2205      	movs	r2, #5
 8001a82:	4945      	ldr	r1, [pc, #276]	@ (8001b98 <fan_Lspeed+0x31c>)
 8001a84:	4840      	ldr	r0, [pc, #256]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001a86:	f006 fd2d 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001a8a:	483d      	ldr	r0, [pc, #244]	@ (8001b80 <fan_Lspeed+0x304>)
 8001a8c:	f006 fc82 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001a90:	230f      	movs	r3, #15
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	2337      	movs	r3, #55	@ 0x37
 8001a96:	2294      	movs	r2, #148	@ 0x94
 8001a98:	4940      	ldr	r1, [pc, #256]	@ (8001b9c <fan_Lspeed+0x320>)
 8001a9a:	483b      	ldr	r0, [pc, #236]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001a9c:	f006 fd22 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "L",  170, 8, 15);
 8001aa0:	230f      	movs	r3, #15
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2308      	movs	r3, #8
 8001aa6:	22aa      	movs	r2, #170	@ 0xaa
 8001aa8:	493d      	ldr	r1, [pc, #244]	@ (8001ba0 <fan_Lspeed+0x324>)
 8001aaa:	4837      	ldr	r0, [pc, #220]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001aac:	f006 fd1a 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_4gif, 145, 8, 64, 64);
 8001ab0:	2340      	movs	r3, #64	@ 0x40
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	2340      	movs	r3, #64	@ 0x40
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2308      	movs	r3, #8
 8001aba:	2291      	movs	r2, #145	@ 0x91
 8001abc:	493c      	ldr	r1, [pc, #240]	@ (8001bb0 <fan_Lspeed+0x334>)
 8001abe:	4832      	ldr	r0, [pc, #200]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001ac0:	f006 fd44 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 8001ac4:	f000 f8f2 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2100      	movs	r1, #0
 8001acc:	482e      	ldr	r0, [pc, #184]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001ace:	f006 fd91 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	9301      	str	r3, [sp, #4]
 8001ad6:	2340      	movs	r3, #64	@ 0x40
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4829      	ldr	r0, [pc, #164]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001ae4:	f006 fc28 	bl	8008338 <draw_rect_filled>
	HAL_Delay(100);
 8001ae8:	2064      	movs	r0, #100	@ 0x64
 8001aea:	f001 fa5d 	bl	8002fa8 <HAL_Delay>
	select_font(&Font5x7FixedMono);
 8001aee:	4824      	ldr	r0, [pc, #144]	@ (8001b80 <fan_Lspeed+0x304>)
 8001af0:	f006 fc50 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001af4:	230f      	movs	r3, #15
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	230a      	movs	r3, #10
 8001afa:	220a      	movs	r2, #10
 8001afc:	4921      	ldr	r1, [pc, #132]	@ (8001b84 <fan_Lspeed+0x308>)
 8001afe:	4822      	ldr	r0, [pc, #136]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001b00:	f006 fcf0 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001b04:	4821      	ldr	r0, [pc, #132]	@ (8001b8c <fan_Lspeed+0x310>)
 8001b06:	f006 fc45 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001b0a:	230f      	movs	r3, #15
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2337      	movs	r3, #55	@ 0x37
 8001b10:	2205      	movs	r2, #5
 8001b12:	4921      	ldr	r1, [pc, #132]	@ (8001b98 <fan_Lspeed+0x31c>)
 8001b14:	481c      	ldr	r0, [pc, #112]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001b16:	f006 fce5 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001b1a:	4819      	ldr	r0, [pc, #100]	@ (8001b80 <fan_Lspeed+0x304>)
 8001b1c:	f006 fc3a 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001b20:	230f      	movs	r3, #15
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2337      	movs	r3, #55	@ 0x37
 8001b26:	2294      	movs	r2, #148	@ 0x94
 8001b28:	491c      	ldr	r1, [pc, #112]	@ (8001b9c <fan_Lspeed+0x320>)
 8001b2a:	4817      	ldr	r0, [pc, #92]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001b2c:	f006 fcda 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "L",  170, 8, 15);
 8001b30:	230f      	movs	r3, #15
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2308      	movs	r3, #8
 8001b36:	22aa      	movs	r2, #170	@ 0xaa
 8001b38:	4919      	ldr	r1, [pc, #100]	@ (8001ba0 <fan_Lspeed+0x324>)
 8001b3a:	4813      	ldr	r0, [pc, #76]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001b3c:	f006 fcd2 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_5gif, 145, 8, 64, 64);
 8001b40:	2340      	movs	r3, #64	@ 0x40
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	2340      	movs	r3, #64	@ 0x40
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2308      	movs	r3, #8
 8001b4a:	2291      	movs	r2, #145	@ 0x91
 8001b4c:	4919      	ldr	r1, [pc, #100]	@ (8001bb4 <fan_Lspeed+0x338>)
 8001b4e:	480e      	ldr	r0, [pc, #56]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001b50:	f006 fcfc 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 8001b54:	f000 f8aa 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	480a      	ldr	r0, [pc, #40]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001b5e:	f006 fd49 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001b62:	2300      	movs	r3, #0
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	2340      	movs	r3, #64	@ 0x40
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2100      	movs	r1, #0
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <fan_Lspeed+0x30c>)
 8001b74:	f006 fbe0 	bl	8008338 <draw_rect_filled>
	HAL_Delay(100);
 8001b78:	2064      	movs	r0, #100	@ 0x64
 8001b7a:	f001 fa15 	bl	8002fa8 <HAL_Delay>
 8001b7e:	e01b      	b.n	8001bb8 <fan_Lspeed+0x33c>
 8001b80:	0800d4f8 	.word	0x0800d4f8
 8001b84:	0800c604 	.word	0x0800c604
 8001b88:	20003918 	.word	0x20003918
 8001b8c:	08011274 	.word	0x08011274
 8001b90:	20005a68 	.word	0x20005a68
 8001b94:	0800c60c 	.word	0x0800c60c
 8001b98:	200038e4 	.word	0x200038e4
 8001b9c:	0800c614 	.word	0x0800c614
 8001ba0:	0800c620 	.word	0x0800c620
 8001ba4:	200002b0 	.word	0x200002b0
 8001ba8:	20000ab0 	.word	0x20000ab0
 8001bac:	200012b0 	.word	0x200012b0
 8001bb0:	20001ab0 	.word	0x20001ab0
 8001bb4:	200022b0 	.word	0x200022b0
	select_font(&Font5x7FixedMono);
 8001bb8:	4825      	ldr	r0, [pc, #148]	@ (8001c50 <fan_Lspeed+0x3d4>)
 8001bba:	f006 fbeb 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	230a      	movs	r3, #10
 8001bc4:	220a      	movs	r2, #10
 8001bc6:	4923      	ldr	r1, [pc, #140]	@ (8001c54 <fan_Lspeed+0x3d8>)
 8001bc8:	4823      	ldr	r0, [pc, #140]	@ (8001c58 <fan_Lspeed+0x3dc>)
 8001bca:	f006 fc8b 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001bce:	4823      	ldr	r0, [pc, #140]	@ (8001c5c <fan_Lspeed+0x3e0>)
 8001bd0:	f006 fbe0 	bl	8008394 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001bd4:	230f      	movs	r3, #15
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2337      	movs	r3, #55	@ 0x37
 8001bda:	2205      	movs	r2, #5
 8001bdc:	4920      	ldr	r1, [pc, #128]	@ (8001c60 <fan_Lspeed+0x3e4>)
 8001bde:	481e      	ldr	r0, [pc, #120]	@ (8001c58 <fan_Lspeed+0x3dc>)
 8001be0:	f006 fc80 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001be4:	481a      	ldr	r0, [pc, #104]	@ (8001c50 <fan_Lspeed+0x3d4>)
 8001be6:	f006 fbd5 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001bea:	230f      	movs	r3, #15
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2337      	movs	r3, #55	@ 0x37
 8001bf0:	2294      	movs	r2, #148	@ 0x94
 8001bf2:	491c      	ldr	r1, [pc, #112]	@ (8001c64 <fan_Lspeed+0x3e8>)
 8001bf4:	4818      	ldr	r0, [pc, #96]	@ (8001c58 <fan_Lspeed+0x3dc>)
 8001bf6:	f006 fc75 	bl	80084e4 <draw_text>
    draw_text(tx_buf, "L",  170, 8, 15);
 8001bfa:	230f      	movs	r3, #15
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2308      	movs	r3, #8
 8001c00:	22aa      	movs	r2, #170	@ 0xaa
 8001c02:	4919      	ldr	r1, [pc, #100]	@ (8001c68 <fan_Lspeed+0x3ec>)
 8001c04:	4814      	ldr	r0, [pc, #80]	@ (8001c58 <fan_Lspeed+0x3dc>)
 8001c06:	f006 fc6d 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_6gif, 145, 8, 64, 64);
 8001c0a:	2340      	movs	r3, #64	@ 0x40
 8001c0c:	9301      	str	r3, [sp, #4]
 8001c0e:	2340      	movs	r3, #64	@ 0x40
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	2308      	movs	r3, #8
 8001c14:	2291      	movs	r2, #145	@ 0x91
 8001c16:	4915      	ldr	r1, [pc, #84]	@ (8001c6c <fan_Lspeed+0x3f0>)
 8001c18:	480f      	ldr	r0, [pc, #60]	@ (8001c58 <fan_Lspeed+0x3dc>)
 8001c1a:	f006 fc97 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 8001c1e:	f000 f845 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001c22:	2200      	movs	r2, #0
 8001c24:	2100      	movs	r1, #0
 8001c26:	480c      	ldr	r0, [pc, #48]	@ (8001c58 <fan_Lspeed+0x3dc>)
 8001c28:	f006 fce4 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2340      	movs	r3, #64	@ 0x40
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4806      	ldr	r0, [pc, #24]	@ (8001c58 <fan_Lspeed+0x3dc>)
 8001c3e:	f006 fb7b 	bl	8008338 <draw_rect_filled>
	HAL_Delay(100);
 8001c42:	2064      	movs	r0, #100	@ 0x64
 8001c44:	f001 f9b0 	bl	8002fa8 <HAL_Delay>


}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	0800d4f8 	.word	0x0800d4f8
 8001c54:	0800c604 	.word	0x0800c604
 8001c58:	20003918 	.word	0x20003918
 8001c5c:	08011274 	.word	0x08011274
 8001c60:	200038e4 	.word	0x200038e4
 8001c64:	0800c614 	.word	0x0800c614
 8001c68:	0800c620 	.word	0x0800c620
 8001c6c:	20002ab0 	.word	0x20002ab0

08001c70 <Gpio_Ex_init>:


void Gpio_Ex_init()
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	Ex_gpio_init();
 8001c74:	f006 feb2 	bl	80089dc <Ex_gpio_init>
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <Led_State>:

void Led_State()
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	led_states(LED_ON);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f006 ff7b 	bl	8008b7c <led_states>
	HAL_Delay(2000);
 8001c86:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c8a:	f001 f98d 	bl	8002fa8 <HAL_Delay>
	led_states(LED_OFF);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f006 ff74 	bl	8008b7c <led_states>
	HAL_Delay(2000);
 8001c94:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001c98:	f001 f986 	bl	8002fa8 <HAL_Delay>

}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <RTC_init>:
}



void RTC_init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0

MX_RTC_Init();
 8001ca4:	f005 ff36 	bl	8007b14 <MX_RTC_Init>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <Display_RTC_clock>:

void Display_RTC_clock()
{
 8001cac:	b590      	push	{r4, r7, lr}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af04      	add	r7, sp, #16
	RTC_interface();
 8001cb2:	f005 ff07 	bl	8007ac4 <RTC_interface>
	select_font(&Font5x7FixedMono);
 8001cb6:	4826      	ldr	r0, [pc, #152]	@ (8001d50 <Display_RTC_clock+0xa4>)
 8001cb8:	f006 fb6c 	bl	8008394 <select_font>
    draw_text(tx_buf, "HH : MM", 210, 43, 15);
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	232b      	movs	r3, #43	@ 0x2b
 8001cc2:	22d2      	movs	r2, #210	@ 0xd2
 8001cc4:	4923      	ldr	r1, [pc, #140]	@ (8001d54 <Display_RTC_clock+0xa8>)
 8001cc6:	4824      	ldr	r0, [pc, #144]	@ (8001d58 <Display_RTC_clock+0xac>)
 8001cc8:	f006 fc0c 	bl	80084e4 <draw_text>
    select_font(&DSEG7_Classic_Bold_16);
 8001ccc:	4823      	ldr	r0, [pc, #140]	@ (8001d5c <Display_RTC_clock+0xb0>)
 8001cce:	f006 fb61 	bl	8008394 <select_font>
    sprintf(temp_data,"%c%c%c%c%c",time[0],time[1],time[2],time[3],time[4]);
 8001cd2:	4b23      	ldr	r3, [pc, #140]	@ (8001d60 <Display_RTC_clock+0xb4>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <Display_RTC_clock+0xb4>)
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	461c      	mov	r4, r3
 8001cde:	4b20      	ldr	r3, [pc, #128]	@ (8001d60 <Display_RTC_clock+0xb4>)
 8001ce0:	789b      	ldrb	r3, [r3, #2]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8001d60 <Display_RTC_clock+0xb4>)
 8001ce6:	78db      	ldrb	r3, [r3, #3]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4b1d      	ldr	r3, [pc, #116]	@ (8001d60 <Display_RTC_clock+0xb4>)
 8001cec:	791b      	ldrb	r3, [r3, #4]
 8001cee:	9302      	str	r3, [sp, #8]
 8001cf0:	9101      	str	r1, [sp, #4]
 8001cf2:	9200      	str	r2, [sp, #0]
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	491a      	ldr	r1, [pc, #104]	@ (8001d64 <Display_RTC_clock+0xb8>)
 8001cfa:	481b      	ldr	r0, [pc, #108]	@ (8001d68 <Display_RTC_clock+0xbc>)
 8001cfc:	f008 fb16 	bl	800a32c <siprintf>
	draw_text(tx_buf, temp_data, 200, 63, 15);
 8001d00:	230f      	movs	r3, #15
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	233f      	movs	r3, #63	@ 0x3f
 8001d06:	22c8      	movs	r2, #200	@ 0xc8
 8001d08:	4917      	ldr	r1, [pc, #92]	@ (8001d68 <Display_RTC_clock+0xbc>)
 8001d0a:	4813      	ldr	r0, [pc, #76]	@ (8001d58 <Display_RTC_clock+0xac>)
 8001d0c:	f006 fbea 	bl	80084e4 <draw_text>
    sprintf(day_data,"%c%c",time[6],time[7]);
 8001d10:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <Display_RTC_clock+0xb4>)
 8001d12:	799b      	ldrb	r3, [r3, #6]
 8001d14:	461a      	mov	r2, r3
 8001d16:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <Display_RTC_clock+0xb4>)
 8001d18:	79db      	ldrb	r3, [r3, #7]
 8001d1a:	4914      	ldr	r1, [pc, #80]	@ (8001d6c <Display_RTC_clock+0xc0>)
 8001d1c:	4814      	ldr	r0, [pc, #80]	@ (8001d70 <Display_RTC_clock+0xc4>)
 8001d1e:	f008 fb05 	bl	800a32c <siprintf>
    select_font(&Font5x7FixedMono);
 8001d22:	480b      	ldr	r0, [pc, #44]	@ (8001d50 <Display_RTC_clock+0xa4>)
 8001d24:	f006 fb36 	bl	8008394 <select_font>
    draw_text(tx_buf, "d",  243, 10, 15);
 8001d28:	230f      	movs	r3, #15
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	230a      	movs	r3, #10
 8001d2e:	22f3      	movs	r2, #243	@ 0xf3
 8001d30:	4910      	ldr	r1, [pc, #64]	@ (8001d74 <Display_RTC_clock+0xc8>)
 8001d32:	4809      	ldr	r0, [pc, #36]	@ (8001d58 <Display_RTC_clock+0xac>)
 8001d34:	f006 fbd6 	bl	80084e4 <draw_text>
    draw_text(tx_buf, day_data,  230, 10, 15);
 8001d38:	230f      	movs	r3, #15
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	230a      	movs	r3, #10
 8001d3e:	22e6      	movs	r2, #230	@ 0xe6
 8001d40:	490b      	ldr	r1, [pc, #44]	@ (8001d70 <Display_RTC_clock+0xc4>)
 8001d42:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <Display_RTC_clock+0xac>)
 8001d44:	f006 fbce 	bl	80084e4 <draw_text>
}
 8001d48:	bf00      	nop
 8001d4a:	3704      	adds	r7, #4
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd90      	pop	{r4, r7, pc}
 8001d50:	0800d4f8 	.word	0x0800d4f8
 8001d54:	0800c624 	.word	0x0800c624
 8001d58:	20003918 	.word	0x20003918
 8001d5c:	0800e36c 	.word	0x0800e36c
 8001d60:	200038d0 	.word	0x200038d0
 8001d64:	0800c62c 	.word	0x0800c62c
 8001d68:	200038f0 	.word	0x200038f0
 8001d6c:	0800c638 	.word	0x0800c638
 8001d70:	20003904 	.word	0x20003904
 8001d74:	0800c640 	.word	0x0800c640

08001d78 <Stand_by_init>:

void Stand_by_init()
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
	button_pressed.button_standby = true;
 8001d7c:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <Stand_by_init+0x18>)
 8001d7e:	7913      	ldrb	r3, [r2, #4]
 8001d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d84:	7113      	strb	r3, [r2, #4]
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	20003838 	.word	0x20003838

08001d94 <Stand_by_Set>:
void Stand_by_Set()
{
 8001d94:	b5b0      	push	{r4, r5, r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af02      	add	r7, sp, #8
	if(button_pressed.button_standby)
 8001d9a:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <Stand_by_Set+0xd8>)
 8001d9c:	791b      	ldrb	r3, [r3, #4]
 8001d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d05d      	beq.n	8001e64 <Stand_by_Set+0xd0>
	{
	select_font(&Font5x7FixedMono);
 8001da8:	4831      	ldr	r0, [pc, #196]	@ (8001e70 <Stand_by_Set+0xdc>)
 8001daa:	f006 faf3 	bl	8008394 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001dae:	230f      	movs	r3, #15
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	230a      	movs	r3, #10
 8001db4:	220a      	movs	r2, #10
 8001db6:	492f      	ldr	r1, [pc, #188]	@ (8001e74 <Stand_by_Set+0xe0>)
 8001db8:	482f      	ldr	r0, [pc, #188]	@ (8001e78 <Stand_by_Set+0xe4>)
 8001dba:	f006 fb93 	bl	80084e4 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001dbe:	482f      	ldr	r0, [pc, #188]	@ (8001e7c <Stand_by_Set+0xe8>)
 8001dc0:	f006 fae8 	bl	8008394 <select_font>
	sprintf(data,"%.1f%.f",Temp[0],Temp[1]);
 8001dc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001e80 <Stand_by_Set+0xec>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbed 	bl	80005a8 <__aeabi_f2d>
 8001dce:	4604      	mov	r4, r0
 8001dd0:	460d      	mov	r5, r1
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e80 <Stand_by_Set+0xec>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fbe6 	bl	80005a8 <__aeabi_f2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	e9cd 2300 	strd	r2, r3, [sp]
 8001de4:	4622      	mov	r2, r4
 8001de6:	462b      	mov	r3, r5
 8001de8:	4926      	ldr	r1, [pc, #152]	@ (8001e84 <Stand_by_Set+0xf0>)
 8001dea:	4827      	ldr	r0, [pc, #156]	@ (8001e88 <Stand_by_Set+0xf4>)
 8001dec:	f008 fa9e 	bl	800a32c <siprintf>
	draw_text(tx_buf, data, 5, 55, 15);
 8001df0:	230f      	movs	r3, #15
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	2337      	movs	r3, #55	@ 0x37
 8001df6:	2205      	movs	r2, #5
 8001df8:	4923      	ldr	r1, [pc, #140]	@ (8001e88 <Stand_by_Set+0xf4>)
 8001dfa:	481f      	ldr	r0, [pc, #124]	@ (8001e78 <Stand_by_Set+0xe4>)
 8001dfc:	f006 fb72 	bl	80084e4 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 8001e00:	4822      	ldr	r0, [pc, #136]	@ (8001e8c <Stand_by_Set+0xf8>)
 8001e02:	f006 fac7 	bl	8008394 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001e06:	230f      	movs	r3, #15
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	2337      	movs	r3, #55	@ 0x37
 8001e0c:	2294      	movs	r2, #148	@ 0x94
 8001e0e:	4920      	ldr	r1, [pc, #128]	@ (8001e90 <Stand_by_Set+0xfc>)
 8001e10:	4819      	ldr	r0, [pc, #100]	@ (8001e78 <Stand_by_Set+0xe4>)
 8001e12:	f006 fb67 	bl	80084e4 <draw_text>
	select_font(&Font5x7FixedMono);
 8001e16:	4816      	ldr	r0, [pc, #88]	@ (8001e70 <Stand_by_Set+0xdc>)
 8001e18:	f006 fabc 	bl	8008394 <select_font>
	draw_text(tx_buf, "X",  170, 8, 15);
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2308      	movs	r3, #8
 8001e22:	22aa      	movs	r2, #170	@ 0xaa
 8001e24:	491b      	ldr	r1, [pc, #108]	@ (8001e94 <Stand_by_Set+0x100>)
 8001e26:	4814      	ldr	r0, [pc, #80]	@ (8001e78 <Stand_by_Set+0xe4>)
 8001e28:	f006 fb5c 	bl	80084e4 <draw_text>
	draw_bitmap_4bpp(tx_buf, fan_1gif,145,8, 64, 64);
 8001e2c:	2340      	movs	r3, #64	@ 0x40
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	2340      	movs	r3, #64	@ 0x40
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2308      	movs	r3, #8
 8001e36:	2291      	movs	r2, #145	@ 0x91
 8001e38:	4917      	ldr	r1, [pc, #92]	@ (8001e98 <Stand_by_Set+0x104>)
 8001e3a:	480f      	ldr	r0, [pc, #60]	@ (8001e78 <Stand_by_Set+0xe4>)
 8001e3c:	f006 fb86 	bl	800854c <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 142, 0, 16, 16);
	Display_RTC_clock();
 8001e40:	f7ff ff34 	bl	8001cac <Display_RTC_clock>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2100      	movs	r1, #0
 8001e48:	480b      	ldr	r0, [pc, #44]	@ (8001e78 <Stand_by_Set+0xe4>)
 8001e4a:	f006 fbd3 	bl	80085f4 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2340      	movs	r3, #64	@ 0x40
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4806      	ldr	r0, [pc, #24]	@ (8001e78 <Stand_by_Set+0xe4>)
 8001e60:	f006 fa6a 	bl	8008338 <draw_rect_filled>
	}

}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20003838 	.word	0x20003838
 8001e70:	0800d4f8 	.word	0x0800d4f8
 8001e74:	0800c604 	.word	0x0800c604
 8001e78:	20003918 	.word	0x20003918
 8001e7c:	08011274 	.word	0x08011274
 8001e80:	20005a68 	.word	0x20005a68
 8001e84:	0800c60c 	.word	0x0800c60c
 8001e88:	200038e4 	.word	0x200038e4
 8001e8c:	0800e36c 	.word	0x0800e36c
 8001e90:	0800c614 	.word	0x0800c614
 8001e94:	0800c644 	.word	0x0800c644
 8001e98:	200002b0 	.word	0x200002b0

08001e9c <Ambient_Set>:

void Ambient_Set()
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
	if(button_pressed.button_Ambient)
 8001ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f54 <Ambient_Set+0xb8>)
 8001ea2:	791b      	ldrb	r3, [r3, #4]
 8001ea4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d04f      	beq.n	8001f4e <Ambient_Set+0xb2>
	{
		if(button_pressed.button_f_mid)
 8001eae:	4b29      	ldr	r3, [pc, #164]	@ (8001f54 <Ambient_Set+0xb8>)
 8001eb0:	791b      	ldrb	r3, [r3, #4]
 8001eb2:	f003 0310 	and.w	r3, r3, #16
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d009      	beq.n	8001ed0 <Ambient_Set+0x34>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4825      	ldr	r0, [pc, #148]	@ (8001f58 <Ambient_Set+0xbc>)
 8001ec2:	f001 fbad 	bl	8003620 <HAL_GPIO_WritePin>
            fan_Mspeed();
 8001ec6:	f7ff fadb 	bl	8001480 <fan_Mspeed>
			Motor_55_duty();
 8001eca:	f006 fff3 	bl	8008eb4 <Motor_55_duty>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
			HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
		}
	}
}
 8001ece:	e03e      	b.n	8001f4e <Ambient_Set+0xb2>
		else if(button_pressed.button_f_low)
 8001ed0:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <Ambient_Set+0xb8>)
 8001ed2:	791b      	ldrb	r3, [r3, #4]
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <Ambient_Set+0x56>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	481d      	ldr	r0, [pc, #116]	@ (8001f58 <Ambient_Set+0xbc>)
 8001ee4:	f001 fb9c 	bl	8003620 <HAL_GPIO_WritePin>
			fan_Lspeed();
 8001ee8:	f7ff fcc8 	bl	800187c <fan_Lspeed>
			Motor_95_duty();
 8001eec:	f006 fff2 	bl	8008ed4 <Motor_95_duty>
}
 8001ef0:	e02d      	b.n	8001f4e <Ambient_Set+0xb2>
		else if(button_pressed.button_f_high)
 8001ef2:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <Ambient_Set+0xb8>)
 8001ef4:	791b      	ldrb	r3, [r3, #4]
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d009      	beq.n	8001f14 <Ambient_Set+0x78>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8001f00:	2201      	movs	r2, #1
 8001f02:	2101      	movs	r1, #1
 8001f04:	4814      	ldr	r0, [pc, #80]	@ (8001f58 <Ambient_Set+0xbc>)
 8001f06:	f001 fb8b 	bl	8003620 <HAL_GPIO_WritePin>
			fan_Hspeed();
 8001f0a:	f7ff f8c3 	bl	8001094 <fan_Hspeed>
			Motor_25_duty();
 8001f0e:	f006 ffc1 	bl	8008e94 <Motor_25_duty>
}
 8001f12:	e01c      	b.n	8001f4e <Ambient_Set+0xb2>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2101      	movs	r1, #1
 8001f18:	480f      	ldr	r0, [pc, #60]	@ (8001f58 <Ambient_Set+0xbc>)
 8001f1a:	f001 fb81 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8001f1e:	2108      	movs	r1, #8
 8001f20:	480e      	ldr	r0, [pc, #56]	@ (8001f5c <Ambient_Set+0xc0>)
 8001f22:	f004 f959 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 0);
 8001f26:	4b0d      	ldr	r3, [pc, #52]	@ (8001f5c <Ambient_Set+0xc0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8001f2e:	210c      	movs	r1, #12
 8001f30:	480a      	ldr	r0, [pc, #40]	@ (8001f5c <Ambient_Set+0xc0>)
 8001f32:	f004 f951 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 8001f36:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <Ambient_Set+0xc0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
 8001f3e:	2100      	movs	r1, #0
 8001f40:	4807      	ldr	r0, [pc, #28]	@ (8001f60 <Ambient_Set+0xc4>)
 8001f42:	f004 f949 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <Ambient_Set+0xc4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20003838 	.word	0x20003838
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	20003840 	.word	0x20003840
 8001f60:	20003888 	.word	0x20003888

08001f64 <Temp_35_Set>:

void Temp_35_Set()
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
	if(button_pressed.button_35)
 8001f68:	4b5a      	ldr	r3, [pc, #360]	@ (80020d4 <Temp_35_Set+0x170>)
 8001f6a:	791b      	ldrb	r3, [r3, #4]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	f000 80ac 	beq.w	80020d0 <Temp_35_Set+0x16c>
	{
		if(button_pressed.button_f_mid)
 8001f78:	4b56      	ldr	r3, [pc, #344]	@ (80020d4 <Temp_35_Set+0x170>)
 8001f7a:	791b      	ldrb	r3, [r3, #4]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d026      	beq.n	8001fd4 <Temp_35_Set+0x70>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8001f86:	2201      	movs	r2, #1
 8001f88:	2101      	movs	r1, #1
 8001f8a:	4853      	ldr	r0, [pc, #332]	@ (80020d8 <Temp_35_Set+0x174>)
 8001f8c:	f001 fb48 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001f90:	2201      	movs	r2, #1
 8001f92:	2104      	movs	r1, #4
 8001f94:	4851      	ldr	r0, [pc, #324]	@ (80020dc <Temp_35_Set+0x178>)
 8001f96:	f001 fb43 	bl	8003620 <HAL_GPIO_WritePin>
			fan_Mspeed();
 8001f9a:	f7ff fa71 	bl	8001480 <fan_Mspeed>
			Motor_55_duty();
 8001f9e:	f006 ff89 	bl	8008eb4 <Motor_55_duty>
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001fa2:	2108      	movs	r1, #8
 8001fa4:	484e      	ldr	r0, [pc, #312]	@ (80020e0 <Temp_35_Set+0x17c>)
 8001fa6:	f004 f879 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 20);
 8001faa:	4b4d      	ldr	r3, [pc, #308]	@ (80020e0 <Temp_35_Set+0x17c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2214      	movs	r2, #20
 8001fb0:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001fb2:	210c      	movs	r1, #12
 8001fb4:	484a      	ldr	r0, [pc, #296]	@ (80020e0 <Temp_35_Set+0x17c>)
 8001fb6:	f004 f871 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 20);
 8001fba:	4b49      	ldr	r3, [pc, #292]	@ (80020e0 <Temp_35_Set+0x17c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2214      	movs	r2, #20
 8001fc0:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4847      	ldr	r0, [pc, #284]	@ (80020e4 <Temp_35_Set+0x180>)
 8001fc6:	f004 f869 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 20);
 8001fca:	4b46      	ldr	r3, [pc, #280]	@ (80020e4 <Temp_35_Set+0x180>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2214      	movs	r2, #20
 8001fd0:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
			HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
		}
	}
}
 8001fd2:	e07d      	b.n	80020d0 <Temp_35_Set+0x16c>
		else if(button_pressed.button_f_low)
 8001fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80020d4 <Temp_35_Set+0x170>)
 8001fd6:	791b      	ldrb	r3, [r3, #4]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d026      	beq.n	8002030 <Temp_35_Set+0xcc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	483c      	ldr	r0, [pc, #240]	@ (80020d8 <Temp_35_Set+0x174>)
 8001fe8:	f001 fb1a 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001fec:	2201      	movs	r2, #1
 8001fee:	2104      	movs	r1, #4
 8001ff0:	483a      	ldr	r0, [pc, #232]	@ (80020dc <Temp_35_Set+0x178>)
 8001ff2:	f001 fb15 	bl	8003620 <HAL_GPIO_WritePin>
			fan_Lspeed();
 8001ff6:	f7ff fc41 	bl	800187c <fan_Lspeed>
			Motor_95_duty();
 8001ffa:	f006 ff6b 	bl	8008ed4 <Motor_95_duty>
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001ffe:	2108      	movs	r1, #8
 8002000:	4837      	ldr	r0, [pc, #220]	@ (80020e0 <Temp_35_Set+0x17c>)
 8002002:	f004 f84b 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 20);
 8002006:	4b36      	ldr	r3, [pc, #216]	@ (80020e0 <Temp_35_Set+0x17c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2214      	movs	r2, #20
 800200c:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800200e:	210c      	movs	r1, #12
 8002010:	4833      	ldr	r0, [pc, #204]	@ (80020e0 <Temp_35_Set+0x17c>)
 8002012:	f004 f843 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 20);
 8002016:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <Temp_35_Set+0x17c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2214      	movs	r2, #20
 800201c:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800201e:	2100      	movs	r1, #0
 8002020:	4830      	ldr	r0, [pc, #192]	@ (80020e4 <Temp_35_Set+0x180>)
 8002022:	f004 f83b 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 20);
 8002026:	4b2f      	ldr	r3, [pc, #188]	@ (80020e4 <Temp_35_Set+0x180>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2214      	movs	r2, #20
 800202c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800202e:	e04f      	b.n	80020d0 <Temp_35_Set+0x16c>
		else if(button_pressed.button_f_high)
 8002030:	4b28      	ldr	r3, [pc, #160]	@ (80020d4 <Temp_35_Set+0x170>)
 8002032:	791b      	ldrb	r3, [r3, #4]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d026      	beq.n	800208c <Temp_35_Set+0x128>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 800203e:	2201      	movs	r2, #1
 8002040:	2101      	movs	r1, #1
 8002042:	4825      	ldr	r0, [pc, #148]	@ (80020d8 <Temp_35_Set+0x174>)
 8002044:	f001 faec 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8002048:	2201      	movs	r2, #1
 800204a:	2104      	movs	r1, #4
 800204c:	4823      	ldr	r0, [pc, #140]	@ (80020dc <Temp_35_Set+0x178>)
 800204e:	f001 fae7 	bl	8003620 <HAL_GPIO_WritePin>
			fan_Hspeed();
 8002052:	f7ff f81f 	bl	8001094 <fan_Hspeed>
			Motor_25_duty();
 8002056:	f006 ff1d 	bl	8008e94 <Motor_25_duty>
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800205a:	2108      	movs	r1, #8
 800205c:	4820      	ldr	r0, [pc, #128]	@ (80020e0 <Temp_35_Set+0x17c>)
 800205e:	f004 f81d 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 20);
 8002062:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <Temp_35_Set+0x17c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2214      	movs	r2, #20
 8002068:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800206a:	210c      	movs	r1, #12
 800206c:	481c      	ldr	r0, [pc, #112]	@ (80020e0 <Temp_35_Set+0x17c>)
 800206e:	f004 f815 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 20);
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <Temp_35_Set+0x17c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2214      	movs	r2, #20
 8002078:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800207a:	2100      	movs	r1, #0
 800207c:	4819      	ldr	r0, [pc, #100]	@ (80020e4 <Temp_35_Set+0x180>)
 800207e:	f004 f80d 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 20);
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <Temp_35_Set+0x180>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2214      	movs	r2, #20
 8002088:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800208a:	e021      	b.n	80020d0 <Temp_35_Set+0x16c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 800208c:	2200      	movs	r2, #0
 800208e:	2101      	movs	r1, #1
 8002090:	4811      	ldr	r0, [pc, #68]	@ (80020d8 <Temp_35_Set+0x174>)
 8002092:	f001 fac5 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2104      	movs	r1, #4
 800209a:	4810      	ldr	r0, [pc, #64]	@ (80020dc <Temp_35_Set+0x178>)
 800209c:	f001 fac0 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 80020a0:	2108      	movs	r1, #8
 80020a2:	480f      	ldr	r0, [pc, #60]	@ (80020e0 <Temp_35_Set+0x17c>)
 80020a4:	f004 f898 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 0);
 80020a8:	4b0d      	ldr	r3, [pc, #52]	@ (80020e0 <Temp_35_Set+0x17c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 80020b0:	210c      	movs	r1, #12
 80020b2:	480b      	ldr	r0, [pc, #44]	@ (80020e0 <Temp_35_Set+0x17c>)
 80020b4:	f004 f890 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 80020b8:	4b09      	ldr	r3, [pc, #36]	@ (80020e0 <Temp_35_Set+0x17c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
 80020c0:	2100      	movs	r1, #0
 80020c2:	4808      	ldr	r0, [pc, #32]	@ (80020e4 <Temp_35_Set+0x180>)
 80020c4:	f004 f888 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <Temp_35_Set+0x180>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2200      	movs	r2, #0
 80020ce:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20003838 	.word	0x20003838
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	20003840 	.word	0x20003840
 80020e4:	20003888 	.word	0x20003888

080020e8 <Temp_40_Set>:


void Temp_40_Set()
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	if(button_pressed.button_40)
 80020ec:	4b5a      	ldr	r3, [pc, #360]	@ (8002258 <Temp_40_Set+0x170>)
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80ac 	beq.w	8002254 <Temp_40_Set+0x16c>
	{
		if(button_pressed.button_f_mid)
 80020fc:	4b56      	ldr	r3, [pc, #344]	@ (8002258 <Temp_40_Set+0x170>)
 80020fe:	791b      	ldrb	r3, [r3, #4]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d026      	beq.n	8002158 <Temp_40_Set+0x70>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 800210a:	2201      	movs	r2, #1
 800210c:	2101      	movs	r1, #1
 800210e:	4853      	ldr	r0, [pc, #332]	@ (800225c <Temp_40_Set+0x174>)
 8002110:	f001 fa86 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8002114:	2201      	movs	r2, #1
 8002116:	2104      	movs	r1, #4
 8002118:	4851      	ldr	r0, [pc, #324]	@ (8002260 <Temp_40_Set+0x178>)
 800211a:	f001 fa81 	bl	8003620 <HAL_GPIO_WritePin>
			fan_Mspeed();
 800211e:	f7ff f9af 	bl	8001480 <fan_Mspeed>
			Motor_55_duty();
 8002122:	f006 fec7 	bl	8008eb4 <Motor_55_duty>
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002126:	2108      	movs	r1, #8
 8002128:	484e      	ldr	r0, [pc, #312]	@ (8002264 <Temp_40_Set+0x17c>)
 800212a:	f003 ffb7 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 40);
 800212e:	4b4d      	ldr	r3, [pc, #308]	@ (8002264 <Temp_40_Set+0x17c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2228      	movs	r2, #40	@ 0x28
 8002134:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002136:	210c      	movs	r1, #12
 8002138:	484a      	ldr	r0, [pc, #296]	@ (8002264 <Temp_40_Set+0x17c>)
 800213a:	f003 ffaf 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 40);
 800213e:	4b49      	ldr	r3, [pc, #292]	@ (8002264 <Temp_40_Set+0x17c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2228      	movs	r2, #40	@ 0x28
 8002144:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002146:	2100      	movs	r1, #0
 8002148:	4847      	ldr	r0, [pc, #284]	@ (8002268 <Temp_40_Set+0x180>)
 800214a:	f003 ffa7 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 40);
 800214e:	4b46      	ldr	r3, [pc, #280]	@ (8002268 <Temp_40_Set+0x180>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2228      	movs	r2, #40	@ 0x28
 8002154:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
			HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
		}
	}
}
 8002156:	e07d      	b.n	8002254 <Temp_40_Set+0x16c>
		else if(button_pressed.button_f_low)
 8002158:	4b3f      	ldr	r3, [pc, #252]	@ (8002258 <Temp_40_Set+0x170>)
 800215a:	791b      	ldrb	r3, [r3, #4]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d026      	beq.n	80021b4 <Temp_40_Set+0xcc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8002166:	2201      	movs	r2, #1
 8002168:	2101      	movs	r1, #1
 800216a:	483c      	ldr	r0, [pc, #240]	@ (800225c <Temp_40_Set+0x174>)
 800216c:	f001 fa58 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8002170:	2201      	movs	r2, #1
 8002172:	2104      	movs	r1, #4
 8002174:	483a      	ldr	r0, [pc, #232]	@ (8002260 <Temp_40_Set+0x178>)
 8002176:	f001 fa53 	bl	8003620 <HAL_GPIO_WritePin>
			fan_Lspeed();
 800217a:	f7ff fb7f 	bl	800187c <fan_Lspeed>
			Motor_95_duty();
 800217e:	f006 fea9 	bl	8008ed4 <Motor_95_duty>
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002182:	2108      	movs	r1, #8
 8002184:	4837      	ldr	r0, [pc, #220]	@ (8002264 <Temp_40_Set+0x17c>)
 8002186:	f003 ff89 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 40);
 800218a:	4b36      	ldr	r3, [pc, #216]	@ (8002264 <Temp_40_Set+0x17c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2228      	movs	r2, #40	@ 0x28
 8002190:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002192:	210c      	movs	r1, #12
 8002194:	4833      	ldr	r0, [pc, #204]	@ (8002264 <Temp_40_Set+0x17c>)
 8002196:	f003 ff81 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 40);
 800219a:	4b32      	ldr	r3, [pc, #200]	@ (8002264 <Temp_40_Set+0x17c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2228      	movs	r2, #40	@ 0x28
 80021a0:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80021a2:	2100      	movs	r1, #0
 80021a4:	4830      	ldr	r0, [pc, #192]	@ (8002268 <Temp_40_Set+0x180>)
 80021a6:	f003 ff79 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 40);
 80021aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002268 <Temp_40_Set+0x180>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2228      	movs	r2, #40	@ 0x28
 80021b0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80021b2:	e04f      	b.n	8002254 <Temp_40_Set+0x16c>
		else if(button_pressed.button_f_high)
 80021b4:	4b28      	ldr	r3, [pc, #160]	@ (8002258 <Temp_40_Set+0x170>)
 80021b6:	791b      	ldrb	r3, [r3, #4]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d026      	beq.n	8002210 <Temp_40_Set+0x128>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80021c2:	2201      	movs	r2, #1
 80021c4:	2101      	movs	r1, #1
 80021c6:	4825      	ldr	r0, [pc, #148]	@ (800225c <Temp_40_Set+0x174>)
 80021c8:	f001 fa2a 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80021cc:	2201      	movs	r2, #1
 80021ce:	2104      	movs	r1, #4
 80021d0:	4823      	ldr	r0, [pc, #140]	@ (8002260 <Temp_40_Set+0x178>)
 80021d2:	f001 fa25 	bl	8003620 <HAL_GPIO_WritePin>
			fan_Hspeed();
 80021d6:	f7fe ff5d 	bl	8001094 <fan_Hspeed>
			Motor_25_duty();
 80021da:	f006 fe5b 	bl	8008e94 <Motor_25_duty>
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80021de:	2108      	movs	r1, #8
 80021e0:	4820      	ldr	r0, [pc, #128]	@ (8002264 <Temp_40_Set+0x17c>)
 80021e2:	f003 ff5b 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 40);
 80021e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002264 <Temp_40_Set+0x17c>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2228      	movs	r2, #40	@ 0x28
 80021ec:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80021ee:	210c      	movs	r1, #12
 80021f0:	481c      	ldr	r0, [pc, #112]	@ (8002264 <Temp_40_Set+0x17c>)
 80021f2:	f003 ff53 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 40);
 80021f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <Temp_40_Set+0x17c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2228      	movs	r2, #40	@ 0x28
 80021fc:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80021fe:	2100      	movs	r1, #0
 8002200:	4819      	ldr	r0, [pc, #100]	@ (8002268 <Temp_40_Set+0x180>)
 8002202:	f003 ff4b 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 40);
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <Temp_40_Set+0x180>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2228      	movs	r2, #40	@ 0x28
 800220c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800220e:	e021      	b.n	8002254 <Temp_40_Set+0x16c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8002210:	2200      	movs	r2, #0
 8002212:	2101      	movs	r1, #1
 8002214:	4811      	ldr	r0, [pc, #68]	@ (800225c <Temp_40_Set+0x174>)
 8002216:	f001 fa03 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2104      	movs	r1, #4
 800221e:	4810      	ldr	r0, [pc, #64]	@ (8002260 <Temp_40_Set+0x178>)
 8002220:	f001 f9fe 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 8002224:	2108      	movs	r1, #8
 8002226:	480f      	ldr	r0, [pc, #60]	@ (8002264 <Temp_40_Set+0x17c>)
 8002228:	f003 ffd6 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 0);
 800222c:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <Temp_40_Set+0x17c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2200      	movs	r2, #0
 8002232:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 8002234:	210c      	movs	r1, #12
 8002236:	480b      	ldr	r0, [pc, #44]	@ (8002264 <Temp_40_Set+0x17c>)
 8002238:	f003 ffce 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <Temp_40_Set+0x17c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2200      	movs	r2, #0
 8002242:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
 8002244:	2100      	movs	r1, #0
 8002246:	4808      	ldr	r0, [pc, #32]	@ (8002268 <Temp_40_Set+0x180>)
 8002248:	f003 ffc6 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <Temp_40_Set+0x180>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2200      	movs	r2, #0
 8002252:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20003838 	.word	0x20003838
 800225c:	40020800 	.word	0x40020800
 8002260:	40020000 	.word	0x40020000
 8002264:	20003840 	.word	0x20003840
 8002268:	20003888 	.word	0x20003888

0800226c <Temp_45_Set>:

void Temp_45_Set()
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
	if(button_pressed.button_45)
 8002270:	4b5a      	ldr	r3, [pc, #360]	@ (80023dc <Temp_45_Set+0x170>)
 8002272:	791b      	ldrb	r3, [r3, #4]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 80ac 	beq.w	80023d8 <Temp_45_Set+0x16c>
	{
		if(button_pressed.button_f_mid)
 8002280:	4b56      	ldr	r3, [pc, #344]	@ (80023dc <Temp_45_Set+0x170>)
 8002282:	791b      	ldrb	r3, [r3, #4]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d026      	beq.n	80022dc <Temp_45_Set+0x70>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 800228e:	2201      	movs	r2, #1
 8002290:	2101      	movs	r1, #1
 8002292:	4853      	ldr	r0, [pc, #332]	@ (80023e0 <Temp_45_Set+0x174>)
 8002294:	f001 f9c4 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8002298:	2201      	movs	r2, #1
 800229a:	2104      	movs	r1, #4
 800229c:	4851      	ldr	r0, [pc, #324]	@ (80023e4 <Temp_45_Set+0x178>)
 800229e:	f001 f9bf 	bl	8003620 <HAL_GPIO_WritePin>
            fan_Mspeed();
 80022a2:	f7ff f8ed 	bl	8001480 <fan_Mspeed>
			Motor_55_duty();
 80022a6:	f006 fe05 	bl	8008eb4 <Motor_55_duty>
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80022aa:	2108      	movs	r1, #8
 80022ac:	484e      	ldr	r0, [pc, #312]	@ (80023e8 <Temp_45_Set+0x17c>)
 80022ae:	f003 fef5 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 60);
 80022b2:	4b4d      	ldr	r3, [pc, #308]	@ (80023e8 <Temp_45_Set+0x17c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	223c      	movs	r2, #60	@ 0x3c
 80022b8:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80022ba:	210c      	movs	r1, #12
 80022bc:	484a      	ldr	r0, [pc, #296]	@ (80023e8 <Temp_45_Set+0x17c>)
 80022be:	f003 feed 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 60);
 80022c2:	4b49      	ldr	r3, [pc, #292]	@ (80023e8 <Temp_45_Set+0x17c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	223c      	movs	r2, #60	@ 0x3c
 80022c8:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 80022ca:	2100      	movs	r1, #0
 80022cc:	4847      	ldr	r0, [pc, #284]	@ (80023ec <Temp_45_Set+0x180>)
 80022ce:	f003 fee5 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 60);
 80022d2:	4b46      	ldr	r3, [pc, #280]	@ (80023ec <Temp_45_Set+0x180>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	223c      	movs	r2, #60	@ 0x3c
 80022d8:	635a      	str	r2, [r3, #52]	@ 0x34
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
			HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
		}
	}
}
 80022da:	e07d      	b.n	80023d8 <Temp_45_Set+0x16c>
		else if(button_pressed.button_f_low)
 80022dc:	4b3f      	ldr	r3, [pc, #252]	@ (80023dc <Temp_45_Set+0x170>)
 80022de:	791b      	ldrb	r3, [r3, #4]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d026      	beq.n	8002338 <Temp_45_Set+0xcc>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 80022ea:	2201      	movs	r2, #1
 80022ec:	2101      	movs	r1, #1
 80022ee:	483c      	ldr	r0, [pc, #240]	@ (80023e0 <Temp_45_Set+0x174>)
 80022f0:	f001 f996 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80022f4:	2201      	movs	r2, #1
 80022f6:	2104      	movs	r1, #4
 80022f8:	483a      	ldr	r0, [pc, #232]	@ (80023e4 <Temp_45_Set+0x178>)
 80022fa:	f001 f991 	bl	8003620 <HAL_GPIO_WritePin>
            fan_Lspeed();
 80022fe:	f7ff fabd 	bl	800187c <fan_Lspeed>
			Motor_95_duty();
 8002302:	f006 fde7 	bl	8008ed4 <Motor_95_duty>
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002306:	2108      	movs	r1, #8
 8002308:	4837      	ldr	r0, [pc, #220]	@ (80023e8 <Temp_45_Set+0x17c>)
 800230a:	f003 fec7 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 60);
 800230e:	4b36      	ldr	r3, [pc, #216]	@ (80023e8 <Temp_45_Set+0x17c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	223c      	movs	r2, #60	@ 0x3c
 8002314:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002316:	210c      	movs	r1, #12
 8002318:	4833      	ldr	r0, [pc, #204]	@ (80023e8 <Temp_45_Set+0x17c>)
 800231a:	f003 febf 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 60);
 800231e:	4b32      	ldr	r3, [pc, #200]	@ (80023e8 <Temp_45_Set+0x17c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	223c      	movs	r2, #60	@ 0x3c
 8002324:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002326:	2100      	movs	r1, #0
 8002328:	4830      	ldr	r0, [pc, #192]	@ (80023ec <Temp_45_Set+0x180>)
 800232a:	f003 feb7 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 60);
 800232e:	4b2f      	ldr	r3, [pc, #188]	@ (80023ec <Temp_45_Set+0x180>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	223c      	movs	r2, #60	@ 0x3c
 8002334:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002336:	e04f      	b.n	80023d8 <Temp_45_Set+0x16c>
		else if(button_pressed.button_f_high)
 8002338:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <Temp_45_Set+0x170>)
 800233a:	791b      	ldrb	r3, [r3, #4]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d026      	beq.n	8002394 <Temp_45_Set+0x128>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1);
 8002346:	2201      	movs	r2, #1
 8002348:	2101      	movs	r1, #1
 800234a:	4825      	ldr	r0, [pc, #148]	@ (80023e0 <Temp_45_Set+0x174>)
 800234c:	f001 f968 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8002350:	2201      	movs	r2, #1
 8002352:	2104      	movs	r1, #4
 8002354:	4823      	ldr	r0, [pc, #140]	@ (80023e4 <Temp_45_Set+0x178>)
 8002356:	f001 f963 	bl	8003620 <HAL_GPIO_WritePin>
			fan_Hspeed();
 800235a:	f7fe fe9b 	bl	8001094 <fan_Hspeed>
			Motor_25_duty();
 800235e:	f006 fd99 	bl	8008e94 <Motor_25_duty>
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8002362:	2108      	movs	r1, #8
 8002364:	4820      	ldr	r0, [pc, #128]	@ (80023e8 <Temp_45_Set+0x17c>)
 8002366:	f003 fe99 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 60);
 800236a:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <Temp_45_Set+0x17c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	223c      	movs	r2, #60	@ 0x3c
 8002370:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8002372:	210c      	movs	r1, #12
 8002374:	481c      	ldr	r0, [pc, #112]	@ (80023e8 <Temp_45_Set+0x17c>)
 8002376:	f003 fe91 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 60);
 800237a:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <Temp_45_Set+0x17c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	223c      	movs	r2, #60	@ 0x3c
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8002382:	2100      	movs	r1, #0
 8002384:	4819      	ldr	r0, [pc, #100]	@ (80023ec <Temp_45_Set+0x180>)
 8002386:	f003 fe89 	bl	800609c <HAL_TIM_PWM_Start>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 60);
 800238a:	4b18      	ldr	r3, [pc, #96]	@ (80023ec <Temp_45_Set+0x180>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	223c      	movs	r2, #60	@ 0x3c
 8002390:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002392:	e021      	b.n	80023d8 <Temp_45_Set+0x16c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8002394:	2200      	movs	r2, #0
 8002396:	2101      	movs	r1, #1
 8002398:	4811      	ldr	r0, [pc, #68]	@ (80023e0 <Temp_45_Set+0x174>)
 800239a:	f001 f941 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 800239e:	2200      	movs	r2, #0
 80023a0:	2104      	movs	r1, #4
 80023a2:	4810      	ldr	r0, [pc, #64]	@ (80023e4 <Temp_45_Set+0x178>)
 80023a4:	f001 f93c 	bl	8003620 <HAL_GPIO_WritePin>
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_3);
 80023a8:	2108      	movs	r1, #8
 80023aa:	480f      	ldr	r0, [pc, #60]	@ (80023e8 <Temp_45_Set+0x17c>)
 80023ac:	f003 ff14 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 0);
 80023b0:	4b0d      	ldr	r3, [pc, #52]	@ (80023e8 <Temp_45_Set+0x17c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2200      	movs	r2, #0
 80023b6:	63da      	str	r2, [r3, #60]	@ 0x3c
			HAL_TIM_PWM_Stop(&htim5, TIM_CHANNEL_4);
 80023b8:	210c      	movs	r1, #12
 80023ba:	480b      	ldr	r0, [pc, #44]	@ (80023e8 <Temp_45_Set+0x17c>)
 80023bc:	f003 ff0c 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <Temp_45_Set+0x17c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2200      	movs	r2, #0
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_TIM_PWM_Stop(&htim11, TIM_CHANNEL_1);
 80023c8:	2100      	movs	r1, #0
 80023ca:	4808      	ldr	r0, [pc, #32]	@ (80023ec <Temp_45_Set+0x180>)
 80023cc:	f003 ff04 	bl	80061d8 <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, 0);
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <Temp_45_Set+0x180>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2200      	movs	r2, #0
 80023d6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20003838 	.word	0x20003838
 80023e0:	40020800 	.word	0x40020800
 80023e4:	40020000 	.word	0x40020000
 80023e8:	20003840 	.word	0x20003840
 80023ec:	20003888 	.word	0x20003888

080023f0 <MX_USART1_UART_Init>:
/* USER CODE END EV */



void MX_USART1_UART_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023f4:	4b11      	ldr	r3, [pc, #68]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 80023f6:	4a12      	ldr	r2, [pc, #72]	@ (8002440 <MX_USART1_UART_Init+0x50>)
 80023f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023fa:	4b10      	ldr	r3, [pc, #64]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 80023fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002400:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002402:	4b0e      	ldr	r3, [pc, #56]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002404:	2200      	movs	r2, #0
 8002406:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002408:	4b0c      	ldr	r3, [pc, #48]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 800240a:	2200      	movs	r2, #0
 800240c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800240e:	4b0b      	ldr	r3, [pc, #44]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002414:	4b09      	ldr	r3, [pc, #36]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002416:	220c      	movs	r2, #12
 8002418:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241a:	4b08      	ldr	r3, [pc, #32]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002420:	4b06      	ldr	r3, [pc, #24]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	@ (800243c <MX_USART1_UART_Init+0x4c>)
 8002428:	f004 fc26 	bl	8006c78 <HAL_HalfDuplex_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002432:	f000 f9e9 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200037f0 	.word	0x200037f0
 8002440:	40011000 	.word	0x40011000

08002444 <USART1_IRQHandler>:
/**
  * @brief This function handles Non maskable interrupt.
  */

void USART1_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	 owReadHandler();
 8002448:	f006 fde4 	bl	8009014 <owReadHandler>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800244c:	4802      	ldr	r0, [pc, #8]	@ (8002458 <USART1_IRQHandler+0x14>)
 800244e:	f004 fc6b 	bl	8006d28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200037f0 	.word	0x200037f0

0800245c <MX_GPIO_Init>:
 */

#include "gpio.h"

void MX_GPIO_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	@ 0x28
 8002460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	4b4f      	ldr	r3, [pc, #316]	@ (80025b4 <MX_GPIO_Init+0x158>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	4a4e      	ldr	r2, [pc, #312]	@ (80025b4 <MX_GPIO_Init+0x158>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	6313      	str	r3, [r2, #48]	@ 0x30
 8002482:	4b4c      	ldr	r3, [pc, #304]	@ (80025b4 <MX_GPIO_Init+0x158>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4b48      	ldr	r3, [pc, #288]	@ (80025b4 <MX_GPIO_Init+0x158>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a47      	ldr	r2, [pc, #284]	@ (80025b4 <MX_GPIO_Init+0x158>)
 8002498:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b45      	ldr	r3, [pc, #276]	@ (80025b4 <MX_GPIO_Init+0x158>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <MX_GPIO_Init+0x158>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	4a40      	ldr	r2, [pc, #256]	@ (80025b4 <MX_GPIO_Init+0x158>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ba:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <MX_GPIO_Init+0x158>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
 80024ca:	4b3a      	ldr	r3, [pc, #232]	@ (80025b4 <MX_GPIO_Init+0x158>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4a39      	ldr	r2, [pc, #228]	@ (80025b4 <MX_GPIO_Init+0x158>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d6:	4b37      	ldr	r3, [pc, #220]	@ (80025b4 <MX_GPIO_Init+0x158>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f003 0302 	and.w	r3, r3, #2
 80024de:	607b      	str	r3, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]

//  __HAL_RCC_SYSCFG_CLK_ENABLE();
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2130      	movs	r1, #48	@ 0x30
 80024e6:	4834      	ldr	r0, [pc, #208]	@ (80025b8 <MX_GPIO_Init+0x15c>)
 80024e8:	f001 f89a 	bl	8003620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80024ec:	2200      	movs	r2, #0
 80024ee:	2110      	movs	r1, #16
 80024f0:	4832      	ldr	r0, [pc, #200]	@ (80025bc <MX_GPIO_Init+0x160>)
 80024f2:	f001 f895 	bl	8003620 <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024f6:	2301      	movs	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024fa:	2301      	movs	r3, #1
 80024fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002506:	f107 0314 	add.w	r3, r7, #20
 800250a:	4619      	mov	r1, r3
 800250c:	482a      	ldr	r0, [pc, #168]	@ (80025b8 <MX_GPIO_Init+0x15c>)
 800250e:	f000 ff13 	bl	8003338 <HAL_GPIO_Init>
//  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
//


  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002512:	2330      	movs	r3, #48	@ 0x30
 8002514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002516:	2301      	movs	r3, #1
 8002518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4823      	ldr	r0, [pc, #140]	@ (80025b8 <MX_GPIO_Init+0x15c>)
 800252a:	f000 ff05 	bl	8003338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = /*GPIO_PIN_1|*/GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800252e:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002532:	617b      	str	r3, [r7, #20]
                            |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002534:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253a:	2301      	movs	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253e:	f107 0314 	add.w	r3, r7, #20
 8002542:	4619      	mov	r1, r3
 8002544:	481e      	ldr	r0, [pc, #120]	@ (80025c0 <MX_GPIO_Init+0x164>)
 8002546:	f000 fef7 	bl	8003338 <HAL_GPIO_Init>
//    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//      HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


    /*Configure GPIO pin : PA11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800254a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800254e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002550:	2300      	movs	r3, #0
 8002552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002554:	2301      	movs	r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	4619      	mov	r1, r3
 800255e:	4817      	ldr	r0, [pc, #92]	@ (80025bc <MX_GPIO_Init+0x160>)
 8002560:	f000 feea 	bl	8003338 <HAL_GPIO_Init>

    /*Configure GPIO pin : PC10 */
    GPIO_InitStruct.Pin =  GPIO_PIN_9 | GPIO_PIN_8 | GPIO_PIN_7
 8002564:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002568:	617b      	str	r3, [r7, #20]
    		              | GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800256a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800256e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002570:	2301      	movs	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4619      	mov	r1, r3
 800257a:	480f      	ldr	r0, [pc, #60]	@ (80025b8 <MX_GPIO_Init+0x15c>)
 800257c:	f000 fedc 	bl	8003338 <HAL_GPIO_Init>
    /* EXTI interrupt init*/
       HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	2017      	movs	r0, #23
 8002586:	f000 fe0e 	bl	80031a6 <HAL_NVIC_SetPriority>
       HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800258a:	2017      	movs	r0, #23
 800258c:	f000 fe27 	bl	80031de <HAL_NVIC_EnableIRQ>

//    GPIO_InitStruct.Pin = GPIO_PIN_8;
//       GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//       GPIO_InitStruct.Pull = GPIO_PULLUP;
//       HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_2;
 8002590:	2314      	movs	r3, #20
 8002592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002594:	2301      	movs	r3, #1
 8002596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002598:	2301      	movs	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	4619      	mov	r1, r3
 80025a6:	4805      	ldr	r0, [pc, #20]	@ (80025bc <MX_GPIO_Init+0x160>)
 80025a8:	f000 fec6 	bl	8003338 <HAL_GPIO_Init>
//
//      GPIO_InitStruct.Pin = GPIO_PIN_11;
//      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
//

}
 80025ac:	bf00      	nop
 80025ae:	3728      	adds	r7, #40	@ 0x28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020800 	.word	0x40020800
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40020400 	.word	0x40020400

080025c4 <MX_I2C1_Init>:
  * @param None
  * @retval None
  *
  */
void MX_I2C1_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80025c8:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <MX_I2C1_Init+0x50>)
 80025ca:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <MX_I2C1_Init+0x54>)
 80025cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80025ce:	4b11      	ldr	r3, [pc, #68]	@ (8002614 <MX_I2C1_Init+0x50>)
 80025d0:	4a12      	ldr	r2, [pc, #72]	@ (800261c <MX_I2C1_Init+0x58>)
 80025d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002614 <MX_I2C1_Init+0x50>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80025da:	4b0e      	ldr	r3, [pc, #56]	@ (8002614 <MX_I2C1_Init+0x50>)
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <MX_I2C1_Init+0x50>)
 80025e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <MX_I2C1_Init+0x50>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80025ee:	4b09      	ldr	r3, [pc, #36]	@ (8002614 <MX_I2C1_Init+0x50>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80025f4:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <MX_I2C1_Init+0x50>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025fa:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <MX_I2C1_Init+0x50>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	@ (8002614 <MX_I2C1_Init+0x50>)
 8002602:	f001 f827 	bl	8003654 <HAL_I2C_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800260c:	f000 f8fc 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	200059b4 	.word	0x200059b4
 8002618:	40005400 	.word	0x40005400
 800261c:	000186a0 	.word	0x000186a0

08002620 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b08a      	sub	sp, #40	@ 0x28
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a19      	ldr	r2, [pc, #100]	@ (80026a4 <HAL_I2C_MspInit+0x84>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d12b      	bne.n	800269a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	4b18      	ldr	r3, [pc, #96]	@ (80026a8 <HAL_I2C_MspInit+0x88>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a17      	ldr	r2, [pc, #92]	@ (80026a8 <HAL_I2C_MspInit+0x88>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	6313      	str	r3, [r2, #48]	@ 0x30
 8002652:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <HAL_I2C_MspInit+0x88>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800265e:	23c0      	movs	r3, #192	@ 0xc0
 8002660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002662:	2312      	movs	r3, #18
 8002664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002666:	2300      	movs	r3, #0
 8002668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266a:	2303      	movs	r3, #3
 800266c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800266e:	2304      	movs	r3, #4
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002672:	f107 0314 	add.w	r3, r7, #20
 8002676:	4619      	mov	r1, r3
 8002678:	480c      	ldr	r0, [pc, #48]	@ (80026ac <HAL_I2C_MspInit+0x8c>)
 800267a:	f000 fe5d 	bl	8003338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b09      	ldr	r3, [pc, #36]	@ (80026a8 <HAL_I2C_MspInit+0x88>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	4a08      	ldr	r2, [pc, #32]	@ (80026a8 <HAL_I2C_MspInit+0x88>)
 8002688:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800268c:	6413      	str	r3, [r2, #64]	@ 0x40
 800268e:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_I2C_MspInit+0x88>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800269a:	bf00      	nop
 800269c:	3728      	adds	r7, #40	@ 0x28
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40005400 	.word	0x40005400
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40020400 	.word	0x40020400

080026b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0

  HAL_Init();
 80026b4:	f000 fc06 	bl	8002ec4 <HAL_Init>
  MX_GPIO_Init();
 80026b8:	f7ff fed0 	bl	800245c <MX_GPIO_Init>
  MX_I2C1_Init();
 80026bc:	f7ff ff82 	bl	80025c4 <MX_I2C1_Init>
  Gpio_Ex_init();
 80026c0:	f7ff fad6 	bl	8001c70 <Gpio_Ex_init>
  button_false_init();
 80026c4:	f005 fa80 	bl	8007bc8 <button_false_init>
  SystemClock_Config();
 80026c8:	f000 f832 	bl	8002730 <SystemClock_Config>
  MX_SPI1_Init();
 80026cc:	f000 f8a2 	bl	8002814 <MX_SPI1_Init>
  Display_app_init();
 80026d0:	f7fe fc12 	bl	8000ef8 <Display_app_init>
  MX_USART1_UART_Init();
 80026d4:	f7ff fe8c 	bl	80023f0 <MX_USART1_UART_Init>
  Display_refresh();
 80026d8:	f7fe fc1e 	bl	8000f18 <Display_refresh>
  Display_company_name();
 80026dc:	f7fe fc32 	bl	8000f44 <Display_company_name>
  Led_State();
 80026e0:	f7ff facc 	bl	8001c7c <Led_State>
  Standbyset_led();
 80026e4:	f006 fa02 	bl	8008aec <Standbyset_led>
  Stand_by_init();
 80026e8:	f7ff fb46 	bl	8001d78 <Stand_by_init>
  Display_refresh();
 80026ec:	f7fe fc14 	bl	8000f18 <Display_refresh>
  Display_Managmnt_sys();
 80026f0:	f7fe fc88 	bl	8001004 <Display_Managmnt_sys>
  Display_refresh();
 80026f4:	f7fe fc10 	bl	8000f18 <Display_refresh>
  Display_contct_num();
 80026f8:	f7fe fc5a 	bl	8000fb0 <Display_contct_num>
  Display_refresh();
 80026fc:	f7fe fc0c 	bl	8000f18 <Display_refresh>
  get_ROMid();
 8002700:	f006 ffba 	bl	8009678 <get_ROMid>
  RTC_init();
 8002704:	f7ff facc 	bl	8001ca0 <RTC_init>
  MX_TIM1_Init();
 8002708:	f006 fb24 	bl	8008d54 <MX_TIM1_Init>
  MX_TIM5_Init();
 800270c:	f006 fa70 	bl	8008bf0 <MX_TIM5_Init>
  MX_TIM11_Init();
 8002710:	f006 fad4 	bl	8008cbc <MX_TIM11_Init>

  while (1)
  {

	get_Temperature();
 8002714:	f007 f86e 	bl	80097f4 <get_Temperature>
	Stand_by_Set();
 8002718:	f7ff fb3c 	bl	8001d94 <Stand_by_Set>
	Ambient_Set();
 800271c:	f7ff fbbe 	bl	8001e9c <Ambient_Set>
	Temp_35_Set();
 8002720:	f7ff fc20 	bl	8001f64 <Temp_35_Set>
	Temp_40_Set();
 8002724:	f7ff fce0 	bl	80020e8 <Temp_40_Set>
	Temp_45_Set();
 8002728:	f7ff fda0 	bl	800226c <Temp_45_Set>
	get_Temperature();
 800272c:	bf00      	nop
 800272e:	e7f1      	b.n	8002714 <main+0x64>

08002730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b094      	sub	sp, #80	@ 0x50
 8002734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	2234      	movs	r2, #52	@ 0x34
 800273c:	2100      	movs	r1, #0
 800273e:	4618      	mov	r0, r3
 8002740:	f007 fe57 	bl	800a3f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002744:	f107 0308 	add.w	r3, r7, #8
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002754:	2300      	movs	r3, #0
 8002756:	607b      	str	r3, [r7, #4]
 8002758:	4b29      	ldr	r3, [pc, #164]	@ (8002800 <SystemClock_Config+0xd0>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275c:	4a28      	ldr	r2, [pc, #160]	@ (8002800 <SystemClock_Config+0xd0>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002762:	6413      	str	r3, [r2, #64]	@ 0x40
 8002764:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <SystemClock_Config+0xd0>)
 8002766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002770:	2300      	movs	r3, #0
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	4b23      	ldr	r3, [pc, #140]	@ (8002804 <SystemClock_Config+0xd4>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a22      	ldr	r2, [pc, #136]	@ (8002804 <SystemClock_Config+0xd4>)
 800277a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	4b20      	ldr	r3, [pc, #128]	@ (8002804 <SystemClock_Config+0xd4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800278c:	2309      	movs	r3, #9
 800278e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002790:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002794:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002796:	2301      	movs	r3, #1
 8002798:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800279a:	2302      	movs	r3, #2
 800279c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800279e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027a4:	2304      	movs	r3, #4
 80027a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 80027a8:	2332      	movs	r3, #50	@ 0x32
 80027aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027ac:	2302      	movs	r3, #2
 80027ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027b0:	2304      	movs	r3, #4
 80027b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027b4:	2302      	movs	r3, #2
 80027b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	4618      	mov	r0, r3
 80027be:	f002 fb97 	bl	8004ef0 <HAL_RCC_OscConfig>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80027c8:	f000 f81e 	bl	8002808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027cc:	230f      	movs	r3, #15
 80027ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d0:	2302      	movs	r3, #2
 80027d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027e0:	f107 0308 	add.w	r3, r7, #8
 80027e4:	2101      	movs	r1, #1
 80027e6:	4618      	mov	r0, r3
 80027e8:	f002 f886 	bl	80048f8 <HAL_RCC_ClockConfig>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80027f2:	f000 f809 	bl	8002808 <Error_Handler>
  }
}
 80027f6:	bf00      	nop
 80027f8:	3750      	adds	r7, #80	@ 0x50
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000

08002808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800280c:	b672      	cpsid	i
}
 800280e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002810:	bf00      	nop
 8002812:	e7fd      	b.n	8002810 <Error_Handler+0x8>

08002814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002818:	4b17      	ldr	r3, [pc, #92]	@ (8002878 <MX_SPI1_Init+0x64>)
 800281a:	4a18      	ldr	r2, [pc, #96]	@ (800287c <MX_SPI1_Init+0x68>)
 800281c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800281e:	4b16      	ldr	r3, [pc, #88]	@ (8002878 <MX_SPI1_Init+0x64>)
 8002820:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002826:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <MX_SPI1_Init+0x64>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800282c:	4b12      	ldr	r3, [pc, #72]	@ (8002878 <MX_SPI1_Init+0x64>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002832:	4b11      	ldr	r3, [pc, #68]	@ (8002878 <MX_SPI1_Init+0x64>)
 8002834:	2202      	movs	r2, #2
 8002836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002838:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <MX_SPI1_Init+0x64>)
 800283a:	2201      	movs	r2, #1
 800283c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800283e:	4b0e      	ldr	r3, [pc, #56]	@ (8002878 <MX_SPI1_Init+0x64>)
 8002840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002844:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002846:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <MX_SPI1_Init+0x64>)
 8002848:	2210      	movs	r2, #16
 800284a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800284c:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <MX_SPI1_Init+0x64>)
 800284e:	2200      	movs	r2, #0
 8002850:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002852:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <MX_SPI1_Init+0x64>)
 8002854:	2200      	movs	r2, #0
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002858:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <MX_SPI1_Init+0x64>)
 800285a:	2200      	movs	r2, #0
 800285c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 15;
 800285e:	4b06      	ldr	r3, [pc, #24]	@ (8002878 <MX_SPI1_Init+0x64>)
 8002860:	220f      	movs	r2, #15
 8002862:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002864:	4804      	ldr	r0, [pc, #16]	@ (8002878 <MX_SPI1_Init+0x64>)
 8002866:	f003 f8d3 	bl	8005a10 <HAL_SPI_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002870:	f7ff ffca 	bl	8002808 <Error_Handler>
//     HAL_NVIC_EnableIRQ(SPI1_IRQn);
//  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20005918 	.word	0x20005918
 800287c:	40013000 	.word	0x40013000

08002880 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	@ 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a19      	ldr	r2, [pc, #100]	@ (8002904 <HAL_SPI_MspInit+0x84>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d12b      	bne.n	80028fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <HAL_SPI_MspInit+0x88>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	4a17      	ldr	r2, [pc, #92]	@ (8002908 <HAL_SPI_MspInit+0x88>)
 80028ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b2:	4b15      	ldr	r3, [pc, #84]	@ (8002908 <HAL_SPI_MspInit+0x88>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <HAL_SPI_MspInit+0x88>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4a10      	ldr	r2, [pc, #64]	@ (8002908 <HAL_SPI_MspInit+0x88>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <HAL_SPI_MspInit+0x88>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80028da:	23a0      	movs	r3, #160	@ 0xa0
 80028dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028de:	2302      	movs	r3, #2
 80028e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e6:	2303      	movs	r3, #3
 80028e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80028ea:	2305      	movs	r3, #5
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ee:	f107 0314 	add.w	r3, r7, #20
 80028f2:	4619      	mov	r1, r3
 80028f4:	4805      	ldr	r0, [pc, #20]	@ (800290c <HAL_SPI_MspInit+0x8c>)
 80028f6:	f000 fd1f 	bl	8003338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80028fa:	bf00      	nop
 80028fc:	3728      	adds	r7, #40	@ 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40013000 	.word	0x40013000
 8002908:	40023800 	.word	0x40023800
 800290c:	40020000 	.word	0x40020000

08002910 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0b      	ldr	r2, [pc, #44]	@ (800294c <HAL_TIM_PWM_MspInit+0x3c>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10d      	bne.n	800293e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <HAL_TIM_PWM_MspInit+0x40>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	4a09      	ldr	r2, [pc, #36]	@ (8002950 <HAL_TIM_PWM_MspInit+0x40>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	6413      	str	r3, [r2, #64]	@ 0x40
 8002932:	4b07      	ldr	r3, [pc, #28]	@ (8002950 <HAL_TIM_PWM_MspInit+0x40>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40000c00 	.word	0x40000c00
 8002950:	40023800 	.word	0x40023800

08002954 <HAL_TIM_Base_MspInit>:

}


void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a14      	ldr	r2, [pc, #80]	@ (80029b4 <HAL_TIM_Base_MspInit+0x60>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d10d      	bne.n	8002982 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <HAL_TIM_Base_MspInit+0x64>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <HAL_TIM_Base_MspInit+0x64>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6453      	str	r3, [r2, #68]	@ 0x44
 8002976:	4b10      	ldr	r3, [pc, #64]	@ (80029b8 <HAL_TIM_Base_MspInit+0x64>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  if(htim_base->Instance==TIM11)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a0d      	ldr	r2, [pc, #52]	@ (80029bc <HAL_TIM_Base_MspInit+0x68>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d10d      	bne.n	80029a8 <HAL_TIM_Base_MspInit+0x54>
    {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
      /* Peripheral clock enable */
      __HAL_RCC_TIM11_CLK_ENABLE();
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_TIM_Base_MspInit+0x64>)
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	4a08      	ldr	r2, [pc, #32]	@ (80029b8 <HAL_TIM_Base_MspInit+0x64>)
 8002996:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800299a:	6453      	str	r3, [r2, #68]	@ 0x44
 800299c:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_TIM_Base_MspInit+0x64>)
 800299e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
    /* USER CODE BEGIN TIM11_MspInit 1 */

    /* USER CODE END TIM11_MspInit 1 */
    }

}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40010000 	.word	0x40010000
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40014800 	.word	0x40014800

080029c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	@ 0x30
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	605a      	str	r2, [r3, #4]
 80029d2:	609a      	str	r2, [r3, #8]
 80029d4:	60da      	str	r2, [r3, #12]
 80029d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a47      	ldr	r2, [pc, #284]	@ (8002afc <HAL_TIM_MspPostInit+0x13c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d11f      	bne.n	8002a22 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	4b46      	ldr	r3, [pc, #280]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	4a45      	ldr	r2, [pc, #276]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f2:	4b43      	ldr	r3, [pc, #268]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	483a      	ldr	r0, [pc, #232]	@ (8002b04 <HAL_TIM_MspPostInit+0x144>)
 8002a1c:	f000 fc8c 	bl	8003338 <HAL_GPIO_Init>

    /* USER CODE END TIM11_MspPostInit 1 */
    }


}
 8002a20:	e067      	b.n	8002af2 <HAL_TIM_MspPostInit+0x132>
  else if(htim->Instance==TIM5)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a38      	ldr	r2, [pc, #224]	@ (8002b08 <HAL_TIM_MspPostInit+0x148>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d13e      	bne.n	8002aaa <HAL_TIM_MspPostInit+0xea>
      __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	4b33      	ldr	r3, [pc, #204]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 8002a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a34:	4a32      	ldr	r2, [pc, #200]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 8002a36:	f043 0304 	orr.w	r3, r3, #4
 8002a3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3c:	4b30      	ldr	r3, [pc, #192]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	4a2b      	ldr	r2, [pc, #172]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 8002a52:	f043 0302 	orr.w	r3, r3, #2
 8002a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a58:	4b29      	ldr	r3, [pc, #164]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]
      GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a68:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a72:	2300      	movs	r3, #0
 8002a74:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a76:	2302      	movs	r3, #2
 8002a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7a:	f107 031c 	add.w	r3, r7, #28
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4822      	ldr	r0, [pc, #136]	@ (8002b0c <HAL_TIM_MspPostInit+0x14c>)
 8002a82:	f000 fc59 	bl	8003338 <HAL_GPIO_Init>
      GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a8a:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a98:	2302      	movs	r3, #2
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9c:	f107 031c 	add.w	r3, r7, #28
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	481b      	ldr	r0, [pc, #108]	@ (8002b10 <HAL_TIM_MspPostInit+0x150>)
 8002aa4:	f000 fc48 	bl	8003338 <HAL_GPIO_Init>
}
 8002aa8:	e023      	b.n	8002af2 <HAL_TIM_MspPostInit+0x132>
    else if(htim->Instance==TIM11)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a19      	ldr	r2, [pc, #100]	@ (8002b14 <HAL_TIM_MspPostInit+0x154>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d11e      	bne.n	8002af2 <HAL_TIM_MspPostInit+0x132>
      __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 8002aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002abc:	4a10      	ldr	r2, [pc, #64]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 8002abe:	f043 0302 	orr.w	r3, r3, #2
 8002ac2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <HAL_TIM_MspPostInit+0x140>)
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
      GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ad0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ad4:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
      GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae6:	f107 031c 	add.w	r3, r7, #28
 8002aea:	4619      	mov	r1, r3
 8002aec:	4808      	ldr	r0, [pc, #32]	@ (8002b10 <HAL_TIM_MspPostInit+0x150>)
 8002aee:	f000 fc23 	bl	8003338 <HAL_GPIO_Init>
}
 8002af2:	bf00      	nop
 8002af4:	3730      	adds	r7, #48	@ 0x30
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40010000 	.word	0x40010000
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40020000 	.word	0x40020000
 8002b08:	40000c00 	.word	0x40000c00
 8002b0c:	40020800 	.word	0x40020800
 8002b10:	40020400 	.word	0x40020400
 8002b14:	40014800 	.word	0x40014800

08002b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	607b      	str	r3, [r7, #4]
 8002b22:	4b10      	ldr	r3, [pc, #64]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b26:	4a0f      	ldr	r2, [pc, #60]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
 8002b3e:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	4a08      	ldr	r2, [pc, #32]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <HAL_MspInit+0x4c>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b56:	2007      	movs	r0, #7
 8002b58:	f000 fb1a 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40023800 	.word	0x40023800

08002b68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b70:	f107 0308 	add.w	r3, r7, #8
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
 8002b80:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a0c      	ldr	r2, [pc, #48]	@ (8002bb8 <HAL_RTC_MspInit+0x50>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d111      	bne.n	8002bb0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002b8c:	2304      	movs	r3, #4
 8002b8e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002b90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b94:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 f8cc 	bl	8004d38 <HAL_RCCEx_PeriphCLKConfig>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002ba6:	f7ff fe2f 	bl	8002808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002baa:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <HAL_RTC_MspInit+0x54>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002bb0:	bf00      	nop
 8002bb2:	3720      	adds	r7, #32
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40002800 	.word	0x40002800
 8002bbc:	42470e3c 	.word	0x42470e3c

08002bc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c54 <HAL_UART_MspInit+0x94>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d134      	bne.n	8002c4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c58 <HAL_UART_MspInit+0x98>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bea:	4a1b      	ldr	r2, [pc, #108]	@ (8002c58 <HAL_UART_MspInit+0x98>)
 8002bec:	f043 0310 	orr.w	r3, r3, #16
 8002bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf2:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <HAL_UART_MspInit+0x98>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b15      	ldr	r3, [pc, #84]	@ (8002c58 <HAL_UART_MspInit+0x98>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a14      	ldr	r2, [pc, #80]	@ (8002c58 <HAL_UART_MspInit+0x98>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b12      	ldr	r3, [pc, #72]	@ (8002c58 <HAL_UART_MspInit+0x98>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c20:	2312      	movs	r3, #18
 8002c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c2c:	2307      	movs	r3, #7
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4619      	mov	r1, r3
 8002c36:	4809      	ldr	r0, [pc, #36]	@ (8002c5c <HAL_UART_MspInit+0x9c>)
 8002c38:	f000 fb7e 	bl	8003338 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	2025      	movs	r0, #37	@ 0x25
 8002c42:	f000 fab0 	bl	80031a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c46:	2025      	movs	r0, #37	@ 0x25
 8002c48:	f000 fac9 	bl	80031de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c4c:	bf00      	nop
 8002c4e:	3728      	adds	r7, #40	@ 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40011000 	.word	0x40011000
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40020000 	.word	0x40020000

08002c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c64:	bf00      	nop
 8002c66:	e7fd      	b.n	8002c64 <NMI_Handler+0x4>

08002c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <HardFault_Handler+0x4>

08002c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <MemManage_Handler+0x4>

08002c78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <BusFault_Handler+0x4>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <UsageFault_Handler+0x4>

08002c88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb6:	f000 f957 	bl	8002f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  return 1;
 8002cc2:	2301      	movs	r3, #1
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <_kill>:

int _kill(int pid, int sig)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cd8:	f007 fbde 	bl	800a498 <__errno>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2216      	movs	r2, #22
 8002ce0:	601a      	str	r2, [r3, #0]
  return -1;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <_exit>:

void _exit (int status)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff ffe7 	bl	8002cce <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d00:	bf00      	nop
 8002d02:	e7fd      	b.n	8002d00 <_exit+0x12>

08002d04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
 8002d14:	e00a      	b.n	8002d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d16:	f3af 8000 	nop.w
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	60ba      	str	r2, [r7, #8]
 8002d22:	b2ca      	uxtb	r2, r1
 8002d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	dbf0      	blt.n	8002d16 <_read+0x12>
  }

  return len;
 8002d34:	687b      	ldr	r3, [r7, #4]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b086      	sub	sp, #24
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	60f8      	str	r0, [r7, #12]
 8002d46:	60b9      	str	r1, [r7, #8]
 8002d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	e009      	b.n	8002d64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	60ba      	str	r2, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	dbf1      	blt.n	8002d50 <_write+0x12>
  }
  return len;
 8002d6c:	687b      	ldr	r3, [r7, #4]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <_close>:

int _close(int file)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d9e:	605a      	str	r2, [r3, #4]
  return 0;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr

08002dae <_isatty>:

int _isatty(int file)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b083      	sub	sp, #12
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002db6:	2301      	movs	r3, #1
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b085      	sub	sp, #20
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002de8:	4a14      	ldr	r2, [pc, #80]	@ (8002e3c <_sbrk+0x5c>)
 8002dea:	4b15      	ldr	r3, [pc, #84]	@ (8002e40 <_sbrk+0x60>)
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002df4:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <_sbrk+0x64>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d102      	bne.n	8002e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <_sbrk+0x64>)
 8002dfe:	4a12      	ldr	r2, [pc, #72]	@ (8002e48 <_sbrk+0x68>)
 8002e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <_sbrk+0x64>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d207      	bcs.n	8002e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e10:	f007 fb42 	bl	800a498 <__errno>
 8002e14:	4603      	mov	r3, r0
 8002e16:	220c      	movs	r2, #12
 8002e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	e009      	b.n	8002e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e20:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <_sbrk+0x64>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e26:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <_sbrk+0x64>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4a05      	ldr	r2, [pc, #20]	@ (8002e44 <_sbrk+0x64>)
 8002e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e32:	68fb      	ldr	r3, [r7, #12]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20008000 	.word	0x20008000
 8002e40:	00000400 	.word	0x00000400
 8002e44:	20005970 	.word	0x20005970
 8002e48:	20005c00 	.word	0x20005c00

08002e4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e50:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <SystemInit+0x20>)
 8002e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e56:	4a05      	ldr	r2, [pc, #20]	@ (8002e6c <SystemInit+0x20>)
 8002e58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002e70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ea8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e74:	f7ff ffea 	bl	8002e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e78:	480c      	ldr	r0, [pc, #48]	@ (8002eac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e7a:	490d      	ldr	r1, [pc, #52]	@ (8002eb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e80:	e002      	b.n	8002e88 <LoopCopyDataInit>

08002e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e86:	3304      	adds	r3, #4

08002e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e8c:	d3f9      	bcc.n	8002e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e90:	4c0a      	ldr	r4, [pc, #40]	@ (8002ebc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e94:	e001      	b.n	8002e9a <LoopFillZerobss>

08002e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e98:	3204      	adds	r2, #4

08002e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e9c:	d3fb      	bcc.n	8002e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e9e:	f007 fb01 	bl	800a4a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ea2:	f7ff fc05 	bl	80026b0 <main>
  bx  lr    
 8002ea6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ea8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002eac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eb0:	200037d4 	.word	0x200037d4
  ldr r2, =_sidata
 8002eb4:	08011620 	.word	0x08011620
  ldr r2, =_sbss
 8002eb8:	200037d4 	.word	0x200037d4
  ldr r4, =_ebss
 8002ebc:	20005c00 	.word	0x20005c00

08002ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ec0:	e7fe      	b.n	8002ec0 <ADC_IRQHandler>
	...

08002ec4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f04 <HAL_Init+0x40>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f04 <HAL_Init+0x40>)
 8002ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ed2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f04 <HAL_Init+0x40>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f04 <HAL_Init+0x40>)
 8002eda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ede:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ee0:	4b08      	ldr	r3, [pc, #32]	@ (8002f04 <HAL_Init+0x40>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a07      	ldr	r2, [pc, #28]	@ (8002f04 <HAL_Init+0x40>)
 8002ee6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002eec:	2003      	movs	r0, #3
 8002eee:	f000 f94f 	bl	8003190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f000 f808 	bl	8002f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ef8:	f7ff fe0e 	bl	8002b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023c00 	.word	0x40023c00

08002f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f10:	4b12      	ldr	r3, [pc, #72]	@ (8002f5c <HAL_InitTick+0x54>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <HAL_InitTick+0x58>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f26:	4618      	mov	r0, r3
 8002f28:	f000 f967 	bl	80031fa <HAL_SYSTICK_Config>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e00e      	b.n	8002f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b0f      	cmp	r3, #15
 8002f3a:	d80a      	bhi.n	8002f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	f000 f92f 	bl	80031a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f48:	4a06      	ldr	r2, [pc, #24]	@ (8002f64 <HAL_InitTick+0x5c>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e000      	b.n	8002f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	200035f8 	.word	0x200035f8
 8002f60:	20003600 	.word	0x20003600
 8002f64:	200035fc 	.word	0x200035fc

08002f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <HAL_IncTick+0x20>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_IncTick+0x24>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4413      	add	r3, r2
 8002f78:	4a04      	ldr	r2, [pc, #16]	@ (8002f8c <HAL_IncTick+0x24>)
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	20003600 	.word	0x20003600
 8002f8c:	20005974 	.word	0x20005974

08002f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  return uwTick;
 8002f94:	4b03      	ldr	r3, [pc, #12]	@ (8002fa4 <HAL_GetTick+0x14>)
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20005974 	.word	0x20005974

08002fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb0:	f7ff ffee 	bl	8002f90 <HAL_GetTick>
 8002fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d005      	beq.n	8002fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <HAL_Delay+0x44>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fce:	bf00      	nop
 8002fd0:	f7ff ffde 	bl	8002f90 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d8f7      	bhi.n	8002fd0 <HAL_Delay+0x28>
  {
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20003600 	.word	0x20003600

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003018:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800301c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003022:	4a04      	ldr	r2, [pc, #16]	@ (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	60d3      	str	r3, [r2, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000ed00 	.word	0xe000ed00

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800305e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003062:	2b00      	cmp	r3, #0
 8003064:	db0b      	blt.n	800307e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003066:	79fb      	ldrb	r3, [r7, #7]
 8003068:	f003 021f 	and.w	r2, r3, #31
 800306c:	4907      	ldr	r1, [pc, #28]	@ (800308c <__NVIC_EnableIRQ+0x38>)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	095b      	lsrs	r3, r3, #5
 8003074:	2001      	movs	r0, #1
 8003076:	fa00 f202 	lsl.w	r2, r0, r2
 800307a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000e100 	.word	0xe000e100

08003090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	6039      	str	r1, [r7, #0]
 800309a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	db0a      	blt.n	80030ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	490c      	ldr	r1, [pc, #48]	@ (80030dc <__NVIC_SetPriority+0x4c>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	0112      	lsls	r2, r2, #4
 80030b0:	b2d2      	uxtb	r2, r2
 80030b2:	440b      	add	r3, r1
 80030b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b8:	e00a      	b.n	80030d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	4908      	ldr	r1, [pc, #32]	@ (80030e0 <__NVIC_SetPriority+0x50>)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	3b04      	subs	r3, #4
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	440b      	add	r3, r1
 80030ce:	761a      	strb	r2, [r3, #24]
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000e100 	.word	0xe000e100
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	@ 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f1c3 0307 	rsb	r3, r3, #7
 80030fe:	2b04      	cmp	r3, #4
 8003100:	bf28      	it	cs
 8003102:	2304      	movcs	r3, #4
 8003104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3304      	adds	r3, #4
 800310a:	2b06      	cmp	r3, #6
 800310c:	d902      	bls.n	8003114 <NVIC_EncodePriority+0x30>
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3b03      	subs	r3, #3
 8003112:	e000      	b.n	8003116 <NVIC_EncodePriority+0x32>
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003118:	f04f 32ff 	mov.w	r2, #4294967295
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	401a      	ands	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800312c:	f04f 31ff 	mov.w	r1, #4294967295
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	43d9      	mvns	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800313c:	4313      	orrs	r3, r2
         );
}
 800313e:	4618      	mov	r0, r3
 8003140:	3724      	adds	r7, #36	@ 0x24
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800315c:	d301      	bcc.n	8003162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800315e:	2301      	movs	r3, #1
 8003160:	e00f      	b.n	8003182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003162:	4a0a      	ldr	r2, [pc, #40]	@ (800318c <SysTick_Config+0x40>)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316a:	210f      	movs	r1, #15
 800316c:	f04f 30ff 	mov.w	r0, #4294967295
 8003170:	f7ff ff8e 	bl	8003090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003174:	4b05      	ldr	r3, [pc, #20]	@ (800318c <SysTick_Config+0x40>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317a:	4b04      	ldr	r3, [pc, #16]	@ (800318c <SysTick_Config+0x40>)
 800317c:	2207      	movs	r2, #7
 800317e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	e000e010 	.word	0xe000e010

08003190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f7ff ff29 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 800319e:	bf00      	nop
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b086      	sub	sp, #24
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b8:	f7ff ff3e 	bl	8003038 <__NVIC_GetPriorityGrouping>
 80031bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f7ff ff8e 	bl	80030e4 <NVIC_EncodePriority>
 80031c8:	4602      	mov	r2, r0
 80031ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff5d 	bl	8003090 <__NVIC_SetPriority>
}
 80031d6:	bf00      	nop
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	4603      	mov	r3, r0
 80031e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff31 	bl	8003054 <__NVIC_EnableIRQ>
}
 80031f2:	bf00      	nop
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f7ff ffa2 	bl	800314c <SysTick_Config>
 8003208:	4603      	mov	r3, r0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b084      	sub	sp, #16
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003220:	f7ff feb6 	bl	8002f90 <HAL_GetTick>
 8003224:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d008      	beq.n	8003244 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2280      	movs	r2, #128	@ 0x80
 8003236:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e052      	b.n	80032ea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0216 	bic.w	r2, r2, #22
 8003252:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003262:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d103      	bne.n	8003274 <HAL_DMA_Abort+0x62>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003270:	2b00      	cmp	r3, #0
 8003272:	d007      	beq.n	8003284 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0208 	bic.w	r2, r2, #8
 8003282:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003294:	e013      	b.n	80032be <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003296:	f7ff fe7b 	bl	8002f90 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d90c      	bls.n	80032be <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2203      	movs	r2, #3
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e015      	b.n	80032ea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1e4      	bne.n	8003296 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d0:	223f      	movs	r2, #63	@ 0x3f
 80032d2:	409a      	lsls	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d004      	beq.n	8003310 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2280      	movs	r2, #128	@ 0x80
 800330a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e00c      	b.n	800332a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2205      	movs	r2, #5
 8003314:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0201 	bic.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	@ 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e14d      	b.n	80035f0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003354:	2201      	movs	r2, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	429a      	cmp	r2, r3
 800336e:	f040 813c 	bne.w	80035ea <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b01      	cmp	r3, #1
 800337c:	d005      	beq.n	800338a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003386:	2b02      	cmp	r3, #2
 8003388:	d130      	bne.n	80033ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	2203      	movs	r2, #3
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c0:	2201      	movs	r2, #1
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 0201 	and.w	r2, r3, #1
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b03      	cmp	r3, #3
 80033f6:	d017      	beq.n	8003428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2203      	movs	r2, #3
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d123      	bne.n	800347c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	08da      	lsrs	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3208      	adds	r2, #8
 800343c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	220f      	movs	r2, #15
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	08da      	lsrs	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3208      	adds	r2, #8
 8003476:	69b9      	ldr	r1, [r7, #24]
 8003478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2203      	movs	r2, #3
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0203 	and.w	r2, r3, #3
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8096 	beq.w	80035ea <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b51      	ldr	r3, [pc, #324]	@ (8003608 <HAL_GPIO_Init+0x2d0>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c6:	4a50      	ldr	r2, [pc, #320]	@ (8003608 <HAL_GPIO_Init+0x2d0>)
 80034c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003608 <HAL_GPIO_Init+0x2d0>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034da:	4a4c      	ldr	r2, [pc, #304]	@ (800360c <HAL_GPIO_Init+0x2d4>)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	3302      	adds	r3, #2
 80034e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	220f      	movs	r2, #15
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a43      	ldr	r2, [pc, #268]	@ (8003610 <HAL_GPIO_Init+0x2d8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00d      	beq.n	8003522 <HAL_GPIO_Init+0x1ea>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a42      	ldr	r2, [pc, #264]	@ (8003614 <HAL_GPIO_Init+0x2dc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d007      	beq.n	800351e <HAL_GPIO_Init+0x1e6>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a41      	ldr	r2, [pc, #260]	@ (8003618 <HAL_GPIO_Init+0x2e0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d101      	bne.n	800351a <HAL_GPIO_Init+0x1e2>
 8003516:	2302      	movs	r3, #2
 8003518:	e004      	b.n	8003524 <HAL_GPIO_Init+0x1ec>
 800351a:	2307      	movs	r3, #7
 800351c:	e002      	b.n	8003524 <HAL_GPIO_Init+0x1ec>
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_GPIO_Init+0x1ec>
 8003522:	2300      	movs	r3, #0
 8003524:	69fa      	ldr	r2, [r7, #28]
 8003526:	f002 0203 	and.w	r2, r2, #3
 800352a:	0092      	lsls	r2, r2, #2
 800352c:	4093      	lsls	r3, r2
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4313      	orrs	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003534:	4935      	ldr	r1, [pc, #212]	@ (800360c <HAL_GPIO_Init+0x2d4>)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	3302      	adds	r3, #2
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003542:	4b36      	ldr	r3, [pc, #216]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003566:	4a2d      	ldr	r2, [pc, #180]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800356c:	4b2b      	ldr	r3, [pc, #172]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003590:	4a22      	ldr	r2, [pc, #136]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003596:	4b21      	ldr	r3, [pc, #132]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035ba:	4a18      	ldr	r2, [pc, #96]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c0:	4b16      	ldr	r3, [pc, #88]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e4:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <HAL_GPIO_Init+0x2e4>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	3301      	adds	r3, #1
 80035ee:	61fb      	str	r3, [r7, #28]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	f67f aeae 	bls.w	8003354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035f8:	bf00      	nop
 80035fa:	bf00      	nop
 80035fc:	3724      	adds	r7, #36	@ 0x24
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40023800 	.word	0x40023800
 800360c:	40013800 	.word	0x40013800
 8003610:	40020000 	.word	0x40020000
 8003614:	40020400 	.word	0x40020400
 8003618:	40020800 	.word	0x40020800
 800361c:	40013c00 	.word	0x40013c00

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
 800362c:	4613      	mov	r3, r2
 800362e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003630:	787b      	ldrb	r3, [r7, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800363c:	e003      	b.n	8003646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	041a      	lsls	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	619a      	str	r2, [r3, #24]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e12b      	b.n	80038be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe ffd0 	bl	8002620 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2224      	movs	r2, #36	@ 0x24
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036b8:	f001 fb16 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 80036bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4a81      	ldr	r2, [pc, #516]	@ (80038c8 <HAL_I2C_Init+0x274>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d807      	bhi.n	80036d8 <HAL_I2C_Init+0x84>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4a80      	ldr	r2, [pc, #512]	@ (80038cc <HAL_I2C_Init+0x278>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	bf94      	ite	ls
 80036d0:	2301      	movls	r3, #1
 80036d2:	2300      	movhi	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	e006      	b.n	80036e6 <HAL_I2C_Init+0x92>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a7d      	ldr	r2, [pc, #500]	@ (80038d0 <HAL_I2C_Init+0x27c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	bf94      	ite	ls
 80036e0:	2301      	movls	r3, #1
 80036e2:	2300      	movhi	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0e7      	b.n	80038be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a78      	ldr	r2, [pc, #480]	@ (80038d4 <HAL_I2C_Init+0x280>)
 80036f2:	fba2 2303 	umull	r2, r3, r2, r3
 80036f6:	0c9b      	lsrs	r3, r3, #18
 80036f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	4a6a      	ldr	r2, [pc, #424]	@ (80038c8 <HAL_I2C_Init+0x274>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d802      	bhi.n	8003728 <HAL_I2C_Init+0xd4>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3301      	adds	r3, #1
 8003726:	e009      	b.n	800373c <HAL_I2C_Init+0xe8>
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	4a69      	ldr	r2, [pc, #420]	@ (80038d8 <HAL_I2C_Init+0x284>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	3301      	adds	r3, #1
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	430b      	orrs	r3, r1
 8003742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800374e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	495c      	ldr	r1, [pc, #368]	@ (80038c8 <HAL_I2C_Init+0x274>)
 8003758:	428b      	cmp	r3, r1
 800375a:	d819      	bhi.n	8003790 <HAL_I2C_Init+0x13c>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	1e59      	subs	r1, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	fbb1 f3f3 	udiv	r3, r1, r3
 800376a:	1c59      	adds	r1, r3, #1
 800376c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003770:	400b      	ands	r3, r1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00a      	beq.n	800378c <HAL_I2C_Init+0x138>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	1e59      	subs	r1, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	fbb1 f3f3 	udiv	r3, r1, r3
 8003784:	3301      	adds	r3, #1
 8003786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378a:	e051      	b.n	8003830 <HAL_I2C_Init+0x1dc>
 800378c:	2304      	movs	r3, #4
 800378e:	e04f      	b.n	8003830 <HAL_I2C_Init+0x1dc>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d111      	bne.n	80037bc <HAL_I2C_Init+0x168>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	440b      	add	r3, r1
 80037a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	bf0c      	ite	eq
 80037b4:	2301      	moveq	r3, #1
 80037b6:	2300      	movne	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e012      	b.n	80037e2 <HAL_I2C_Init+0x18e>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	1e58      	subs	r0, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	460b      	mov	r3, r1
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	0099      	lsls	r1, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d2:	3301      	adds	r3, #1
 80037d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <HAL_I2C_Init+0x196>
 80037e6:	2301      	movs	r3, #1
 80037e8:	e022      	b.n	8003830 <HAL_I2C_Init+0x1dc>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10e      	bne.n	8003810 <HAL_I2C_Init+0x1bc>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1e58      	subs	r0, r3, #1
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6859      	ldr	r1, [r3, #4]
 80037fa:	460b      	mov	r3, r1
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	440b      	add	r3, r1
 8003800:	fbb0 f3f3 	udiv	r3, r0, r3
 8003804:	3301      	adds	r3, #1
 8003806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800380e:	e00f      	b.n	8003830 <HAL_I2C_Init+0x1dc>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1e58      	subs	r0, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	0099      	lsls	r1, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	fbb0 f3f3 	udiv	r3, r0, r3
 8003826:	3301      	adds	r3, #1
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	6809      	ldr	r1, [r1, #0]
 8003834:	4313      	orrs	r3, r2
 8003836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	69da      	ldr	r2, [r3, #28]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800385e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6911      	ldr	r1, [r2, #16]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	68d2      	ldr	r2, [r2, #12]
 800386a:	4311      	orrs	r1, r2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	6812      	ldr	r2, [r2, #0]
 8003870:	430b      	orrs	r3, r1
 8003872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	000186a0 	.word	0x000186a0
 80038cc:	001e847f 	.word	0x001e847f
 80038d0:	003d08ff 	.word	0x003d08ff
 80038d4:	431bde83 	.word	0x431bde83
 80038d8:	10624dd3 	.word	0x10624dd3

080038dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	4608      	mov	r0, r1
 80038e6:	4611      	mov	r1, r2
 80038e8:	461a      	mov	r2, r3
 80038ea:	4603      	mov	r3, r0
 80038ec:	817b      	strh	r3, [r7, #10]
 80038ee:	460b      	mov	r3, r1
 80038f0:	813b      	strh	r3, [r7, #8]
 80038f2:	4613      	mov	r3, r2
 80038f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038f6:	f7ff fb4b 	bl	8002f90 <HAL_GetTick>
 80038fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b20      	cmp	r3, #32
 8003906:	f040 80d9 	bne.w	8003abc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	2319      	movs	r3, #25
 8003910:	2201      	movs	r2, #1
 8003912:	496d      	ldr	r1, [pc, #436]	@ (8003ac8 <HAL_I2C_Mem_Write+0x1ec>)
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fdb9 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
 8003922:	e0cc      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_I2C_Mem_Write+0x56>
 800392e:	2302      	movs	r3, #2
 8003930:	e0c5      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b01      	cmp	r3, #1
 8003946:	d007      	beq.n	8003958 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003966:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2221      	movs	r2, #33	@ 0x21
 800396c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2240      	movs	r2, #64	@ 0x40
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a3a      	ldr	r2, [r7, #32]
 8003982:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4a4d      	ldr	r2, [pc, #308]	@ (8003acc <HAL_I2C_Mem_Write+0x1f0>)
 8003998:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800399a:	88f8      	ldrh	r0, [r7, #6]
 800399c:	893a      	ldrh	r2, [r7, #8]
 800399e:	8979      	ldrh	r1, [r7, #10]
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	4603      	mov	r3, r0
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 fbf0 	bl	8004190 <I2C_RequestMemoryWrite>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d052      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e081      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 fe7e 	bl	80046c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00d      	beq.n	80039e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d107      	bne.n	80039e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e06b      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ea:	781a      	ldrb	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	695b      	ldr	r3, [r3, #20]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b04      	cmp	r3, #4
 8003a22:	d11b      	bne.n	8003a5c <HAL_I2C_Mem_Write+0x180>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d017      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1aa      	bne.n	80039ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fe71 	bl	8004750 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00d      	beq.n	8003a90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d107      	bne.n	8003a8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e016      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	e000      	b.n	8003abe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003abc:	2302      	movs	r3, #2
  }
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	00100002 	.word	0x00100002
 8003acc:	ffff0000 	.word	0xffff0000

08003ad0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08c      	sub	sp, #48	@ 0x30
 8003ad4:	af02      	add	r7, sp, #8
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	461a      	mov	r2, r3
 8003ade:	4603      	mov	r3, r0
 8003ae0:	817b      	strh	r3, [r7, #10]
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	813b      	strh	r3, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aea:	f7ff fa51 	bl	8002f90 <HAL_GetTick>
 8003aee:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b20      	cmp	r3, #32
 8003afa:	f040 8214 	bne.w	8003f26 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b00:	9300      	str	r3, [sp, #0]
 8003b02:	2319      	movs	r3, #25
 8003b04:	2201      	movs	r2, #1
 8003b06:	497b      	ldr	r1, [pc, #492]	@ (8003cf4 <HAL_I2C_Mem_Read+0x224>)
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f000 fcbf 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b14:	2302      	movs	r3, #2
 8003b16:	e207      	b.n	8003f28 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <HAL_I2C_Mem_Read+0x56>
 8003b22:	2302      	movs	r3, #2
 8003b24:	e200      	b.n	8003f28 <HAL_I2C_Mem_Read+0x458>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d007      	beq.n	8003b4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2222      	movs	r2, #34	@ 0x22
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2240      	movs	r2, #64	@ 0x40
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b76:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cf8 <HAL_I2C_Mem_Read+0x228>)
 8003b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b8e:	88f8      	ldrh	r0, [r7, #6]
 8003b90:	893a      	ldrh	r2, [r7, #8]
 8003b92:	8979      	ldrh	r1, [r7, #10]
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 fb8c 	bl	80042bc <I2C_RequestMemoryRead>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e1bc      	b.n	8003f28 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d113      	bne.n	8003bde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	623b      	str	r3, [r7, #32]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	623b      	str	r3, [r7, #32]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e190      	b.n	8003f00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d11b      	bne.n	8003c1e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	e170      	b.n	8003f00 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d11b      	bne.n	8003c5e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c46:	2300      	movs	r3, #0
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	e150      	b.n	8003f00 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c5e:	2300      	movs	r3, #0
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	699b      	ldr	r3, [r3, #24]
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c74:	e144      	b.n	8003f00 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	f200 80f1 	bhi.w	8003e62 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d123      	bne.n	8003cd0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fda7 	bl	80047e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e145      	b.n	8003f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	691a      	ldr	r2, [r3, #16]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cce:	e117      	b.n	8003f00 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d14e      	bne.n	8003d76 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cde:	2200      	movs	r2, #0
 8003ce0:	4906      	ldr	r1, [pc, #24]	@ (8003cfc <HAL_I2C_Mem_Read+0x22c>)
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 fbd2 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e11a      	b.n	8003f28 <HAL_I2C_Mem_Read+0x458>
 8003cf2:	bf00      	nop
 8003cf4:	00100002 	.word	0x00100002
 8003cf8:	ffff0000 	.word	0xffff0000
 8003cfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691a      	ldr	r2, [r3, #16]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d74:	e0c4      	b.n	8003f00 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	496c      	ldr	r1, [pc, #432]	@ (8003f30 <HAL_I2C_Mem_Read+0x460>)
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fb83 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e0cb      	b.n	8003f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691a      	ldr	r2, [r3, #16]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd8:	2200      	movs	r2, #0
 8003dda:	4955      	ldr	r1, [pc, #340]	@ (8003f30 <HAL_I2C_Mem_Read+0x460>)
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 fb55 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e09d      	b.n	8003f28 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dfa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691a      	ldr	r2, [r3, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e60:	e04e      	b.n	8003f00 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e64:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fcba 	bl	80047e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e058      	b.n	8003f28 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691a      	ldr	r2, [r3, #16]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d124      	bne.n	8003f00 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d107      	bne.n	8003ece <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ecc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	691a      	ldr	r2, [r3, #16]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed8:	b2d2      	uxtb	r2, r2
 8003eda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f47f aeb6 	bne.w	8003c76 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e000      	b.n	8003f28 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
  }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3728      	adds	r7, #40	@ 0x28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	00010004 	.word	0x00010004

08003f34 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	@ 0x28
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	460b      	mov	r3, r1
 8003f42:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f44:	f7ff f824 	bl	8002f90 <HAL_GetTick>
 8003f48:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	f040 8111 	bne.w	800417e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	2319      	movs	r3, #25
 8003f62:	2201      	movs	r2, #1
 8003f64:	4988      	ldr	r1, [pc, #544]	@ (8004188 <HAL_I2C_IsDeviceReady+0x254>)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fa90 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f72:	2302      	movs	r3, #2
 8003f74:	e104      	b.n	8004180 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_I2C_IsDeviceReady+0x50>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e0fd      	b.n	8004180 <HAL_I2C_IsDeviceReady+0x24c>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d007      	beq.n	8003faa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2224      	movs	r2, #36	@ 0x24
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4a70      	ldr	r2, [pc, #448]	@ (800418c <HAL_I2C_IsDeviceReady+0x258>)
 8003fcc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fea:	68f8      	ldr	r0, [r7, #12]
 8003fec:	f000 fa4e 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00d      	beq.n	8004012 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004004:	d103      	bne.n	800400e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800400c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e0b6      	b.n	8004180 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004012:	897b      	ldrh	r3, [r7, #10]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004020:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004022:	f7fe ffb5 	bl	8002f90 <HAL_GetTick>
 8004026:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b02      	cmp	r3, #2
 8004034:	bf0c      	ite	eq
 8004036:	2301      	moveq	r3, #1
 8004038:	2300      	movne	r3, #0
 800403a:	b2db      	uxtb	r3, r3
 800403c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800404c:	bf0c      	ite	eq
 800404e:	2301      	moveq	r3, #1
 8004050:	2300      	movne	r3, #0
 8004052:	b2db      	uxtb	r3, r3
 8004054:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004056:	e025      	b.n	80040a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004058:	f7fe ff9a 	bl	8002f90 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <HAL_I2C_IsDeviceReady+0x13a>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d103      	bne.n	8004076 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	22a0      	movs	r2, #160	@ 0xa0
 8004072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004096:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80040ae:	d005      	beq.n	80040bc <HAL_I2C_IsDeviceReady+0x188>
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_I2C_IsDeviceReady+0x188>
 80040b6:	7dbb      	ldrb	r3, [r7, #22]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0cd      	beq.n	8004058 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d129      	bne.n	8004126 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e2:	2300      	movs	r3, #0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	613b      	str	r3, [r7, #16]
 80040f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2319      	movs	r3, #25
 80040fe:	2201      	movs	r2, #1
 8004100:	4921      	ldr	r1, [pc, #132]	@ (8004188 <HAL_I2C_IsDeviceReady+0x254>)
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f000 f9c2 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d001      	beq.n	8004112 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e036      	b.n	8004180 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e02c      	b.n	8004180 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004134:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800413e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	2319      	movs	r3, #25
 8004146:	2201      	movs	r2, #1
 8004148:	490f      	ldr	r1, [pc, #60]	@ (8004188 <HAL_I2C_IsDeviceReady+0x254>)
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 f99e 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e012      	b.n	8004180 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	3301      	adds	r3, #1
 800415e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	429a      	cmp	r2, r3
 8004166:	f4ff af32 	bcc.w	8003fce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	4618      	mov	r0, r3
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	00100002 	.word	0x00100002
 800418c:	ffff0000 	.word	0xffff0000

08004190 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b088      	sub	sp, #32
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	461a      	mov	r2, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	817b      	strh	r3, [r7, #10]
 80041a2:	460b      	mov	r3, r1
 80041a4:	813b      	strh	r3, [r7, #8]
 80041a6:	4613      	mov	r3, r2
 80041a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f960 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00d      	beq.n	80041ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041e0:	d103      	bne.n	80041ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e05f      	b.n	80042ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ee:	897b      	ldrh	r3, [r7, #10]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	6a3a      	ldr	r2, [r7, #32]
 8004202:	492d      	ldr	r1, [pc, #180]	@ (80042b8 <I2C_RequestMemoryWrite+0x128>)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f9bb 	bl	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e04c      	b.n	80042ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800422a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800422c:	6a39      	ldr	r1, [r7, #32]
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fa46 	bl	80046c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00d      	beq.n	8004256 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	2b04      	cmp	r3, #4
 8004240:	d107      	bne.n	8004252 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004250:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e02b      	b.n	80042ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004256:	88fb      	ldrh	r3, [r7, #6]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d105      	bne.n	8004268 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800425c:	893b      	ldrh	r3, [r7, #8]
 800425e:	b2da      	uxtb	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	611a      	str	r2, [r3, #16]
 8004266:	e021      	b.n	80042ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004268:	893b      	ldrh	r3, [r7, #8]
 800426a:	0a1b      	lsrs	r3, r3, #8
 800426c:	b29b      	uxth	r3, r3
 800426e:	b2da      	uxtb	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004278:	6a39      	ldr	r1, [r7, #32]
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fa20 	bl	80046c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	2b04      	cmp	r3, #4
 800428c:	d107      	bne.n	800429e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800429c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e005      	b.n	80042ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042a2:	893b      	ldrh	r3, [r7, #8]
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	00010002 	.word	0x00010002

080042bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af02      	add	r7, sp, #8
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	4608      	mov	r0, r1
 80042c6:	4611      	mov	r1, r2
 80042c8:	461a      	mov	r2, r3
 80042ca:	4603      	mov	r3, r0
 80042cc:	817b      	strh	r3, [r7, #10]
 80042ce:	460b      	mov	r3, r1
 80042d0:	813b      	strh	r3, [r7, #8]
 80042d2:	4613      	mov	r3, r2
 80042d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f000 f8c2 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00d      	beq.n	800432a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800431c:	d103      	bne.n	8004326 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004324:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0aa      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800432a:	897b      	ldrh	r3, [r7, #10]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004338:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	4952      	ldr	r1, [pc, #328]	@ (8004488 <I2C_RequestMemoryRead+0x1cc>)
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f91d 	bl	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e097      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004350:	2300      	movs	r3, #0
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004368:	6a39      	ldr	r1, [r7, #32]
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f9a8 	bl	80046c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00d      	beq.n	8004392 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	2b04      	cmp	r3, #4
 800437c:	d107      	bne.n	800438e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e076      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004392:	88fb      	ldrh	r3, [r7, #6]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d105      	bne.n	80043a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004398:	893b      	ldrh	r3, [r7, #8]
 800439a:	b2da      	uxtb	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	611a      	str	r2, [r3, #16]
 80043a2:	e021      	b.n	80043e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043a4:	893b      	ldrh	r3, [r7, #8]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b4:	6a39      	ldr	r1, [r7, #32]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f982 	bl	80046c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d107      	bne.n	80043da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e050      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043de:	893b      	ldrh	r3, [r7, #8]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ea:	6a39      	ldr	r1, [r7, #32]
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f967 	bl	80046c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d00d      	beq.n	8004414 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d107      	bne.n	8004410 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800440e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e035      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004422:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	2200      	movs	r2, #0
 800442c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 f82b 	bl	800448c <I2C_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00d      	beq.n	8004458 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800444a:	d103      	bne.n	8004454 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004452:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e013      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004458:	897b      	ldrh	r3, [r7, #10]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446a:	6a3a      	ldr	r2, [r7, #32]
 800446c:	4906      	ldr	r1, [pc, #24]	@ (8004488 <I2C_RequestMemoryRead+0x1cc>)
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	f000 f886 	bl	8004580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	00010002 	.word	0x00010002

0800448c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800449c:	e048      	b.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a4:	d044      	beq.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a6:	f7fe fd73 	bl	8002f90 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d302      	bcc.n	80044bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d139      	bne.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	0c1b      	lsrs	r3, r3, #16
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d10d      	bne.n	80044e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	43da      	mvns	r2, r3
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	4013      	ands	r3, r2
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	e00c      	b.n	80044fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	43da      	mvns	r2, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4013      	ands	r3, r2
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	bf0c      	ite	eq
 80044f4:	2301      	moveq	r3, #1
 80044f6:	2300      	movne	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	79fb      	ldrb	r3, [r7, #7]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d116      	bne.n	8004530 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e023      	b.n	8004578 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	0c1b      	lsrs	r3, r3, #16
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10d      	bne.n	8004556 <I2C_WaitOnFlagUntilTimeout+0xca>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	43da      	mvns	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	461a      	mov	r2, r3
 8004554:	e00c      	b.n	8004570 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	43da      	mvns	r2, r3
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	4013      	ands	r3, r2
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	461a      	mov	r2, r3
 8004570:	79fb      	ldrb	r3, [r7, #7]
 8004572:	429a      	cmp	r2, r3
 8004574:	d093      	beq.n	800449e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800458e:	e071      	b.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800459a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800459e:	d123      	bne.n	80045e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	f043 0204 	orr.w	r2, r3, #4
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e067      	b.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d041      	beq.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f0:	f7fe fcce 	bl	8002f90 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d302      	bcc.n	8004606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d136      	bne.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	0c1b      	lsrs	r3, r3, #16
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b01      	cmp	r3, #1
 800460e:	d10c      	bne.n	800462a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	43da      	mvns	r2, r3
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	b29b      	uxth	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	bf14      	ite	ne
 8004622:	2301      	movne	r3, #1
 8004624:	2300      	moveq	r3, #0
 8004626:	b2db      	uxtb	r3, r3
 8004628:	e00b      	b.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	43da      	mvns	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	4013      	ands	r3, r2
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d016      	beq.n	8004674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2220      	movs	r2, #32
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004660:	f043 0220 	orr.w	r2, r3, #32
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e021      	b.n	80046b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10c      	bne.n	8004698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	43da      	mvns	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e00b      	b.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4013      	ands	r3, r2
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f47f af6d 	bne.w	8004590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3710      	adds	r7, #16
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046cc:	e034      	b.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f8e3 	bl	800489a <I2C_IsAcknowledgeFailed>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e034      	b.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e4:	d028      	beq.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046e6:	f7fe fc53 	bl	8002f90 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d302      	bcc.n	80046fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d11d      	bne.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b80      	cmp	r3, #128	@ 0x80
 8004708:	d016      	beq.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	f043 0220 	orr.w	r2, r3, #32
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e007      	b.n	8004748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004742:	2b80      	cmp	r3, #128	@ 0x80
 8004744:	d1c3      	bne.n	80046ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800475c:	e034      	b.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 f89b 	bl	800489a <I2C_IsAcknowledgeFailed>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e034      	b.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d028      	beq.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004776:	f7fe fc0b 	bl	8002f90 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	429a      	cmp	r2, r3
 8004784:	d302      	bcc.n	800478c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d11d      	bne.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0304 	and.w	r3, r3, #4
 8004796:	2b04      	cmp	r3, #4
 8004798:	d016      	beq.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b4:	f043 0220 	orr.w	r2, r3, #32
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e007      	b.n	80047d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d1c3      	bne.n	800475e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047ec:	e049      	b.n	8004882 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d119      	bne.n	8004830 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0210 	mvn.w	r2, #16
 8004804:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e030      	b.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004830:	f7fe fbae 	bl	8002f90 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	429a      	cmp	r2, r3
 800483e:	d302      	bcc.n	8004846 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d11d      	bne.n	8004882 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	d016      	beq.n	8004882 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e007      	b.n	8004892 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488c:	2b40      	cmp	r3, #64	@ 0x40
 800488e:	d1ae      	bne.n	80047ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800489a:	b480      	push	{r7}
 800489c:	b083      	sub	sp, #12
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b0:	d11b      	bne.n	80048ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2220      	movs	r2, #32
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	f043 0204 	orr.w	r2, r3, #4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e0cc      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800490c:	4b68      	ldr	r3, [pc, #416]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0307 	and.w	r3, r3, #7
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d90c      	bls.n	8004934 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b65      	ldr	r3, [pc, #404]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004922:	4b63      	ldr	r3, [pc, #396]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d001      	beq.n	8004934 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0b8      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0302 	and.w	r3, r3, #2
 800493c:	2b00      	cmp	r3, #0
 800493e:	d020      	beq.n	8004982 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800494c:	4b59      	ldr	r3, [pc, #356]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4a58      	ldr	r2, [pc, #352]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004956:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d005      	beq.n	8004970 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004964:	4b53      	ldr	r3, [pc, #332]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	4a52      	ldr	r2, [pc, #328]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800496e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004970:	4b50      	ldr	r3, [pc, #320]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	494d      	ldr	r1, [pc, #308]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d044      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d107      	bne.n	80049a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004996:	4b47      	ldr	r3, [pc, #284]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d119      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e07f      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d003      	beq.n	80049b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d107      	bne.n	80049c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d109      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e06f      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e067      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049d6:	4b37      	ldr	r3, [pc, #220]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f023 0203 	bic.w	r2, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	4934      	ldr	r1, [pc, #208]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049e8:	f7fe fad2 	bl	8002f90 <HAL_GetTick>
 80049ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ee:	e00a      	b.n	8004a06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f0:	f7fe face 	bl	8002f90 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e04f      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a06:	4b2b      	ldr	r3, [pc, #172]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 020c 	and.w	r2, r3, #12
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d1eb      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a18:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	683a      	ldr	r2, [r7, #0]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d20c      	bcs.n	8004a40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a26:	4b22      	ldr	r3, [pc, #136]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	b2d2      	uxtb	r2, r2
 8004a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a2e:	4b20      	ldr	r3, [pc, #128]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e032      	b.n	8004aa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d008      	beq.n	8004a5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a4c:	4b19      	ldr	r3, [pc, #100]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	4916      	ldr	r1, [pc, #88]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a6a:	4b12      	ldr	r3, [pc, #72]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	490e      	ldr	r1, [pc, #56]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a7e:	f000 f821 	bl	8004ac4 <HAL_RCC_GetSysClockFreq>
 8004a82:	4602      	mov	r2, r0
 8004a84:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	091b      	lsrs	r3, r3, #4
 8004a8a:	f003 030f 	and.w	r3, r3, #15
 8004a8e:	490a      	ldr	r1, [pc, #40]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a90:	5ccb      	ldrb	r3, [r1, r3]
 8004a92:	fa22 f303 	lsr.w	r3, r2, r3
 8004a96:	4a09      	ldr	r2, [pc, #36]	@ (8004abc <HAL_RCC_ClockConfig+0x1c4>)
 8004a98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a9a:	4b09      	ldr	r3, [pc, #36]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fe fa32 	bl	8002f08 <HAL_InitTick>

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40023c00 	.word	0x40023c00
 8004ab4:	40023800 	.word	0x40023800
 8004ab8:	08011284 	.word	0x08011284
 8004abc:	200035f8 	.word	0x200035f8
 8004ac0:	200035fc 	.word	0x200035fc

08004ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ac8:	b094      	sub	sp, #80	@ 0x50
 8004aca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004adc:	4b79      	ldr	r3, [pc, #484]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 030c 	and.w	r3, r3, #12
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d00d      	beq.n	8004b04 <HAL_RCC_GetSysClockFreq+0x40>
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	f200 80e1 	bhi.w	8004cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <HAL_RCC_GetSysClockFreq+0x34>
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d003      	beq.n	8004afe <HAL_RCC_GetSysClockFreq+0x3a>
 8004af6:	e0db      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004af8:	4b73      	ldr	r3, [pc, #460]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004afa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004afc:	e0db      	b.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004afe:	4b73      	ldr	r3, [pc, #460]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0x208>)
 8004b00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b02:	e0d8      	b.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b04:	4b6f      	ldr	r3, [pc, #444]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d063      	beq.n	8004be2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	099b      	lsrs	r3, r3, #6
 8004b20:	2200      	movs	r2, #0
 8004b22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b2e:	2300      	movs	r3, #0
 8004b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b36:	4622      	mov	r2, r4
 8004b38:	462b      	mov	r3, r5
 8004b3a:	f04f 0000 	mov.w	r0, #0
 8004b3e:	f04f 0100 	mov.w	r1, #0
 8004b42:	0159      	lsls	r1, r3, #5
 8004b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b48:	0150      	lsls	r0, r2, #5
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4621      	mov	r1, r4
 8004b50:	1a51      	subs	r1, r2, r1
 8004b52:	6139      	str	r1, [r7, #16]
 8004b54:	4629      	mov	r1, r5
 8004b56:	eb63 0301 	sbc.w	r3, r3, r1
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b68:	4659      	mov	r1, fp
 8004b6a:	018b      	lsls	r3, r1, #6
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b72:	4651      	mov	r1, sl
 8004b74:	018a      	lsls	r2, r1, #6
 8004b76:	4651      	mov	r1, sl
 8004b78:	ebb2 0801 	subs.w	r8, r2, r1
 8004b7c:	4659      	mov	r1, fp
 8004b7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b82:	f04f 0200 	mov.w	r2, #0
 8004b86:	f04f 0300 	mov.w	r3, #0
 8004b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b96:	4690      	mov	r8, r2
 8004b98:	4699      	mov	r9, r3
 8004b9a:	4623      	mov	r3, r4
 8004b9c:	eb18 0303 	adds.w	r3, r8, r3
 8004ba0:	60bb      	str	r3, [r7, #8]
 8004ba2:	462b      	mov	r3, r5
 8004ba4:	eb49 0303 	adc.w	r3, r9, r3
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bb6:	4629      	mov	r1, r5
 8004bb8:	024b      	lsls	r3, r1, #9
 8004bba:	4621      	mov	r1, r4
 8004bbc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bc0:	4621      	mov	r1, r4
 8004bc2:	024a      	lsls	r2, r1, #9
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bca:	2200      	movs	r2, #0
 8004bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bd0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bd4:	f7fc f818 	bl	8000c08 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be0:	e058      	b.n	8004c94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004be2:	4b38      	ldr	r3, [pc, #224]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	099b      	lsrs	r3, r3, #6
 8004be8:	2200      	movs	r2, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	4611      	mov	r1, r2
 8004bee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004bf2:	623b      	str	r3, [r7, #32]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bf8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	464b      	mov	r3, r9
 8004c00:	f04f 0000 	mov.w	r0, #0
 8004c04:	f04f 0100 	mov.w	r1, #0
 8004c08:	0159      	lsls	r1, r3, #5
 8004c0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c0e:	0150      	lsls	r0, r2, #5
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4641      	mov	r1, r8
 8004c16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c34:	ebb2 040a 	subs.w	r4, r2, sl
 8004c38:	eb63 050b 	sbc.w	r5, r3, fp
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	00eb      	lsls	r3, r5, #3
 8004c46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c4a:	00e2      	lsls	r2, r4, #3
 8004c4c:	4614      	mov	r4, r2
 8004c4e:	461d      	mov	r5, r3
 8004c50:	4643      	mov	r3, r8
 8004c52:	18e3      	adds	r3, r4, r3
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	464b      	mov	r3, r9
 8004c58:	eb45 0303 	adc.w	r3, r5, r3
 8004c5c:	607b      	str	r3, [r7, #4]
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	f04f 0300 	mov.w	r3, #0
 8004c66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	028b      	lsls	r3, r1, #10
 8004c6e:	4621      	mov	r1, r4
 8004c70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c74:	4621      	mov	r1, r4
 8004c76:	028a      	lsls	r2, r1, #10
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c7e:	2200      	movs	r2, #0
 8004c80:	61bb      	str	r3, [r7, #24]
 8004c82:	61fa      	str	r2, [r7, #28]
 8004c84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c88:	f7fb ffbe 	bl	8000c08 <__aeabi_uldivmod>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	4613      	mov	r3, r2
 8004c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c94:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	0c1b      	lsrs	r3, r3, #16
 8004c9a:	f003 0303 	and.w	r3, r3, #3
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004ca4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cae:	e002      	b.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cb0:	4b05      	ldr	r3, [pc, #20]	@ (8004cc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3750      	adds	r7, #80	@ 0x50
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	00f42400 	.word	0x00f42400
 8004ccc:	007a1200 	.word	0x007a1200

08004cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd4:	4b03      	ldr	r3, [pc, #12]	@ (8004ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	200035f8 	.word	0x200035f8

08004ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cec:	f7ff fff0 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	0a9b      	lsrs	r3, r3, #10
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4903      	ldr	r1, [pc, #12]	@ (8004d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40023800 	.word	0x40023800
 8004d0c:	08011294 	.word	0x08011294

08004d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d14:	f7ff ffdc 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	0b5b      	lsrs	r3, r3, #13
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	4903      	ldr	r1, [pc, #12]	@ (8004d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d26:	5ccb      	ldrb	r3, [r1, r3]
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40023800 	.word	0x40023800
 8004d34:	08011294 	.word	0x08011294

08004d38 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 8083 	beq.w	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	4b61      	ldr	r3, [pc, #388]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d5e:	4a60      	ldr	r2, [pc, #384]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004d60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d66:	4b5e      	ldr	r3, [pc, #376]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d6e:	60fb      	str	r3, [r7, #12]
 8004d70:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d72:	4b5c      	ldr	r3, [pc, #368]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a5b      	ldr	r2, [pc, #364]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d7c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d7e:	f7fe f907 	bl	8002f90 <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d86:	f7fe f903 	bl	8002f90 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e09f      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d98:	4b52      	ldr	r3, [pc, #328]	@ (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004da4:	4b4e      	ldr	r3, [pc, #312]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02f      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d028      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc2:	4b47      	ldr	r3, [pc, #284]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dcc:	4b46      	ldr	r3, [pc, #280]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dd2:	4b45      	ldr	r3, [pc, #276]	@ (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dd8:	4a41      	ldr	r2, [pc, #260]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dde:	4b40      	ldr	r3, [pc, #256]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d114      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dea:	f7fe f8d1 	bl	8002f90 <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df0:	e00a      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df2:	f7fe f8cd 	bl	8002f90 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0xd0>
          {
            return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e067      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e08:	4b35      	ldr	r3, [pc, #212]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0ee      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xba>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e20:	d10d      	bne.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004e22:	4b2f      	ldr	r3, [pc, #188]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e36:	492a      	ldr	r1, [pc, #168]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	608b      	str	r3, [r1, #8]
 8004e3c:	e005      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8004e3e:	4b28      	ldr	r3, [pc, #160]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	4a27      	ldr	r2, [pc, #156]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e44:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e48:	6093      	str	r3, [r2, #8]
 8004e4a:	4b25      	ldr	r3, [pc, #148]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e56:	4922      	ldr	r1, [pc, #136]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	7d1a      	ldrb	r2, [r3, #20]
 8004e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8004eec <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e6e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00a      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004e7c:	4b18      	ldr	r3, [pc, #96]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	4915      	ldr	r1, [pc, #84]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ea4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	490c      	ldr	r1, [pc, #48]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }

  /*---------------------------- I2S Configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0301 	and.w	r3, r3, #1
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));

    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
 8004ec0:	4b07      	ldr	r3, [pc, #28]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ec6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	4904      	ldr	r1, [pc, #16]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40007000 	.word	0x40007000
 8004ee8:	42470e40 	.word	0x42470e40
 8004eec:	424711e0 	.word	0x424711e0

08004ef0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e273      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d075      	beq.n	8004ffa <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f0e:	4b88      	ldr	r3, [pc, #544]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d00c      	beq.n	8004f34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f1a:	4b85      	ldr	r3, [pc, #532]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d112      	bne.n	8004f4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f26:	4b82      	ldr	r3, [pc, #520]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f32:	d10b      	bne.n	8004f4c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f34:	4b7e      	ldr	r3, [pc, #504]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d05b      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x108>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d157      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e24e      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f54:	d106      	bne.n	8004f64 <HAL_RCC_OscConfig+0x74>
 8004f56:	4b76      	ldr	r3, [pc, #472]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a75      	ldr	r2, [pc, #468]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e01d      	b.n	8004fa0 <HAL_RCC_OscConfig+0xb0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x98>
 8004f6e:	4b70      	ldr	r3, [pc, #448]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a6f      	ldr	r2, [pc, #444]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	4b6d      	ldr	r3, [pc, #436]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a6c      	ldr	r2, [pc, #432]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e00b      	b.n	8004fa0 <HAL_RCC_OscConfig+0xb0>
 8004f88:	4b69      	ldr	r3, [pc, #420]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a68      	ldr	r2, [pc, #416]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	4b66      	ldr	r3, [pc, #408]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a65      	ldr	r2, [pc, #404]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d013      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fd fff2 	bl	8002f90 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb0:	f7fd ffee 	bl	8002f90 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	@ 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e213      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc2:	4b5b      	ldr	r3, [pc, #364]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0xc0>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fd ffde 	bl	8002f90 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd8:	f7fd ffda 	bl	8002f90 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b64      	cmp	r3, #100	@ 0x64
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e1ff      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fea:	4b51      	ldr	r3, [pc, #324]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0xe8>
 8004ff6:	e000      	b.n	8004ffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d063      	beq.n	80050ce <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005006:	4b4a      	ldr	r3, [pc, #296]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005012:	4b47      	ldr	r3, [pc, #284]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800501a:	2b08      	cmp	r3, #8
 800501c:	d11c      	bne.n	8005058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800501e:	4b44      	ldr	r3, [pc, #272]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d116      	bne.n	8005058 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800502a:	4b41      	ldr	r3, [pc, #260]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_RCC_OscConfig+0x152>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d001      	beq.n	8005042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e1d3      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005042:	4b3b      	ldr	r3, [pc, #236]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	4937      	ldr	r1, [pc, #220]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8005052:	4313      	orrs	r3, r2
 8005054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005056:	e03a      	b.n	80050ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d020      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005060:	4b34      	ldr	r3, [pc, #208]	@ (8005134 <HAL_RCC_OscConfig+0x244>)
 8005062:	2201      	movs	r2, #1
 8005064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005066:	f7fd ff93 	bl	8002f90 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800506e:	f7fd ff8f 	bl	8002f90 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e1b4      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005080:	4b2b      	ldr	r3, [pc, #172]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f0      	beq.n	800506e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800508c:	4b28      	ldr	r3, [pc, #160]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4925      	ldr	r1, [pc, #148]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 800509c:	4313      	orrs	r3, r2
 800509e:	600b      	str	r3, [r1, #0]
 80050a0:	e015      	b.n	80050ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050a2:	4b24      	ldr	r3, [pc, #144]	@ (8005134 <HAL_RCC_OscConfig+0x244>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a8:	f7fd ff72 	bl	8002f90 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b0:	f7fd ff6e 	bl	8002f90 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e193      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d036      	beq.n	8005148 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d016      	beq.n	8005110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050e2:	4b15      	ldr	r3, [pc, #84]	@ (8005138 <HAL_RCC_OscConfig+0x248>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e8:	f7fd ff52 	bl	8002f90 <HAL_GetTick>
 80050ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050f0:	f7fd ff4e 	bl	8002f90 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e173      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005102:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <HAL_RCC_OscConfig+0x240>)
 8005104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005106:	f003 0302 	and.w	r3, r3, #2
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCC_OscConfig+0x200>
 800510e:	e01b      	b.n	8005148 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005110:	4b09      	ldr	r3, [pc, #36]	@ (8005138 <HAL_RCC_OscConfig+0x248>)
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fd ff3b 	bl	8002f90 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800511c:	e00e      	b.n	800513c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800511e:	f7fd ff37 	bl	8002f90 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d907      	bls.n	800513c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e15c      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
 8005130:	40023800 	.word	0x40023800
 8005134:	42470000 	.word	0x42470000
 8005138:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800513c:	4b8a      	ldr	r3, [pc, #552]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 800513e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1ea      	bne.n	800511e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8097 	beq.w	8005284 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005156:	2300      	movs	r3, #0
 8005158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800515a:	4b83      	ldr	r3, [pc, #524]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10f      	bne.n	8005186 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005166:	2300      	movs	r3, #0
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	4b7f      	ldr	r3, [pc, #508]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	4a7e      	ldr	r2, [pc, #504]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005174:	6413      	str	r3, [r2, #64]	@ 0x40
 8005176:	4b7c      	ldr	r3, [pc, #496]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005182:	2301      	movs	r3, #1
 8005184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005186:	4b79      	ldr	r3, [pc, #484]	@ (800536c <HAL_RCC_OscConfig+0x47c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518e:	2b00      	cmp	r3, #0
 8005190:	d118      	bne.n	80051c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005192:	4b76      	ldr	r3, [pc, #472]	@ (800536c <HAL_RCC_OscConfig+0x47c>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a75      	ldr	r2, [pc, #468]	@ (800536c <HAL_RCC_OscConfig+0x47c>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800519e:	f7fd fef7 	bl	8002f90 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a4:	e008      	b.n	80051b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051a6:	f7fd fef3 	bl	8002f90 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e118      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051b8:	4b6c      	ldr	r3, [pc, #432]	@ (800536c <HAL_RCC_OscConfig+0x47c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0f0      	beq.n	80051a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d106      	bne.n	80051da <HAL_RCC_OscConfig+0x2ea>
 80051cc:	4b66      	ldr	r3, [pc, #408]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 80051ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d0:	4a65      	ldr	r2, [pc, #404]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d8:	e01c      	b.n	8005214 <HAL_RCC_OscConfig+0x324>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	2b05      	cmp	r3, #5
 80051e0:	d10c      	bne.n	80051fc <HAL_RCC_OscConfig+0x30c>
 80051e2:	4b61      	ldr	r3, [pc, #388]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 80051e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e6:	4a60      	ldr	r2, [pc, #384]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 80051e8:	f043 0304 	orr.w	r3, r3, #4
 80051ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ee:	4b5e      	ldr	r3, [pc, #376]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f2:	4a5d      	ldr	r2, [pc, #372]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 80051f4:	f043 0301 	orr.w	r3, r3, #1
 80051f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051fa:	e00b      	b.n	8005214 <HAL_RCC_OscConfig+0x324>
 80051fc:	4b5a      	ldr	r3, [pc, #360]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005200:	4a59      	ldr	r2, [pc, #356]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 8005202:	f023 0301 	bic.w	r3, r3, #1
 8005206:	6713      	str	r3, [r2, #112]	@ 0x70
 8005208:	4b57      	ldr	r3, [pc, #348]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 800520a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520c:	4a56      	ldr	r2, [pc, #344]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 800520e:	f023 0304 	bic.w	r3, r3, #4
 8005212:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d015      	beq.n	8005248 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521c:	f7fd feb8 	bl	8002f90 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005222:	e00a      	b.n	800523a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005224:	f7fd feb4 	bl	8002f90 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e0d7      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523a:	4b4b      	ldr	r3, [pc, #300]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d0ee      	beq.n	8005224 <HAL_RCC_OscConfig+0x334>
 8005246:	e014      	b.n	8005272 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fd fea2 	bl	8002f90 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800524e:	e00a      	b.n	8005266 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005250:	f7fd fe9e 	bl	8002f90 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525e:	4293      	cmp	r3, r2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e0c1      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005266:	4b40      	ldr	r3, [pc, #256]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 8005268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1ee      	bne.n	8005250 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005272:	7dfb      	ldrb	r3, [r7, #23]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d105      	bne.n	8005284 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005278:	4b3b      	ldr	r3, [pc, #236]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 800527a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527c:	4a3a      	ldr	r2, [pc, #232]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 800527e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005282:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 80ad 	beq.w	80053e8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800528e:	4b36      	ldr	r3, [pc, #216]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	f003 030c 	and.w	r3, r3, #12
 8005296:	2b08      	cmp	r3, #8
 8005298:	d060      	beq.n	800535c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d145      	bne.n	800532e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052a2:	4b33      	ldr	r3, [pc, #204]	@ (8005370 <HAL_RCC_OscConfig+0x480>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a8:	f7fd fe72 	bl	8002f90 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052b0:	f7fd fe6e 	bl	8002f90 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e093      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c2:	4b29      	ldr	r3, [pc, #164]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1f0      	bne.n	80052b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69da      	ldr	r2, [r3, #28]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	019b      	lsls	r3, r3, #6
 80052de:	431a      	orrs	r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	3b01      	subs	r3, #1
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	061b      	lsls	r3, r3, #24
 80052f2:	431a      	orrs	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f8:	071b      	lsls	r3, r3, #28
 80052fa:	491b      	ldr	r1, [pc, #108]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005300:	4b1b      	ldr	r3, [pc, #108]	@ (8005370 <HAL_RCC_OscConfig+0x480>)
 8005302:	2201      	movs	r2, #1
 8005304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005306:	f7fd fe43 	bl	8002f90 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800530e:	f7fd fe3f 	bl	8002f90 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e064      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005320:	4b11      	ldr	r3, [pc, #68]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0x41e>
 800532c:	e05c      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800532e:	4b10      	ldr	r3, [pc, #64]	@ (8005370 <HAL_RCC_OscConfig+0x480>)
 8005330:	2200      	movs	r2, #0
 8005332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fd fe2c 	bl	8002f90 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800533c:	f7fd fe28 	bl	8002f90 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e04d      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534e:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <HAL_RCC_OscConfig+0x478>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1f0      	bne.n	800533c <HAL_RCC_OscConfig+0x44c>
 800535a:	e045      	b.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d107      	bne.n	8005374 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e040      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
 8005368:	40023800 	.word	0x40023800
 800536c:	40007000 	.word	0x40007000
 8005370:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005374:	4b1f      	ldr	r3, [pc, #124]	@ (80053f4 <HAL_RCC_OscConfig+0x504>)
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d030      	beq.n	80053e4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800538c:	429a      	cmp	r2, r3
 800538e:	d129      	bne.n	80053e4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539a:	429a      	cmp	r2, r3
 800539c:	d122      	bne.n	80053e4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80053a4:	4013      	ands	r3, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d119      	bne.n	80053e4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ba:	085b      	lsrs	r3, r3, #1
 80053bc:	3b01      	subs	r3, #1
 80053be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d10f      	bne.n	80053e4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d107      	bne.n	80053e4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053de:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d001      	beq.n	80053e8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e000      	b.n	80053ea <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3718      	adds	r7, #24
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	bf00      	nop
 80053f4:	40023800 	.word	0x40023800

080053f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e073      	b.n	80054f6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	7f5b      	ldrb	r3, [r3, #29]
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fd fba2 	bl	8002b68 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0310 	and.w	r3, r3, #16
 8005434:	2b10      	cmp	r3, #16
 8005436:	d055      	beq.n	80054e4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	22ca      	movs	r2, #202	@ 0xca
 800543e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2253      	movs	r2, #83	@ 0x53
 8005446:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fa49 	bl	80058e0 <RTC_EnterInitMode>
 800544e:	4603      	mov	r3, r0
 8005450:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d12c      	bne.n	80054b2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800546a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6899      	ldr	r1, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	431a      	orrs	r2, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	68d2      	ldr	r2, [r2, #12]
 8005492:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6919      	ldr	r1, [r3, #16]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	041a      	lsls	r2, r3, #16
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa50 	bl	800594e <RTC_ExitInitMode>
 80054ae:	4603      	mov	r3, r0
 80054b0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80054b2:	7bfb      	ldrb	r3, [r7, #15]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d110      	bne.n	80054da <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80054c6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	22ff      	movs	r2, #255	@ 0xff
 80054e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80054e2:	e001      	b.n	80054e8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80054e8:	7bfb      	ldrb	r3, [r7, #15]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054fe:	b590      	push	{r4, r7, lr}
 8005500:	b087      	sub	sp, #28
 8005502:	af00      	add	r7, sp, #0
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	60b9      	str	r1, [r7, #8]
 8005508:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800550a:	2300      	movs	r3, #0
 800550c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	7f1b      	ldrb	r3, [r3, #28]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d101      	bne.n	800551a <HAL_RTC_SetTime+0x1c>
 8005516:	2302      	movs	r3, #2
 8005518:	e087      	b.n	800562a <HAL_RTC_SetTime+0x12c>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2202      	movs	r2, #2
 8005524:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d126      	bne.n	800557a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2200      	movs	r2, #0
 800553e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fa27 	bl	8005998 <RTC_ByteToBcd2>
 800554a:	4603      	mov	r3, r0
 800554c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fa20 	bl	8005998 <RTC_ByteToBcd2>
 8005558:	4603      	mov	r3, r0
 800555a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800555c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	789b      	ldrb	r3, [r3, #2]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fa18 	bl	8005998 <RTC_ByteToBcd2>
 8005568:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800556a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	78db      	ldrb	r3, [r3, #3]
 8005572:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005574:	4313      	orrs	r3, r2
 8005576:	617b      	str	r3, [r7, #20]
 8005578:	e018      	b.n	80055ac <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d102      	bne.n	800558e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2200      	movs	r2, #0
 800558c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	785b      	ldrb	r3, [r3, #1]
 8005598:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800559a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80055a0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	78db      	ldrb	r3, [r3, #3]
 80055a6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	22ca      	movs	r2, #202	@ 0xca
 80055b2:	625a      	str	r2, [r3, #36]	@ 0x24
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2253      	movs	r2, #83	@ 0x53
 80055ba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f98f 	bl	80058e0 <RTC_EnterInitMode>
 80055c2:	4603      	mov	r3, r0
 80055c4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80055c6:	7cfb      	ldrb	r3, [r7, #19]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d120      	bne.n	800560e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80055d6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80055da:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80055ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6899      	ldr	r1, [r3, #8]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	68da      	ldr	r2, [r3, #12]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f9a2 	bl	800594e <RTC_ExitInitMode>
 800560a:	4603      	mov	r3, r0
 800560c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800560e:	7cfb      	ldrb	r3, [r7, #19]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	22ff      	movs	r2, #255	@ 0xff
 8005620:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	771a      	strb	r2, [r3, #28]

  return status;
 8005628:	7cfb      	ldrb	r3, [r7, #19]
}
 800562a:	4618      	mov	r0, r3
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	bd90      	pop	{r4, r7, pc}

08005632 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005664:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005668:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	0c1b      	lsrs	r3, r3, #16
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005674:	b2da      	uxtb	r2, r3
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	0a1b      	lsrs	r3, r3, #8
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005684:	b2da      	uxtb	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005692:	b2da      	uxtb	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	0d9b      	lsrs	r3, r3, #22
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d11a      	bne.n	80056e4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f98e 	bl	80059d4 <RTC_Bcd2ToByte>
 80056b8:	4603      	mov	r3, r0
 80056ba:	461a      	mov	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 f985 	bl	80059d4 <RTC_Bcd2ToByte>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	789b      	ldrb	r3, [r3, #2]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f97c 	bl	80059d4 <RTC_Bcd2ToByte>
 80056dc:	4603      	mov	r3, r0
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056ee:	b590      	push	{r4, r7, lr}
 80056f0:	b087      	sub	sp, #28
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	60f8      	str	r0, [r7, #12]
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	7f1b      	ldrb	r3, [r3, #28]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d101      	bne.n	800570a <HAL_RTC_SetDate+0x1c>
 8005706:	2302      	movs	r3, #2
 8005708:	e071      	b.n	80057ee <HAL_RTC_SetDate+0x100>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2202      	movs	r2, #2
 8005714:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10e      	bne.n	800573a <HAL_RTC_SetDate+0x4c>
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	785b      	ldrb	r3, [r3, #1]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	d008      	beq.n	800573a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	f023 0310 	bic.w	r3, r3, #16
 8005730:	b2db      	uxtb	r3, r3
 8005732:	330a      	adds	r3, #10
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11c      	bne.n	800577a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	78db      	ldrb	r3, [r3, #3]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 f927 	bl	8005998 <RTC_ByteToBcd2>
 800574a:	4603      	mov	r3, r0
 800574c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	785b      	ldrb	r3, [r3, #1]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f920 	bl	8005998 <RTC_ByteToBcd2>
 8005758:	4603      	mov	r3, r0
 800575a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800575c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	789b      	ldrb	r3, [r3, #2]
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f918 	bl	8005998 <RTC_ByteToBcd2>
 8005768:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800576a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e00e      	b.n	8005798 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	78db      	ldrb	r3, [r3, #3]
 800577e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	785b      	ldrb	r3, [r3, #1]
 8005784:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005786:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800578c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	22ca      	movs	r2, #202	@ 0xca
 800579e:	625a      	str	r2, [r3, #36]	@ 0x24
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2253      	movs	r2, #83	@ 0x53
 80057a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f899 	bl	80058e0 <RTC_EnterInitMode>
 80057ae:	4603      	mov	r3, r0
 80057b0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80057b2:	7cfb      	ldrb	r3, [r7, #19]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10c      	bne.n	80057d2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80057c2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057c6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 f8c0 	bl	800594e <RTC_ExitInitMode>
 80057ce:	4603      	mov	r3, r0
 80057d0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80057d2:	7cfb      	ldrb	r3, [r7, #19]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2201      	movs	r2, #1
 80057dc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	22ff      	movs	r2, #255	@ 0xff
 80057e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]

  return status;
 80057ec:	7cfb      	ldrb	r3, [r7, #19]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	371c      	adds	r7, #28
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd90      	pop	{r4, r7, pc}

080057f6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b086      	sub	sp, #24
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	60f8      	str	r0, [r7, #12]
 80057fe:	60b9      	str	r1, [r7, #8]
 8005800:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005810:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005814:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	0c1b      	lsrs	r3, r3, #16
 800581a:	b2da      	uxtb	r2, r3
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	0a1b      	lsrs	r3, r3, #8
 8005824:	b2db      	uxtb	r3, r3
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	b2da      	uxtb	r2, r3
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005838:	b2da      	uxtb	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	0b5b      	lsrs	r3, r3, #13
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	b2da      	uxtb	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11a      	bne.n	800588a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	78db      	ldrb	r3, [r3, #3]
 8005858:	4618      	mov	r0, r3
 800585a:	f000 f8bb 	bl	80059d4 <RTC_Bcd2ToByte>
 800585e:	4603      	mov	r3, r0
 8005860:	461a      	mov	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	785b      	ldrb	r3, [r3, #1]
 800586a:	4618      	mov	r0, r3
 800586c:	f000 f8b2 	bl	80059d4 <RTC_Bcd2ToByte>
 8005870:	4603      	mov	r3, r0
 8005872:	461a      	mov	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	789b      	ldrb	r3, [r3, #2]
 800587c:	4618      	mov	r0, r3
 800587e:	f000 f8a9 	bl	80059d4 <RTC_Bcd2ToByte>
 8005882:	4603      	mov	r3, r0
 8005884:	461a      	mov	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a0d      	ldr	r2, [pc, #52]	@ (80058dc <HAL_RTC_WaitForSynchro+0x48>)
 80058a6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058a8:	f7fd fb72 	bl	8002f90 <HAL_GetTick>
 80058ac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058ae:	e009      	b.n	80058c4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058b0:	f7fd fb6e 	bl	8002f90 <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058be:	d901      	bls.n	80058c4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e007      	b.n	80058d4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0ee      	beq.n	80058b0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	00017f5f 	.word	0x00017f5f

080058e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d122      	bne.n	8005944 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800590c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800590e:	f7fd fb3f 	bl	8002f90 <HAL_GetTick>
 8005912:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005914:	e00c      	b.n	8005930 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005916:	f7fd fb3b 	bl	8002f90 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005924:	d904      	bls.n	8005930 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2204      	movs	r2, #4
 800592a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d102      	bne.n	8005944 <RTC_EnterInitMode+0x64>
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d1e8      	bne.n	8005916 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b084      	sub	sp, #16
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68da      	ldr	r2, [r3, #12]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005968:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff ff8b 	bl	8005894 <HAL_RTC_WaitForSynchro>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d004      	beq.n	800598e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2204      	movs	r2, #4
 8005988:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800598e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005990:	4618      	mov	r0, r3
 8005992:	3710      	adds	r7, #16
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}

08005998 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	4603      	mov	r3, r0
 80059a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80059a6:	e005      	b.n	80059b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	3b0a      	subs	r3, #10
 80059b2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	2b09      	cmp	r3, #9
 80059b8:	d8f6      	bhi.n	80059a8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	011b      	lsls	r3, r3, #4
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	79fb      	ldrb	r3, [r7, #7]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	b2db      	uxtb	r3, r3
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	4603      	mov	r3, r0
 80059dc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	091b      	lsrs	r3, r3, #4
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	4413      	add	r3, r2
 8005a02:	b2db      	uxtb	r3, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e07b      	b.n	8005b1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d108      	bne.n	8005a3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a32:	d009      	beq.n	8005a48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	61da      	str	r2, [r3, #28]
 8005a3a:	e005      	b.n	8005a48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fc ff0c 	bl	8002880 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005a90:	431a      	orrs	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f003 0301 	and.w	r3, r3, #1
 8005aae:	431a      	orrs	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ac2:	431a      	orrs	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005acc:	ea42 0103 	orr.w	r1, r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	0c1b      	lsrs	r3, r3, #16
 8005ae6:	f003 0104 	and.w	r1, r3, #4
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	f003 0210 	and.w	r2, r3, #16
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	69da      	ldr	r2, [r3, #28]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b088      	sub	sp, #32
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_SPI_Transmit+0x22>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e12d      	b.n	8005da0 <HAL_SPI_Transmit+0x27e>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b4c:	f7fd fa20 	bl	8002f90 <HAL_GetTick>
 8005b50:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b62:	2302      	movs	r3, #2
 8005b64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b66:	e116      	b.n	8005d96 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <HAL_SPI_Transmit+0x52>
 8005b6e:	88fb      	ldrh	r3, [r7, #6]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d102      	bne.n	8005b7a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b78:	e10d      	b.n	8005d96 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	88fa      	ldrh	r2, [r7, #6]
 8005b98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bc0:	d10f      	bne.n	8005be2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005be0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bec:	2b40      	cmp	r3, #64	@ 0x40
 8005bee:	d007      	beq.n	8005c00 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c08:	d14f      	bne.n	8005caa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d002      	beq.n	8005c18 <HAL_SPI_Transmit+0xf6>
 8005c12:	8afb      	ldrh	r3, [r7, #22]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d142      	bne.n	8005c9e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1c:	881a      	ldrh	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c28:	1c9a      	adds	r2, r3, #2
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c3c:	e02f      	b.n	8005c9e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d112      	bne.n	8005c72 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c50:	881a      	ldrh	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c5c:	1c9a      	adds	r2, r3, #2
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c70:	e015      	b.n	8005c9e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c72:	f7fd f98d 	bl	8002f90 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d803      	bhi.n	8005c8a <HAL_SPI_Transmit+0x168>
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d102      	bne.n	8005c90 <HAL_SPI_Transmit+0x16e>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d106      	bne.n	8005c9e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005c90:	2303      	movs	r3, #3
 8005c92:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005c9c:	e07b      	b.n	8005d96 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1ca      	bne.n	8005c3e <HAL_SPI_Transmit+0x11c>
 8005ca8:	e050      	b.n	8005d4c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <HAL_SPI_Transmit+0x196>
 8005cb2:	8afb      	ldrh	r3, [r7, #22]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d144      	bne.n	8005d42 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	330c      	adds	r3, #12
 8005cc2:	7812      	ldrb	r2, [r2, #0]
 8005cc4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005cde:	e030      	b.n	8005d42 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 0302 	and.w	r3, r3, #2
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d113      	bne.n	8005d16 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	330c      	adds	r3, #12
 8005cf8:	7812      	ldrb	r2, [r2, #0]
 8005cfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d00:	1c5a      	adds	r2, r3, #1
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005d14:	e015      	b.n	8005d42 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d16:	f7fd f93b 	bl	8002f90 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d803      	bhi.n	8005d2e <HAL_SPI_Transmit+0x20c>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2c:	d102      	bne.n	8005d34 <HAL_SPI_Transmit+0x212>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d106      	bne.n	8005d42 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005d40:	e029      	b.n	8005d96 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1c9      	bne.n	8005ce0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d4c:	69ba      	ldr	r2, [r7, #24]
 8005d4e:	6839      	ldr	r1, [r7, #0]
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 f8b1 	bl	8005eb8 <SPI_EndRxTxTransaction>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d002      	beq.n	8005d62 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	e003      	b.n	8005d96 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005d9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	60f8      	str	r0, [r7, #12]
 8005db0:	60b9      	str	r1, [r7, #8]
 8005db2:	603b      	str	r3, [r7, #0]
 8005db4:	4613      	mov	r3, r2
 8005db6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005db8:	f7fd f8ea 	bl	8002f90 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc0:	1a9b      	subs	r3, r3, r2
 8005dc2:	683a      	ldr	r2, [r7, #0]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dc8:	f7fd f8e2 	bl	8002f90 <HAL_GetTick>
 8005dcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005dce:	4b39      	ldr	r3, [pc, #228]	@ (8005eb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	015b      	lsls	r3, r3, #5
 8005dd4:	0d1b      	lsrs	r3, r3, #20
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	fb02 f303 	mul.w	r3, r2, r3
 8005ddc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dde:	e054      	b.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d050      	beq.n	8005e8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005de8:	f7fd f8d2 	bl	8002f90 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d902      	bls.n	8005dfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d13d      	bne.n	8005e7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e16:	d111      	bne.n	8005e3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e20:	d004      	beq.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e2a:	d107      	bne.n	8005e3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e44:	d10f      	bne.n	8005e66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005e64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e017      	b.n	8005eaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e80:	2300      	movs	r3, #0
 8005e82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	3b01      	subs	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4013      	ands	r3, r2
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	bf0c      	ite	eq
 8005e9a:	2301      	moveq	r3, #1
 8005e9c:	2300      	movne	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	79fb      	ldrb	r3, [r7, #7]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d19b      	bne.n	8005de0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3720      	adds	r7, #32
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	200035f8 	.word	0x200035f8

08005eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af02      	add	r7, sp, #8
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	2102      	movs	r1, #2
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff ff6a 	bl	8005da8 <SPI_WaitFlagStateUntilTimeout>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ede:	f043 0220 	orr.w	r2, r3, #32
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e032      	b.n	8005f50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005eea:	4b1b      	ldr	r3, [pc, #108]	@ (8005f58 <SPI_EndRxTxTransaction+0xa0>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1b      	ldr	r2, [pc, #108]	@ (8005f5c <SPI_EndRxTxTransaction+0xa4>)
 8005ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef4:	0d5b      	lsrs	r3, r3, #21
 8005ef6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f08:	d112      	bne.n	8005f30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2200      	movs	r2, #0
 8005f12:	2180      	movs	r1, #128	@ 0x80
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f7ff ff47 	bl	8005da8 <SPI_WaitFlagStateUntilTimeout>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d016      	beq.n	8005f4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f24:	f043 0220 	orr.w	r2, r3, #32
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e00f      	b.n	8005f50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00a      	beq.n	8005f4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f46:	2b80      	cmp	r3, #128	@ 0x80
 8005f48:	d0f2      	beq.n	8005f30 <SPI_EndRxTxTransaction+0x78>
 8005f4a:	e000      	b.n	8005f4e <SPI_EndRxTxTransaction+0x96>
        break;
 8005f4c:	bf00      	nop
  }

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	200035f8 	.word	0x200035f8
 8005f5c:	165e9f81 	.word	0x165e9f81

08005f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e041      	b.n	8005ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fc fce4 	bl	8002954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f000 fb08 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b082      	sub	sp, #8
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e041      	b.n	8006094 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b00      	cmp	r3, #0
 800601a:	d106      	bne.n	800602a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7fc fc73 	bl	8002910 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	3304      	adds	r3, #4
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f000 fab9 	bl	80065b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2201      	movs	r2, #1
 8006056:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d109      	bne.n	80060c0 <HAL_TIM_PWM_Start+0x24>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	bf14      	ite	ne
 80060b8:	2301      	movne	r3, #1
 80060ba:	2300      	moveq	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e022      	b.n	8006106 <HAL_TIM_PWM_Start+0x6a>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d109      	bne.n	80060da <HAL_TIM_PWM_Start+0x3e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	bf14      	ite	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	2300      	moveq	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	e015      	b.n	8006106 <HAL_TIM_PWM_Start+0x6a>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d109      	bne.n	80060f4 <HAL_TIM_PWM_Start+0x58>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	bf14      	ite	ne
 80060ec:	2301      	movne	r3, #1
 80060ee:	2300      	moveq	r3, #0
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	e008      	b.n	8006106 <HAL_TIM_PWM_Start+0x6a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	bf14      	ite	ne
 8006100:	2301      	movne	r3, #1
 8006102:	2300      	moveq	r3, #0
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e059      	b.n	80061c2 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d104      	bne.n	800611e <HAL_TIM_PWM_Start+0x82>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800611c:	e013      	b.n	8006146 <HAL_TIM_PWM_Start+0xaa>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d104      	bne.n	800612e <HAL_TIM_PWM_Start+0x92>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800612c:	e00b      	b.n	8006146 <HAL_TIM_PWM_Start+0xaa>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b08      	cmp	r3, #8
 8006132:	d104      	bne.n	800613e <HAL_TIM_PWM_Start+0xa2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800613c:	e003      	b.n	8006146 <HAL_TIM_PWM_Start+0xaa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2202      	movs	r2, #2
 8006142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2201      	movs	r2, #1
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f000 fcc0 	bl	8006ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1c      	ldr	r2, [pc, #112]	@ (80061cc <HAL_TIM_PWM_Start+0x130>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d107      	bne.n	800616e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800616c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a16      	ldr	r2, [pc, #88]	@ (80061cc <HAL_TIM_PWM_Start+0x130>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d009      	beq.n	800618c <HAL_TIM_PWM_Start+0xf0>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a14      	ldr	r2, [pc, #80]	@ (80061d0 <HAL_TIM_PWM_Start+0x134>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIM_PWM_Start+0xf0>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a13      	ldr	r2, [pc, #76]	@ (80061d4 <HAL_TIM_PWM_Start+0x138>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d111      	bne.n	80061b0 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b06      	cmp	r3, #6
 800619c:	d010      	beq.n	80061c0 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0201 	orr.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ae:	e007      	b.n	80061c0 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f042 0201 	orr.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40010000 	.word	0x40010000
 80061d0:	40000c00 	.word	0x40000c00
 80061d4:	40014000 	.word	0x40014000

080061d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2200      	movs	r2, #0
 80061e8:	6839      	ldr	r1, [r7, #0]
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fc72 	bl	8006ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a29      	ldr	r2, [pc, #164]	@ (800629c <HAL_TIM_PWM_Stop+0xc4>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d117      	bne.n	800622a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6a1a      	ldr	r2, [r3, #32]
 8006200:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006204:	4013      	ands	r3, r2
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10f      	bne.n	800622a <HAL_TIM_PWM_Stop+0x52>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6a1a      	ldr	r2, [r3, #32]
 8006210:	f240 4344 	movw	r3, #1092	@ 0x444
 8006214:	4013      	ands	r3, r2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d107      	bne.n	800622a <HAL_TIM_PWM_Stop+0x52>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006228:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6a1a      	ldr	r2, [r3, #32]
 8006230:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006234:	4013      	ands	r3, r2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10f      	bne.n	800625a <HAL_TIM_PWM_Stop+0x82>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	6a1a      	ldr	r2, [r3, #32]
 8006240:	f240 4344 	movw	r3, #1092	@ 0x444
 8006244:	4013      	ands	r3, r2
 8006246:	2b00      	cmp	r3, #0
 8006248:	d107      	bne.n	800625a <HAL_TIM_PWM_Stop+0x82>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0201 	bic.w	r2, r2, #1
 8006258:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <HAL_TIM_PWM_Stop+0x92>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006268:	e013      	b.n	8006292 <HAL_TIM_PWM_Stop+0xba>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b04      	cmp	r3, #4
 800626e:	d104      	bne.n	800627a <HAL_TIM_PWM_Stop+0xa2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006278:	e00b      	b.n	8006292 <HAL_TIM_PWM_Stop+0xba>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d104      	bne.n	800628a <HAL_TIM_PWM_Stop+0xb2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006288:	e003      	b.n	8006292 <HAL_TIM_PWM_Stop+0xba>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40010000 	.word	0x40010000

080062a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062ac:	2300      	movs	r3, #0
 80062ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062ba:	2302      	movs	r3, #2
 80062bc:	e0ae      	b.n	800641c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b0c      	cmp	r3, #12
 80062ca:	f200 809f 	bhi.w	800640c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062ce:	a201      	add	r2, pc, #4	@ (adr r2, 80062d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d4:	08006309 	.word	0x08006309
 80062d8:	0800640d 	.word	0x0800640d
 80062dc:	0800640d 	.word	0x0800640d
 80062e0:	0800640d 	.word	0x0800640d
 80062e4:	08006349 	.word	0x08006349
 80062e8:	0800640d 	.word	0x0800640d
 80062ec:	0800640d 	.word	0x0800640d
 80062f0:	0800640d 	.word	0x0800640d
 80062f4:	0800638b 	.word	0x0800638b
 80062f8:	0800640d 	.word	0x0800640d
 80062fc:	0800640d 	.word	0x0800640d
 8006300:	0800640d 	.word	0x0800640d
 8006304:	080063cb 	.word	0x080063cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 f9ba 	bl	8006688 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0208 	orr.w	r2, r2, #8
 8006322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	699a      	ldr	r2, [r3, #24]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0204 	bic.w	r2, r2, #4
 8006332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6999      	ldr	r1, [r3, #24]
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	619a      	str	r2, [r3, #24]
      break;
 8006346:	e064      	b.n	8006412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fa00 	bl	8006754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699a      	ldr	r2, [r3, #24]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006362:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	699a      	ldr	r2, [r3, #24]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006372:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6999      	ldr	r1, [r3, #24]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	021a      	lsls	r2, r3, #8
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	619a      	str	r2, [r3, #24]
      break;
 8006388:	e043      	b.n	8006412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	4618      	mov	r0, r3
 8006392:	f000 fa4b 	bl	800682c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f042 0208 	orr.w	r2, r2, #8
 80063a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69da      	ldr	r2, [r3, #28]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f022 0204 	bic.w	r2, r2, #4
 80063b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69d9      	ldr	r1, [r3, #28]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	61da      	str	r2, [r3, #28]
      break;
 80063c8:	e023      	b.n	8006412 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fa95 	bl	8006900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69d9      	ldr	r1, [r3, #28]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	021a      	lsls	r2, r3, #8
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	61da      	str	r2, [r3, #28]
      break;
 800640a:	e002      	b.n	8006412 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	75fb      	strb	r3, [r7, #23]
      break;
 8006410:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3718      	adds	r7, #24
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006438:	2b01      	cmp	r3, #1
 800643a:	d101      	bne.n	8006440 <HAL_TIM_ConfigClockSource+0x1c>
 800643c:	2302      	movs	r3, #2
 800643e:	e0b4      	b.n	80065aa <HAL_TIM_ConfigClockSource+0x186>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800645e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006478:	d03e      	beq.n	80064f8 <HAL_TIM_ConfigClockSource+0xd4>
 800647a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800647e:	f200 8087 	bhi.w	8006590 <HAL_TIM_ConfigClockSource+0x16c>
 8006482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006486:	f000 8086 	beq.w	8006596 <HAL_TIM_ConfigClockSource+0x172>
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800648e:	d87f      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x16c>
 8006490:	2b70      	cmp	r3, #112	@ 0x70
 8006492:	d01a      	beq.n	80064ca <HAL_TIM_ConfigClockSource+0xa6>
 8006494:	2b70      	cmp	r3, #112	@ 0x70
 8006496:	d87b      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x16c>
 8006498:	2b60      	cmp	r3, #96	@ 0x60
 800649a:	d050      	beq.n	800653e <HAL_TIM_ConfigClockSource+0x11a>
 800649c:	2b60      	cmp	r3, #96	@ 0x60
 800649e:	d877      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x16c>
 80064a0:	2b50      	cmp	r3, #80	@ 0x50
 80064a2:	d03c      	beq.n	800651e <HAL_TIM_ConfigClockSource+0xfa>
 80064a4:	2b50      	cmp	r3, #80	@ 0x50
 80064a6:	d873      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x16c>
 80064a8:	2b40      	cmp	r3, #64	@ 0x40
 80064aa:	d058      	beq.n	800655e <HAL_TIM_ConfigClockSource+0x13a>
 80064ac:	2b40      	cmp	r3, #64	@ 0x40
 80064ae:	d86f      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x16c>
 80064b0:	2b30      	cmp	r3, #48	@ 0x30
 80064b2:	d064      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x15a>
 80064b4:	2b30      	cmp	r3, #48	@ 0x30
 80064b6:	d86b      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x16c>
 80064b8:	2b20      	cmp	r3, #32
 80064ba:	d060      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x15a>
 80064bc:	2b20      	cmp	r3, #32
 80064be:	d867      	bhi.n	8006590 <HAL_TIM_ConfigClockSource+0x16c>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d05c      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x15a>
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d05a      	beq.n	800657e <HAL_TIM_ConfigClockSource+0x15a>
 80064c8:	e062      	b.n	8006590 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80064da:	f000 fadb 	bl	8006a94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80064ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	609a      	str	r2, [r3, #8]
      break;
 80064f6:	e04f      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006508:	f000 fac4 	bl	8006a94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800651a:	609a      	str	r2, [r3, #8]
      break;
 800651c:	e03c      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800652a:	461a      	mov	r2, r3
 800652c:	f000 fa38 	bl	80069a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2150      	movs	r1, #80	@ 0x50
 8006536:	4618      	mov	r0, r3
 8006538:	f000 fa91 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 800653c:	e02c      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800654a:	461a      	mov	r2, r3
 800654c:	f000 fa57 	bl	80069fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2160      	movs	r1, #96	@ 0x60
 8006556:	4618      	mov	r0, r3
 8006558:	f000 fa81 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 800655c:	e01c      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800656a:	461a      	mov	r2, r3
 800656c:	f000 fa18 	bl	80069a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2140      	movs	r1, #64	@ 0x40
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fa71 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 800657c:	e00c      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	4610      	mov	r0, r2
 800658a:	f000 fa68 	bl	8006a5e <TIM_ITRx_SetConfig>
      break;
 800658e:	e003      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	73fb      	strb	r3, [r7, #15]
      break;
 8006594:	e000      	b.n	8006598 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006596:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
	...

080065b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006678 <TIM_Base_SetConfig+0xc4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d003      	beq.n	80065d4 <TIM_Base_SetConfig+0x20>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a2b      	ldr	r2, [pc, #172]	@ (800667c <TIM_Base_SetConfig+0xc8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d108      	bne.n	80065e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a23      	ldr	r2, [pc, #140]	@ (8006678 <TIM_Base_SetConfig+0xc4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d00b      	beq.n	8006606 <TIM_Base_SetConfig+0x52>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a22      	ldr	r2, [pc, #136]	@ (800667c <TIM_Base_SetConfig+0xc8>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d007      	beq.n	8006606 <TIM_Base_SetConfig+0x52>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a21      	ldr	r2, [pc, #132]	@ (8006680 <TIM_Base_SetConfig+0xcc>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d003      	beq.n	8006606 <TIM_Base_SetConfig+0x52>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a20      	ldr	r2, [pc, #128]	@ (8006684 <TIM_Base_SetConfig+0xd0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d108      	bne.n	8006618 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	4313      	orrs	r3, r2
 8006616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a0e      	ldr	r2, [pc, #56]	@ (8006678 <TIM_Base_SetConfig+0xc4>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d103      	bne.n	800664c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	691a      	ldr	r2, [r3, #16]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b01      	cmp	r3, #1
 800665c:	d105      	bne.n	800666a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f023 0201 	bic.w	r2, r3, #1
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	611a      	str	r2, [r3, #16]
  }
}
 800666a:	bf00      	nop
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40010000 	.word	0x40010000
 800667c:	40000c00 	.word	0x40000c00
 8006680:	40014000 	.word	0x40014000
 8006684:	40014800 	.word	0x40014800

08006688 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006688:	b480      	push	{r7}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f023 0201 	bic.w	r2, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0303 	bic.w	r3, r3, #3
 80066be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f023 0302 	bic.w	r3, r3, #2
 80066d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	697a      	ldr	r2, [r7, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a1c      	ldr	r2, [pc, #112]	@ (8006750 <TIM_OC1_SetConfig+0xc8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d10c      	bne.n	80066fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 0308 	bic.w	r3, r3, #8
 80066ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a13      	ldr	r2, [pc, #76]	@ (8006750 <TIM_OC1_SetConfig+0xc8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d111      	bne.n	800672a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800670c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	621a      	str	r2, [r3, #32]
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40010000 	.word	0x40010000

08006754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f023 0210 	bic.w	r2, r3, #16
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0320 	bic.w	r3, r3, #32
 800679e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006828 <TIM_OC2_SetConfig+0xd4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d10d      	bne.n	80067d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a15      	ldr	r2, [pc, #84]	@ (8006828 <TIM_OC2_SetConfig+0xd4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d113      	bne.n	8006800 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	40010000 	.word	0x40010000

0800682c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800685a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0303 	bic.w	r3, r3, #3
 8006862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	4313      	orrs	r3, r2
 8006880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1d      	ldr	r2, [pc, #116]	@ (80068fc <TIM_OC3_SetConfig+0xd0>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d10d      	bne.n	80068a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006890:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	021b      	lsls	r3, r3, #8
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a14      	ldr	r2, [pc, #80]	@ (80068fc <TIM_OC3_SetConfig+0xd0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d113      	bne.n	80068d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	621a      	str	r2, [r3, #32]
}
 80068f0:	bf00      	nop
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	40010000 	.word	0x40010000

08006900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800692e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	021b      	lsls	r3, r3, #8
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800694a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	031b      	lsls	r3, r3, #12
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a10      	ldr	r2, [pc, #64]	@ (800699c <TIM_OC4_SetConfig+0x9c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d109      	bne.n	8006974 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	019b      	lsls	r3, r3, #6
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68fa      	ldr	r2, [r7, #12]
 800697e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	621a      	str	r2, [r3, #32]
}
 800698e:	bf00      	nop
 8006990:	371c      	adds	r7, #28
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	40010000 	.word	0x40010000

080069a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f023 0201 	bic.w	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 030a 	bic.w	r3, r3, #10
 80069dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b087      	sub	sp, #28
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	60f8      	str	r0, [r7, #12]
 8006a06:	60b9      	str	r1, [r7, #8]
 8006a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6a1b      	ldr	r3, [r3, #32]
 8006a14:	f023 0210 	bic.w	r2, r3, #16
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	031b      	lsls	r3, r3, #12
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b085      	sub	sp, #20
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a76:	683a      	ldr	r2, [r7, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f043 0307 	orr.w	r3, r3, #7
 8006a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	609a      	str	r2, [r3, #8]
}
 8006a88:	bf00      	nop
 8006a8a:	3714      	adds	r7, #20
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	021a      	lsls	r2, r3, #8
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	431a      	orrs	r2, r3
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	609a      	str	r2, [r3, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f003 031f 	and.w	r3, r3, #31
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a1a      	ldr	r2, [r3, #32]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	43db      	mvns	r3, r3
 8006af6:	401a      	ands	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a1a      	ldr	r2, [r3, #32]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f003 031f 	and.w	r3, r3, #31
 8006b06:	6879      	ldr	r1, [r7, #4]
 8006b08:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	621a      	str	r2, [r3, #32]
}
 8006b12:	bf00      	nop
 8006b14:	371c      	adds	r7, #28
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
	...

08006b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d101      	bne.n	8006b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b34:	2302      	movs	r3, #2
 8006b36:	e041      	b.n	8006bbc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a14      	ldr	r2, [pc, #80]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d009      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a12      	ldr	r2, [pc, #72]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d004      	beq.n	8006b90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a11      	ldr	r2, [pc, #68]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d10c      	bne.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	40010000 	.word	0x40010000
 8006bcc:	40000c00 	.word	0x40000c00
 8006bd0:	40014000 	.word	0x40014000

08006bd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e03d      	b.n	8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	69db      	ldr	r3, [r3, #28]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e04a      	b.n	8006d20 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d106      	bne.n	8006ca4 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fb ff8e 	bl	8002bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2224      	movs	r2, #36	@ 0x24
 8006ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 fc8d 	bl	80075dc <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	691a      	ldr	r2, [r3, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695a      	ldr	r2, [r3, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8006ce0:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	695a      	ldr	r2, [r3, #20]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0208 	orr.w	r2, r2, #8
 8006cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68da      	ldr	r2, [r3, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	695b      	ldr	r3, [r3, #20]
 8006d4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006d66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10f      	bne.n	8006d8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <HAL_UART_IRQHandler+0x66>
 8006d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d003      	beq.n	8006d8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb69 	bl	800745e <UART_Receive_IT>
      return;
 8006d8c:	e25b      	b.n	8007246 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80de 	beq.w	8006f54 <HAL_UART_IRQHandler+0x22c>
 8006d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d9c:	f003 0301 	and.w	r3, r3, #1
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80d1 	beq.w	8006f54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xae>
 8006dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dce:	f043 0201 	orr.w	r2, r3, #1
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <HAL_UART_IRQHandler+0xd2>
 8006de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006df2:	f043 0202 	orr.w	r2, r3, #2
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dfe:	f003 0302 	and.w	r3, r3, #2
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00b      	beq.n	8006e1e <HAL_UART_IRQHandler+0xf6>
 8006e06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e16:	f043 0204 	orr.w	r2, r3, #4
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e22:	f003 0308 	and.w	r3, r3, #8
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d011      	beq.n	8006e4e <HAL_UART_IRQHandler+0x126>
 8006e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d105      	bne.n	8006e42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d005      	beq.n	8006e4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e46:	f043 0208 	orr.w	r2, r3, #8
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 81f2 	beq.w	800723c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5c:	f003 0320 	and.w	r3, r3, #32
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d008      	beq.n	8006e76 <HAL_UART_IRQHandler+0x14e>
 8006e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 faf4 	bl	800745e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e80:	2b40      	cmp	r3, #64	@ 0x40
 8006e82:	bf0c      	ite	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	2300      	movne	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d103      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x17a>
 8006e9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d04f      	beq.n	8006f42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 f9fc 	bl	80072a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb2:	2b40      	cmp	r3, #64	@ 0x40
 8006eb4:	d141      	bne.n	8006f3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3314      	adds	r3, #20
 8006ebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006ec4:	e853 3f00 	ldrex	r3, [r3]
 8006ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006ecc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	3314      	adds	r3, #20
 8006ede:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ee2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ee6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006eee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006ef2:	e841 2300 	strex	r3, r2, [r1]
 8006ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1d9      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d013      	beq.n	8006f32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0e:	4a7e      	ldr	r2, [pc, #504]	@ (8007108 <HAL_UART_IRQHandler+0x3e0>)
 8006f10:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7fc f9eb 	bl	80032f2 <HAL_DMA_Abort_IT>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d016      	beq.n	8006f50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f30:	e00e      	b.n	8006f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f99e 	bl	8007274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f38:	e00a      	b.n	8006f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f99a 	bl	8007274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f40:	e006      	b.n	8006f50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f996 	bl	8007274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006f4e:	e175      	b.n	800723c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f50:	bf00      	nop
    return;
 8006f52:	e173      	b.n	800723c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	f040 814f 	bne.w	80071fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f62:	f003 0310 	and.w	r3, r3, #16
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 8148 	beq.w	80071fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 8141 	beq.w	80071fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60bb      	str	r3, [r7, #8]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	60bb      	str	r3, [r7, #8]
 8006f8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9a:	2b40      	cmp	r3, #64	@ 0x40
 8006f9c:	f040 80b6 	bne.w	800710c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006fac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f000 8145 	beq.w	8007240 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	f080 813e 	bcs.w	8007240 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006fca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fd0:	69db      	ldr	r3, [r3, #28]
 8006fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fd6:	f000 8088 	beq.w	80070ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	330c      	adds	r3, #12
 8006fe0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ff0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007006:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800700a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007012:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800701e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1d9      	bne.n	8006fda <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3314      	adds	r3, #20
 800702c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800702e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007030:	e853 3f00 	ldrex	r3, [r3]
 8007034:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007036:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3314      	adds	r3, #20
 8007046:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800704a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800704e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007052:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007056:	e841 2300 	strex	r3, r2, [r1]
 800705a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800705c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1e1      	bne.n	8007026 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3314      	adds	r3, #20
 8007068:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007072:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007074:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3314      	adds	r3, #20
 8007082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007086:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007088:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800708a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800708c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800708e:	e841 2300 	strex	r3, r2, [r1]
 8007092:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1e3      	bne.n	8007062 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2220      	movs	r2, #32
 800709e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	330c      	adds	r3, #12
 80070ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80070b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070ba:	f023 0310 	bic.w	r3, r3, #16
 80070be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	330c      	adds	r3, #12
 80070c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80070cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80070ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80070da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e3      	bne.n	80070a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fc f894 	bl	8003212 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2202      	movs	r2, #2
 80070ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	1ad3      	subs	r3, r2, r3
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f8c1 	bl	8007288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007106:	e09b      	b.n	8007240 <HAL_UART_IRQHandler+0x518>
 8007108:	08007367 	.word	0x08007367
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007114:	b29b      	uxth	r3, r3
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	f000 808e 	beq.w	8007244 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007128:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 8089 	beq.w	8007244 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	330c      	adds	r3, #12
 8007138:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	e853 3f00 	ldrex	r3, [r3]
 8007140:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007144:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007148:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007156:	647a      	str	r2, [r7, #68]	@ 0x44
 8007158:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800715c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e3      	bne.n	8007132 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	3314      	adds	r3, #20
 8007170:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007174:	e853 3f00 	ldrex	r3, [r3]
 8007178:	623b      	str	r3, [r7, #32]
   return(result);
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	f023 0301 	bic.w	r3, r3, #1
 8007180:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3314      	adds	r3, #20
 800718a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800718e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007190:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007192:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007194:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007196:	e841 2300 	strex	r3, r2, [r1]
 800719a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800719c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d1e3      	bne.n	800716a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2220      	movs	r2, #32
 80071a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	330c      	adds	r3, #12
 80071b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	e853 3f00 	ldrex	r3, [r3]
 80071be:	60fb      	str	r3, [r7, #12]
   return(result);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0310 	bic.w	r3, r3, #16
 80071c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	330c      	adds	r3, #12
 80071d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80071d4:	61fa      	str	r2, [r7, #28]
 80071d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	69b9      	ldr	r1, [r7, #24]
 80071da:	69fa      	ldr	r2, [r7, #28]
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	617b      	str	r3, [r7, #20]
   return(result);
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e3      	bne.n	80071b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f847 	bl	8007288 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071fa:	e023      	b.n	8007244 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007200:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007204:	2b00      	cmp	r3, #0
 8007206:	d009      	beq.n	800721c <HAL_UART_IRQHandler+0x4f4>
 8007208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800720c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f8ba 	bl	800738e <UART_Transmit_IT>
    return;
 800721a:	e014      	b.n	8007246 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800721c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00e      	beq.n	8007246 <HAL_UART_IRQHandler+0x51e>
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800722c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 f8fa 	bl	800742e <UART_EndTransmit_IT>
    return;
 800723a:	e004      	b.n	8007246 <HAL_UART_IRQHandler+0x51e>
    return;
 800723c:	bf00      	nop
 800723e:	e002      	b.n	8007246 <HAL_UART_IRQHandler+0x51e>
      return;
 8007240:	bf00      	nop
 8007242:	e000      	b.n	8007246 <HAL_UART_IRQHandler+0x51e>
      return;
 8007244:	bf00      	nop
  }
}
 8007246:	37e8      	adds	r7, #232	@ 0xe8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b095      	sub	sp, #84	@ 0x54
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	330c      	adds	r3, #12
 80072ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	330c      	adds	r3, #12
 80072c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80072ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072d0:	e841 2300 	strex	r3, r2, [r1]
 80072d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1e5      	bne.n	80072a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	3314      	adds	r3, #20
 80072e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	6a3b      	ldr	r3, [r7, #32]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	f023 0301 	bic.w	r3, r3, #1
 80072f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3314      	adds	r3, #20
 80072fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e5      	bne.n	80072dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007314:	2b01      	cmp	r3, #1
 8007316:	d119      	bne.n	800734c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	330c      	adds	r3, #12
 800731e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	60bb      	str	r3, [r7, #8]
   return(result);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f023 0310 	bic.w	r3, r3, #16
 800732e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	330c      	adds	r3, #12
 8007336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007338:	61ba      	str	r2, [r7, #24]
 800733a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6979      	ldr	r1, [r7, #20]
 800733e:	69ba      	ldr	r2, [r7, #24]
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	613b      	str	r3, [r7, #16]
   return(result);
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e5      	bne.n	8007318 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2220      	movs	r2, #32
 8007350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800735a:	bf00      	nop
 800735c:	3754      	adds	r7, #84	@ 0x54
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b084      	sub	sp, #16
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007372:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2200      	movs	r2, #0
 800737e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f7ff ff77 	bl	8007274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b21      	cmp	r3, #33	@ 0x21
 80073a0:	d13e      	bne.n	8007420 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073aa:	d114      	bne.n	80073d6 <UART_Transmit_IT+0x48>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d110      	bne.n	80073d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	461a      	mov	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	1c9a      	adds	r2, r3, #2
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	621a      	str	r2, [r3, #32]
 80073d4:	e008      	b.n	80073e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	1c59      	adds	r1, r3, #1
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	6211      	str	r1, [r2, #32]
 80073e0:	781a      	ldrb	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	3b01      	subs	r3, #1
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4619      	mov	r1, r3
 80073f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10f      	bne.n	800741c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800740a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68da      	ldr	r2, [r3, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800741a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	e000      	b.n	8007422 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007420:	2302      	movs	r3, #2
  }
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b082      	sub	sp, #8
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68da      	ldr	r2, [r3, #12]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007444:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2220      	movs	r2, #32
 800744a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7ff fefc 	bl	800724c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800745e:	b580      	push	{r7, lr}
 8007460:	b08c      	sub	sp, #48	@ 0x30
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b22      	cmp	r3, #34	@ 0x22
 8007470:	f040 80ae 	bne.w	80075d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800747c:	d117      	bne.n	80074ae <UART_Receive_IT+0x50>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d113      	bne.n	80074ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800748e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	b29b      	uxth	r3, r3
 8007498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749c:	b29a      	uxth	r2, r3
 800749e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074a6:	1c9a      	adds	r2, r3, #2
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80074ac:	e026      	b.n	80074fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80074b4:	2300      	movs	r3, #0
 80074b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c0:	d007      	beq.n	80074d2 <UART_Receive_IT+0x74>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10a      	bne.n	80074e0 <UART_Receive_IT+0x82>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d106      	bne.n	80074e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	e008      	b.n	80074f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ec:	b2da      	uxtb	r2, r3
 80074ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29b      	uxth	r3, r3
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	4619      	mov	r1, r3
 800750a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800750c:	2b00      	cmp	r3, #0
 800750e:	d15d      	bne.n	80075cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	68da      	ldr	r2, [r3, #12]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0220 	bic.w	r2, r2, #32
 800751e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800752e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	695a      	ldr	r2, [r3, #20]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f022 0201 	bic.w	r2, r2, #1
 800753e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007552:	2b01      	cmp	r3, #1
 8007554:	d135      	bne.n	80075c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	330c      	adds	r3, #12
 8007562:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	e853 3f00 	ldrex	r3, [r3]
 800756a:	613b      	str	r3, [r7, #16]
   return(result);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f023 0310 	bic.w	r3, r3, #16
 8007572:	627b      	str	r3, [r7, #36]	@ 0x24
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	330c      	adds	r3, #12
 800757a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800757c:	623a      	str	r2, [r7, #32]
 800757e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007580:	69f9      	ldr	r1, [r7, #28]
 8007582:	6a3a      	ldr	r2, [r7, #32]
 8007584:	e841 2300 	strex	r3, r2, [r1]
 8007588:	61bb      	str	r3, [r7, #24]
   return(result);
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1e5      	bne.n	800755c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0310 	and.w	r3, r3, #16
 800759a:	2b10      	cmp	r3, #16
 800759c:	d10a      	bne.n	80075b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff fe64 	bl	8007288 <HAL_UARTEx_RxEventCallback>
 80075c0:	e002      	b.n	80075c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f7ff fe4c 	bl	8007260 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	e002      	b.n	80075d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	e000      	b.n	80075d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075d0:	2302      	movs	r3, #2
  }
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3730      	adds	r7, #48	@ 0x30
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
	...

080075dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075e0:	b0c0      	sub	sp, #256	@ 0x100
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80075f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f8:	68d9      	ldr	r1, [r3, #12]
 80075fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	ea40 0301 	orr.w	r3, r0, r1
 8007604:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760a:	689a      	ldr	r2, [r3, #8]
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	431a      	orrs	r2, r3
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	431a      	orrs	r2, r3
 800761c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007620:	69db      	ldr	r3, [r3, #28]
 8007622:	4313      	orrs	r3, r2
 8007624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007634:	f021 010c 	bic.w	r1, r1, #12
 8007638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007642:	430b      	orrs	r3, r1
 8007644:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007656:	6999      	ldr	r1, [r3, #24]
 8007658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	ea40 0301 	orr.w	r3, r0, r1
 8007662:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b8f      	ldr	r3, [pc, #572]	@ (80078a8 <UART_SetConfig+0x2cc>)
 800766c:	429a      	cmp	r2, r3
 800766e:	d005      	beq.n	800767c <UART_SetConfig+0xa0>
 8007670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	4b8d      	ldr	r3, [pc, #564]	@ (80078ac <UART_SetConfig+0x2d0>)
 8007678:	429a      	cmp	r2, r3
 800767a:	d104      	bne.n	8007686 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800767c:	f7fd fb48 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8007680:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007684:	e003      	b.n	800768e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007686:	f7fd fb2f 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 800768a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800768e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007692:	69db      	ldr	r3, [r3, #28]
 8007694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007698:	f040 810c 	bne.w	80078b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800769c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076a0:	2200      	movs	r2, #0
 80076a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80076a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80076aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80076ae:	4622      	mov	r2, r4
 80076b0:	462b      	mov	r3, r5
 80076b2:	1891      	adds	r1, r2, r2
 80076b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80076b6:	415b      	adcs	r3, r3
 80076b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80076be:	4621      	mov	r1, r4
 80076c0:	eb12 0801 	adds.w	r8, r2, r1
 80076c4:	4629      	mov	r1, r5
 80076c6:	eb43 0901 	adc.w	r9, r3, r1
 80076ca:	f04f 0200 	mov.w	r2, #0
 80076ce:	f04f 0300 	mov.w	r3, #0
 80076d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076de:	4690      	mov	r8, r2
 80076e0:	4699      	mov	r9, r3
 80076e2:	4623      	mov	r3, r4
 80076e4:	eb18 0303 	adds.w	r3, r8, r3
 80076e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076ec:	462b      	mov	r3, r5
 80076ee:	eb49 0303 	adc.w	r3, r9, r3
 80076f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007702:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007706:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800770a:	460b      	mov	r3, r1
 800770c:	18db      	adds	r3, r3, r3
 800770e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007710:	4613      	mov	r3, r2
 8007712:	eb42 0303 	adc.w	r3, r2, r3
 8007716:	657b      	str	r3, [r7, #84]	@ 0x54
 8007718:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800771c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007720:	f7f9 fa72 	bl	8000c08 <__aeabi_uldivmod>
 8007724:	4602      	mov	r2, r0
 8007726:	460b      	mov	r3, r1
 8007728:	4b61      	ldr	r3, [pc, #388]	@ (80078b0 <UART_SetConfig+0x2d4>)
 800772a:	fba3 2302 	umull	r2, r3, r3, r2
 800772e:	095b      	lsrs	r3, r3, #5
 8007730:	011c      	lsls	r4, r3, #4
 8007732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007736:	2200      	movs	r2, #0
 8007738:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800773c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007740:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007744:	4642      	mov	r2, r8
 8007746:	464b      	mov	r3, r9
 8007748:	1891      	adds	r1, r2, r2
 800774a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800774c:	415b      	adcs	r3, r3
 800774e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007750:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007754:	4641      	mov	r1, r8
 8007756:	eb12 0a01 	adds.w	sl, r2, r1
 800775a:	4649      	mov	r1, r9
 800775c:	eb43 0b01 	adc.w	fp, r3, r1
 8007760:	f04f 0200 	mov.w	r2, #0
 8007764:	f04f 0300 	mov.w	r3, #0
 8007768:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800776c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007774:	4692      	mov	sl, r2
 8007776:	469b      	mov	fp, r3
 8007778:	4643      	mov	r3, r8
 800777a:	eb1a 0303 	adds.w	r3, sl, r3
 800777e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007782:	464b      	mov	r3, r9
 8007784:	eb4b 0303 	adc.w	r3, fp, r3
 8007788:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007798:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800779c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077a0:	460b      	mov	r3, r1
 80077a2:	18db      	adds	r3, r3, r3
 80077a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80077a6:	4613      	mov	r3, r2
 80077a8:	eb42 0303 	adc.w	r3, r2, r3
 80077ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80077b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80077b6:	f7f9 fa27 	bl	8000c08 <__aeabi_uldivmod>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	4b3b      	ldr	r3, [pc, #236]	@ (80078b0 <UART_SetConfig+0x2d4>)
 80077c2:	fba3 2301 	umull	r2, r3, r3, r1
 80077c6:	095b      	lsrs	r3, r3, #5
 80077c8:	2264      	movs	r2, #100	@ 0x64
 80077ca:	fb02 f303 	mul.w	r3, r2, r3
 80077ce:	1acb      	subs	r3, r1, r3
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80077d6:	4b36      	ldr	r3, [pc, #216]	@ (80078b0 <UART_SetConfig+0x2d4>)
 80077d8:	fba3 2302 	umull	r2, r3, r3, r2
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	005b      	lsls	r3, r3, #1
 80077e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80077e4:	441c      	add	r4, r3
 80077e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077ea:	2200      	movs	r2, #0
 80077ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80077f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80077f8:	4642      	mov	r2, r8
 80077fa:	464b      	mov	r3, r9
 80077fc:	1891      	adds	r1, r2, r2
 80077fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007800:	415b      	adcs	r3, r3
 8007802:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007804:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007808:	4641      	mov	r1, r8
 800780a:	1851      	adds	r1, r2, r1
 800780c:	6339      	str	r1, [r7, #48]	@ 0x30
 800780e:	4649      	mov	r1, r9
 8007810:	414b      	adcs	r3, r1
 8007812:	637b      	str	r3, [r7, #52]	@ 0x34
 8007814:	f04f 0200 	mov.w	r2, #0
 8007818:	f04f 0300 	mov.w	r3, #0
 800781c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007820:	4659      	mov	r1, fp
 8007822:	00cb      	lsls	r3, r1, #3
 8007824:	4651      	mov	r1, sl
 8007826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800782a:	4651      	mov	r1, sl
 800782c:	00ca      	lsls	r2, r1, #3
 800782e:	4610      	mov	r0, r2
 8007830:	4619      	mov	r1, r3
 8007832:	4603      	mov	r3, r0
 8007834:	4642      	mov	r2, r8
 8007836:	189b      	adds	r3, r3, r2
 8007838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800783c:	464b      	mov	r3, r9
 800783e:	460a      	mov	r2, r1
 8007840:	eb42 0303 	adc.w	r3, r2, r3
 8007844:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007854:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007858:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800785c:	460b      	mov	r3, r1
 800785e:	18db      	adds	r3, r3, r3
 8007860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007862:	4613      	mov	r3, r2
 8007864:	eb42 0303 	adc.w	r3, r2, r3
 8007868:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800786a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800786e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007872:	f7f9 f9c9 	bl	8000c08 <__aeabi_uldivmod>
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4b0d      	ldr	r3, [pc, #52]	@ (80078b0 <UART_SetConfig+0x2d4>)
 800787c:	fba3 1302 	umull	r1, r3, r3, r2
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	2164      	movs	r1, #100	@ 0x64
 8007884:	fb01 f303 	mul.w	r3, r1, r3
 8007888:	1ad3      	subs	r3, r2, r3
 800788a:	00db      	lsls	r3, r3, #3
 800788c:	3332      	adds	r3, #50	@ 0x32
 800788e:	4a08      	ldr	r2, [pc, #32]	@ (80078b0 <UART_SetConfig+0x2d4>)
 8007890:	fba2 2303 	umull	r2, r3, r2, r3
 8007894:	095b      	lsrs	r3, r3, #5
 8007896:	f003 0207 	and.w	r2, r3, #7
 800789a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4422      	add	r2, r4
 80078a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80078a4:	e106      	b.n	8007ab4 <UART_SetConfig+0x4d8>
 80078a6:	bf00      	nop
 80078a8:	40011000 	.word	0x40011000
 80078ac:	40011400 	.word	0x40011400
 80078b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b8:	2200      	movs	r2, #0
 80078ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80078c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80078c6:	4642      	mov	r2, r8
 80078c8:	464b      	mov	r3, r9
 80078ca:	1891      	adds	r1, r2, r2
 80078cc:	6239      	str	r1, [r7, #32]
 80078ce:	415b      	adcs	r3, r3
 80078d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078d6:	4641      	mov	r1, r8
 80078d8:	1854      	adds	r4, r2, r1
 80078da:	4649      	mov	r1, r9
 80078dc:	eb43 0501 	adc.w	r5, r3, r1
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	00eb      	lsls	r3, r5, #3
 80078ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ee:	00e2      	lsls	r2, r4, #3
 80078f0:	4614      	mov	r4, r2
 80078f2:	461d      	mov	r5, r3
 80078f4:	4643      	mov	r3, r8
 80078f6:	18e3      	adds	r3, r4, r3
 80078f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078fc:	464b      	mov	r3, r9
 80078fe:	eb45 0303 	adc.w	r3, r5, r3
 8007902:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007912:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007916:	f04f 0200 	mov.w	r2, #0
 800791a:	f04f 0300 	mov.w	r3, #0
 800791e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007922:	4629      	mov	r1, r5
 8007924:	008b      	lsls	r3, r1, #2
 8007926:	4621      	mov	r1, r4
 8007928:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800792c:	4621      	mov	r1, r4
 800792e:	008a      	lsls	r2, r1, #2
 8007930:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007934:	f7f9 f968 	bl	8000c08 <__aeabi_uldivmod>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	4b60      	ldr	r3, [pc, #384]	@ (8007ac0 <UART_SetConfig+0x4e4>)
 800793e:	fba3 2302 	umull	r2, r3, r3, r2
 8007942:	095b      	lsrs	r3, r3, #5
 8007944:	011c      	lsls	r4, r3, #4
 8007946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800794a:	2200      	movs	r2, #0
 800794c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007950:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007954:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007958:	4642      	mov	r2, r8
 800795a:	464b      	mov	r3, r9
 800795c:	1891      	adds	r1, r2, r2
 800795e:	61b9      	str	r1, [r7, #24]
 8007960:	415b      	adcs	r3, r3
 8007962:	61fb      	str	r3, [r7, #28]
 8007964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007968:	4641      	mov	r1, r8
 800796a:	1851      	adds	r1, r2, r1
 800796c:	6139      	str	r1, [r7, #16]
 800796e:	4649      	mov	r1, r9
 8007970:	414b      	adcs	r3, r1
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	f04f 0200 	mov.w	r2, #0
 8007978:	f04f 0300 	mov.w	r3, #0
 800797c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007980:	4659      	mov	r1, fp
 8007982:	00cb      	lsls	r3, r1, #3
 8007984:	4651      	mov	r1, sl
 8007986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800798a:	4651      	mov	r1, sl
 800798c:	00ca      	lsls	r2, r1, #3
 800798e:	4610      	mov	r0, r2
 8007990:	4619      	mov	r1, r3
 8007992:	4603      	mov	r3, r0
 8007994:	4642      	mov	r2, r8
 8007996:	189b      	adds	r3, r3, r2
 8007998:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800799c:	464b      	mov	r3, r9
 800799e:	460a      	mov	r2, r1
 80079a0:	eb42 0303 	adc.w	r3, r2, r3
 80079a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079b2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80079b4:	f04f 0200 	mov.w	r2, #0
 80079b8:	f04f 0300 	mov.w	r3, #0
 80079bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80079c0:	4649      	mov	r1, r9
 80079c2:	008b      	lsls	r3, r1, #2
 80079c4:	4641      	mov	r1, r8
 80079c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079ca:	4641      	mov	r1, r8
 80079cc:	008a      	lsls	r2, r1, #2
 80079ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80079d2:	f7f9 f919 	bl	8000c08 <__aeabi_uldivmod>
 80079d6:	4602      	mov	r2, r0
 80079d8:	460b      	mov	r3, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	4b38      	ldr	r3, [pc, #224]	@ (8007ac0 <UART_SetConfig+0x4e4>)
 80079de:	fba3 2301 	umull	r2, r3, r3, r1
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	2264      	movs	r2, #100	@ 0x64
 80079e6:	fb02 f303 	mul.w	r3, r2, r3
 80079ea:	1acb      	subs	r3, r1, r3
 80079ec:	011b      	lsls	r3, r3, #4
 80079ee:	3332      	adds	r3, #50	@ 0x32
 80079f0:	4a33      	ldr	r2, [pc, #204]	@ (8007ac0 <UART_SetConfig+0x4e4>)
 80079f2:	fba2 2303 	umull	r2, r3, r2, r3
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079fc:	441c      	add	r4, r3
 80079fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a02:	2200      	movs	r2, #0
 8007a04:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a06:	677a      	str	r2, [r7, #116]	@ 0x74
 8007a08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007a0c:	4642      	mov	r2, r8
 8007a0e:	464b      	mov	r3, r9
 8007a10:	1891      	adds	r1, r2, r2
 8007a12:	60b9      	str	r1, [r7, #8]
 8007a14:	415b      	adcs	r3, r3
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a1c:	4641      	mov	r1, r8
 8007a1e:	1851      	adds	r1, r2, r1
 8007a20:	6039      	str	r1, [r7, #0]
 8007a22:	4649      	mov	r1, r9
 8007a24:	414b      	adcs	r3, r1
 8007a26:	607b      	str	r3, [r7, #4]
 8007a28:	f04f 0200 	mov.w	r2, #0
 8007a2c:	f04f 0300 	mov.w	r3, #0
 8007a30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a34:	4659      	mov	r1, fp
 8007a36:	00cb      	lsls	r3, r1, #3
 8007a38:	4651      	mov	r1, sl
 8007a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a3e:	4651      	mov	r1, sl
 8007a40:	00ca      	lsls	r2, r1, #3
 8007a42:	4610      	mov	r0, r2
 8007a44:	4619      	mov	r1, r3
 8007a46:	4603      	mov	r3, r0
 8007a48:	4642      	mov	r2, r8
 8007a4a:	189b      	adds	r3, r3, r2
 8007a4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a4e:	464b      	mov	r3, r9
 8007a50:	460a      	mov	r2, r1
 8007a52:	eb42 0303 	adc.w	r3, r2, r3
 8007a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a62:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a64:	f04f 0200 	mov.w	r2, #0
 8007a68:	f04f 0300 	mov.w	r3, #0
 8007a6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a70:	4649      	mov	r1, r9
 8007a72:	008b      	lsls	r3, r1, #2
 8007a74:	4641      	mov	r1, r8
 8007a76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a7a:	4641      	mov	r1, r8
 8007a7c:	008a      	lsls	r2, r1, #2
 8007a7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a82:	f7f9 f8c1 	bl	8000c08 <__aeabi_uldivmod>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac0 <UART_SetConfig+0x4e4>)
 8007a8c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a90:	095b      	lsrs	r3, r3, #5
 8007a92:	2164      	movs	r1, #100	@ 0x64
 8007a94:	fb01 f303 	mul.w	r3, r1, r3
 8007a98:	1ad3      	subs	r3, r2, r3
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	3332      	adds	r3, #50	@ 0x32
 8007a9e:	4a08      	ldr	r2, [pc, #32]	@ (8007ac0 <UART_SetConfig+0x4e4>)
 8007aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa4:	095b      	lsrs	r3, r3, #5
 8007aa6:	f003 020f 	and.w	r2, r3, #15
 8007aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4422      	add	r2, r4
 8007ab2:	609a      	str	r2, [r3, #8]
}
 8007ab4:	bf00      	nop
 8007ab6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007aba:	46bd      	mov	sp, r7
 8007abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ac0:	51eb851f 	.word	0x51eb851f

08007ac4 <RTC_interface>:

extern char date[10];
extern char time[20];

void RTC_interface ()
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af02      	add	r7, sp, #8



		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8007aca:	2200      	movs	r2, #0
 8007acc:	490c      	ldr	r1, [pc, #48]	@ (8007b00 <RTC_interface+0x3c>)
 8007ace:	480d      	ldr	r0, [pc, #52]	@ (8007b04 <RTC_interface+0x40>)
 8007ad0:	f7fd fe91 	bl	80057f6 <HAL_RTC_GetDate>
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	490c      	ldr	r1, [pc, #48]	@ (8007b08 <RTC_interface+0x44>)
 8007ad8:	480a      	ldr	r0, [pc, #40]	@ (8007b04 <RTC_interface+0x40>)
 8007ada:	f7fd fdaa 	bl	8005632 <HAL_RTC_GetTime>


		//sprintf(date,"Date: %d:%d:%d",sDate.Date,sDate.Month,sDate.Year);
		sprintf(time, "%02d:%02d:%02d",sTime.Hours,sTime.Minutes,sDate.Date);
 8007ade:	4b0a      	ldr	r3, [pc, #40]	@ (8007b08 <RTC_interface+0x44>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4b08      	ldr	r3, [pc, #32]	@ (8007b08 <RTC_interface+0x44>)
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4b05      	ldr	r3, [pc, #20]	@ (8007b00 <RTC_interface+0x3c>)
 8007aec:	789b      	ldrb	r3, [r3, #2]
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	460b      	mov	r3, r1
 8007af2:	4906      	ldr	r1, [pc, #24]	@ (8007b0c <RTC_interface+0x48>)
 8007af4:	4806      	ldr	r0, [pc, #24]	@ (8007b10 <RTC_interface+0x4c>)
 8007af6:	f002 fc19 	bl	800a32c <siprintf>

		//HAL_Delay(500);



}
 8007afa:	bf00      	nop
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	200059ac 	.word	0x200059ac
 8007b04:	20005978 	.word	0x20005978
 8007b08:	20005998 	.word	0x20005998
 8007b0c:	0800c648 	.word	0x0800c648
 8007b10:	200038d0 	.word	0x200038d0

08007b14 <MX_RTC_Init>:
   * @brief RTC Initialization Function
   * @param None
   * @retval None
   */
  void MX_RTC_Init(void)
 {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN RTC_Init 0 */

   /* USER CODE END RTC_Init 0 */

   RTC_TimeTypeDef sTime = {0};
 8007b1a:	1d3b      	adds	r3, r7, #4
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
 8007b20:	605a      	str	r2, [r3, #4]
 8007b22:	609a      	str	r2, [r3, #8]
 8007b24:	60da      	str	r2, [r3, #12]
 8007b26:	611a      	str	r2, [r3, #16]
   RTC_DateTypeDef sDate = {0};
 8007b28:	2300      	movs	r3, #0
 8007b2a:	603b      	str	r3, [r7, #0]

   /* USER CODE END RTC_Init 1 */

   /** Initialize RTC Only
   */
   hrtc.Instance = RTC;
 8007b2c:	4b24      	ldr	r3, [pc, #144]	@ (8007bc0 <MX_RTC_Init+0xac>)
 8007b2e:	4a25      	ldr	r2, [pc, #148]	@ (8007bc4 <MX_RTC_Init+0xb0>)
 8007b30:	601a      	str	r2, [r3, #0]
   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007b32:	4b23      	ldr	r3, [pc, #140]	@ (8007bc0 <MX_RTC_Init+0xac>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	605a      	str	r2, [r3, #4]
   hrtc.Init.AsynchPrediv = 127;
 8007b38:	4b21      	ldr	r3, [pc, #132]	@ (8007bc0 <MX_RTC_Init+0xac>)
 8007b3a:	227f      	movs	r2, #127	@ 0x7f
 8007b3c:	609a      	str	r2, [r3, #8]
   hrtc.Init.SynchPrediv = 255;
 8007b3e:	4b20      	ldr	r3, [pc, #128]	@ (8007bc0 <MX_RTC_Init+0xac>)
 8007b40:	22ff      	movs	r2, #255	@ 0xff
 8007b42:	60da      	str	r2, [r3, #12]
   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007b44:	4b1e      	ldr	r3, [pc, #120]	@ (8007bc0 <MX_RTC_Init+0xac>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	611a      	str	r2, [r3, #16]
   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8007bc0 <MX_RTC_Init+0xac>)
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	615a      	str	r2, [r3, #20]
   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007b50:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc0 <MX_RTC_Init+0xac>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	619a      	str	r2, [r3, #24]
   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007b56:	481a      	ldr	r0, [pc, #104]	@ (8007bc0 <MX_RTC_Init+0xac>)
 8007b58:	f7fd fc4e 	bl	80053f8 <HAL_RTC_Init>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d001      	beq.n	8007b66 <MX_RTC_Init+0x52>
   {
     Error_Handler();
 8007b62:	f7fa fe51 	bl	8002808 <Error_Handler>

   /* USER CODE END Check_RTC_BKUP */

   /** Initialize RTC and set the Time and Date
   */
   sTime.Hours = 0x00;
 8007b66:	2300      	movs	r3, #0
 8007b68:	713b      	strb	r3, [r7, #4]
   sTime.Minutes = 0x00;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	717b      	strb	r3, [r7, #5]
   sTime.Seconds = 0x00;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	71bb      	strb	r3, [r7, #6]
   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8007b72:	2300      	movs	r3, #0
 8007b74:	613b      	str	r3, [r7, #16]
   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8007b76:	2300      	movs	r3, #0
 8007b78:	617b      	str	r3, [r7, #20]
   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8007b7a:	1d3b      	adds	r3, r7, #4
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	4619      	mov	r1, r3
 8007b80:	480f      	ldr	r0, [pc, #60]	@ (8007bc0 <MX_RTC_Init+0xac>)
 8007b82:	f7fd fcbc 	bl	80054fe <HAL_RTC_SetTime>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <MX_RTC_Init+0x7c>
   {
     Error_Handler();
 8007b8c:	f7fa fe3c 	bl	8002808 <Error_Handler>
   }
   sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8007b90:	2306      	movs	r3, #6
 8007b92:	703b      	strb	r3, [r7, #0]
   sDate.Month = 0x00;
 8007b94:	2300      	movs	r3, #0
 8007b96:	707b      	strb	r3, [r7, #1]
   sDate.Date = 0x00;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	70bb      	strb	r3, [r7, #2]
   sDate.Year = 0x0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	70fb      	strb	r3, [r7, #3]

   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8007ba0:	463b      	mov	r3, r7
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4806      	ldr	r0, [pc, #24]	@ (8007bc0 <MX_RTC_Init+0xac>)
 8007ba8:	f7fd fda1 	bl	80056ee <HAL_RTC_SetDate>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <MX_RTC_Init+0xa2>
   {
     Error_Handler();
 8007bb2:	f7fa fe29 	bl	8002808 <Error_Handler>
   }
   /* USER CODE BEGIN RTC_Init 2 */

   /* USER CODE END RTC_Init 2 */

 }
 8007bb6:	bf00      	nop
 8007bb8:	3718      	adds	r7, #24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	20005978 	.word	0x20005978
 8007bc4:	40002800 	.word	0x40002800

08007bc8 <button_false_init>:

extern button_press button_pressed;


void button_false_init()
{
 8007bc8:	b480      	push	{r7}
 8007bca:	af00      	add	r7, sp, #0


	button_pressed.button_35 = false;
 8007bcc:	4a16      	ldr	r2, [pc, #88]	@ (8007c28 <button_false_init+0x60>)
 8007bce:	7913      	ldrb	r3, [r2, #4]
 8007bd0:	f36f 0300 	bfc	r3, #0, #1
 8007bd4:	7113      	strb	r3, [r2, #4]
	button_pressed.button_40 = false;
 8007bd6:	4a14      	ldr	r2, [pc, #80]	@ (8007c28 <button_false_init+0x60>)
 8007bd8:	7913      	ldrb	r3, [r2, #4]
 8007bda:	f36f 0341 	bfc	r3, #1, #1
 8007bde:	7113      	strb	r3, [r2, #4]
	button_pressed.button_45 = false;
 8007be0:	4a11      	ldr	r2, [pc, #68]	@ (8007c28 <button_false_init+0x60>)
 8007be2:	7913      	ldrb	r3, [r2, #4]
 8007be4:	f36f 0382 	bfc	r3, #2, #1
 8007be8:	7113      	strb	r3, [r2, #4]
	button_pressed.button_f_low = false;
 8007bea:	4a0f      	ldr	r2, [pc, #60]	@ (8007c28 <button_false_init+0x60>)
 8007bec:	7913      	ldrb	r3, [r2, #4]
 8007bee:	f36f 03c3 	bfc	r3, #3, #1
 8007bf2:	7113      	strb	r3, [r2, #4]
	button_pressed.button_f_mid = false;
 8007bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8007c28 <button_false_init+0x60>)
 8007bf6:	7913      	ldrb	r3, [r2, #4]
 8007bf8:	f36f 1304 	bfc	r3, #4, #1
 8007bfc:	7113      	strb	r3, [r2, #4]
	button_pressed.button_f_high = false;
 8007bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8007c28 <button_false_init+0x60>)
 8007c00:	7913      	ldrb	r3, [r2, #4]
 8007c02:	f36f 1345 	bfc	r3, #5, #1
 8007c06:	7113      	strb	r3, [r2, #4]
	button_pressed.button_standby = false;
 8007c08:	4a07      	ldr	r2, [pc, #28]	@ (8007c28 <button_false_init+0x60>)
 8007c0a:	7913      	ldrb	r3, [r2, #4]
 8007c0c:	f36f 1386 	bfc	r3, #6, #1
 8007c10:	7113      	strb	r3, [r2, #4]
	button_pressed.button_Ambient = false;
 8007c12:	4a05      	ldr	r2, [pc, #20]	@ (8007c28 <button_false_init+0x60>)
 8007c14:	7913      	ldrb	r3, [r2, #4]
 8007c16:	f36f 13c7 	bfc	r3, #7, #1
 8007c1a:	7113      	strb	r3, [r2, #4]


}
 8007c1c:	bf00      	nop
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20003838 	.word	0x20003838

08007c2c <EXTI9_5_IRQHandler>:
//			Fanset_high_led();
//                    // This is where you place your code to handle the event
//                }
//}

void EXTI9_5_IRQHandler(void) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	af00      	add	r7, sp, #0
    // Check which pin triggered the interrupt and handle accordingly
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET) {
 8007c30:	4b59      	ldr	r3, [pc, #356]	@ (8007d98 <EXTI9_5_IRQHandler+0x16c>)
 8007c32:	695b      	ldr	r3, [r3, #20]
 8007c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d025      	beq.n	8007c88 <EXTI9_5_IRQHandler+0x5c>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8007c3c:	4b56      	ldr	r3, [pc, #344]	@ (8007d98 <EXTI9_5_IRQHandler+0x16c>)
 8007c3e:	2240      	movs	r2, #64	@ 0x40
 8007c40:	615a      	str	r2, [r3, #20]
                    Tempset_amb_led();
 8007c42:	f000 ff4b 	bl	8008adc <Tempset_amb_led>
                   	TempReset_43_led();
 8007c46:	f000 ff69 	bl	8008b1c <TempReset_43_led>
                   	TempReset_40_led();
 8007c4a:	f000 ff5f 	bl	8008b0c <TempReset_40_led>
                   	TempReset_35_led();
 8007c4e:	f000 ff55 	bl	8008afc <TempReset_35_led>
                   	StandbyReset_led();
 8007c52:	f000 ff8b 	bl	8008b6c <StandbyReset_led>
                   	button_pressed.button_Ambient = true;
 8007c56:	4a51      	ldr	r2, [pc, #324]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007c58:	7913      	ldrb	r3, [r2, #4]
 8007c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c5e:	7113      	strb	r3, [r2, #4]
                 	button_pressed.button_35 = false;
 8007c60:	4a4e      	ldr	r2, [pc, #312]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007c62:	7913      	ldrb	r3, [r2, #4]
 8007c64:	f36f 0300 	bfc	r3, #0, #1
 8007c68:	7113      	strb	r3, [r2, #4]
                 	button_pressed.button_40 = false;
 8007c6a:	4a4c      	ldr	r2, [pc, #304]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007c6c:	7913      	ldrb	r3, [r2, #4]
 8007c6e:	f36f 0341 	bfc	r3, #1, #1
 8007c72:	7113      	strb	r3, [r2, #4]
                 	button_pressed.button_45 = false;
 8007c74:	4a49      	ldr	r2, [pc, #292]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007c76:	7913      	ldrb	r3, [r2, #4]
 8007c78:	f36f 0382 	bfc	r3, #2, #1
 8007c7c:	7113      	strb	r3, [r2, #4]
                 	button_pressed.button_standby = false;
 8007c7e:	4a47      	ldr	r2, [pc, #284]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007c80:	7913      	ldrb	r3, [r2, #4]
 8007c82:	f36f 1386 	bfc	r3, #6, #1
 8007c86:	7113      	strb	r3, [r2, #4]




    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET) {
 8007c88:	4b43      	ldr	r3, [pc, #268]	@ (8007d98 <EXTI9_5_IRQHandler+0x16c>)
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d025      	beq.n	8007ce0 <EXTI9_5_IRQHandler+0xb4>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8007c94:	4b40      	ldr	r3, [pc, #256]	@ (8007d98 <EXTI9_5_IRQHandler+0x16c>)
 8007c96:	2280      	movs	r2, #128	@ 0x80
 8007c98:	615a      	str	r2, [r3, #20]
    	        Tempset_43_led();
 8007c9a:	f000 feff 	bl	8008a9c <Tempset_43_led>
            	TempReset_40_led();
 8007c9e:	f000 ff35 	bl	8008b0c <TempReset_40_led>
            	TempReset_35_led();
 8007ca2:	f000 ff2b 	bl	8008afc <TempReset_35_led>
            	TempReset_amb_led();
 8007ca6:	f000 ff59 	bl	8008b5c <TempReset_amb_led>
            	StandbyReset_led();
 8007caa:	f000 ff5f 	bl	8008b6c <StandbyReset_led>
            	button_pressed.button_Ambient = false;
 8007cae:	4a3b      	ldr	r2, [pc, #236]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007cb0:	7913      	ldrb	r3, [r2, #4]
 8007cb2:	f36f 13c7 	bfc	r3, #7, #1
 8007cb6:	7113      	strb	r3, [r2, #4]
				button_pressed.button_35 = false;
 8007cb8:	4a38      	ldr	r2, [pc, #224]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007cba:	7913      	ldrb	r3, [r2, #4]
 8007cbc:	f36f 0300 	bfc	r3, #0, #1
 8007cc0:	7113      	strb	r3, [r2, #4]
				button_pressed.button_40 = false;
 8007cc2:	4a36      	ldr	r2, [pc, #216]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007cc4:	7913      	ldrb	r3, [r2, #4]
 8007cc6:	f36f 0341 	bfc	r3, #1, #1
 8007cca:	7113      	strb	r3, [r2, #4]
				button_pressed.button_45 = true;
 8007ccc:	4a33      	ldr	r2, [pc, #204]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007cce:	7913      	ldrb	r3, [r2, #4]
 8007cd0:	f043 0304 	orr.w	r3, r3, #4
 8007cd4:	7113      	strb	r3, [r2, #4]
				button_pressed.button_standby = false;
 8007cd6:	4a31      	ldr	r2, [pc, #196]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007cd8:	7913      	ldrb	r3, [r2, #4]
 8007cda:	f36f 1386 	bfc	r3, #6, #1
 8007cde:	7113      	strb	r3, [r2, #4]
        // Handle PC7 interrupt
    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET) {
 8007ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8007d98 <EXTI9_5_IRQHandler+0x16c>)
 8007ce2:	695b      	ldr	r3, [r3, #20]
 8007ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d026      	beq.n	8007d3a <EXTI9_5_IRQHandler+0x10e>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8007cec:	4b2a      	ldr	r3, [pc, #168]	@ (8007d98 <EXTI9_5_IRQHandler+0x16c>)
 8007cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007cf2:	615a      	str	r2, [r3, #20]
            	Tempset_40_led();
 8007cf4:	f000 feca 	bl	8008a8c <Tempset_40_led>
            	TempReset_35_led();
 8007cf8:	f000 ff00 	bl	8008afc <TempReset_35_led>
                TempReset_43_led();
 8007cfc:	f000 ff0e 	bl	8008b1c <TempReset_43_led>
            	TempReset_amb_led();
 8007d00:	f000 ff2c 	bl	8008b5c <TempReset_amb_led>
            	StandbyReset_led();
 8007d04:	f000 ff32 	bl	8008b6c <StandbyReset_led>
            	button_pressed.button_Ambient = false;
 8007d08:	4a24      	ldr	r2, [pc, #144]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007d0a:	7913      	ldrb	r3, [r2, #4]
 8007d0c:	f36f 13c7 	bfc	r3, #7, #1
 8007d10:	7113      	strb	r3, [r2, #4]
				button_pressed.button_35 = false;
 8007d12:	4a22      	ldr	r2, [pc, #136]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007d14:	7913      	ldrb	r3, [r2, #4]
 8007d16:	f36f 0300 	bfc	r3, #0, #1
 8007d1a:	7113      	strb	r3, [r2, #4]
				button_pressed.button_40 = true;
 8007d1c:	4a1f      	ldr	r2, [pc, #124]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007d1e:	7913      	ldrb	r3, [r2, #4]
 8007d20:	f043 0302 	orr.w	r3, r3, #2
 8007d24:	7113      	strb	r3, [r2, #4]
				button_pressed.button_45 = false;
 8007d26:	4a1d      	ldr	r2, [pc, #116]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007d28:	7913      	ldrb	r3, [r2, #4]
 8007d2a:	f36f 0382 	bfc	r3, #2, #1
 8007d2e:	7113      	strb	r3, [r2, #4]
				button_pressed.button_standby = false;
 8007d30:	4a1a      	ldr	r2, [pc, #104]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007d32:	7913      	ldrb	r3, [r2, #4]
 8007d34:	f36f 1386 	bfc	r3, #6, #1
 8007d38:	7113      	strb	r3, [r2, #4]
    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET) {
 8007d3a:	4b17      	ldr	r3, [pc, #92]	@ (8007d98 <EXTI9_5_IRQHandler+0x16c>)
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d026      	beq.n	8007d94 <EXTI9_5_IRQHandler+0x168>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 8007d46:	4b14      	ldr	r3, [pc, #80]	@ (8007d98 <EXTI9_5_IRQHandler+0x16c>)
 8007d48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d4c:	615a      	str	r2, [r3, #20]
            	Tempset_35_led();
 8007d4e:	f000 fe95 	bl	8008a7c <Tempset_35_led>
                TempReset_40_led();
 8007d52:	f000 fedb 	bl	8008b0c <TempReset_40_led>
                TempReset_43_led();
 8007d56:	f000 fee1 	bl	8008b1c <TempReset_43_led>
            	TempReset_amb_led();
 8007d5a:	f000 feff 	bl	8008b5c <TempReset_amb_led>
            	StandbyReset_led();
 8007d5e:	f000 ff05 	bl	8008b6c <StandbyReset_led>
            	button_pressed.button_Ambient = false;
 8007d62:	4a0e      	ldr	r2, [pc, #56]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007d64:	7913      	ldrb	r3, [r2, #4]
 8007d66:	f36f 13c7 	bfc	r3, #7, #1
 8007d6a:	7113      	strb	r3, [r2, #4]
				button_pressed.button_35 = true;
 8007d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007d6e:	7913      	ldrb	r3, [r2, #4]
 8007d70:	f043 0301 	orr.w	r3, r3, #1
 8007d74:	7113      	strb	r3, [r2, #4]
				button_pressed.button_40 = false;
 8007d76:	4a09      	ldr	r2, [pc, #36]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007d78:	7913      	ldrb	r3, [r2, #4]
 8007d7a:	f36f 0341 	bfc	r3, #1, #1
 8007d7e:	7113      	strb	r3, [r2, #4]
				button_pressed.button_45 = false;
 8007d80:	4a06      	ldr	r2, [pc, #24]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007d82:	7913      	ldrb	r3, [r2, #4]
 8007d84:	f36f 0382 	bfc	r3, #2, #1
 8007d88:	7113      	strb	r3, [r2, #4]
				button_pressed.button_standby = false;
 8007d8a:	4a04      	ldr	r2, [pc, #16]	@ (8007d9c <EXTI9_5_IRQHandler+0x170>)
 8007d8c:	7913      	ldrb	r3, [r2, #4]
 8007d8e:	f36f 1386 	bfc	r3, #6, #1
 8007d92:	7113      	strb	r3, [r2, #4]
    }

}
 8007d94:	bf00      	nop
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	40013c00 	.word	0x40013c00
 8007d9c:	20003838 	.word	0x20003838

08007da0 <EXTI15_10_IRQHandler>:

////// EXTI line[15:10] interrupt handler
void EXTI15_10_IRQHandler(void) {
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
    // Check which pin triggered the interrupt and handle accordingly
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET) {
 8007da4:	4b4c      	ldr	r3, [pc, #304]	@ (8007ed8 <EXTI15_10_IRQHandler+0x138>)
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d01f      	beq.n	8007df0 <EXTI15_10_IRQHandler+0x50>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8007db0:	4b49      	ldr	r3, [pc, #292]	@ (8007ed8 <EXTI15_10_IRQHandler+0x138>)
 8007db2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007db6:	615a      	str	r2, [r3, #20]
        			StandbyReset_led();
 8007db8:	f000 fed8 	bl	8008b6c <StandbyReset_led>
        			FanReset_low_led();
 8007dbc:	f000 feb6 	bl	8008b2c <FanReset_low_led>
        			FanReset_mid_led();
 8007dc0:	f000 febc 	bl	8008b3c <FanReset_mid_led>
        			Fanset_high_led();
 8007dc4:	f000 fe82 	bl	8008acc <Fanset_high_led>
        			button_pressed.button_f_high = true;
 8007dc8:	4a44      	ldr	r2, [pc, #272]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007dca:	7913      	ldrb	r3, [r2, #4]
 8007dcc:	f043 0320 	orr.w	r3, r3, #32
 8007dd0:	7113      	strb	r3, [r2, #4]
					button_pressed.button_f_low = false;
 8007dd2:	4a42      	ldr	r2, [pc, #264]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007dd4:	7913      	ldrb	r3, [r2, #4]
 8007dd6:	f36f 03c3 	bfc	r3, #3, #1
 8007dda:	7113      	strb	r3, [r2, #4]
					button_pressed.button_f_mid = false;
 8007ddc:	4a3f      	ldr	r2, [pc, #252]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007dde:	7913      	ldrb	r3, [r2, #4]
 8007de0:	f36f 1304 	bfc	r3, #4, #1
 8007de4:	7113      	strb	r3, [r2, #4]
					button_pressed.button_standby = false;
 8007de6:	4a3d      	ldr	r2, [pc, #244]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007de8:	7913      	ldrb	r3, [r2, #4]
 8007dea:	f36f 1386 	bfc	r3, #6, #1
 8007dee:	7113      	strb	r3, [r2, #4]
        // Handle PB12 interrupt
    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 8007df0:	4b39      	ldr	r3, [pc, #228]	@ (8007ed8 <EXTI15_10_IRQHandler+0x138>)
 8007df2:	695b      	ldr	r3, [r3, #20]
 8007df4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01f      	beq.n	8007e3c <EXTI15_10_IRQHandler+0x9c>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8007dfc:	4b36      	ldr	r3, [pc, #216]	@ (8007ed8 <EXTI15_10_IRQHandler+0x138>)
 8007dfe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007e02:	615a      	str	r2, [r3, #20]
    			StandbyReset_led();
 8007e04:	f000 feb2 	bl	8008b6c <StandbyReset_led>
    			FanReset_low_led();
 8007e08:	f000 fe90 	bl	8008b2c <FanReset_low_led>
    			FanReset_high_led();
 8007e0c:	f000 fe9e 	bl	8008b4c <FanReset_high_led>
    			Fanset_mid_led();
 8007e10:	f000 fe54 	bl	8008abc <Fanset_mid_led>
    			button_pressed.button_f_high = false;
 8007e14:	4a31      	ldr	r2, [pc, #196]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007e16:	7913      	ldrb	r3, [r2, #4]
 8007e18:	f36f 1345 	bfc	r3, #5, #1
 8007e1c:	7113      	strb	r3, [r2, #4]
				button_pressed.button_f_low = false;
 8007e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007e20:	7913      	ldrb	r3, [r2, #4]
 8007e22:	f36f 03c3 	bfc	r3, #3, #1
 8007e26:	7113      	strb	r3, [r2, #4]
				button_pressed.button_f_mid = true;
 8007e28:	4a2c      	ldr	r2, [pc, #176]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007e2a:	7913      	ldrb	r3, [r2, #4]
 8007e2c:	f043 0310 	orr.w	r3, r3, #16
 8007e30:	7113      	strb	r3, [r2, #4]
				button_pressed.button_standby = false;
 8007e32:	4a2a      	ldr	r2, [pc, #168]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007e34:	7913      	ldrb	r3, [r2, #4]
 8007e36:	f36f 1386 	bfc	r3, #6, #1
 8007e3a:	7113      	strb	r3, [r2, #4]
        // Handle PB13 interrupt
    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET) {
 8007e3c:	4b26      	ldr	r3, [pc, #152]	@ (8007ed8 <EXTI15_10_IRQHandler+0x138>)
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d01f      	beq.n	8007e88 <EXTI15_10_IRQHandler+0xe8>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 8007e48:	4b23      	ldr	r3, [pc, #140]	@ (8007ed8 <EXTI15_10_IRQHandler+0x138>)
 8007e4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007e4e:	615a      	str	r2, [r3, #20]
        			StandbyReset_led();
 8007e50:	f000 fe8c 	bl	8008b6c <StandbyReset_led>
        			FanReset_mid_led();
 8007e54:	f000 fe72 	bl	8008b3c <FanReset_mid_led>
        			FanReset_high_led();
 8007e58:	f000 fe78 	bl	8008b4c <FanReset_high_led>
        			Fanset_low_led();
 8007e5c:	f000 fe26 	bl	8008aac <Fanset_low_led>
        			button_pressed.button_f_high = false;
 8007e60:	4a1e      	ldr	r2, [pc, #120]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007e62:	7913      	ldrb	r3, [r2, #4]
 8007e64:	f36f 1345 	bfc	r3, #5, #1
 8007e68:	7113      	strb	r3, [r2, #4]
					button_pressed.button_f_low = true;
 8007e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007e6c:	7913      	ldrb	r3, [r2, #4]
 8007e6e:	f043 0308 	orr.w	r3, r3, #8
 8007e72:	7113      	strb	r3, [r2, #4]
					button_pressed.button_f_mid = false;
 8007e74:	4a19      	ldr	r2, [pc, #100]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007e76:	7913      	ldrb	r3, [r2, #4]
 8007e78:	f36f 1304 	bfc	r3, #4, #1
 8007e7c:	7113      	strb	r3, [r2, #4]
					button_pressed.button_standby = false;
 8007e7e:	4a17      	ldr	r2, [pc, #92]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007e80:	7913      	ldrb	r3, [r2, #4]
 8007e82:	f36f 1386 	bfc	r3, #6, #1
 8007e86:	7113      	strb	r3, [r2, #4]

        // Handle PB14 interrupt
    }
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET) {
 8007e88:	4b13      	ldr	r3, [pc, #76]	@ (8007ed8 <EXTI15_10_IRQHandler+0x138>)
 8007e8a:	695b      	ldr	r3, [r3, #20]
 8007e8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d01f      	beq.n	8007ed4 <EXTI15_10_IRQHandler+0x134>
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);
 8007e94:	4b10      	ldr	r3, [pc, #64]	@ (8007ed8 <EXTI15_10_IRQHandler+0x138>)
 8007e96:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007e9a:	615a      	str	r2, [r3, #20]
                	Standbyset_led();
 8007e9c:	f000 fe26 	bl	8008aec <Standbyset_led>
                	FanReset_low_led();
 8007ea0:	f000 fe44 	bl	8008b2c <FanReset_low_led>
        			FanReset_high_led();
 8007ea4:	f000 fe52 	bl	8008b4c <FanReset_high_led>
                    FanReset_mid_led();
 8007ea8:	f000 fe48 	bl	8008b3c <FanReset_mid_led>
                    button_pressed.button_f_high = false;
 8007eac:	4a0b      	ldr	r2, [pc, #44]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007eae:	7913      	ldrb	r3, [r2, #4]
 8007eb0:	f36f 1345 	bfc	r3, #5, #1
 8007eb4:	7113      	strb	r3, [r2, #4]
					button_pressed.button_f_low = false;
 8007eb6:	4a09      	ldr	r2, [pc, #36]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007eb8:	7913      	ldrb	r3, [r2, #4]
 8007eba:	f36f 03c3 	bfc	r3, #3, #1
 8007ebe:	7113      	strb	r3, [r2, #4]
					button_pressed.button_f_mid = false;
 8007ec0:	4a06      	ldr	r2, [pc, #24]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007ec2:	7913      	ldrb	r3, [r2, #4]
 8007ec4:	f36f 1304 	bfc	r3, #4, #1
 8007ec8:	7113      	strb	r3, [r2, #4]
					button_pressed.button_standby = true;
 8007eca:	4a04      	ldr	r2, [pc, #16]	@ (8007edc <EXTI15_10_IRQHandler+0x13c>)
 8007ecc:	7913      	ldrb	r3, [r2, #4]
 8007ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ed2:	7113      	strb	r3, [r2, #4]
        // Handle PB15 interrupt
    }
}
 8007ed4:	bf00      	nop
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	40013c00 	.word	0x40013c00
 8007edc:	20003838 	.word	0x20003838

08007ee0 <Drive_CS_low>:




void Drive_CS_low()
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	2110      	movs	r1, #16
 8007ee8:	4802      	ldr	r0, [pc, #8]	@ (8007ef4 <Drive_CS_low+0x14>)
 8007eea:	f7fb fb99 	bl	8003620 <HAL_GPIO_WritePin>
}
 8007eee:	bf00      	nop
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	40020000 	.word	0x40020000

08007ef8 <Drive_CS_high>:


void Drive_CS_high()
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8007efc:	2201      	movs	r2, #1
 8007efe:	2110      	movs	r1, #16
 8007f00:	4802      	ldr	r0, [pc, #8]	@ (8007f0c <Drive_CS_high+0x14>)
 8007f02:	f7fb fb8d 	bl	8003620 <HAL_GPIO_WritePin>
}
 8007f06:	bf00      	nop
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40020000 	.word	0x40020000

08007f10 <Drive_DC_low>:


void Drive_DC_low()
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 8007f14:	2200      	movs	r2, #0
 8007f16:	2110      	movs	r1, #16
 8007f18:	4802      	ldr	r0, [pc, #8]	@ (8007f24 <Drive_DC_low+0x14>)
 8007f1a:	f7fb fb81 	bl	8003620 <HAL_GPIO_WritePin>
}
 8007f1e:	bf00      	nop
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	bf00      	nop
 8007f24:	40020800 	.word	0x40020800

08007f28 <Drive_DC_high>:


void Drive_DC_high()
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	2110      	movs	r1, #16
 8007f30:	4802      	ldr	r0, [pc, #8]	@ (8007f3c <Drive_DC_high+0x14>)
 8007f32:	f7fb fb75 	bl	8003620 <HAL_GPIO_WritePin>
}
 8007f36:	bf00      	nop
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	40020800 	.word	0x40020800

08007f40 <Drive_RESET_low>:


void Drive_RESET_low()
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8007f44:	2200      	movs	r2, #0
 8007f46:	2120      	movs	r1, #32
 8007f48:	4802      	ldr	r0, [pc, #8]	@ (8007f54 <Drive_RESET_low+0x14>)
 8007f4a:	f7fb fb69 	bl	8003620 <HAL_GPIO_WritePin>
}
 8007f4e:	bf00      	nop
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	40020800 	.word	0x40020800

08007f58 <Drive_RESET_high>:


void Drive_RESET_high()
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	2120      	movs	r1, #32
 8007f60:	4802      	ldr	r0, [pc, #8]	@ (8007f6c <Drive_RESET_high+0x14>)
 8007f62:	f7fb fb5d 	bl	8003620 <HAL_GPIO_WritePin>
}
 8007f66:	bf00      	nop
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40020800 	.word	0x40020800

08007f70 <SPI_send_byte>:


void SPI_send_byte(uint8_t byte_to_transmit)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_transmit, 1, 10);
 8007f7a:	1df9      	adds	r1, r7, #7
 8007f7c:	230a      	movs	r3, #10
 8007f7e:	2201      	movs	r2, #1
 8007f80:	4803      	ldr	r0, [pc, #12]	@ (8007f90 <SPI_send_byte+0x20>)
 8007f82:	f7fd fdce 	bl	8005b22 <HAL_SPI_Transmit>
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20005918 	.word	0x20005918

08007f94 <SPI_send_array>:


void SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi1, array_to_transmit, array_size, 100);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	2364      	movs	r3, #100	@ 0x64
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4803      	ldr	r0, [pc, #12]	@ (8007fb4 <SPI_send_array+0x20>)
 8007fa8:	f7fd fdbb 	bl	8005b22 <HAL_SPI_Transmit>
}
 8007fac:	bf00      	nop
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}
 8007fb4:	20005918 	.word	0x20005918

08007fb8 <msDelay>:


void msDelay(uint32_t milliseconds)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f7fa fff1 	bl	8002fa8 <HAL_Delay>
}
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <Display_command>:


void Display_command(uint8_t command)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	71fb      	strb	r3, [r7, #7]
	Drive_CS_low();
 8007fd8:	f7ff ff82 	bl	8007ee0 <Drive_CS_low>
	Drive_DC_low();
 8007fdc:	f7ff ff98 	bl	8007f10 <Drive_DC_low>
	SPI_send_byte(command);
 8007fe0:	79fb      	ldrb	r3, [r7, #7]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7ff ffc4 	bl	8007f70 <SPI_send_byte>
	Drive_CS_high();
 8007fe8:	f7ff ff86 	bl	8007ef8 <Drive_CS_high>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <Display_data>:

void Display_data(uint8_t data)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	71fb      	strb	r3, [r7, #7]
	Drive_CS_low();
 8007ffe:	f7ff ff6f 	bl	8007ee0 <Drive_CS_low>
	Drive_DC_high();
 8008002:	f7ff ff91 	bl	8007f28 <Drive_DC_high>
	SPI_send_byte(data);
 8008006:	79fb      	ldrb	r3, [r7, #7]
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff ffb1 	bl	8007f70 <SPI_send_byte>
	Drive_CS_high();
 800800e:	f7ff ff73 	bl	8007ef8 <Drive_CS_high>
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <Display_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void Display_init()
{
 800801a:	b580      	push	{r7, lr}
 800801c:	af00      	add	r7, sp, #0
	Drive_RESET_low();
 800801e:	f7ff ff8f 	bl	8007f40 <Drive_RESET_low>
	msDelay(1);
 8008022:	2001      	movs	r0, #1
 8008024:	f7ff ffc8 	bl	8007fb8 <msDelay>
	Drive_RESET_high();
 8008028:	f7ff ff96 	bl	8007f58 <Drive_RESET_high>
	msDelay(50);
 800802c:	2032      	movs	r0, #50	@ 0x32
 800802e:	f7ff ffc3 	bl	8007fb8 <msDelay>
	Display_command(0xFD);
 8008032:	20fd      	movs	r0, #253	@ 0xfd
 8008034:	f7ff ffcb 	bl	8007fce <Display_command>
	Display_data(0x12);
 8008038:	2012      	movs	r0, #18
 800803a:	f7ff ffdb 	bl	8007ff4 <Display_data>
	Display_command(0xAE);
 800803e:	20ae      	movs	r0, #174	@ 0xae
 8008040:	f7ff ffc5 	bl	8007fce <Display_command>
	Display_command(0xB3);
 8008044:	20b3      	movs	r0, #179	@ 0xb3
 8008046:	f7ff ffc2 	bl	8007fce <Display_command>
	Display_data(0x91);
 800804a:	2091      	movs	r0, #145	@ 0x91
 800804c:	f7ff ffd2 	bl	8007ff4 <Display_data>
	Display_command(0xCA);
 8008050:	20ca      	movs	r0, #202	@ 0xca
 8008052:	f7ff ffbc 	bl	8007fce <Display_command>
	Display_data(0x3F);
 8008056:	203f      	movs	r0, #63	@ 0x3f
 8008058:	f7ff ffcc 	bl	8007ff4 <Display_data>
	Display_command(0xA2);
 800805c:	20a2      	movs	r0, #162	@ 0xa2
 800805e:	f7ff ffb6 	bl	8007fce <Display_command>
	Display_data(0x00);
 8008062:	2000      	movs	r0, #0
 8008064:	f7ff ffc6 	bl	8007ff4 <Display_data>
	Display_command(0xA1);
 8008068:	20a1      	movs	r0, #161	@ 0xa1
 800806a:	f7ff ffb0 	bl	8007fce <Display_command>
	Display_data(0x00);
 800806e:	2000      	movs	r0, #0
 8008070:	f7ff ffc0 	bl	8007ff4 <Display_data>
	Display_command(0xA0);
 8008074:	20a0      	movs	r0, #160	@ 0xa0
 8008076:	f7ff ffaa 	bl	8007fce <Display_command>
	Display_data(0x14);
 800807a:	2014      	movs	r0, #20
 800807c:	f7ff ffba 	bl	8007ff4 <Display_data>
	Display_data(0x11);
 8008080:	2011      	movs	r0, #17
 8008082:	f7ff ffb7 	bl	8007ff4 <Display_data>
	Display_command(0xB5);
 8008086:	20b5      	movs	r0, #181	@ 0xb5
 8008088:	f7ff ffa1 	bl	8007fce <Display_command>
	Display_data(0x00);
 800808c:	2000      	movs	r0, #0
 800808e:	f7ff ffb1 	bl	8007ff4 <Display_data>
	Display_command(0xAB);
 8008092:	20ab      	movs	r0, #171	@ 0xab
 8008094:	f7ff ff9b 	bl	8007fce <Display_command>
	Display_data(0x01);
 8008098:	2001      	movs	r0, #1
 800809a:	f7ff ffab 	bl	8007ff4 <Display_data>
	Display_command(0xB4);
 800809e:	20b4      	movs	r0, #180	@ 0xb4
 80080a0:	f7ff ff95 	bl	8007fce <Display_command>
	Display_data(0xA0);
 80080a4:	20a0      	movs	r0, #160	@ 0xa0
 80080a6:	f7ff ffa5 	bl	8007ff4 <Display_data>
	Display_data(0xFD);
 80080aa:	20fd      	movs	r0, #253	@ 0xfd
 80080ac:	f7ff ffa2 	bl	8007ff4 <Display_data>
	Display_command(0xC1);
 80080b0:	20c1      	movs	r0, #193	@ 0xc1
 80080b2:	f7ff ff8c 	bl	8007fce <Display_command>
	Display_data(0xFF);
 80080b6:	20ff      	movs	r0, #255	@ 0xff
 80080b8:	f7ff ff9c 	bl	8007ff4 <Display_data>
	Display_command(0xC7);
 80080bc:	20c7      	movs	r0, #199	@ 0xc7
 80080be:	f7ff ff86 	bl	8007fce <Display_command>
	Display_data(0x0F);
 80080c2:	200f      	movs	r0, #15
 80080c4:	f7ff ff96 	bl	8007ff4 <Display_data>
	Display_command(0xB9);
 80080c8:	20b9      	movs	r0, #185	@ 0xb9
 80080ca:	f7ff ff80 	bl	8007fce <Display_command>
	Display_command(0xB1);
 80080ce:	20b1      	movs	r0, #177	@ 0xb1
 80080d0:	f7ff ff7d 	bl	8007fce <Display_command>
	Display_data(0xE2);
 80080d4:	20e2      	movs	r0, #226	@ 0xe2
 80080d6:	f7ff ff8d 	bl	8007ff4 <Display_data>
	Display_command(0xD1);
 80080da:	20d1      	movs	r0, #209	@ 0xd1
 80080dc:	f7ff ff77 	bl	8007fce <Display_command>
	Display_data(0x82);
 80080e0:	2082      	movs	r0, #130	@ 0x82
 80080e2:	f7ff ff87 	bl	8007ff4 <Display_data>
	Display_data(0x20);
 80080e6:	2020      	movs	r0, #32
 80080e8:	f7ff ff84 	bl	8007ff4 <Display_data>
	Display_command(0xBB);
 80080ec:	20bb      	movs	r0, #187	@ 0xbb
 80080ee:	f7ff ff6e 	bl	8007fce <Display_command>
	Display_data(0x1F);
 80080f2:	201f      	movs	r0, #31
 80080f4:	f7ff ff7e 	bl	8007ff4 <Display_data>
	Display_command(0xB6);
 80080f8:	20b6      	movs	r0, #182	@ 0xb6
 80080fa:	f7ff ff68 	bl	8007fce <Display_command>
	Display_data(0x08);
 80080fe:	2008      	movs	r0, #8
 8008100:	f7ff ff78 	bl	8007ff4 <Display_data>
	Display_command(0xBE);
 8008104:	20be      	movs	r0, #190	@ 0xbe
 8008106:	f7ff ff62 	bl	8007fce <Display_command>
	Display_data(0x07);
 800810a:	2007      	movs	r0, #7
 800810c:	f7ff ff72 	bl	8007ff4 <Display_data>
	Display_command(0xA6);
 8008110:	20a6      	movs	r0, #166	@ 0xa6
 8008112:	f7ff ff5c 	bl	8007fce <Display_command>
	Display_command(0xA9);
 8008116:	20a9      	movs	r0, #169	@ 0xa9
 8008118:	f7ff ff59 	bl	8007fce <Display_command>
	msDelay(10);
 800811c:	200a      	movs	r0, #10
 800811e:	f7ff ff4b 	bl	8007fb8 <msDelay>
	Display_command(0xAF);
 8008122:	20af      	movs	r0, #175	@ 0xaf
 8008124:	f7ff ff53 	bl	8007fce <Display_command>
	msDelay(50);
 8008128:	2032      	movs	r0, #50	@ 0x32
 800812a:	f7ff ff45 	bl	8007fb8 <msDelay>
}
 800812e:	bf00      	nop
 8008130:	bd80      	pop	{r7, pc}

08008132 <Display_set_window>:
	Display_command(SET_DEFAULT_GRAYSCALE_TAB);
}


void Display_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
{
 8008132:	b590      	push	{r4, r7, lr}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	4604      	mov	r4, r0
 800813a:	4608      	mov	r0, r1
 800813c:	4611      	mov	r1, r2
 800813e:	461a      	mov	r2, r3
 8008140:	4623      	mov	r3, r4
 8008142:	71fb      	strb	r3, [r7, #7]
 8008144:	4603      	mov	r3, r0
 8008146:	71bb      	strb	r3, [r7, #6]
 8008148:	460b      	mov	r3, r1
 800814a:	717b      	strb	r3, [r7, #5]
 800814c:	4613      	mov	r3, r2
 800814e:	713b      	strb	r3, [r7, #4]
	Display_command(SET_COLUMN_ADDR);  //set columns range
 8008150:	2015      	movs	r0, #21
 8008152:	f7ff ff3c 	bl	8007fce <Display_command>
	Display_data(28+start_column);
 8008156:	79fb      	ldrb	r3, [r7, #7]
 8008158:	331c      	adds	r3, #28
 800815a:	b2db      	uxtb	r3, r3
 800815c:	4618      	mov	r0, r3
 800815e:	f7ff ff49 	bl	8007ff4 <Display_data>
	Display_data(28+end_column);
 8008162:	79bb      	ldrb	r3, [r7, #6]
 8008164:	331c      	adds	r3, #28
 8008166:	b2db      	uxtb	r3, r3
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff ff43 	bl	8007ff4 <Display_data>
	Display_command(SET_ROW_ADDR);  //set rows range
 800816e:	2075      	movs	r0, #117	@ 0x75
 8008170:	f7ff ff2d 	bl	8007fce <Display_command>
	Display_data(start_row);
 8008174:	797b      	ldrb	r3, [r7, #5]
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff ff3c 	bl	8007ff4 <Display_data>
	Display_data(end_row);
 800817c:	793b      	ldrb	r3, [r7, #4]
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff ff38 	bl	8007ff4 <Display_data>
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	bd90      	pop	{r4, r7, pc}

0800818c <Send_buffer>:


void Send_buffer(uint8_t* buffer, uint32_t buffer_size)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
	Display_command(ENABLE_RAM_WRITE);  //enable write of pixels
 8008196:	205c      	movs	r0, #92	@ 0x5c
 8008198:	f7ff ff19 	bl	8007fce <Display_command>
	Drive_CS_low();
 800819c:	f7ff fea0 	bl	8007ee0 <Drive_CS_low>
	Drive_DC_high();
 80081a0:	f7ff fec2 	bl	8007f28 <Drive_DC_high>
	SPI_send_array(buffer, buffer_size);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f7ff fef4 	bl	8007f94 <SPI_send_array>
	Drive_CS_high();
 80081ac:	f7ff fea4 	bl	8007ef8 <Drive_CS_high>
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <set_buffer_size>:

uint16_t _buffer_height = 64;       //buffer dimensions used to determine if pixel is within array bounds
uint16_t _buffer_width = 256;      //by default buffer size is equal to OLED size

void set_buffer_size(uint16_t _buffer_width, uint16_t buffer_height)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	460a      	mov	r2, r1
 80081c2:	80fb      	strh	r3, [r7, #6]
 80081c4:	4613      	mov	r3, r2
 80081c6:	80bb      	strh	r3, [r7, #4]
	_buffer_height = buffer_height;
 80081c8:	4a04      	ldr	r2, [pc, #16]	@ (80081dc <set_buffer_size+0x24>)
 80081ca:	88bb      	ldrh	r3, [r7, #4]
 80081cc:	8013      	strh	r3, [r2, #0]
	_buffer_width = _buffer_width;
}
 80081ce:	bf00      	nop
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	20003602 	.word	0x20003602

080081e0 <fill_buffer>:

void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 80081ec:	78fb      	ldrb	r3, [r7, #3]
 80081ee:	011b      	lsls	r3, r3, #4
 80081f0:	b25a      	sxtb	r2, r3
 80081f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	b25b      	sxtb	r3, r3
 80081fa:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 80081fc:	4b0e      	ldr	r3, [pc, #56]	@ (8008238 <fill_buffer+0x58>)
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	461a      	mov	r2, r3
 8008202:	4b0e      	ldr	r3, [pc, #56]	@ (800823c <fill_buffer+0x5c>)
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	fb02 f303 	mul.w	r3, r2, r3
 800820a:	0fda      	lsrs	r2, r3, #31
 800820c:	4413      	add	r3, r2
 800820e:	105b      	asrs	r3, r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 8008212:	e004      	b.n	800821e <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	1c5a      	adds	r2, r3, #1
 8008218:	607a      	str	r2, [r7, #4]
 800821a:	7afa      	ldrb	r2, [r7, #11]
 800821c:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1e5a      	subs	r2, r3, #1
 8008222:	60fa      	str	r2, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1f5      	bne.n	8008214 <fill_buffer+0x34>
	}
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	20003602 	.word	0x20003602
 800823c:	20003604 	.word	0x20003604

08008240 <draw_pixel>:

void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	4608      	mov	r0, r1
 800824a:	4611      	mov	r1, r2
 800824c:	461a      	mov	r2, r3
 800824e:	4603      	mov	r3, r0
 8008250:	817b      	strh	r3, [r7, #10]
 8008252:	460b      	mov	r3, r1
 8008254:	813b      	strh	r3, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 800825a:	4b35      	ldr	r3, [pc, #212]	@ (8008330 <draw_pixel+0xf0>)
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	897a      	ldrh	r2, [r7, #10]
 8008260:	429a      	cmp	r2, r3
 8008262:	d25f      	bcs.n	8008324 <draw_pixel+0xe4>
 8008264:	4b33      	ldr	r3, [pc, #204]	@ (8008334 <draw_pixel+0xf4>)
 8008266:	881b      	ldrh	r3, [r3, #0]
 8008268:	893a      	ldrh	r2, [r7, #8]
 800826a:	429a      	cmp	r2, r3
 800826c:	d25a      	bcs.n	8008324 <draw_pixel+0xe4>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 800826e:	893b      	ldrh	r3, [r7, #8]
 8008270:	4a2f      	ldr	r2, [pc, #188]	@ (8008330 <draw_pixel+0xf0>)
 8008272:	8812      	ldrh	r2, [r2, #0]
 8008274:	fb03 f202 	mul.w	r2, r3, r2
 8008278:	897b      	ldrh	r3, [r7, #10]
 800827a:	4413      	add	r3, r2
 800827c:	2b00      	cmp	r3, #0
 800827e:	f003 0301 	and.w	r3, r3, #1
 8008282:	bfb8      	it	lt
 8008284:	425b      	neglt	r3, r3
 8008286:	2b01      	cmp	r3, #1
 8008288:	d125      	bne.n	80082d6 <draw_pixel+0x96>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 800828a:	893b      	ldrh	r3, [r7, #8]
 800828c:	4a28      	ldr	r2, [pc, #160]	@ (8008330 <draw_pixel+0xf0>)
 800828e:	8812      	ldrh	r2, [r2, #0]
 8008290:	fb03 f202 	mul.w	r2, r3, r2
 8008294:	897b      	ldrh	r3, [r7, #10]
 8008296:	4413      	add	r3, r2
 8008298:	0fda      	lsrs	r2, r3, #31
 800829a:	4413      	add	r3, r2
 800829c:	105b      	asrs	r3, r3, #1
 800829e:	461a      	mov	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	4413      	add	r3, r2
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	b25b      	sxtb	r3, r3
 80082a8:	f023 030f 	bic.w	r3, r3, #15
 80082ac:	b25a      	sxtb	r2, r3
 80082ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	b259      	sxtb	r1, r3
 80082b6:	893b      	ldrh	r3, [r7, #8]
 80082b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008330 <draw_pixel+0xf0>)
 80082ba:	8812      	ldrh	r2, [r2, #0]
 80082bc:	fb03 f202 	mul.w	r2, r3, r2
 80082c0:	897b      	ldrh	r3, [r7, #10]
 80082c2:	4413      	add	r3, r2
 80082c4:	0fda      	lsrs	r2, r3, #31
 80082c6:	4413      	add	r3, r2
 80082c8:	105b      	asrs	r3, r3, #1
 80082ca:	461a      	mov	r2, r3
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	b2ca      	uxtb	r2, r1
 80082d2:	701a      	strb	r2, [r3, #0]
 80082d4:	e027      	b.n	8008326 <draw_pixel+0xe6>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 80082d6:	893b      	ldrh	r3, [r7, #8]
 80082d8:	4a15      	ldr	r2, [pc, #84]	@ (8008330 <draw_pixel+0xf0>)
 80082da:	8812      	ldrh	r2, [r2, #0]
 80082dc:	fb03 f202 	mul.w	r2, r3, r2
 80082e0:	897b      	ldrh	r3, [r7, #10]
 80082e2:	4413      	add	r3, r2
 80082e4:	0fda      	lsrs	r2, r3, #31
 80082e6:	4413      	add	r3, r2
 80082e8:	105b      	asrs	r3, r3, #1
 80082ea:	461a      	mov	r2, r3
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	4413      	add	r3, r2
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	b25b      	sxtb	r3, r3
 80082f4:	f003 030f 	and.w	r3, r3, #15
 80082f8:	b25a      	sxtb	r2, r3
 80082fa:	79fb      	ldrb	r3, [r7, #7]
 80082fc:	011b      	lsls	r3, r3, #4
 80082fe:	b25b      	sxtb	r3, r3
 8008300:	4313      	orrs	r3, r2
 8008302:	b259      	sxtb	r1, r3
 8008304:	893b      	ldrh	r3, [r7, #8]
 8008306:	4a0a      	ldr	r2, [pc, #40]	@ (8008330 <draw_pixel+0xf0>)
 8008308:	8812      	ldrh	r2, [r2, #0]
 800830a:	fb03 f202 	mul.w	r2, r3, r2
 800830e:	897b      	ldrh	r3, [r7, #10]
 8008310:	4413      	add	r3, r2
 8008312:	0fda      	lsrs	r2, r3, #31
 8008314:	4413      	add	r3, r2
 8008316:	105b      	asrs	r3, r3, #1
 8008318:	461a      	mov	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	4413      	add	r3, r2
 800831e:	b2ca      	uxtb	r2, r1
 8008320:	701a      	strb	r2, [r3, #0]
 8008322:	e000      	b.n	8008326 <draw_pixel+0xe6>
		return;
 8008324:	bf00      	nop
	}
}
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	20003604 	.word	0x20003604
 8008334:	20003602 	.word	0x20003602

08008338 <draw_rect_filled>:

void draw_rect_filled(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b086      	sub	sp, #24
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	4608      	mov	r0, r1
 8008342:	4611      	mov	r1, r2
 8008344:	461a      	mov	r2, r3
 8008346:	4603      	mov	r3, r0
 8008348:	817b      	strh	r3, [r7, #10]
 800834a:	460b      	mov	r3, r1
 800834c:	813b      	strh	r3, [r7, #8]
 800834e:	4613      	mov	r3, r2
 8008350:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = x0; i <= x1; i++)
 8008352:	897b      	ldrh	r3, [r7, #10]
 8008354:	82fb      	strh	r3, [r7, #22]
 8008356:	e013      	b.n	8008380 <draw_rect_filled+0x48>
	{
		for (uint16_t j = y0; j <= y1; j++)
 8008358:	893b      	ldrh	r3, [r7, #8]
 800835a:	82bb      	strh	r3, [r7, #20]
 800835c:	e009      	b.n	8008372 <draw_rect_filled+0x3a>
		{
			draw_pixel(frame_buffer, i, j, brightness);
 800835e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008362:	8aba      	ldrh	r2, [r7, #20]
 8008364:	8af9      	ldrh	r1, [r7, #22]
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff ff6a 	bl	8008240 <draw_pixel>
		for (uint16_t j = y0; j <= y1; j++)
 800836c:	8abb      	ldrh	r3, [r7, #20]
 800836e:	3301      	adds	r3, #1
 8008370:	82bb      	strh	r3, [r7, #20]
 8008372:	8aba      	ldrh	r2, [r7, #20]
 8008374:	8c3b      	ldrh	r3, [r7, #32]
 8008376:	429a      	cmp	r2, r3
 8008378:	d9f1      	bls.n	800835e <draw_rect_filled+0x26>
	for (uint16_t i = x0; i <= x1; i++)
 800837a:	8afb      	ldrh	r3, [r7, #22]
 800837c:	3301      	adds	r3, #1
 800837e:	82fb      	strh	r3, [r7, #22]
 8008380:	8afa      	ldrh	r2, [r7, #22]
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	429a      	cmp	r2, r3
 8008386:	d9e7      	bls.n	8008358 <draw_rect_filled+0x20>
		}
	}
}
 8008388:	bf00      	nop
 800838a:	bf00      	nop
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
	...

08008394 <select_font>:

void select_font(const GFXfont *new_gfx_font)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 800839c:	4a04      	ldr	r2, [pc, #16]	@ (80083b0 <select_font+0x1c>)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6013      	str	r3, [r2, #0]
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	200059b0 	.word	0x200059b0

080083b4 <draw_char>:

void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b08a      	sub	sp, #40	@ 0x28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	4608      	mov	r0, r1
 80083be:	4611      	mov	r1, r2
 80083c0:	461a      	mov	r2, r3
 80083c2:	4603      	mov	r3, r0
 80083c4:	72fb      	strb	r3, [r7, #11]
 80083c6:	460b      	mov	r3, r1
 80083c8:	813b      	strh	r3, [r7, #8]
 80083ca:	4613      	mov	r3, r2
 80083cc:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 80083ce:	4b44      	ldr	r3, [pc, #272]	@ (80084e0 <draw_char+0x12c>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d07f      	beq.n	80084d6 <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 80083d6:	4b42      	ldr	r3, [pc, #264]	@ (80084e0 <draw_char+0x12c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	891b      	ldrh	r3, [r3, #8]
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	7afa      	ldrb	r2, [r7, #11]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 80083e4:	4b3e      	ldr	r3, [pc, #248]	@ (80084e0 <draw_char+0x12c>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	7afb      	ldrb	r3, [r7, #11]
 80083ec:	00db      	lsls	r3, r3, #3
 80083ee:	4413      	add	r3, r2
 80083f0:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 80083f2:	4b3b      	ldr	r3, [pc, #236]	@ (80084e0 <draw_char+0x12c>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	881b      	ldrh	r3, [r3, #0]
 80083fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t width = glyph->width;
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	789b      	ldrb	r3, [r3, #2]
 8008404:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	78db      	ldrb	r3, [r3, #3]
 800840a:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	795b      	ldrb	r3, [r3, #5]
 8008410:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	799b      	ldrb	r3, [r3, #6]
 8008416:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 8008418:	2300      	movs	r3, #0
 800841a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t bits = 0;
 800841e:	2300      	movs	r3, #0
 8008420:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t y_pos = 0;
 8008424:	2300      	movs	r3, #0
 8008426:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint8_t x_pos = 0;
 800842a:	2300      	movs	r3, #0
 800842c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 8008430:	2300      	movs	r3, #0
 8008432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008436:	e048      	b.n	80084ca <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 8008438:	2300      	movs	r3, #0
 800843a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800843e:	e03a      	b.n	80084b6 <draw_char+0x102>
		{
			if (!(bit++ & 7))
 8008440:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	f887 2025 	strb.w	r2, [r7, #37]	@ 0x25
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	2b00      	cmp	r3, #0
 8008450:	d108      	bne.n	8008464 <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8008452:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8008458:	461a      	mov	r2, r3
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	4413      	add	r3, r2
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			}
			if (bits & 0x80)
 8008464:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8008468:	2b00      	cmp	r3, #0
 800846a:	da1a      	bge.n	80084a2 <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 800846c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008470:	b29a      	uxth	r2, r3
 8008472:	893b      	ldrh	r3, [r7, #8]
 8008474:	4413      	add	r3, r2
 8008476:	b29a      	uxth	r2, r3
 8008478:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800847c:	b29b      	uxth	r3, r3
 800847e:	4413      	add	r3, r2
 8008480:	b299      	uxth	r1, r3
 8008482:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008486:	b29a      	uxth	r2, r3
 8008488:	88fb      	ldrh	r3, [r7, #6]
 800848a:	4413      	add	r3, r2
 800848c:	b29a      	uxth	r2, r3
 800848e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008492:	b29b      	uxth	r3, r3
 8008494:	4413      	add	r3, r2
 8008496:	b29a      	uxth	r2, r3
 8008498:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800849c:	68f8      	ldr	r0, [r7, #12]
 800849e:	f7ff fecf 	bl	8008240 <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 80084a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084a6:	005b      	lsls	r3, r3, #1
 80084a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 80084ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80084b0:	3301      	adds	r3, #1
 80084b2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80084b6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80084ba:	7dfb      	ldrb	r3, [r7, #23]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d3bf      	bcc.n	8008440 <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 80084c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80084c4:	3301      	adds	r3, #1
 80084c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80084ca:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80084ce:	7dbb      	ldrb	r3, [r7, #22]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d3b1      	bcc.n	8008438 <draw_char+0x84>
 80084d4:	e000      	b.n	80084d8 <draw_char+0x124>
		return;
 80084d6:	bf00      	nop
		}
	}
}
 80084d8:	3728      	adds	r7, #40	@ 0x28
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	200059b0 	.word	0x200059b0

080084e4 <draw_text>:

void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af02      	add	r7, sp, #8
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4611      	mov	r1, r2
 80084f0:	461a      	mov	r2, r3
 80084f2:	460b      	mov	r3, r1
 80084f4:	80fb      	strh	r3, [r7, #6]
 80084f6:	4613      	mov	r3, r2
 80084f8:	80bb      	strh	r3, [r7, #4]
    while (*text)
 80084fa:	e01b      	b.n	8008534 <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	7819      	ldrb	r1, [r3, #0]
 8008500:	88b8      	ldrh	r0, [r7, #4]
 8008502:	88fa      	ldrh	r2, [r7, #6]
 8008504:	7e3b      	ldrb	r3, [r7, #24]
 8008506:	9300      	str	r3, [sp, #0]
 8008508:	4603      	mov	r3, r0
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7ff ff52 	bl	80083b4 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 8008510:	4b0d      	ldr	r3, [pc, #52]	@ (8008548 <draw_text+0x64>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800851e:	3b20      	subs	r3, #32
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	4413      	add	r3, r2
 8008524:	791b      	ldrb	r3, [r3, #4]
 8008526:	461a      	mov	r2, r3
 8008528:	88fb      	ldrh	r3, [r7, #6]
 800852a:	4413      	add	r3, r2
 800852c:	80fb      	strh	r3, [r7, #6]
        text++;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	3301      	adds	r3, #1
 8008532:	60bb      	str	r3, [r7, #8]
    while (*text)
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1df      	bne.n	80084fc <draw_text+0x18>
    }
}
 800853c:	bf00      	nop
 800853e:	bf00      	nop
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	200059b0 	.word	0x200059b0

0800854c <draw_bitmap_4bpp>:
		}
	}
}

void draw_bitmap_4bpp(uint8_t *frame_buffer, const uint8_t *bitmap, uint16_t x0, uint16_t y0, uint16_t x_size, uint16_t y_size)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b088      	sub	sp, #32
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4611      	mov	r1, r2
 8008558:	461a      	mov	r2, r3
 800855a:	460b      	mov	r3, r1
 800855c:	80fb      	strh	r3, [r7, #6]
 800855e:	4613      	mov	r3, r2
 8008560:	80bb      	strh	r3, [r7, #4]
	uint16_t bitmap_pos = 0;       //byte index in bitmap array
 8008562:	2300      	movs	r3, #0
 8008564:	83fb      	strh	r3, [r7, #30]
	uint16_t processed_pixels = 0;
 8008566:	2300      	movs	r3, #0
 8008568:	83bb      	strh	r3, [r7, #28]
	uint8_t pixel_parity = 0;      //if pixel is even = 0; odd = 1
 800856a:	2300      	movs	r3, #0
 800856c:	75fb      	strb	r3, [r7, #23]

	for (uint16_t i = y0; i < y0 + y_size; i++)
 800856e:	88bb      	ldrh	r3, [r7, #4]
 8008570:	837b      	strh	r3, [r7, #26]
 8008572:	e034      	b.n	80085de <draw_bitmap_4bpp+0x92>
	{
		for (uint16_t j = x0; j < x0 + x_size; j++)
 8008574:	88fb      	ldrh	r3, [r7, #6]
 8008576:	833b      	strh	r3, [r7, #24]
 8008578:	e028      	b.n	80085cc <draw_bitmap_4bpp+0x80>
		{
			pixel_parity = processed_pixels % 2;
 800857a:	8bbb      	ldrh	r3, [r7, #28]
 800857c:	b2db      	uxtb	r3, r3
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	75fb      	strb	r3, [r7, #23]

			if(pixel_parity == 0)
 8008584:	7dfb      	ldrb	r3, [r7, #23]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10e      	bne.n	80085a8 <draw_bitmap_4bpp+0x5c>
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos] >> 4);
 800858a:	8bfb      	ldrh	r3, [r7, #30]
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	4413      	add	r3, r2
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	091b      	lsrs	r3, r3, #4
 8008594:	b2db      	uxtb	r3, r3
 8008596:	8b7a      	ldrh	r2, [r7, #26]
 8008598:	8b39      	ldrh	r1, [r7, #24]
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f7ff fe50 	bl	8008240 <draw_pixel>
				processed_pixels++;
 80085a0:	8bbb      	ldrh	r3, [r7, #28]
 80085a2:	3301      	adds	r3, #1
 80085a4:	83bb      	strh	r3, [r7, #28]
 80085a6:	e00e      	b.n	80085c6 <draw_bitmap_4bpp+0x7a>
			}
			else
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos]);
 80085a8:	8bfb      	ldrh	r3, [r7, #30]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	4413      	add	r3, r2
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	8b7a      	ldrh	r2, [r7, #26]
 80085b2:	8b39      	ldrh	r1, [r7, #24]
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f7ff fe43 	bl	8008240 <draw_pixel>
				processed_pixels++;
 80085ba:	8bbb      	ldrh	r3, [r7, #28]
 80085bc:	3301      	adds	r3, #1
 80085be:	83bb      	strh	r3, [r7, #28]
				bitmap_pos++;
 80085c0:	8bfb      	ldrh	r3, [r7, #30]
 80085c2:	3301      	adds	r3, #1
 80085c4:	83fb      	strh	r3, [r7, #30]
		for (uint16_t j = x0; j < x0 + x_size; j++)
 80085c6:	8b3b      	ldrh	r3, [r7, #24]
 80085c8:	3301      	adds	r3, #1
 80085ca:	833b      	strh	r3, [r7, #24]
 80085cc:	8b3a      	ldrh	r2, [r7, #24]
 80085ce:	88f9      	ldrh	r1, [r7, #6]
 80085d0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80085d2:	440b      	add	r3, r1
 80085d4:	429a      	cmp	r2, r3
 80085d6:	dbd0      	blt.n	800857a <draw_bitmap_4bpp+0x2e>
	for (uint16_t i = y0; i < y0 + y_size; i++)
 80085d8:	8b7b      	ldrh	r3, [r7, #26]
 80085da:	3301      	adds	r3, #1
 80085dc:	837b      	strh	r3, [r7, #26]
 80085de:	8b7a      	ldrh	r2, [r7, #26]
 80085e0:	88b9      	ldrh	r1, [r7, #4]
 80085e2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80085e4:	440b      	add	r3, r1
 80085e6:	429a      	cmp	r2, r3
 80085e8:	dbc4      	blt.n	8008574 <draw_bitmap_4bpp+0x28>
			}
		}
	}
}
 80085ea:	bf00      	nop
 80085ec:	bf00      	nop
 80085ee:	3720      	adds	r7, #32
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <send_buffer_to_OLED>:

void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b082      	sub	sp, #8
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	807b      	strh	r3, [r7, #2]
 8008600:	4613      	mov	r3, r2
 8008602:	803b      	strh	r3, [r7, #0]
	Display_set_window(0, 63, 0, 127);
 8008604:	237f      	movs	r3, #127	@ 0x7f
 8008606:	2200      	movs	r2, #0
 8008608:	213f      	movs	r1, #63	@ 0x3f
 800860a:	2000      	movs	r0, #0
 800860c:	f7ff fd91 	bl	8008132 <Display_set_window>
	Send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 8008610:	883b      	ldrh	r3, [r7, #0]
 8008612:	01db      	lsls	r3, r3, #7
 8008614:	461a      	mov	r2, r3
 8008616:	887b      	ldrh	r3, [r7, #2]
 8008618:	4413      	add	r3, r2
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	4413      	add	r3, r2
 800861e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008622:	4618      	mov	r0, r3
 8008624:	f7ff fdb2 	bl	800818c <Send_buffer>
}
 8008628:	bf00      	nop
 800862a:	3708      	adds	r7, #8
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <mcp23017_regForPin>:
 * @param pin
 * @param portAaddr
 * @param portBaddr
 * @return
 */
static uint8_t mcp23017_regForPin (uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	4603      	mov	r3, r0
 8008638:	71fb      	strb	r3, [r7, #7]
 800863a:	460b      	mov	r3, r1
 800863c:	71bb      	strb	r3, [r7, #6]
 800863e:	4613      	mov	r3, r2
 8008640:	717b      	strb	r3, [r7, #5]
	return(pin<8) ? portAaddr : portBaddr;
 8008642:	79fb      	ldrb	r3, [r7, #7]
 8008644:	2b07      	cmp	r3, #7
 8008646:	d801      	bhi.n	800864c <mcp23017_regForPin+0x1c>
 8008648:	79bb      	ldrb	r3, [r7, #6]
 800864a:	e000      	b.n	800864e <mcp23017_regForPin+0x1e>
 800864c:	797b      	ldrb	r3, [r7, #5]
}
 800864e:	4618      	mov	r0, r3
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <mcp23017_bitForPin>:
/**
 * Bit number associated to a given pin
 * @param pin
 * @return
 */
static uint8_t mcp23017_bitForPin(uint8_t pin){
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	4603      	mov	r3, r0
 8008662:	71fb      	strb	r3, [r7, #7]
	return pin % 8;
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	f003 0307 	and.w	r3, r3, #7
 800866a:	b2db      	uxtb	r3, r3
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <mcp23017_readRegister>:
 * Reads a given register
 * @param hdev
 * @param addr
 * @return
 */
HAL_StatusTypeDef mcp23017_readRegister(MCP23017_HandleTypeDef *hdev, uint8_t addr, uint8_t *data) {
 8008678:	b580      	push	{r7, lr}
 800867a:	b08a      	sub	sp, #40	@ 0x28
 800867c:	af04      	add	r7, sp, #16
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	460b      	mov	r3, r1
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	72fb      	strb	r3, [r7, #11]
	// read the current GPINTEN
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Read(hdev->hi2c1, hdev->addr, addr, 1, data, 1, HAL_MAX_DELAY);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	8899      	ldrh	r1, [r3, #4]
 800868e:	7afb      	ldrb	r3, [r7, #11]
 8008690:	b29a      	uxth	r2, r3
 8008692:	f04f 33ff 	mov.w	r3, #4294967295
 8008696:	9302      	str	r3, [sp, #8]
 8008698:	2301      	movs	r3, #1
 800869a:	9301      	str	r3, [sp, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	2301      	movs	r3, #1
 80086a2:	f7fb fa15 	bl	8003ad0 <HAL_I2C_Mem_Read>
 80086a6:	4603      	mov	r3, r0
 80086a8:	75fb      	strb	r3, [r7, #23]
	return ret;
 80086aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3718      	adds	r7, #24
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <mcp23017_writeRegister>:
 * @param regAddr Register Address
 * @param regValue Value to write to
 * @return
 */
static HAL_StatusTypeDef mcp23017_writeRegister(MCP23017_HandleTypeDef *hdev, uint8_t regAddr, uint8_t regValue)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af04      	add	r7, sp, #16
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
 80086c0:	4613      	mov	r3, r2
 80086c2:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Write(hdev->hi2c1, hdev->addr, regAddr, 1, (uint8_t*) &regValue, 1, HAL_MAX_DELAY);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6818      	ldr	r0, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	8899      	ldrh	r1, [r3, #4]
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	f04f 33ff 	mov.w	r3, #4294967295
 80086d4:	9302      	str	r3, [sp, #8]
 80086d6:	2301      	movs	r3, #1
 80086d8:	9301      	str	r3, [sp, #4]
 80086da:	1cbb      	adds	r3, r7, #2
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	2301      	movs	r3, #1
 80086e0:	f7fb f8fc 	bl	80038dc <HAL_I2C_Mem_Write>
 80086e4:	4603      	mov	r3, r0
 80086e6:	73fb      	strb	r3, [r7, #15]
	return ret;
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <mcp23017_updateRegisterBit>:
 * @param pin
 * @param pValue
 * @param portAaddr
 * @param portBaddr
 */
HAL_StatusTypeDef mcp23017_updateRegisterBit(MCP23017_HandleTypeDef *hdev, uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	4608      	mov	r0, r1
 80086fc:	4611      	mov	r1, r2
 80086fe:	461a      	mov	r2, r3
 8008700:	4603      	mov	r3, r0
 8008702:	70fb      	strb	r3, [r7, #3]
 8008704:	460b      	mov	r3, r1
 8008706:	70bb      	strb	r3, [r7, #2]
 8008708:	4613      	mov	r3, r2
 800870a:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr = mcp23017_regForPin(pin,portAaddr,portBaddr);
 800870c:	7e3a      	ldrb	r2, [r7, #24]
 800870e:	7879      	ldrb	r1, [r7, #1]
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	4618      	mov	r0, r3
 8008714:	f7ff ff8c 	bl	8008630 <mcp23017_regForPin>
 8008718:	4603      	mov	r3, r0
 800871a:	73fb      	strb	r3, [r7, #15]
	uint8_t bit = mcp23017_bitForPin(pin);
 800871c:	78fb      	ldrb	r3, [r7, #3]
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff ff9b 	bl	800865a <mcp23017_bitForPin>
 8008724:	4603      	mov	r3, r0
 8008726:	73bb      	strb	r3, [r7, #14]
	mcp23017_readRegister(hdev, regAddr, &regValue);
 8008728:	f107 020d 	add.w	r2, r7, #13
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff ffa1 	bl	8008678 <mcp23017_readRegister>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
 8008736:	78bb      	ldrb	r3, [r7, #2]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d009      	beq.n	8008750 <mcp23017_updateRegisterBit+0x5e>
 800873c:	7bbb      	ldrb	r3, [r7, #14]
 800873e:	2201      	movs	r2, #1
 8008740:	fa02 f303 	lsl.w	r3, r2, r3
 8008744:	b2da      	uxtb	r2, r3
 8008746:	7b7b      	ldrb	r3, [r7, #13]
 8008748:	4313      	orrs	r3, r2
 800874a:	b2db      	uxtb	r3, r3
 800874c:	737b      	strb	r3, [r7, #13]
 800874e:	e00a      	b.n	8008766 <mcp23017_updateRegisterBit+0x74>
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	2201      	movs	r2, #1
 8008754:	fa02 f303 	lsl.w	r3, r2, r3
 8008758:	b2db      	uxtb	r3, r3
 800875a:	43db      	mvns	r3, r3
 800875c:	b2da      	uxtb	r2, r3
 800875e:	7b7b      	ldrb	r3, [r7, #13]
 8008760:	4013      	ands	r3, r2
 8008762:	b2db      	uxtb	r3, r3
 8008764:	737b      	strb	r3, [r7, #13]

	return (mcp23017_writeRegister(hdev, regAddr,regValue));
 8008766:	7b7a      	ldrb	r2, [r7, #13]
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff ffa1 	bl	80086b4 <mcp23017_writeRegister>
 8008772:	4603      	mov	r3, r0
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <mcp23017_init>:
 * @param hdev
 * @param hi2c1
 * @param addr
 */
HAL_StatusTypeDef mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c1, uint16_t addr)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret;

	hdev->hi2c1 = hi2c1;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	601a      	str	r2, [r3, #0]
	hdev->addr = addr << 1;
 8008790:	88fb      	ldrh	r3, [r7, #6]
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	b29a      	uxth	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	809a      	strh	r2, [r3, #4]

	ret = HAL_I2C_IsDeviceReady(hi2c1, hdev->addr, 20, I2C_READYNESS_DELAY);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	8899      	ldrh	r1, [r3, #4]
 800879e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80087a2:	2214      	movs	r2, #20
 80087a4:	68b8      	ldr	r0, [r7, #8]
 80087a6:	f7fb fbc5 	bl	8003f34 <HAL_I2C_IsDeviceReady>
 80087aa:	4603      	mov	r3, r0
 80087ac:	75bb      	strb	r3, [r7, #22]
	if (ret != HAL_OK) return ret;
 80087ae:	7dbb      	ldrb	r3, [r7, #22]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <mcp23017_init+0x3c>
 80087b4:	7dbb      	ldrb	r3, [r7, #22]
 80087b6:	e01a      	b.n	80087ee <mcp23017_init+0x72>
	//DISSLW = 	0 : slew rate enabled
	//HAEN = 	0 : hardware address pin is always enabled on 23017
	//ODR = 	0 : open drain output
	//INTPOL = 	0 : interrupt active low
	// bit0 - unplemented read as 0
	uint8_t byte = 0 | 1 << 5 | 1 << 6;
 80087b8:	2360      	movs	r3, #96	@ 0x60
 80087ba:	757b      	strb	r3, [r7, #21]

	for (uint8_t i = 0; i < 2; i++) {
 80087bc:	2300      	movs	r3, #0
 80087be:	75fb      	strb	r3, [r7, #23]
 80087c0:	e011      	b.n	80087e6 <mcp23017_init+0x6a>
		ret = mcp23017_writeRegister(hdev, MCP23017_IOCONA+i, byte);
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	330a      	adds	r3, #10
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	7d7a      	ldrb	r2, [r7, #21]
 80087ca:	4619      	mov	r1, r3
 80087cc:	68f8      	ldr	r0, [r7, #12]
 80087ce:	f7ff ff71 	bl	80086b4 <mcp23017_writeRegister>
 80087d2:	4603      	mov	r3, r0
 80087d4:	75bb      	strb	r3, [r7, #22]
		if (ret != HAL_OK) return ret;
 80087d6:	7dbb      	ldrb	r3, [r7, #22]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <mcp23017_init+0x64>
 80087dc:	7dbb      	ldrb	r3, [r7, #22]
 80087de:	e006      	b.n	80087ee <mcp23017_init+0x72>
	for (uint8_t i = 0; i < 2; i++) {
 80087e0:	7dfb      	ldrb	r3, [r7, #23]
 80087e2:	3301      	adds	r3, #1
 80087e4:	75fb      	strb	r3, [r7, #23]
 80087e6:	7dfb      	ldrb	r3, [r7, #23]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d9ea      	bls.n	80087c2 <mcp23017_init+0x46>
	}

	return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3718      	adds	r7, #24
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <mcp23017_portMode>:
 * @param pullups
 * @param inverted
 * @return
 */
HAL_StatusTypeDef mcp23017_portMode(MCP23017_HandleTypeDef *hdev, MCP23017Port_t port, MCP23017_PinModeIO_t pinmode, MCP23017_PinPolarity_t pinpolarity)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	4608      	mov	r0, r1
 8008800:	4611      	mov	r1, r2
 8008802:	461a      	mov	r2, r3
 8008804:	4603      	mov	r3, r0
 8008806:	70fb      	strb	r3, [r7, #3]
 8008808:	460b      	mov	r3, r1
 800880a:	70bb      	strb	r3, [r7, #2]
 800880c:	4613      	mov	r3, r2
 800880e:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	ret = mcp23017_writeRegister(hdev, MCP23017_IODIRA + port,
 8008810:	78bb      	ldrb	r3, [r7, #2]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <mcp23017_portMode+0x26>
			(pinmode == MCP23017_PIN_MODE_INPUT || pinmode == MCP23017_PIN_MODE_INPUT_PULLUP) ? 0xFF : 0x00);
 8008816:	78bb      	ldrb	r3, [r7, #2]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d101      	bne.n	8008820 <mcp23017_portMode+0x2a>
	ret = mcp23017_writeRegister(hdev, MCP23017_IODIRA + port,
 800881c:	22ff      	movs	r2, #255	@ 0xff
 800881e:	e000      	b.n	8008822 <mcp23017_portMode+0x2c>
 8008820:	2200      	movs	r2, #0
 8008822:	78fb      	ldrb	r3, [r7, #3]
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff ff44 	bl	80086b4 <mcp23017_writeRegister>
 800882c:	4603      	mov	r3, r0
 800882e:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <mcp23017_portMode+0x44>
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	e028      	b.n	800888c <mcp23017_portMode+0x96>

	ret = mcp23017_writeRegister(hdev, MCP23017_GPPUA + port, (pinmode == MCP23017_PIN_MODE_INPUT_PULLUP ? 0xff : 0x00));
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	330c      	adds	r3, #12
 800883e:	b2d9      	uxtb	r1, r3
 8008840:	78bb      	ldrb	r3, [r7, #2]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d101      	bne.n	800884a <mcp23017_portMode+0x54>
 8008846:	23ff      	movs	r3, #255	@ 0xff
 8008848:	e000      	b.n	800884c <mcp23017_portMode+0x56>
 800884a:	2300      	movs	r3, #0
 800884c:	461a      	mov	r2, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7ff ff30 	bl	80086b4 <mcp23017_writeRegister>
 8008854:	4603      	mov	r3, r0
 8008856:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <mcp23017_portMode+0x6c>
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	e014      	b.n	800888c <mcp23017_portMode+0x96>

	ret = mcp23017_writeRegister(hdev, MCP23017_IPOLA + port, pinpolarity ? 0xff : 0x00);
 8008862:	78fb      	ldrb	r3, [r7, #3]
 8008864:	3302      	adds	r3, #2
 8008866:	b2d9      	uxtb	r1, r3
 8008868:	787b      	ldrb	r3, [r7, #1]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <mcp23017_portMode+0x7c>
 800886e:	23ff      	movs	r3, #255	@ 0xff
 8008870:	e000      	b.n	8008874 <mcp23017_portMode+0x7e>
 8008872:	2300      	movs	r3, #0
 8008874:	461a      	mov	r2, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f7ff ff1c 	bl	80086b4 <mcp23017_writeRegister>
 800887c:	4603      	mov	r3, r0
 800887e:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8008880:	7bfb      	ldrb	r3, [r7, #15]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <mcp23017_portMode+0x94>
 8008886:	7bfb      	ldrb	r3, [r7, #15]
 8008888:	e000      	b.n	800888c <mcp23017_portMode+0x96>

	return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <mcp23017_pinMode>:
 * @param mode
 * @param inverted
 * @return
 */
HAL_StatusTypeDef mcp23017_pinMode(MCP23017_HandleTypeDef *hdev, uint8_t pin, MCP23017_PinModeIO_t mode, MCP23017_PinPolarity_t polarity)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af02      	add	r7, sp, #8
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	4608      	mov	r0, r1
 800889e:	4611      	mov	r1, r2
 80088a0:	461a      	mov	r2, r3
 80088a2:	4603      	mov	r3, r0
 80088a4:	70fb      	strb	r3, [r7, #3]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70bb      	strb	r3, [r7, #2]
 80088aa:	4613      	mov	r3, r2
 80088ac:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	/* if input we set IODIRA or IODIRB (depending on pin number) to 1 */
	ret = mcp23017_updateRegisterBit(hdev, pin, (mode == MCP23017_PIN_MODE_INPUT || mode == MCP23017_PIN_MODE_INPUT_PULLUP),
 80088ae:	78bb      	ldrb	r3, [r7, #2]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d002      	beq.n	80088ba <mcp23017_pinMode+0x26>
 80088b4:	78bb      	ldrb	r3, [r7, #2]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <mcp23017_pinMode+0x2a>
 80088ba:	2301      	movs	r3, #1
 80088bc:	e000      	b.n	80088c0 <mcp23017_pinMode+0x2c>
 80088be:	2300      	movs	r3, #0
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	78f9      	ldrb	r1, [r7, #3]
 80088c4:	2301      	movs	r3, #1
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	2300      	movs	r3, #0
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7ff ff11 	bl	80086f2 <mcp23017_updateRegisterBit>
 80088d0:	4603      	mov	r3, r0
 80088d2:	73fb      	strb	r3, [r7, #15]
			MCP23017_IODIRA, MCP23017_IODIRB);
	if (ret != HAL_OK) return ret;
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d001      	beq.n	80088de <mcp23017_pinMode+0x4a>
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	e02a      	b.n	8008934 <mcp23017_pinMode+0xa0>

	/* we also need to control the polarity, will be ignored anyway if output, 1 if pol inverted */
	ret = mcp23017_updateRegisterBit(hdev, pin, polarity == MCP23017_PIN_POLARITY_INVERTED, MCP23017_IPOLA, MCP23017_IPOLB);
 80088de:	787b      	ldrb	r3, [r7, #1]
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	bf0c      	ite	eq
 80088e4:	2301      	moveq	r3, #1
 80088e6:	2300      	movne	r3, #0
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	461a      	mov	r2, r3
 80088ec:	78f9      	ldrb	r1, [r7, #3]
 80088ee:	2303      	movs	r3, #3
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	2302      	movs	r3, #2
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff fefc 	bl	80086f2 <mcp23017_updateRegisterBit>
 80088fa:	4603      	mov	r3, r0
 80088fc:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 80088fe:	7bfb      	ldrb	r3, [r7, #15]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <mcp23017_pinMode+0x74>
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	e015      	b.n	8008934 <mcp23017_pinMode+0xa0>

	/* then we need to setup the pull up for that pin if MCP23017_PIN_MODE_INPUT_PULLUP was selected */
	ret = mcp23017_updateRegisterBit(hdev, pin, mode == MCP23017_PIN_MODE_INPUT_PULLUP, MCP23017_GPPUA, MCP23017_GPPUB);
 8008908:	78bb      	ldrb	r3, [r7, #2]
 800890a:	2b01      	cmp	r3, #1
 800890c:	bf0c      	ite	eq
 800890e:	2301      	moveq	r3, #1
 8008910:	2300      	movne	r3, #0
 8008912:	b2db      	uxtb	r3, r3
 8008914:	461a      	mov	r2, r3
 8008916:	78f9      	ldrb	r1, [r7, #3]
 8008918:	230d      	movs	r3, #13
 800891a:	9300      	str	r3, [sp, #0]
 800891c:	230c      	movs	r3, #12
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff fee7 	bl	80086f2 <mcp23017_updateRegisterBit>
 8008924:	4603      	mov	r3, r0
 8008926:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8008928:	7bfb      	ldrb	r3, [r7, #15]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <mcp23017_pinMode+0x9e>
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	e000      	b.n	8008934 <mcp23017_pinMode+0xa0>

	return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3710      	adds	r7, #16
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <mcp23017_digitalWrite>:
 * @param pin
 * @param data
 * @return
 */
HAL_StatusTypeDef mcp23017_digitalWrite(MCP23017_HandleTypeDef *hdev, uint8_t pin, GPIO_PinState pinState)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	460b      	mov	r3, r1
 8008946:	70fb      	strb	r3, [r7, #3]
 8008948:	4613      	mov	r3, r2
 800894a:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	HAL_StatusTypeDef ret;
	uint8_t bit = mcp23017_bitForPin(pin);
 800894c:	78fb      	ldrb	r3, [r7, #3]
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff fe83 	bl	800865a <mcp23017_bitForPin>
 8008954:	4603      	mov	r3, r0
 8008956:	73fb      	strb	r3, [r7, #15]

	// read the current GPIO output latches
	uint8_t regAddr = mcp23017_regForPin(pin, MCP23017_OLATA, MCP23017_OLATB);
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	2215      	movs	r2, #21
 800895c:	2114      	movs	r1, #20
 800895e:	4618      	mov	r0, r3
 8008960:	f7ff fe66 	bl	8008630 <mcp23017_regForPin>
 8008964:	4603      	mov	r3, r0
 8008966:	73bb      	strb	r3, [r7, #14]
	ret = mcp23017_readRegister(hdev, regAddr, &data);
 8008968:	f107 020c 	add.w	r2, r7, #12
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f7ff fe81 	bl	8008678 <mcp23017_readRegister>
 8008976:	4603      	mov	r3, r0
 8008978:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) return ret;
 800897a:	7b7b      	ldrb	r3, [r7, #13]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <mcp23017_digitalWrite+0x48>
 8008980:	7b7b      	ldrb	r3, [r7, #13]
 8008982:	e026      	b.n	80089d2 <mcp23017_digitalWrite+0x96>

	// set the pin and direction
	bitWrite(data, bit, pinState);
 8008984:	78bb      	ldrb	r3, [r7, #2]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d009      	beq.n	800899e <mcp23017_digitalWrite+0x62>
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	2201      	movs	r2, #1
 800898e:	fa02 f303 	lsl.w	r3, r2, r3
 8008992:	b2da      	uxtb	r2, r3
 8008994:	7b3b      	ldrb	r3, [r7, #12]
 8008996:	4313      	orrs	r3, r2
 8008998:	b2db      	uxtb	r3, r3
 800899a:	733b      	strb	r3, [r7, #12]
 800899c:	e00a      	b.n	80089b4 <mcp23017_digitalWrite+0x78>
 800899e:	7bfb      	ldrb	r3, [r7, #15]
 80089a0:	2201      	movs	r2, #1
 80089a2:	fa02 f303 	lsl.w	r3, r2, r3
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	43db      	mvns	r3, r3
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	7b3b      	ldrb	r3, [r7, #12]
 80089ae:	4013      	ands	r3, r2
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	733b      	strb	r3, [r7, #12]

	// write the new GPIO
	regAddr = mcp23017_regForPin(pin, MCP23017_GPIOA, MCP23017_GPIOB);
 80089b4:	78fb      	ldrb	r3, [r7, #3]
 80089b6:	2213      	movs	r2, #19
 80089b8:	2112      	movs	r1, #18
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7ff fe38 	bl	8008630 <mcp23017_regForPin>
 80089c0:	4603      	mov	r3, r0
 80089c2:	73bb      	strb	r3, [r7, #14]
	return (mcp23017_writeRegister(hdev, regAddr, data));
 80089c4:	7b3a      	ldrb	r2, [r7, #12]
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7ff fe72 	bl	80086b4 <mcp23017_writeRegister>
 80089d0:	4603      	mov	r3, r0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <Ex_gpio_init>:
MCP23017_HandleTypeDef hmcp;

void Ex_gpio_write(uint8_t pin, GPIO_PinState pinState);

void Ex_gpio_init(void)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	af00      	add	r7, sp, #0
	mcp23017_init(&hmcp, &hi2c1, MCP23017_ADD_27);
 80089e0:	2227      	movs	r2, #39	@ 0x27
 80089e2:	491a      	ldr	r1, [pc, #104]	@ (8008a4c <Ex_gpio_init+0x70>)
 80089e4:	481a      	ldr	r0, [pc, #104]	@ (8008a50 <Ex_gpio_init+0x74>)
 80089e6:	f7ff fec9 	bl	800877c <mcp23017_init>
	mcp23017_portMode(&hmcp, MCP23017Port_A, MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80089ea:	2300      	movs	r3, #0
 80089ec:	2202      	movs	r2, #2
 80089ee:	2100      	movs	r1, #0
 80089f0:	4817      	ldr	r0, [pc, #92]	@ (8008a50 <Ex_gpio_init+0x74>)
 80089f2:	f7ff ff00 	bl	80087f6 <mcp23017_portMode>
	mcp23017_portMode(&hmcp, MCP23017Port_B, MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80089f6:	2300      	movs	r3, #0
 80089f8:	2202      	movs	r2, #2
 80089fa:	2101      	movs	r1, #1
 80089fc:	4814      	ldr	r0, [pc, #80]	@ (8008a50 <Ex_gpio_init+0x74>)
 80089fe:	f7ff fefa 	bl	80087f6 <mcp23017_portMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPB0_Pin | MCP23017_GPB1_Pin | MCP23017_GPB2_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8008a02:	2300      	movs	r3, #0
 8008a04:	2202      	movs	r2, #2
 8008a06:	210b      	movs	r1, #11
 8008a08:	4811      	ldr	r0, [pc, #68]	@ (8008a50 <Ex_gpio_init+0x74>)
 8008a0a:	f7ff ff43 	bl	8008894 <mcp23017_pinMode>
    mcp23017_pinMode(&hmcp,MCP23017_GPB3_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8008a0e:	2300      	movs	r3, #0
 8008a10:	2202      	movs	r2, #2
 8008a12:	210b      	movs	r1, #11
 8008a14:	480e      	ldr	r0, [pc, #56]	@ (8008a50 <Ex_gpio_init+0x74>)
 8008a16:	f7ff ff3d 	bl	8008894 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA0_Pin | MCP23017_GPA1_Pin | MCP23017_GPA2_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	2103      	movs	r1, #3
 8008a20:	480b      	ldr	r0, [pc, #44]	@ (8008a50 <Ex_gpio_init+0x74>)
 8008a22:	f7ff ff37 	bl	8008894 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA3_Pin | MCP23017_GPA4_Pin | MCP23017_GPA5_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8008a26:	2300      	movs	r3, #0
 8008a28:	2202      	movs	r2, #2
 8008a2a:	2107      	movs	r1, #7
 8008a2c:	4808      	ldr	r0, [pc, #32]	@ (8008a50 <Ex_gpio_init+0x74>)
 8008a2e:	f7ff ff31 	bl	8008894 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA6_Pin | MCP23017_GPA7_Pin ,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8008a32:	2300      	movs	r3, #0
 8008a34:	2202      	movs	r2, #2
 8008a36:	2107      	movs	r1, #7
 8008a38:	4805      	ldr	r0, [pc, #20]	@ (8008a50 <Ex_gpio_init+0x74>)
 8008a3a:	f7ff ff2b 	bl	8008894 <mcp23017_pinMode>
	Ex_gpio_write(MCP23017_GPB0_Pin,GPIO_PIN_RESET);
 8008a3e:	2100      	movs	r1, #0
 8008a40:	2008      	movs	r0, #8
 8008a42:	f000 f807 	bl	8008a54 <Ex_gpio_write>
}
 8008a46:	bf00      	nop
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	200059b4 	.word	0x200059b4
 8008a50:	20005a08 	.word	0x20005a08

08008a54 <Ex_gpio_write>:
void Ex_gpio_write(uint8_t pin, GPIO_PinState pinState)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	460a      	mov	r2, r1
 8008a5e:	71fb      	strb	r3, [r7, #7]
 8008a60:	4613      	mov	r3, r2
 8008a62:	71bb      	strb	r3, [r7, #6]
    mcp23017_digitalWrite(&hmcp,pin,pinState);
 8008a64:	79ba      	ldrb	r2, [r7, #6]
 8008a66:	79fb      	ldrb	r3, [r7, #7]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	4803      	ldr	r0, [pc, #12]	@ (8008a78 <Ex_gpio_write+0x24>)
 8008a6c:	f7ff ff66 	bl	800893c <mcp23017_digitalWrite>

}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20005a08 	.word	0x20005a08

08008a7c <Tempset_35_led>:

void Tempset_35_led(void)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA3_Pin,GPIO_PIN_SET);
 8008a80:	2101      	movs	r1, #1
 8008a82:	2003      	movs	r0, #3
 8008a84:	f7ff ffe6 	bl	8008a54 <Ex_gpio_write>
}
 8008a88:	bf00      	nop
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <Tempset_40_led>:
void Tempset_40_led(void)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA4_Pin,GPIO_PIN_SET);
 8008a90:	2101      	movs	r1, #1
 8008a92:	2004      	movs	r0, #4
 8008a94:	f7ff ffde 	bl	8008a54 <Ex_gpio_write>
}
 8008a98:	bf00      	nop
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <Tempset_43_led>:
void Tempset_43_led(void)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA5_Pin,GPIO_PIN_SET);
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	2005      	movs	r0, #5
 8008aa4:	f7ff ffd6 	bl	8008a54 <Ex_gpio_write>
}
 8008aa8:	bf00      	nop
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <Fanset_low_led>:


void Fanset_low_led()
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPA7_Pin,GPIO_PIN_SET);
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	2007      	movs	r0, #7
 8008ab4:	f7ff ffce 	bl	8008a54 <Ex_gpio_write>

}
 8008ab8:	bf00      	nop
 8008aba:	bd80      	pop	{r7, pc}

08008abc <Fanset_mid_led>:

void Fanset_mid_led()
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPB0_Pin,GPIO_PIN_SET);
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	2008      	movs	r0, #8
 8008ac4:	f7ff ffc6 	bl	8008a54 <Ex_gpio_write>


}
 8008ac8:	bf00      	nop
 8008aca:	bd80      	pop	{r7, pc}

08008acc <Fanset_high_led>:

void Fanset_high_led()
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPB1_Pin,GPIO_PIN_SET);
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	2009      	movs	r0, #9
 8008ad4:	f7ff ffbe 	bl	8008a54 <Ex_gpio_write>


}
 8008ad8:	bf00      	nop
 8008ada:	bd80      	pop	{r7, pc}

08008adc <Tempset_amb_led>:
void Tempset_amb_led(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0

  Ex_gpio_write(MCP23017_GPA6_Pin,GPIO_PIN_SET);
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	2006      	movs	r0, #6
 8008ae4:	f7ff ffb6 	bl	8008a54 <Ex_gpio_write>

}
 8008ae8:	bf00      	nop
 8008aea:	bd80      	pop	{r7, pc}

08008aec <Standbyset_led>:
void Standbyset_led(void)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0

   Ex_gpio_write(MCP23017_GPB2_Pin,GPIO_PIN_SET);
 8008af0:	2101      	movs	r1, #1
 8008af2:	200a      	movs	r0, #10
 8008af4:	f7ff ffae 	bl	8008a54 <Ex_gpio_write>



}
 8008af8:	bf00      	nop
 8008afa:	bd80      	pop	{r7, pc}

08008afc <TempReset_35_led>:
void TempReset_35_led(void)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA3_Pin,GPIO_PIN_RESET);
 8008b00:	2100      	movs	r1, #0
 8008b02:	2003      	movs	r0, #3
 8008b04:	f7ff ffa6 	bl	8008a54 <Ex_gpio_write>
}
 8008b08:	bf00      	nop
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <TempReset_40_led>:
void TempReset_40_led(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA4_Pin,GPIO_PIN_RESET);
 8008b10:	2100      	movs	r1, #0
 8008b12:	2004      	movs	r0, #4
 8008b14:	f7ff ff9e 	bl	8008a54 <Ex_gpio_write>
}
 8008b18:	bf00      	nop
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <TempReset_43_led>:
void TempReset_43_led(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
	Ex_gpio_write(MCP23017_GPA5_Pin,GPIO_PIN_RESET);
 8008b20:	2100      	movs	r1, #0
 8008b22:	2005      	movs	r0, #5
 8008b24:	f7ff ff96 	bl	8008a54 <Ex_gpio_write>
}
 8008b28:	bf00      	nop
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <FanReset_low_led>:


void FanReset_low_led()
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPA7_Pin,GPIO_PIN_RESET);
 8008b30:	2100      	movs	r1, #0
 8008b32:	2007      	movs	r0, #7
 8008b34:	f7ff ff8e 	bl	8008a54 <Ex_gpio_write>

}
 8008b38:	bf00      	nop
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <FanReset_mid_led>:

void FanReset_mid_led()
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0

    Ex_gpio_write(MCP23017_GPB0_Pin,GPIO_PIN_RESET);
 8008b40:	2100      	movs	r1, #0
 8008b42:	2008      	movs	r0, #8
 8008b44:	f7ff ff86 	bl	8008a54 <Ex_gpio_write>


}
 8008b48:	bf00      	nop
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <FanReset_high_led>:

void FanReset_high_led()
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
    Ex_gpio_write(MCP23017_GPB1_Pin,GPIO_PIN_RESET);
 8008b50:	2100      	movs	r1, #0
 8008b52:	2009      	movs	r0, #9
 8008b54:	f7ff ff7e 	bl	8008a54 <Ex_gpio_write>


}
 8008b58:	bf00      	nop
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <TempReset_amb_led>:
void TempReset_amb_led(void)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	af00      	add	r7, sp, #0
  Ex_gpio_write(MCP23017_GPA6_Pin,GPIO_PIN_RESET);
 8008b60:	2100      	movs	r1, #0
 8008b62:	2006      	movs	r0, #6
 8008b64:	f7ff ff76 	bl	8008a54 <Ex_gpio_write>

}
 8008b68:	bf00      	nop
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <StandbyReset_led>:
void StandbyReset_led(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0

  Ex_gpio_write(MCP23017_GPB2_Pin,GPIO_PIN_RESET);
 8008b70:	2100      	movs	r1, #0
 8008b72:	200a      	movs	r0, #10
 8008b74:	f7ff ff6e 	bl	8008a54 <Ex_gpio_write>

}
 8008b78:	bf00      	nop
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <led_states>:

uint8_t led_states(led_state state)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	71fb      	strb	r3, [r7, #7]
  uint8_t led_status = state;
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	73fb      	strb	r3, [r7, #15]

  switch(led_status)
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d028      	beq.n	8008be2 <led_states+0x66>
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	dc27      	bgt.n	8008be4 <led_states+0x68>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <led_states+0x22>
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d011      	beq.n	8008bc0 <led_states+0x44>
 8008b9c:	e022      	b.n	8008be4 <led_states+0x68>
  {
      case LED_OFF:
    	  TempReset_35_led();
 8008b9e:	f7ff ffad 	bl	8008afc <TempReset_35_led>
    	  TempReset_40_led();
 8008ba2:	f7ff ffb3 	bl	8008b0c <TempReset_40_led>
    	  TempReset_43_led();
 8008ba6:	f7ff ffb9 	bl	8008b1c <TempReset_43_led>

    	  FanReset_low_led();
 8008baa:	f7ff ffbf 	bl	8008b2c <FanReset_low_led>
    	  FanReset_mid_led();
 8008bae:	f7ff ffc5 	bl	8008b3c <FanReset_mid_led>
    	  FanReset_high_led();
 8008bb2:	f7ff ffcb 	bl	8008b4c <FanReset_high_led>

          TempReset_amb_led();
 8008bb6:	f7ff ffd1 	bl	8008b5c <TempReset_amb_led>
    	  StandbyReset_led();
 8008bba:	f7ff ffd7 	bl	8008b6c <StandbyReset_led>

	      break;
 8008bbe:	e011      	b.n	8008be4 <led_states+0x68>
      case LED_ON:
    	  Tempset_35_led();
 8008bc0:	f7ff ff5c 	bl	8008a7c <Tempset_35_led>
    	  Tempset_40_led();
 8008bc4:	f7ff ff62 	bl	8008a8c <Tempset_40_led>
    	  Tempset_43_led();
 8008bc8:	f7ff ff68 	bl	8008a9c <Tempset_43_led>

    	  Fanset_low_led();
 8008bcc:	f7ff ff6e 	bl	8008aac <Fanset_low_led>
    	  Fanset_mid_led();
 8008bd0:	f7ff ff74 	bl	8008abc <Fanset_mid_led>
    	  Fanset_high_led();
 8008bd4:	f7ff ff7a 	bl	8008acc <Fanset_high_led>



    	  Tempset_amb_led();
 8008bd8:	f7ff ff80 	bl	8008adc <Tempset_amb_led>
    	  Standbyset_led();
 8008bdc:	f7ff ff86 	bl	8008aec <Standbyset_led>

      	  break;
 8008be0:	e000      	b.n	8008be4 <led_states+0x68>
      case LED_BLINK:
           break;
 8008be2:	bf00      	nop

  }
  return LED_OK;
 8008be4:	2307      	movs	r3, #7
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
	...

08008bf0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08a      	sub	sp, #40	@ 0x28
 8008bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008bf6:	f107 0320 	add.w	r3, r7, #32
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]
 8008bfe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008c00:	1d3b      	adds	r3, r7, #4
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
 8008c06:	605a      	str	r2, [r3, #4]
 8008c08:	609a      	str	r2, [r3, #8]
 8008c0a:	60da      	str	r2, [r3, #12]
 8008c0c:	611a      	str	r2, [r3, #16]
 8008c0e:	615a      	str	r2, [r3, #20]
 8008c10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8008c12:	4b28      	ldr	r3, [pc, #160]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008c14:	4a28      	ldr	r2, [pc, #160]	@ (8008cb8 <MX_TIM5_Init+0xc8>)
 8008c16:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 50-1;
 8008c18:	4b26      	ldr	r3, [pc, #152]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008c1a:	2231      	movs	r2, #49	@ 0x31
 8008c1c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c1e:	4b25      	ldr	r3, [pc, #148]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 200-1;
 8008c24:	4b23      	ldr	r3, [pc, #140]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008c26:	22c7      	movs	r2, #199	@ 0xc7
 8008c28:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c2a:	4b22      	ldr	r3, [pc, #136]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c30:	4b20      	ldr	r3, [pc, #128]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008c32:	2200      	movs	r2, #0
 8008c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8008c36:	481f      	ldr	r0, [pc, #124]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008c38:	f7fd f9e1 	bl	8005ffe <HAL_TIM_PWM_Init>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8008c42:	f7f9 fde1 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c46:	2300      	movs	r3, #0
 8008c48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008c4e:	f107 0320 	add.w	r3, r7, #32
 8008c52:	4619      	mov	r1, r3
 8008c54:	4817      	ldr	r0, [pc, #92]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008c56:	f7fd ff63 	bl	8006b20 <HAL_TIMEx_MasterConfigSynchronization>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8008c60:	f7f9 fdd2 	bl	8002808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008c64:	2360      	movs	r3, #96	@ 0x60
 8008c66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008c74:	1d3b      	adds	r3, r7, #4
 8008c76:	2208      	movs	r2, #8
 8008c78:	4619      	mov	r1, r3
 8008c7a:	480e      	ldr	r0, [pc, #56]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008c7c:	f7fd fb10 	bl	80062a0 <HAL_TIM_PWM_ConfigChannel>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d001      	beq.n	8008c8a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8008c86:	f7f9 fdbf 	bl	8002808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8008c8a:	2370      	movs	r3, #112	@ 0x70
 8008c8c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008c8e:	1d3b      	adds	r3, r7, #4
 8008c90:	220c      	movs	r2, #12
 8008c92:	4619      	mov	r1, r3
 8008c94:	4807      	ldr	r0, [pc, #28]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008c96:	f7fd fb03 	bl	80062a0 <HAL_TIM_PWM_ConfigChannel>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d001      	beq.n	8008ca4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8008ca0:	f7f9 fdb2 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8008ca4:	4803      	ldr	r0, [pc, #12]	@ (8008cb4 <MX_TIM5_Init+0xc4>)
 8008ca6:	f7f9 fe8b 	bl	80029c0 <HAL_TIM_MspPostInit>

}
 8008caa:	bf00      	nop
 8008cac:	3728      	adds	r7, #40	@ 0x28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	20003840 	.word	0x20003840
 8008cb8:	40000c00 	.word	0x40000c00

08008cbc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM11_Init(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b088      	sub	sp, #32
 8008cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8008cc2:	1d3b      	adds	r3, r7, #4
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	605a      	str	r2, [r3, #4]
 8008cca:	609a      	str	r2, [r3, #8]
 8008ccc:	60da      	str	r2, [r3, #12]
 8008cce:	611a      	str	r2, [r3, #16]
 8008cd0:	615a      	str	r2, [r3, #20]
 8008cd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8008cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d4c <MX_TIM11_Init+0x90>)
 8008cd6:	4a1e      	ldr	r2, [pc, #120]	@ (8008d50 <MX_TIM11_Init+0x94>)
 8008cd8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 50-1;
 8008cda:	4b1c      	ldr	r3, [pc, #112]	@ (8008d4c <MX_TIM11_Init+0x90>)
 8008cdc:	2231      	movs	r2, #49	@ 0x31
 8008cde:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8008d4c <MX_TIM11_Init+0x90>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 200-1;
 8008ce6:	4b19      	ldr	r3, [pc, #100]	@ (8008d4c <MX_TIM11_Init+0x90>)
 8008ce8:	22c7      	movs	r2, #199	@ 0xc7
 8008cea:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cec:	4b17      	ldr	r3, [pc, #92]	@ (8008d4c <MX_TIM11_Init+0x90>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cf2:	4b16      	ldr	r3, [pc, #88]	@ (8008d4c <MX_TIM11_Init+0x90>)
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8008cf8:	4814      	ldr	r0, [pc, #80]	@ (8008d4c <MX_TIM11_Init+0x90>)
 8008cfa:	f7fd f931 	bl	8005f60 <HAL_TIM_Base_Init>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d001      	beq.n	8008d08 <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 8008d04:	f7f9 fd80 	bl	8002808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8008d08:	4810      	ldr	r0, [pc, #64]	@ (8008d4c <MX_TIM11_Init+0x90>)
 8008d0a:	f7fd f978 	bl	8005ffe <HAL_TIM_PWM_Init>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d001      	beq.n	8008d18 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8008d14:	f7f9 fd78 	bl	8002808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008d18:	2360      	movs	r3, #96	@ 0x60
 8008d1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008d28:	1d3b      	adds	r3, r7, #4
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4807      	ldr	r0, [pc, #28]	@ (8008d4c <MX_TIM11_Init+0x90>)
 8008d30:	f7fd fab6 	bl	80062a0 <HAL_TIM_PWM_ConfigChannel>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 8008d3a:	f7f9 fd65 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8008d3e:	4803      	ldr	r0, [pc, #12]	@ (8008d4c <MX_TIM11_Init+0x90>)
 8008d40:	f7f9 fe3e 	bl	80029c0 <HAL_TIM_MspPostInit>

}
 8008d44:	bf00      	nop
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	20003888 	.word	0x20003888
 8008d50:	40014800 	.word	0x40014800

08008d54 <MX_TIM1_Init>:

void MX_TIM1_Init(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b096      	sub	sp, #88	@ 0x58
 8008d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d5a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008d5e:	2200      	movs	r2, #0
 8008d60:	601a      	str	r2, [r3, #0]
 8008d62:	605a      	str	r2, [r3, #4]
 8008d64:	609a      	str	r2, [r3, #8]
 8008d66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d68:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d76:	2200      	movs	r2, #0
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	605a      	str	r2, [r3, #4]
 8008d7c:	609a      	str	r2, [r3, #8]
 8008d7e:	60da      	str	r2, [r3, #12]
 8008d80:	611a      	str	r2, [r3, #16]
 8008d82:	615a      	str	r2, [r3, #20]
 8008d84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008d86:	1d3b      	adds	r3, r7, #4
 8008d88:	2220      	movs	r2, #32
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 fb30 	bl	800a3f2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008d92:	4b3e      	ldr	r3, [pc, #248]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008d94:	4a3e      	ldr	r2, [pc, #248]	@ (8008e90 <MX_TIM1_Init+0x13c>)
 8008d96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8008d98:	4b3c      	ldr	r3, [pc, #240]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008d9a:	2231      	movs	r2, #49	@ 0x31
 8008d9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d9e:	4b3b      	ldr	r3, [pc, #236]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008da0:	2200      	movs	r2, #0
 8008da2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8008da4:	4b39      	ldr	r3, [pc, #228]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008da6:	22c7      	movs	r2, #199	@ 0xc7
 8008da8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008daa:	4b38      	ldr	r3, [pc, #224]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008db0:	4b36      	ldr	r3, [pc, #216]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008db6:	4b35      	ldr	r3, [pc, #212]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008dbc:	4833      	ldr	r0, [pc, #204]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008dbe:	f7fd f8cf 	bl	8005f60 <HAL_TIM_Base_Init>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d001      	beq.n	8008dcc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8008dc8:	f7f9 fd1e 	bl	8002808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008dd2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	482c      	ldr	r0, [pc, #176]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008dda:	f7fd fb23 	bl	8006424 <HAL_TIM_ConfigClockSource>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d001      	beq.n	8008de8 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8008de4:	f7f9 fd10 	bl	8002808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008de8:	4828      	ldr	r0, [pc, #160]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008dea:	f7fd f908 	bl	8005ffe <HAL_TIM_PWM_Init>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d001      	beq.n	8008df8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8008df4:	f7f9 fd08 	bl	8002808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008e00:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008e04:	4619      	mov	r1, r3
 8008e06:	4821      	ldr	r0, [pc, #132]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008e08:	f7fd fe8a 	bl	8006b20 <HAL_TIMEx_MasterConfigSynchronization>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8008e12:	f7f9 fcf9 	bl	8002808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e16:	2360      	movs	r3, #96	@ 0x60
 8008e18:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008e22:	2300      	movs	r3, #0
 8008e24:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e26:	2300      	movs	r3, #0
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008e36:	2200      	movs	r2, #0
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4814      	ldr	r0, [pc, #80]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008e3c:	f7fd fa30 	bl	80062a0 <HAL_TIM_PWM_ConfigChannel>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8008e46:	f7f9 fcdf 	bl	8002808 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008e5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008e62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008e64:	2300      	movs	r3, #0
 8008e66:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008e68:	1d3b      	adds	r3, r7, #4
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	4807      	ldr	r0, [pc, #28]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008e6e:	f7fd feb1 	bl	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8008e78:	f7f9 fcc6 	bl	8002808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008e7c:	4803      	ldr	r0, [pc, #12]	@ (8008e8c <MX_TIM1_Init+0x138>)
 8008e7e:	f7f9 fd9f 	bl	80029c0 <HAL_TIM_MspPostInit>

}
 8008e82:	bf00      	nop
 8008e84:	3758      	adds	r7, #88	@ 0x58
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20005a10 	.word	0x20005a10
 8008e90:	40010000 	.word	0x40010000

08008e94 <Motor_25_duty>:
//	HAL_Delay(500);
//}


void Motor_25_duty ()
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 50;
 8008e98:	4b04      	ldr	r3, [pc, #16]	@ (8008eac <Motor_25_duty+0x18>)
 8008e9a:	2232      	movs	r2, #50	@ 0x32
 8008e9c:	635a      	str	r2, [r3, #52]	@ 0x34


	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008e9e:	2100      	movs	r1, #0
 8008ea0:	4803      	ldr	r0, [pc, #12]	@ (8008eb0 <Motor_25_duty+0x1c>)
 8008ea2:	f7fd f8fb 	bl	800609c <HAL_TIM_PWM_Start>

}
 8008ea6:	bf00      	nop
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	40010000 	.word	0x40010000
 8008eb0:	20005a10 	.word	0x20005a10

08008eb4 <Motor_55_duty>:



//For 55% duty-cycle
void Motor_55_duty ()
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 110;
 8008eb8:	4b04      	ldr	r3, [pc, #16]	@ (8008ecc <Motor_55_duty+0x18>)
 8008eba:	226e      	movs	r2, #110	@ 0x6e
 8008ebc:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4803      	ldr	r0, [pc, #12]	@ (8008ed0 <Motor_55_duty+0x1c>)
 8008ec2:	f7fd f8eb 	bl	800609c <HAL_TIM_PWM_Start>

}
 8008ec6:	bf00      	nop
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	40010000 	.word	0x40010000
 8008ed0:	20005a10 	.word	0x20005a10

08008ed4 <Motor_95_duty>:

}

//For 95% duty-cycle
void Motor_95_duty ()
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 190;
 8008ed8:	4b04      	ldr	r3, [pc, #16]	@ (8008eec <Motor_95_duty+0x18>)
 8008eda:	22be      	movs	r2, #190	@ 0xbe
 8008edc:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008ede:	2100      	movs	r1, #0
 8008ee0:	4803      	ldr	r0, [pc, #12]	@ (8008ef0 <Motor_95_duty+0x1c>)
 8008ee2:	f7fd f8db 	bl	800609c <HAL_TIM_PWM_Start>

}
 8008ee6:	bf00      	nop
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	40010000 	.word	0x40010000
 8008ef0:	20005a10 	.word	0x20005a10

08008ef4 <USART_ReceiveData>:
DEVInfo devInfo;

char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b083      	sub	sp, #12
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]

  assert_param(IS_USART_ALL_PERIPH(USARTx));

  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f06:	b29b      	uxth	r3, r3
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	370c      	adds	r7, #12
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f12:	4770      	bx	lr

08008f14 <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	807b      	strh	r3, [r7, #2]

  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  USARTx->DR = (Data & (uint16_t)0x01FF);
 8008f20:	887b      	ldrh	r3, [r7, #2]
 8008f22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	605a      	str	r2, [r3, #4]
}
 8008f2a:	bf00      	nop
 8008f2c:	370c      	adds	r7, #12
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
	...

08008f38 <usart_setup>:

uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8008f40:	4b15      	ldr	r3, [pc, #84]	@ (8008f98 <usart_setup+0x60>)
 8008f42:	4a16      	ldr	r2, [pc, #88]	@ (8008f9c <usart_setup+0x64>)
 8008f44:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 8008f46:	4a14      	ldr	r2, [pc, #80]	@ (8008f98 <usart_setup+0x60>)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8008f4c:	4b12      	ldr	r3, [pc, #72]	@ (8008f98 <usart_setup+0x60>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 8008f52:	4b11      	ldr	r3, [pc, #68]	@ (8008f98 <usart_setup+0x60>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8008f58:	4b0f      	ldr	r3, [pc, #60]	@ (8008f98 <usart_setup+0x60>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8008f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8008f98 <usart_setup+0x60>)
 8008f60:	220c      	movs	r2, #12
 8008f62:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f64:	4b0c      	ldr	r3, [pc, #48]	@ (8008f98 <usart_setup+0x60>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f98 <usart_setup+0x60>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 8008f70:	4809      	ldr	r0, [pc, #36]	@ (8008f98 <usart_setup+0x60>)
 8008f72:	f7fd fe81 	bl	8006c78 <HAL_HalfDuplex_Init>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d000      	beq.n	8008f7e <usart_setup+0x46>
	{

		__asm__("NOP");
 8008f7c:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 8008f7e:	4b06      	ldr	r3, [pc, #24]	@ (8008f98 <usart_setup+0x60>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68da      	ldr	r2, [r3, #12]
 8008f84:	4b04      	ldr	r3, [pc, #16]	@ (8008f98 <usart_setup+0x60>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f042 0220 	orr.w	r2, r2, #32
 8008f8c:	60da      	str	r2, [r3, #12]
}
 8008f8e:	bf00      	nop
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	200037f0 	.word	0x200037f0
 8008f9c:	40011000 	.word	0x40011000

08008fa0 <owInit>:

void owInit(OneWire *ow) {
 8008fa0:	b480      	push	{r7}
 8008fa2:	b087      	sub	sp, #28
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	617b      	str	r3, [r7, #20]
 8008fac:	2300      	movs	r3, #0
 8008fae:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8008fb0:	e015      	b.n	8008fde <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	00db      	lsls	r3, r3, #3
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	4413      	add	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]
    k=0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 8008fc0:	e007      	b.n	8008fd2 <owInit+0x32>
    r[k] = 0;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4413      	add	r3, r2
 8008fc8:	2200      	movs	r2, #0
 8008fca:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	613b      	str	r3, [r7, #16]
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	2b07      	cmp	r3, #7
 8008fd6:	ddf4      	ble.n	8008fc2 <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	617b      	str	r3, [r7, #20]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	dde6      	ble.n	8008fb2 <owInit+0x12>
  }
  k=0;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8008fe8:	e008      	b.n	8008ffc <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	4413      	add	r3, r2
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	613b      	str	r3, [r7, #16]
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	2b07      	cmp	r3, #7
 8009000:	ddf3      	ble.n	8008fea <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2240      	movs	r2, #64	@ 0x40
 8009006:	609a      	str	r2, [r3, #8]

}
 8009008:	bf00      	nop
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <owReadHandler>:

void owReadHandler() {
 8009014:	b590      	push	{r4, r7, lr}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 800901a:	f000 f850 	bl	80090be <getUsartIndex>
 800901e:	4603      	mov	r3, r0
 8009020:	71fb      	strb	r3, [r7, #7]
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8009022:	4b18      	ldr	r3, [pc, #96]	@ (8009084 <owReadHandler+0x70>)
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f003 0320 	and.w	r3, r3, #32
 800902a:	2b00      	cmp	r3, #0
 800902c:	d025      	beq.n	800907a <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 800902e:	4b15      	ldr	r3, [pc, #84]	@ (8009084 <owReadHandler+0x70>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 8009036:	2b00      	cmp	r3, #0
 8009038:	d01f      	beq.n	800907a <owReadHandler+0x66>

		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 800903a:	bf00      	nop
 800903c:	4b11      	ldr	r3, [pc, #68]	@ (8009084 <owReadHandler+0x70>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 0320 	and.w	r3, r3, #32
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0f9      	beq.n	800903c <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);
 8009048:	79fc      	ldrb	r4, [r7, #7]
 800904a:	480e      	ldr	r0, [pc, #56]	@ (8009084 <owReadHandler+0x70>)
 800904c:	f7ff ff52 	bl	8008ef4 <USART_ReceiveData>
 8009050:	4603      	mov	r3, r0
 8009052:	461a      	mov	r2, r3
 8009054:	4b0c      	ldr	r3, [pc, #48]	@ (8009088 <owReadHandler+0x74>)
 8009056:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);
 800905a:	79fb      	ldrb	r3, [r7, #7]
 800905c:	2201      	movs	r2, #1
 800905e:	fa02 f303 	lsl.w	r3, r2, r3
 8009062:	b25b      	sxtb	r3, r3
 8009064:	43db      	mvns	r3, r3
 8009066:	b25a      	sxtb	r2, r3
 8009068:	4b08      	ldr	r3, [pc, #32]	@ (800908c <owReadHandler+0x78>)
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	b25b      	sxtb	r3, r3
 8009070:	4013      	ands	r3, r2
 8009072:	b25b      	sxtb	r3, r3
 8009074:	b2da      	uxtb	r2, r3
 8009076:	4b05      	ldr	r3, [pc, #20]	@ (800908c <owReadHandler+0x78>)
 8009078:	701a      	strb	r2, [r3, #0]
  }
}
 800907a:	bf00      	nop
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	bd90      	pop	{r4, r7, pc}
 8009082:	bf00      	nop
 8009084:	40011000 	.word	0x40011000
 8009088:	20005a5c 	.word	0x20005a5c
 800908c:	20005a58 	.word	0x20005a58

08009090 <owResetCmd>:

  uint16_t owResetCmd() {
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
	uint16_t owPresence;

	usart_setup(9600);
 8009096:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 800909a:	f7ff ff4d 	bl	8008f38 <usart_setup>

  owSend(0xF0);
 800909e:	20f0      	movs	r0, #240	@ 0xf0
 80090a0:	f000 f816 	bl	80090d0 <owSend>
  owPresence = owEchoRead();
 80090a4:	f000 f854 	bl	8009150 <owEchoRead>
 80090a8:	4603      	mov	r3, r0
 80090aa:	80fb      	strh	r3, [r7, #6]
	usart_setup(115200);
 80090ac:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80090b0:	f7ff ff42 	bl	8008f38 <usart_setup>
  return owPresence;
 80090b4:	88fb      	ldrh	r3, [r7, #6]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3708      	adds	r7, #8
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}

080090be <getUsartIndex>:

uint8_t getUsartIndex() {
 80090be:	b480      	push	{r7}
 80090c0:	af00      	add	r7, sp, #0

	return 0;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr
	...

080090d0 <owSend>:

void owSend(uint16_t data) {
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());
 80090da:	f7ff fff0 	bl	80090be <getUsartIndex>
 80090de:	4603      	mov	r3, r0
 80090e0:	461a      	mov	r2, r3
 80090e2:	2301      	movs	r3, #1
 80090e4:	4093      	lsls	r3, r2
 80090e6:	b25a      	sxtb	r2, r3
 80090e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009120 <owSend+0x50>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	b25b      	sxtb	r3, r3
 80090f0:	4313      	orrs	r3, r2
 80090f2:	b25b      	sxtb	r3, r3
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009120 <owSend+0x50>)
 80090f8:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);
 80090fa:	88fb      	ldrh	r3, [r7, #6]
 80090fc:	4619      	mov	r1, r3
 80090fe:	4809      	ldr	r0, [pc, #36]	@ (8009124 <owSend+0x54>)
 8009100:	f7ff ff08 	bl	8008f14 <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);
 8009104:	bf00      	nop
 8009106:	4b08      	ldr	r3, [pc, #32]	@ (8009128 <owSend+0x58>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009110:	2b40      	cmp	r3, #64	@ 0x40
 8009112:	d1f8      	bne.n	8009106 <owSend+0x36>
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	20005a58 	.word	0x20005a58
 8009124:	40011000 	.word	0x40011000
 8009128:	200037f0 	.word	0x200037f0

0800912c <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	4603      	mov	r3, r0
 8009134:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0;
 8009136:	88fb      	ldrh	r3, [r7, #6]
 8009138:	2bff      	cmp	r3, #255	@ 0xff
 800913a:	bf0c      	ite	eq
 800913c:	2301      	moveq	r3, #1
 800913e:	2300      	movne	r3, #0
 8009140:	b2db      	uxtb	r3, r3
}
 8009142:	4618      	mov	r0, r3
 8009144:	370c      	adds	r7, #12
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
	...

08009150 <owEchoRead>:

uint16_t owEchoRead() {
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();
 8009156:	f7ff ffb2 	bl	80090be <getUsartIndex>
 800915a:	4603      	mov	r3, r0
 800915c:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 800915e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009162:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);
 8009164:	bf00      	nop
 8009166:	4b0c      	ldr	r3, [pc, #48]	@ (8009198 <owEchoRead+0x48>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	b2db      	uxtb	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	797b      	ldrb	r3, [r7, #5]
 8009170:	fa42 f303 	asr.w	r3, r2, r3
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d004      	beq.n	8009186 <owEchoRead+0x36>
 800917c:	88fb      	ldrh	r3, [r7, #6]
 800917e:	1e5a      	subs	r2, r3, #1
 8009180:	80fa      	strh	r2, [r7, #6]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1ef      	bne.n	8009166 <owEchoRead+0x16>
  return rc_buffer[i];
 8009186:	797b      	ldrb	r3, [r7, #5]
 8009188:	4a04      	ldr	r2, [pc, #16]	@ (800919c <owEchoRead+0x4c>)
 800918a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800918e:	b29b      	uxth	r3, r3
}
 8009190:	4618      	mov	r0, r3
 8009192:	3708      	adds	r7, #8
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	20005a58 	.word	0x20005a58
 800919c:	20005a5c 	.word	0x20005a5c

080091a0 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	4603      	mov	r3, r0
 80091a8:	6039      	str	r1, [r7, #0]
 80091aa:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
 80091b0:	e014      	b.n	80091dc <byteToBits+0x3c>
    if (ow_byte & 0x01) {
 80091b2:	79fb      	ldrb	r3, [r7, #7]
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <byteToBits+0x24>
      *bits = WIRE_1;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	22ff      	movs	r2, #255	@ 0xff
 80091c0:	701a      	strb	r2, [r3, #0]
 80091c2:	e002      	b.n	80091ca <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	2200      	movs	r2, #0
 80091c8:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1;
 80091d0:	79fb      	ldrb	r3, [r7, #7]
 80091d2:	085b      	lsrs	r3, r3, #1
 80091d4:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 80091d6:	7bfb      	ldrb	r3, [r7, #15]
 80091d8:	3301      	adds	r3, #1
 80091da:	73fb      	strb	r3, [r7, #15]
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
 80091de:	2b07      	cmp	r3, #7
 80091e0:	d9e7      	bls.n	80091b2 <byteToBits+0x12>
  }
  return bits;
 80091e2:	683b      	ldr	r3, [r7, #0]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <owSendByte>:

void owSendByte(uint8_t d) {
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	4603      	mov	r3, r0
 80091f8:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);
 80091fa:	f107 020c 	add.w	r2, r7, #12
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	4611      	mov	r1, r2
 8009202:	4618      	mov	r0, r3
 8009204:	f7ff ffcc 	bl	80091a0 <byteToBits>
  for (i = 0; i < 8; ++i) {
 8009208:	2300      	movs	r3, #0
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	e00a      	b.n	8009224 <owSendByte+0x34>
    owSend(data[i]);
 800920e:	f107 020c 	add.w	r2, r7, #12
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	4413      	add	r3, r2
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	4618      	mov	r0, r3
 800921a:	f7ff ff59 	bl	80090d0 <owSend>
  for (i = 0; i < 8; ++i) {
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	3301      	adds	r3, #1
 8009222:	617b      	str	r3, [r7, #20]
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	2b07      	cmp	r3, #7
 8009228:	ddf1      	ble.n	800920e <owSendByte+0x1e>
  }
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	3718      	adds	r7, #24
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}

08009234 <owCRC>:
    bits++;
  }
  return target_byte;
}

uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	460b      	mov	r3, r1
 800923e:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8009240:	2300      	movs	r3, #0
 8009242:	733b      	strb	r3, [r7, #12]
  crc = 0;
 8009244:	2300      	movs	r3, #0
 8009246:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8009248:	7b3b      	ldrb	r3, [r7, #12]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	4413      	add	r3, r2
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
 8009256:	e018      	b.n	800928a <owCRC+0x56>
      fb = crc ^ dat;
 8009258:	7b7a      	ldrb	r2, [r7, #13]
 800925a:	7bbb      	ldrb	r3, [r7, #14]
 800925c:	4053      	eors	r3, r2
 800925e:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8009260:	7afb      	ldrb	r3, [r7, #11]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 8009268:	7b7b      	ldrb	r3, [r7, #13]
 800926a:	085b      	lsrs	r3, r3, #1
 800926c:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	085b      	lsrs	r3, r3, #1
 8009272:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c;
 8009274:	7afb      	ldrb	r3, [r7, #11]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d104      	bne.n	8009284 <owCRC+0x50>
 800927a:	7b7b      	ldrb	r3, [r7, #13]
 800927c:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8009280:	43db      	mvns	r3, r3
 8009282:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {
 8009284:	7bfb      	ldrb	r3, [r7, #15]
 8009286:	3301      	adds	r3, #1
 8009288:	73fb      	strb	r3, [r7, #15]
 800928a:	7bfb      	ldrb	r3, [r7, #15]
 800928c:	2b07      	cmp	r3, #7
 800928e:	d9e3      	bls.n	8009258 <owCRC+0x24>
    }
    st_byt++;
 8009290:	7b3b      	ldrb	r3, [r7, #12]
 8009292:	3301      	adds	r3, #1
 8009294:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len);
 8009296:	7b3a      	ldrb	r2, [r7, #12]
 8009298:	78fb      	ldrb	r3, [r7, #3]
 800929a:	429a      	cmp	r2, r3
 800929c:	d3d4      	bcc.n	8009248 <owCRC+0x14>
  return crc;
 800929e:	7b7b      	ldrb	r3, [r7, #13]
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);
 80092b4:	2107      	movs	r1, #7
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff ffbc 	bl	8009234 <owCRC>
 80092bc:	4603      	mov	r3, r0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <hasNextRom>:

int hasNextRom(OneWire *ow, uint8_t *ROM) {
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b088      	sub	sp, #32
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 80092d0:	2300      	movs	r3, #0
 80092d2:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 80092d4:	f04f 33ff 	mov.w	r3, #4294967295
 80092d8:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) {
 80092de:	f7ff fed7 	bl	8009090 <owResetCmd>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2bf0      	cmp	r3, #240	@ 0xf0
 80092e6:	d101      	bne.n	80092ec <hasNextRom+0x26>
    return 0;
 80092e8:	2300      	movs	r3, #0
 80092ea:	e097      	b.n	800941c <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);
 80092ec:	20f0      	movs	r0, #240	@ 0xf0
 80092ee:	f7ff ff7f 	bl	80091f0 <owSendByte>
  do {
		uint8_t answerBit =0;
 80092f2:	2300      	movs	r3, #0
 80092f4:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 80092f6:	7ffb      	ldrb	r3, [r7, #31]
 80092f8:	08db      	lsrs	r3, r3, #3
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	683a      	ldr	r2, [r7, #0]
 8009302:	4413      	add	r3, r2
 8009304:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 8009306:	2300      	movs	r3, #0
 8009308:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ);
 800930a:	20ff      	movs	r0, #255	@ 0xff
 800930c:	f7ff fee0 	bl	80090d0 <owSend>
    cB = owReadSlot(owEchoRead());
 8009310:	f7ff ff1e 	bl	8009150 <owEchoRead>
 8009314:	4603      	mov	r3, r0
 8009316:	4618      	mov	r0, r3
 8009318:	f7ff ff08 	bl	800912c <owReadSlot>
 800931c:	4603      	mov	r3, r0
 800931e:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ);
 8009320:	20ff      	movs	r0, #255	@ 0xff
 8009322:	f7ff fed5 	bl	80090d0 <owSend>
    cmp_cB = owReadSlot(owEchoRead());
 8009326:	f7ff ff13 	bl	8009150 <owEchoRead>
 800932a:	4603      	mov	r3, r0
 800932c:	4618      	mov	r0, r3
 800932e:	f7ff fefd 	bl	800912c <owReadSlot>
 8009332:	4603      	mov	r3, r0
 8009334:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)
 8009336:	7afa      	ldrb	r2, [r7, #11]
 8009338:	7abb      	ldrb	r3, [r7, #10]
 800933a:	429a      	cmp	r2, r3
 800933c:	d105      	bne.n	800934a <hasNextRom+0x84>
 800933e:	7afb      	ldrb	r3, [r7, #11]
 8009340:	2b01      	cmp	r3, #1
 8009342:	d102      	bne.n	800934a <hasNextRom+0x84>
      return -1;
 8009344:	f04f 33ff 	mov.w	r3, #4294967295
 8009348:	e068      	b.n	800941c <hasNextRom+0x156>
    if (cB != cmp_cB) {
 800934a:	7afa      	ldrb	r2, [r7, #11]
 800934c:	7abb      	ldrb	r3, [r7, #10]
 800934e:	429a      	cmp	r2, r3
 8009350:	d002      	beq.n	8009358 <hasNextRom+0x92>
      searchDirection = cB;
 8009352:	7afb      	ldrb	r3, [r7, #11]
 8009354:	75bb      	strb	r3, [r7, #22]
 8009356:	e023      	b.n	80093a0 <hasNextRom+0xda>
			} else {
				if (ui32BitNumber == ow->lastDiscrepancy)
 8009358:	7ffa      	ldrb	r2, [r7, #31]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	689b      	ldr	r3, [r3, #8]
 800935e:	429a      	cmp	r2, r3
 8009360:	d102      	bne.n	8009368 <hasNextRom+0xa2>
        searchDirection = 1;
 8009362:	2301      	movs	r3, #1
 8009364:	75bb      	strb	r3, [r7, #22]
 8009366:	e01b      	b.n	80093a0 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {
 8009368:	7ffa      	ldrb	r2, [r7, #31]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	429a      	cmp	r2, r3
 8009370:	dd02      	ble.n	8009378 <hasNextRom+0xb2>
          searchDirection = 0;
 8009372:	2300      	movs	r3, #0
 8009374:	75bb      	strb	r3, [r7, #22]
 8009376:	e00e      	b.n	8009396 <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 8009378:	687a      	ldr	r2, [r7, #4]
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	4413      	add	r3, r2
 800937e:	330c      	adds	r3, #12
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	7ffb      	ldrb	r3, [r7, #31]
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	fa42 f303 	asr.w	r3, r2, r3
 800938e:	b2db      	uxtb	r3, r3
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 8009396:	7dbb      	ldrb	r3, [r7, #22]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;
 800939c:	7ffb      	ldrb	r3, [r7, #31]
 800939e:	61bb      	str	r3, [r7, #24]
      }
    }

    if (searchDirection)
 80093a0:	7dbb      	ldrb	r3, [r7, #22]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00e      	beq.n	80093c4 <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	b25a      	sxtb	r2, r3
 80093ac:	7ffb      	ldrb	r3, [r7, #31]
 80093ae:	f003 0307 	and.w	r3, r3, #7
 80093b2:	2101      	movs	r1, #1
 80093b4:	fa01 f303 	lsl.w	r3, r1, r3
 80093b8:	b25b      	sxtb	r3, r3
 80093ba:	4313      	orrs	r3, r2
 80093bc:	b25b      	sxtb	r3, r3
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);
 80093c4:	7dbb      	ldrb	r3, [r7, #22]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <hasNextRom+0x108>
 80093ca:	2300      	movs	r3, #0
 80093cc:	e000      	b.n	80093d0 <hasNextRom+0x10a>
 80093ce:	23ff      	movs	r3, #255	@ 0xff
 80093d0:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);
 80093d2:	7d7b      	ldrb	r3, [r7, #21]
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7ff fe7a 	bl	80090d0 <owSend>
    ui32BitNumber++;
 80093dc:	7ffb      	ldrb	r3, [r7, #31]
 80093de:	3301      	adds	r3, #1
 80093e0:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);
 80093e2:	7ffb      	ldrb	r3, [r7, #31]
 80093e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80093e6:	d984      	bls.n	80092f2 <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	69ba      	ldr	r2, [r7, #24]
 80093ec:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 80093ee:	e00b      	b.n	8009408 <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];
 80093f0:	7dfb      	ldrb	r3, [r7, #23]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	441a      	add	r2, r3
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	7811      	ldrb	r1, [r2, #0]
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	4413      	add	r3, r2
 80093fe:	460a      	mov	r2, r1
 8009400:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	3301      	adds	r3, #1
 8009406:	75fb      	strb	r3, [r7, #23]
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	2b06      	cmp	r3, #6
 800940c:	d9f0      	bls.n	80093f0 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	bfcc      	ite	gt
 8009416:	2301      	movgt	r3, #1
 8009418:	2300      	movle	r3, #0
 800941a:	b2db      	uxtb	r3, r3
}
 800941c:	4618      	mov	r0, r3
 800941e:	3720      	adds	r7, #32
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <owSearchCmd>:

int owSearchCmd(OneWire *ow) {
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 800942c:	2300      	movs	r3, #0
 800942e:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff fdb5 	bl	8008fa0 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device]));
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	00db      	lsls	r3, r3, #3
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	4413      	add	r3, r2
 800943e:	4619      	mov	r1, r3
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f7ff ff40 	bl	80092c6 <hasNextRom>
 8009446:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	da02      	bge.n	8009454 <owSearchCmd+0x30>
      return -1;
 800944e:	f04f 33ff 	mov.w	r3, #4294967295
 8009452:	e009      	b.n	8009468 <owSearchCmd+0x44>
    device++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d002      	beq.n	8009466 <owSearchCmd+0x42>
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	dde7      	ble.n	8009436 <owSearchCmd+0x12>
		return device;
 8009466:	68fb      	ldr	r3, [r7, #12]
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {
  owResetCmd();
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
	int i = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 800947c:	f7ff fe08 	bl	8009090 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);
 8009480:	2055      	movs	r0, #85	@ 0x55
 8009482:	f7ff feb5 	bl	80091f0 <owSendByte>
  for (; i < 8; i++)
 8009486:	e009      	b.n	800949c <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	4413      	add	r3, r2
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	4618      	mov	r0, r3
 8009492:	f7ff fead 	bl	80091f0 <owSendByte>
  for (; i < 8; i++)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3301      	adds	r3, #1
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2b07      	cmp	r3, #7
 80094a0:	ddf2      	ble.n	8009488 <owMatchRomCmd+0x18>
}
 80094a2:	bf00      	nop
 80094a4:	bf00      	nop
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);
 80094b6:	6838      	ldr	r0, [r7, #0]
 80094b8:	f7ff ffda 	bl	8009470 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);
 80094bc:	2044      	movs	r0, #68	@ 0x44
 80094be:	f7ff fe97 	bl	80091f0 <owSendByte>
}
 80094c2:	bf00      	nop
 80094c4:	3708      	adds	r7, #8
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <owReadScratchpadCmd>:

uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b086      	sub	sp, #24
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	60f8      	str	r0, [r7, #12]
 80094d2:	60b9      	str	r1, [r7, #8]
 80094d4:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 80094d6:	2300      	movs	r3, #0
 80094d8:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b10      	cmp	r3, #16
 80094e0:	d001      	beq.n	80094e6 <owReadScratchpadCmd+0x1c>
 80094e2:	2b28      	cmp	r3, #40	@ 0x28
 80094e4:	d109      	bne.n	80094fa <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;
 80094e6:	2348      	movs	r3, #72	@ 0x48
 80094e8:	82bb      	strh	r3, [r7, #20]
      break;
 80094ea:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 80094ec:	68b8      	ldr	r0, [r7, #8]
 80094ee:	f7ff ffbf 	bl	8009470 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);
 80094f2:	20be      	movs	r0, #190	@ 0xbe
 80094f4:	f7ff fe7c 	bl	80091f0 <owSendByte>
  while (b < p) {
 80094f8:	e048      	b.n	800958c <owReadScratchpadCmd+0xc2>
      return data;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	e04b      	b.n	8009596 <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8));
 80094fe:	8abb      	ldrh	r3, [r7, #20]
 8009500:	3b08      	subs	r3, #8
 8009502:	2b00      	cmp	r3, #0
 8009504:	da00      	bge.n	8009508 <owReadScratchpadCmd+0x3e>
 8009506:	3307      	adds	r3, #7
 8009508:	10db      	asrs	r3, r3, #3
 800950a:	b2da      	uxtb	r2, r3
 800950c:	8afb      	ldrh	r3, [r7, #22]
 800950e:	08db      	lsrs	r3, r3, #3
 8009510:	b29b      	uxth	r3, r3
 8009512:	b2db      	uxtb	r3, r3
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	74fb      	strb	r3, [r7, #19]
    uint8_t bt;
		owSend(OW_READ);
 8009518:	20ff      	movs	r0, #255	@ 0xff
 800951a:	f7ff fdd9 	bl	80090d0 <owSend>
    bt = owReadSlot(owEchoRead());
 800951e:	f7ff fe17 	bl	8009150 <owEchoRead>
 8009522:	4603      	mov	r3, r0
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff fe01 	bl	800912c <owReadSlot>
 800952a:	4603      	mov	r3, r0
 800952c:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 800952e:	7cbb      	ldrb	r3, [r7, #18]
 8009530:	2b01      	cmp	r3, #1
 8009532:	d113      	bne.n	800955c <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;
 8009534:	7cfb      	ldrb	r3, [r7, #19]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	4413      	add	r3, r2
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	b25a      	sxtb	r2, r3
 800953e:	8afb      	ldrh	r3, [r7, #22]
 8009540:	f003 0307 	and.w	r3, r3, #7
 8009544:	2101      	movs	r1, #1
 8009546:	fa01 f303 	lsl.w	r3, r1, r3
 800954a:	b25b      	sxtb	r3, r3
 800954c:	4313      	orrs	r3, r2
 800954e:	b259      	sxtb	r1, r3
 8009550:	7cfb      	ldrb	r3, [r7, #19]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	4413      	add	r3, r2
 8009556:	b2ca      	uxtb	r2, r1
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	e014      	b.n	8009586 <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);
 800955c:	7cfb      	ldrb	r3, [r7, #19]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	4413      	add	r3, r2
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	b25a      	sxtb	r2, r3
 8009566:	8afb      	ldrh	r3, [r7, #22]
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	2101      	movs	r1, #1
 800956e:	fa01 f303 	lsl.w	r3, r1, r3
 8009572:	b25b      	sxtb	r3, r3
 8009574:	43db      	mvns	r3, r3
 8009576:	b25b      	sxtb	r3, r3
 8009578:	4013      	ands	r3, r2
 800957a:	b259      	sxtb	r1, r3
 800957c:	7cfb      	ldrb	r3, [r7, #19]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	4413      	add	r3, r2
 8009582:	b2ca      	uxtb	r2, r1
 8009584:	701a      	strb	r2, [r3, #0]
    b++;
 8009586:	8afb      	ldrh	r3, [r7, #22]
 8009588:	3301      	adds	r3, #1
 800958a:	82fb      	strh	r3, [r7, #22]
  while (b < p) {
 800958c:	8afa      	ldrh	r2, [r7, #22]
 800958e:	8abb      	ldrh	r3, [r7, #20]
 8009590:	429a      	cmp	r2, r3
 8009592:	d3b4      	bcc.n	80094fe <owReadScratchpadCmd+0x34>
  }
  return data;
 8009594:	687b      	ldr	r3, [r7, #4]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <readTemperature>:
  owSendByte(th);
  owSendByte(tl);
  owSendByte(conf);
}

Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 800959e:	b580      	push	{r7, lr}
 80095a0:	b08c      	sub	sp, #48	@ 0x30
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	4613      	mov	r3, r2
 80095aa:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 80095ac:	2300      	movs	r3, #0
 80095ae:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 80095b2:	2300      	movs	r3, #0
 80095b4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sp = (Scratchpad_DS18B20 *) &pad;
 80095b8:	f107 0314 	add.w	r3, r7, #20
 80095bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 80095be:	f107 0314 	add.w	r3, r7, #20
 80095c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  switch (rom->family) {
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b10      	cmp	r3, #16
 80095ca:	d022      	beq.n	8009612 <readTemperature+0x74>
 80095cc:	2b28      	cmp	r3, #40	@ 0x28
 80095ce:	d13a      	bne.n	8009646 <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);
 80095d0:	f107 0314 	add.w	r3, r7, #20
 80095d4:	461a      	mov	r2, r3
 80095d6:	68b9      	ldr	r1, [r7, #8]
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7ff ff76 	bl	80094ca <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);
 80095de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e0:	79db      	ldrb	r3, [r3, #7]
 80095e2:	011b      	lsls	r3, r3, #4
 80095e4:	b25a      	sxtb	r2, r3
 80095e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e8:	7a1b      	ldrb	r3, [r3, #8]
 80095ea:	091b      	lsrs	r3, r3, #4
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	b25b      	sxtb	r3, r3
 80095f0:	4313      	orrs	r3, r2
 80095f2:	b25b      	sxtb	r3, r3
 80095f4:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);
 80095f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095fa:	7a1b      	ldrb	r3, [r3, #8]
 80095fc:	f003 020f 	and.w	r2, r3, #15
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	005b      	lsls	r3, r3, #1
 8009608:	111b      	asrs	r3, r3, #4
 800960a:	b2db      	uxtb	r3, r3
 800960c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 8009610:	e01c      	b.n	800964c <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);
 8009612:	f107 0314 	add.w	r3, r7, #20
 8009616:	461a      	mov	r2, r3
 8009618:	68b9      	ldr	r1, [r7, #8]
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f7ff ff55 	bl	80094ca <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8009620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009622:	7a1b      	ldrb	r3, [r3, #8]
 8009624:	085b      	lsrs	r3, r3, #1
 8009626:	b2db      	uxtb	r3, r3
 8009628:	b25b      	sxtb	r3, r3
 800962a:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 800962e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009630:	7a1b      	ldrb	r3, [r3, #8]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	b2db      	uxtb	r3, r3
 8009638:	461a      	mov	r2, r3
 800963a:	0092      	lsls	r2, r2, #2
 800963c:	4413      	add	r3, r2
 800963e:	b2db      	uxtb	r3, r3
 8009640:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 8009644:	e002      	b.n	800964c <readTemperature+0xae>
    default:
      return t;
 8009646:	8c3b      	ldrh	r3, [r7, #32]
 8009648:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800964a:	e008      	b.n	800965e <readTemperature+0xc0>
  }
  if (reSense) {
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d003      	beq.n	800965a <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);
 8009652:	68b9      	ldr	r1, [r7, #8]
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f7ff ff29 	bl	80094ac <owConvertTemperatureCmd>
  }
  return t;
 800965a:	8c3b      	ldrh	r3, [r7, #32]
 800965c:	84bb      	strh	r3, [r7, #36]	@ 0x24
}
 800965e:	2300      	movs	r3, #0
 8009660:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8009664:	f362 0307 	bfi	r3, r2, #0, #8
 8009668:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800966c:	f362 230f 	bfi	r3, r2, #8, #8
 8009670:	4618      	mov	r0, r3
 8009672:	3730      	adds	r7, #48	@ 0x30
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <get_ROMid>:
void owRecallE2Cmd(OneWire *ow, RomCode *rom) {
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}

int get_ROMid (void){
 8009678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800967a:	b089      	sub	sp, #36	@ 0x24
 800967c:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {
 800967e:	f7ff fd07 	bl	8009090 <owResetCmd>
 8009682:	4603      	mov	r3, r0
 8009684:	2bf0      	cmp	r3, #240	@ 0xf0
 8009686:	d079      	beq.n	800977c <get_ROMid+0x104>
		devices = owSearchCmd(&ow);
 8009688:	484e      	ldr	r0, [pc, #312]	@ (80097c4 <get_ROMid+0x14c>)
 800968a:	f7ff fecb 	bl	8009424 <owSearchCmd>
 800968e:	4603      	mov	r3, r0
 8009690:	b2da      	uxtb	r2, r3
 8009692:	4b4d      	ldr	r3, [pc, #308]	@ (80097c8 <get_ROMid+0x150>)
 8009694:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 8009696:	4b4c      	ldr	r3, [pc, #304]	@ (80097c8 <get_ROMid+0x150>)
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d113      	bne.n	80096c6 <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 800969e:	4b4b      	ldr	r3, [pc, #300]	@ (80097cc <get_ROMid+0x154>)
 80096a0:	4a4b      	ldr	r2, [pc, #300]	@ (80097d0 <get_ROMid+0x158>)
 80096a2:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)
 80096a4:	4b4b      	ldr	r3, [pc, #300]	@ (80097d4 <get_ROMid+0x15c>)
 80096a6:	2200      	movs	r2, #0
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	e005      	b.n	80096b8 <get_ROMid+0x40>
					__asm__("nop");
 80096ac:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)
 80096ae:	4b49      	ldr	r3, [pc, #292]	@ (80097d4 <get_ROMid+0x15c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	4a47      	ldr	r2, [pc, #284]	@ (80097d4 <get_ROMid+0x15c>)
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	4b46      	ldr	r3, [pc, #280]	@ (80097d4 <get_ROMid+0x15c>)
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	4b43      	ldr	r3, [pc, #268]	@ (80097cc <get_ROMid+0x154>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d3f3      	bcc.n	80096ac <get_ROMid+0x34>
				pDelay = 1000000;
 80096c4:	e7eb      	b.n	800969e <get_ROMid+0x26>
			}

		}
		i = 0;
 80096c6:	4b43      	ldr	r3, [pc, #268]	@ (80097d4 <get_ROMid+0x15c>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {
 80096cc:	e04f      	b.n	800976e <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 80096ce:	4b41      	ldr	r3, [pc, #260]	@ (80097d4 <get_ROMid+0x15c>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	00db      	lsls	r3, r3, #3
 80096d4:	4a3b      	ldr	r2, [pc, #236]	@ (80097c4 <get_ROMid+0x14c>)
 80096d6:	4413      	add	r3, r2
 80096d8:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f7ff fde6 	bl	80092ac <owCRC8>
 80096e0:	4603      	mov	r3, r0
 80096e2:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	79db      	ldrb	r3, [r3, #7]
 80096e8:	78fa      	ldrb	r2, [r7, #3]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d101      	bne.n	80096f2 <get_ROMid+0x7a>
 80096ee:	4b3a      	ldr	r3, [pc, #232]	@ (80097d8 <get_ROMid+0x160>)
 80096f0:	e000      	b.n	80096f4 <get_ROMid+0x7c>
 80096f2:	4b3a      	ldr	r3, [pc, #232]	@ (80097dc <get_ROMid+0x164>)
 80096f4:	4a3a      	ldr	r2, [pc, #232]	@ (80097e0 <get_ROMid+0x168>)
 80096f6:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 80096f8:	4b36      	ldr	r3, [pc, #216]	@ (80097d4 <get_ROMid+0x15c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	461a      	mov	r2, r3
 80096fe:	4b39      	ldr	r3, [pc, #228]	@ (80097e4 <get_ROMid+0x16c>)
 8009700:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	461e      	mov	r6, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	799b      	ldrb	r3, [r3, #6]
 800970c:	469c      	mov	ip, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	795b      	ldrb	r3, [r3, #5]
 8009712:	461a      	mov	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	791b      	ldrb	r3, [r3, #4]
 8009718:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800971e:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8009724:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 800972a:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8009730:	9305      	str	r3, [sp, #20]
 8009732:	9504      	str	r5, [sp, #16]
 8009734:	9403      	str	r4, [sp, #12]
 8009736:	9002      	str	r0, [sp, #8]
 8009738:	9101      	str	r1, [sp, #4]
 800973a:	9200      	str	r2, [sp, #0]
 800973c:	4663      	mov	r3, ip
 800973e:	4632      	mov	r2, r6
 8009740:	4929      	ldr	r1, [pc, #164]	@ (80097e8 <get_ROMid+0x170>)
 8009742:	482a      	ldr	r0, [pc, #168]	@ (80097ec <get_ROMid+0x174>)
 8009744:	f000 fdf2 	bl	800a32c <siprintf>

			if (crc != r->crc) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	79db      	ldrb	r3, [r3, #7]
 800974c:	78fa      	ldrb	r2, [r7, #3]
 800974e:	429a      	cmp	r2, r3
 8009750:	d008      	beq.n	8009764 <get_ROMid+0xec>
				devInfo.device = i;
 8009752:	4b20      	ldr	r3, [pc, #128]	@ (80097d4 <get_ROMid+0x15c>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	461a      	mov	r2, r3
 8009758:	4b22      	ldr	r3, [pc, #136]	@ (80097e4 <get_ROMid+0x16c>)
 800975a:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 800975c:	4924      	ldr	r1, [pc, #144]	@ (80097f0 <get_ROMid+0x178>)
 800975e:	4823      	ldr	r0, [pc, #140]	@ (80097ec <get_ROMid+0x174>)
 8009760:	f000 fde4 	bl	800a32c <siprintf>
		for (; i < devices; i++) {
 8009764:	4b1b      	ldr	r3, [pc, #108]	@ (80097d4 <get_ROMid+0x15c>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	4a1a      	ldr	r2, [pc, #104]	@ (80097d4 <get_ROMid+0x15c>)
 800976c:	6013      	str	r3, [r2, #0]
 800976e:	4b16      	ldr	r3, [pc, #88]	@ (80097c8 <get_ROMid+0x150>)
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	4b17      	ldr	r3, [pc, #92]	@ (80097d4 <get_ROMid+0x15c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	429a      	cmp	r2, r3
 800977a:	d8a8      	bhi.n	80096ce <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 800977c:	4b13      	ldr	r3, [pc, #76]	@ (80097cc <get_ROMid+0x154>)
 800977e:	4a14      	ldr	r2, [pc, #80]	@ (80097d0 <get_ROMid+0x158>)
 8009780:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 8009782:	4b14      	ldr	r3, [pc, #80]	@ (80097d4 <get_ROMid+0x15c>)
 8009784:	2200      	movs	r2, #0
 8009786:	601a      	str	r2, [r3, #0]
 8009788:	e005      	b.n	8009796 <get_ROMid+0x11e>
		__asm__("nop");
 800978a:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 800978c:	4b11      	ldr	r3, [pc, #68]	@ (80097d4 <get_ROMid+0x15c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	3301      	adds	r3, #1
 8009792:	4a10      	ldr	r2, [pc, #64]	@ (80097d4 <get_ROMid+0x15c>)
 8009794:	6013      	str	r3, [r2, #0]
 8009796:	4b0f      	ldr	r3, [pc, #60]	@ (80097d4 <get_ROMid+0x15c>)
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	4b0c      	ldr	r3, [pc, #48]	@ (80097cc <get_ROMid+0x154>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d3f3      	bcc.n	800978a <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 80097a2:	4b0f      	ldr	r3, [pc, #60]	@ (80097e0 <get_ROMid+0x168>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	490c      	ldr	r1, [pc, #48]	@ (80097d8 <get_ROMid+0x160>)
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7f6 fd31 	bl	8000210 <strcmp>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d101      	bne.n	80097b8 <get_ROMid+0x140>
 80097b4:	2300      	movs	r3, #0
 80097b6:	e001      	b.n	80097bc <get_ROMid+0x144>
	else return -1;
 80097b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c4:	20005a70 	.word	0x20005a70
 80097c8:	20005a6c 	.word	0x20005a6c
 80097cc:	20003608 	.word	0x20003608
 80097d0:	000f4240 	.word	0x000f4240
 80097d4:	20005a84 	.word	0x20005a84
 80097d8:	0800c658 	.word	0x0800c658
 80097dc:	0800c660 	.word	0x0800c660
 80097e0:	20005ab0 	.word	0x20005ab0
 80097e4:	20005a8c 	.word	0x20005a8c
 80097e8:	0800c66c 	.word	0x0800c66c
 80097ec:	20005a90 	.word	0x20005a90
 80097f0:	0800c694 	.word	0x0800c694

080097f4 <get_Temperature>:

void get_Temperature (void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	af00      	add	r7, sp, #0
	i=0;
 80097f8:	4b3a      	ldr	r3, [pc, #232]	@ (80098e4 <get_Temperature+0xf0>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 80097fe:	e067      	b.n	80098d0 <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {
 8009800:	4b38      	ldr	r3, [pc, #224]	@ (80098e4 <get_Temperature+0xf0>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a38      	ldr	r2, [pc, #224]	@ (80098e8 <get_Temperature+0xf4>)
 8009806:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800980a:	2b28      	cmp	r3, #40	@ 0x28
 800980c:	d006      	beq.n	800981c <get_Temperature+0x28>
 800980e:	2b28      	cmp	r3, #40	@ 0x28
 8009810:	dc56      	bgt.n	80098c0 <get_Temperature+0xcc>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d056      	beq.n	80098c4 <get_Temperature+0xd0>
 8009816:	2b10      	cmp	r3, #16
 8009818:	d029      	beq.n	800986e <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:

			break;
 800981a:	e051      	b.n	80098c0 <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 800981c:	4b31      	ldr	r3, [pc, #196]	@ (80098e4 <get_Temperature+0xf0>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	4a31      	ldr	r2, [pc, #196]	@ (80098e8 <get_Temperature+0xf4>)
 8009824:	4413      	add	r3, r2
 8009826:	2201      	movs	r2, #1
 8009828:	4619      	mov	r1, r3
 800982a:	482f      	ldr	r0, [pc, #188]	@ (80098e8 <get_Temperature+0xf4>)
 800982c:	f7ff feb7 	bl	800959e <readTemperature>
 8009830:	4603      	mov	r3, r0
 8009832:	4a2e      	ldr	r2, [pc, #184]	@ (80098ec <get_Temperature+0xf8>)
 8009834:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8009836:	4b2d      	ldr	r3, [pc, #180]	@ (80098ec <get_Temperature+0xf8>)
 8009838:	f993 3000 	ldrsb.w	r3, [r3]
 800983c:	461a      	mov	r2, r3
 800983e:	4613      	mov	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	005b      	lsls	r3, r3, #1
 8009846:	461a      	mov	r2, r3
 8009848:	4b28      	ldr	r3, [pc, #160]	@ (80098ec <get_Temperature+0xf8>)
 800984a:	785b      	ldrb	r3, [r3, #1]
 800984c:	4413      	add	r3, r2
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009856:	4b23      	ldr	r3, [pc, #140]	@ (80098e4 <get_Temperature+0xf0>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800985e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009862:	4a23      	ldr	r2, [pc, #140]	@ (80098f0 <get_Temperature+0xfc>)
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	edc3 7a00 	vstr	s15, [r3]
			break;
 800986c:	e02b      	b.n	80098c6 <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 800986e:	4b1d      	ldr	r3, [pc, #116]	@ (80098e4 <get_Temperature+0xf0>)
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	00db      	lsls	r3, r3, #3
 8009874:	4a1c      	ldr	r2, [pc, #112]	@ (80098e8 <get_Temperature+0xf4>)
 8009876:	4413      	add	r3, r2
 8009878:	2201      	movs	r2, #1
 800987a:	4619      	mov	r1, r3
 800987c:	481a      	ldr	r0, [pc, #104]	@ (80098e8 <get_Temperature+0xf4>)
 800987e:	f7ff fe8e 	bl	800959e <readTemperature>
 8009882:	4603      	mov	r3, r0
 8009884:	4a19      	ldr	r2, [pc, #100]	@ (80098ec <get_Temperature+0xf8>)
 8009886:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8009888:	4b18      	ldr	r3, [pc, #96]	@ (80098ec <get_Temperature+0xf8>)
 800988a:	f993 3000 	ldrsb.w	r3, [r3]
 800988e:	461a      	mov	r2, r3
 8009890:	4613      	mov	r3, r2
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	461a      	mov	r2, r3
 800989a:	4b14      	ldr	r3, [pc, #80]	@ (80098ec <get_Temperature+0xf8>)
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	4413      	add	r3, r2
 80098a0:	ee07 3a90 	vmov	s15, r3
 80098a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098a8:	4b0e      	ldr	r3, [pc, #56]	@ (80098e4 <get_Temperature+0xf0>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80098b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098b4:	4a0e      	ldr	r2, [pc, #56]	@ (80098f0 <get_Temperature+0xfc>)
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	edc3 7a00 	vstr	s15, [r3]
			break;
 80098be:	e002      	b.n	80098c6 <get_Temperature+0xd2>
			break;
 80098c0:	bf00      	nop
 80098c2:	e000      	b.n	80098c6 <get_Temperature+0xd2>
			break;
 80098c4:	bf00      	nop
	for (; i < devices; i++) {
 80098c6:	4b07      	ldr	r3, [pc, #28]	@ (80098e4 <get_Temperature+0xf0>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3301      	adds	r3, #1
 80098cc:	4a05      	ldr	r2, [pc, #20]	@ (80098e4 <get_Temperature+0xf0>)
 80098ce:	6013      	str	r3, [r2, #0]
 80098d0:	4b08      	ldr	r3, [pc, #32]	@ (80098f4 <get_Temperature+0x100>)
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	461a      	mov	r2, r3
 80098d6:	4b03      	ldr	r3, [pc, #12]	@ (80098e4 <get_Temperature+0xf0>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d890      	bhi.n	8009800 <get_Temperature+0xc>
		}
	}

}
 80098de:	bf00      	nop
 80098e0:	bf00      	nop
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	20005a84 	.word	0x20005a84
 80098e8:	20005a70 	.word	0x20005a70
 80098ec:	20005a88 	.word	0x20005a88
 80098f0:	20005a68 	.word	0x20005a68
 80098f4:	20005a6c 	.word	0x20005a6c

080098f8 <__cvt>:
 80098f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098fc:	ec57 6b10 	vmov	r6, r7, d0
 8009900:	2f00      	cmp	r7, #0
 8009902:	460c      	mov	r4, r1
 8009904:	4619      	mov	r1, r3
 8009906:	463b      	mov	r3, r7
 8009908:	bfbb      	ittet	lt
 800990a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800990e:	461f      	movlt	r7, r3
 8009910:	2300      	movge	r3, #0
 8009912:	232d      	movlt	r3, #45	@ 0x2d
 8009914:	700b      	strb	r3, [r1, #0]
 8009916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009918:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800991c:	4691      	mov	r9, r2
 800991e:	f023 0820 	bic.w	r8, r3, #32
 8009922:	bfbc      	itt	lt
 8009924:	4632      	movlt	r2, r6
 8009926:	4616      	movlt	r6, r2
 8009928:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800992c:	d005      	beq.n	800993a <__cvt+0x42>
 800992e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009932:	d100      	bne.n	8009936 <__cvt+0x3e>
 8009934:	3401      	adds	r4, #1
 8009936:	2102      	movs	r1, #2
 8009938:	e000      	b.n	800993c <__cvt+0x44>
 800993a:	2103      	movs	r1, #3
 800993c:	ab03      	add	r3, sp, #12
 800993e:	9301      	str	r3, [sp, #4]
 8009940:	ab02      	add	r3, sp, #8
 8009942:	9300      	str	r3, [sp, #0]
 8009944:	ec47 6b10 	vmov	d0, r6, r7
 8009948:	4653      	mov	r3, sl
 800994a:	4622      	mov	r2, r4
 800994c:	f000 fe5c 	bl	800a608 <_dtoa_r>
 8009950:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009954:	4605      	mov	r5, r0
 8009956:	d119      	bne.n	800998c <__cvt+0x94>
 8009958:	f019 0f01 	tst.w	r9, #1
 800995c:	d00e      	beq.n	800997c <__cvt+0x84>
 800995e:	eb00 0904 	add.w	r9, r0, r4
 8009962:	2200      	movs	r2, #0
 8009964:	2300      	movs	r3, #0
 8009966:	4630      	mov	r0, r6
 8009968:	4639      	mov	r1, r7
 800996a:	f7f7 f8dd 	bl	8000b28 <__aeabi_dcmpeq>
 800996e:	b108      	cbz	r0, 8009974 <__cvt+0x7c>
 8009970:	f8cd 900c 	str.w	r9, [sp, #12]
 8009974:	2230      	movs	r2, #48	@ 0x30
 8009976:	9b03      	ldr	r3, [sp, #12]
 8009978:	454b      	cmp	r3, r9
 800997a:	d31e      	bcc.n	80099ba <__cvt+0xc2>
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009980:	1b5b      	subs	r3, r3, r5
 8009982:	4628      	mov	r0, r5
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	b004      	add	sp, #16
 8009988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800998c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009990:	eb00 0904 	add.w	r9, r0, r4
 8009994:	d1e5      	bne.n	8009962 <__cvt+0x6a>
 8009996:	7803      	ldrb	r3, [r0, #0]
 8009998:	2b30      	cmp	r3, #48	@ 0x30
 800999a:	d10a      	bne.n	80099b2 <__cvt+0xba>
 800999c:	2200      	movs	r2, #0
 800999e:	2300      	movs	r3, #0
 80099a0:	4630      	mov	r0, r6
 80099a2:	4639      	mov	r1, r7
 80099a4:	f7f7 f8c0 	bl	8000b28 <__aeabi_dcmpeq>
 80099a8:	b918      	cbnz	r0, 80099b2 <__cvt+0xba>
 80099aa:	f1c4 0401 	rsb	r4, r4, #1
 80099ae:	f8ca 4000 	str.w	r4, [sl]
 80099b2:	f8da 3000 	ldr.w	r3, [sl]
 80099b6:	4499      	add	r9, r3
 80099b8:	e7d3      	b.n	8009962 <__cvt+0x6a>
 80099ba:	1c59      	adds	r1, r3, #1
 80099bc:	9103      	str	r1, [sp, #12]
 80099be:	701a      	strb	r2, [r3, #0]
 80099c0:	e7d9      	b.n	8009976 <__cvt+0x7e>

080099c2 <__exponent>:
 80099c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099c4:	2900      	cmp	r1, #0
 80099c6:	bfba      	itte	lt
 80099c8:	4249      	neglt	r1, r1
 80099ca:	232d      	movlt	r3, #45	@ 0x2d
 80099cc:	232b      	movge	r3, #43	@ 0x2b
 80099ce:	2909      	cmp	r1, #9
 80099d0:	7002      	strb	r2, [r0, #0]
 80099d2:	7043      	strb	r3, [r0, #1]
 80099d4:	dd29      	ble.n	8009a2a <__exponent+0x68>
 80099d6:	f10d 0307 	add.w	r3, sp, #7
 80099da:	461d      	mov	r5, r3
 80099dc:	270a      	movs	r7, #10
 80099de:	461a      	mov	r2, r3
 80099e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80099e4:	fb07 1416 	mls	r4, r7, r6, r1
 80099e8:	3430      	adds	r4, #48	@ 0x30
 80099ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80099ee:	460c      	mov	r4, r1
 80099f0:	2c63      	cmp	r4, #99	@ 0x63
 80099f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80099f6:	4631      	mov	r1, r6
 80099f8:	dcf1      	bgt.n	80099de <__exponent+0x1c>
 80099fa:	3130      	adds	r1, #48	@ 0x30
 80099fc:	1e94      	subs	r4, r2, #2
 80099fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009a02:	1c41      	adds	r1, r0, #1
 8009a04:	4623      	mov	r3, r4
 8009a06:	42ab      	cmp	r3, r5
 8009a08:	d30a      	bcc.n	8009a20 <__exponent+0x5e>
 8009a0a:	f10d 0309 	add.w	r3, sp, #9
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	42ac      	cmp	r4, r5
 8009a12:	bf88      	it	hi
 8009a14:	2300      	movhi	r3, #0
 8009a16:	3302      	adds	r3, #2
 8009a18:	4403      	add	r3, r0
 8009a1a:	1a18      	subs	r0, r3, r0
 8009a1c:	b003      	add	sp, #12
 8009a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009a24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009a28:	e7ed      	b.n	8009a06 <__exponent+0x44>
 8009a2a:	2330      	movs	r3, #48	@ 0x30
 8009a2c:	3130      	adds	r1, #48	@ 0x30
 8009a2e:	7083      	strb	r3, [r0, #2]
 8009a30:	70c1      	strb	r1, [r0, #3]
 8009a32:	1d03      	adds	r3, r0, #4
 8009a34:	e7f1      	b.n	8009a1a <__exponent+0x58>
	...

08009a38 <_printf_float>:
 8009a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a3c:	b08d      	sub	sp, #52	@ 0x34
 8009a3e:	460c      	mov	r4, r1
 8009a40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009a44:	4616      	mov	r6, r2
 8009a46:	461f      	mov	r7, r3
 8009a48:	4605      	mov	r5, r0
 8009a4a:	f000 fcdb 	bl	800a404 <_localeconv_r>
 8009a4e:	6803      	ldr	r3, [r0, #0]
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7f6 fc3c 	bl	80002d0 <strlen>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a60:	9005      	str	r0, [sp, #20]
 8009a62:	3307      	adds	r3, #7
 8009a64:	f023 0307 	bic.w	r3, r3, #7
 8009a68:	f103 0208 	add.w	r2, r3, #8
 8009a6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009a70:	f8d4 b000 	ldr.w	fp, [r4]
 8009a74:	f8c8 2000 	str.w	r2, [r8]
 8009a78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009a80:	9307      	str	r3, [sp, #28]
 8009a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a8e:	4b9c      	ldr	r3, [pc, #624]	@ (8009d00 <_printf_float+0x2c8>)
 8009a90:	f04f 32ff 	mov.w	r2, #4294967295
 8009a94:	f7f7 f87a 	bl	8000b8c <__aeabi_dcmpun>
 8009a98:	bb70      	cbnz	r0, 8009af8 <_printf_float+0xc0>
 8009a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a9e:	4b98      	ldr	r3, [pc, #608]	@ (8009d00 <_printf_float+0x2c8>)
 8009aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa4:	f7f7 f854 	bl	8000b50 <__aeabi_dcmple>
 8009aa8:	bb30      	cbnz	r0, 8009af8 <_printf_float+0xc0>
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2300      	movs	r3, #0
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4649      	mov	r1, r9
 8009ab2:	f7f7 f843 	bl	8000b3c <__aeabi_dcmplt>
 8009ab6:	b110      	cbz	r0, 8009abe <_printf_float+0x86>
 8009ab8:	232d      	movs	r3, #45	@ 0x2d
 8009aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009abe:	4a91      	ldr	r2, [pc, #580]	@ (8009d04 <_printf_float+0x2cc>)
 8009ac0:	4b91      	ldr	r3, [pc, #580]	@ (8009d08 <_printf_float+0x2d0>)
 8009ac2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ac6:	bf94      	ite	ls
 8009ac8:	4690      	movls	r8, r2
 8009aca:	4698      	movhi	r8, r3
 8009acc:	2303      	movs	r3, #3
 8009ace:	6123      	str	r3, [r4, #16]
 8009ad0:	f02b 0304 	bic.w	r3, fp, #4
 8009ad4:	6023      	str	r3, [r4, #0]
 8009ad6:	f04f 0900 	mov.w	r9, #0
 8009ada:	9700      	str	r7, [sp, #0]
 8009adc:	4633      	mov	r3, r6
 8009ade:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	f000 f9d2 	bl	8009e8c <_printf_common>
 8009ae8:	3001      	adds	r0, #1
 8009aea:	f040 808d 	bne.w	8009c08 <_printf_float+0x1d0>
 8009aee:	f04f 30ff 	mov.w	r0, #4294967295
 8009af2:	b00d      	add	sp, #52	@ 0x34
 8009af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af8:	4642      	mov	r2, r8
 8009afa:	464b      	mov	r3, r9
 8009afc:	4640      	mov	r0, r8
 8009afe:	4649      	mov	r1, r9
 8009b00:	f7f7 f844 	bl	8000b8c <__aeabi_dcmpun>
 8009b04:	b140      	cbz	r0, 8009b18 <_printf_float+0xe0>
 8009b06:	464b      	mov	r3, r9
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bfbc      	itt	lt
 8009b0c:	232d      	movlt	r3, #45	@ 0x2d
 8009b0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009b12:	4a7e      	ldr	r2, [pc, #504]	@ (8009d0c <_printf_float+0x2d4>)
 8009b14:	4b7e      	ldr	r3, [pc, #504]	@ (8009d10 <_printf_float+0x2d8>)
 8009b16:	e7d4      	b.n	8009ac2 <_printf_float+0x8a>
 8009b18:	6863      	ldr	r3, [r4, #4]
 8009b1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009b1e:	9206      	str	r2, [sp, #24]
 8009b20:	1c5a      	adds	r2, r3, #1
 8009b22:	d13b      	bne.n	8009b9c <_printf_float+0x164>
 8009b24:	2306      	movs	r3, #6
 8009b26:	6063      	str	r3, [r4, #4]
 8009b28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	6022      	str	r2, [r4, #0]
 8009b30:	9303      	str	r3, [sp, #12]
 8009b32:	ab0a      	add	r3, sp, #40	@ 0x28
 8009b34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009b38:	ab09      	add	r3, sp, #36	@ 0x24
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	6861      	ldr	r1, [r4, #4]
 8009b3e:	ec49 8b10 	vmov	d0, r8, r9
 8009b42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009b46:	4628      	mov	r0, r5
 8009b48:	f7ff fed6 	bl	80098f8 <__cvt>
 8009b4c:	9b06      	ldr	r3, [sp, #24]
 8009b4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b50:	2b47      	cmp	r3, #71	@ 0x47
 8009b52:	4680      	mov	r8, r0
 8009b54:	d129      	bne.n	8009baa <_printf_float+0x172>
 8009b56:	1cc8      	adds	r0, r1, #3
 8009b58:	db02      	blt.n	8009b60 <_printf_float+0x128>
 8009b5a:	6863      	ldr	r3, [r4, #4]
 8009b5c:	4299      	cmp	r1, r3
 8009b5e:	dd41      	ble.n	8009be4 <_printf_float+0x1ac>
 8009b60:	f1aa 0a02 	sub.w	sl, sl, #2
 8009b64:	fa5f fa8a 	uxtb.w	sl, sl
 8009b68:	3901      	subs	r1, #1
 8009b6a:	4652      	mov	r2, sl
 8009b6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009b70:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b72:	f7ff ff26 	bl	80099c2 <__exponent>
 8009b76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009b78:	1813      	adds	r3, r2, r0
 8009b7a:	2a01      	cmp	r2, #1
 8009b7c:	4681      	mov	r9, r0
 8009b7e:	6123      	str	r3, [r4, #16]
 8009b80:	dc02      	bgt.n	8009b88 <_printf_float+0x150>
 8009b82:	6822      	ldr	r2, [r4, #0]
 8009b84:	07d2      	lsls	r2, r2, #31
 8009b86:	d501      	bpl.n	8009b8c <_printf_float+0x154>
 8009b88:	3301      	adds	r3, #1
 8009b8a:	6123      	str	r3, [r4, #16]
 8009b8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d0a2      	beq.n	8009ada <_printf_float+0xa2>
 8009b94:	232d      	movs	r3, #45	@ 0x2d
 8009b96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b9a:	e79e      	b.n	8009ada <_printf_float+0xa2>
 8009b9c:	9a06      	ldr	r2, [sp, #24]
 8009b9e:	2a47      	cmp	r2, #71	@ 0x47
 8009ba0:	d1c2      	bne.n	8009b28 <_printf_float+0xf0>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d1c0      	bne.n	8009b28 <_printf_float+0xf0>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e7bd      	b.n	8009b26 <_printf_float+0xee>
 8009baa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009bae:	d9db      	bls.n	8009b68 <_printf_float+0x130>
 8009bb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009bb4:	d118      	bne.n	8009be8 <_printf_float+0x1b0>
 8009bb6:	2900      	cmp	r1, #0
 8009bb8:	6863      	ldr	r3, [r4, #4]
 8009bba:	dd0b      	ble.n	8009bd4 <_printf_float+0x19c>
 8009bbc:	6121      	str	r1, [r4, #16]
 8009bbe:	b913      	cbnz	r3, 8009bc6 <_printf_float+0x18e>
 8009bc0:	6822      	ldr	r2, [r4, #0]
 8009bc2:	07d0      	lsls	r0, r2, #31
 8009bc4:	d502      	bpl.n	8009bcc <_printf_float+0x194>
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	440b      	add	r3, r1
 8009bca:	6123      	str	r3, [r4, #16]
 8009bcc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009bce:	f04f 0900 	mov.w	r9, #0
 8009bd2:	e7db      	b.n	8009b8c <_printf_float+0x154>
 8009bd4:	b913      	cbnz	r3, 8009bdc <_printf_float+0x1a4>
 8009bd6:	6822      	ldr	r2, [r4, #0]
 8009bd8:	07d2      	lsls	r2, r2, #31
 8009bda:	d501      	bpl.n	8009be0 <_printf_float+0x1a8>
 8009bdc:	3302      	adds	r3, #2
 8009bde:	e7f4      	b.n	8009bca <_printf_float+0x192>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e7f2      	b.n	8009bca <_printf_float+0x192>
 8009be4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bea:	4299      	cmp	r1, r3
 8009bec:	db05      	blt.n	8009bfa <_printf_float+0x1c2>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	6121      	str	r1, [r4, #16]
 8009bf2:	07d8      	lsls	r0, r3, #31
 8009bf4:	d5ea      	bpl.n	8009bcc <_printf_float+0x194>
 8009bf6:	1c4b      	adds	r3, r1, #1
 8009bf8:	e7e7      	b.n	8009bca <_printf_float+0x192>
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	bfd4      	ite	le
 8009bfe:	f1c1 0202 	rsble	r2, r1, #2
 8009c02:	2201      	movgt	r2, #1
 8009c04:	4413      	add	r3, r2
 8009c06:	e7e0      	b.n	8009bca <_printf_float+0x192>
 8009c08:	6823      	ldr	r3, [r4, #0]
 8009c0a:	055a      	lsls	r2, r3, #21
 8009c0c:	d407      	bmi.n	8009c1e <_printf_float+0x1e6>
 8009c0e:	6923      	ldr	r3, [r4, #16]
 8009c10:	4642      	mov	r2, r8
 8009c12:	4631      	mov	r1, r6
 8009c14:	4628      	mov	r0, r5
 8009c16:	47b8      	blx	r7
 8009c18:	3001      	adds	r0, #1
 8009c1a:	d12b      	bne.n	8009c74 <_printf_float+0x23c>
 8009c1c:	e767      	b.n	8009aee <_printf_float+0xb6>
 8009c1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c22:	f240 80dd 	bls.w	8009de0 <_printf_float+0x3a8>
 8009c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f7f6 ff7b 	bl	8000b28 <__aeabi_dcmpeq>
 8009c32:	2800      	cmp	r0, #0
 8009c34:	d033      	beq.n	8009c9e <_printf_float+0x266>
 8009c36:	4a37      	ldr	r2, [pc, #220]	@ (8009d14 <_printf_float+0x2dc>)
 8009c38:	2301      	movs	r3, #1
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	47b8      	blx	r7
 8009c40:	3001      	adds	r0, #1
 8009c42:	f43f af54 	beq.w	8009aee <_printf_float+0xb6>
 8009c46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009c4a:	4543      	cmp	r3, r8
 8009c4c:	db02      	blt.n	8009c54 <_printf_float+0x21c>
 8009c4e:	6823      	ldr	r3, [r4, #0]
 8009c50:	07d8      	lsls	r0, r3, #31
 8009c52:	d50f      	bpl.n	8009c74 <_printf_float+0x23c>
 8009c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b8      	blx	r7
 8009c5e:	3001      	adds	r0, #1
 8009c60:	f43f af45 	beq.w	8009aee <_printf_float+0xb6>
 8009c64:	f04f 0900 	mov.w	r9, #0
 8009c68:	f108 38ff 	add.w	r8, r8, #4294967295
 8009c6c:	f104 0a1a 	add.w	sl, r4, #26
 8009c70:	45c8      	cmp	r8, r9
 8009c72:	dc09      	bgt.n	8009c88 <_printf_float+0x250>
 8009c74:	6823      	ldr	r3, [r4, #0]
 8009c76:	079b      	lsls	r3, r3, #30
 8009c78:	f100 8103 	bmi.w	8009e82 <_printf_float+0x44a>
 8009c7c:	68e0      	ldr	r0, [r4, #12]
 8009c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c80:	4298      	cmp	r0, r3
 8009c82:	bfb8      	it	lt
 8009c84:	4618      	movlt	r0, r3
 8009c86:	e734      	b.n	8009af2 <_printf_float+0xba>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	4652      	mov	r2, sl
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4628      	mov	r0, r5
 8009c90:	47b8      	blx	r7
 8009c92:	3001      	adds	r0, #1
 8009c94:	f43f af2b 	beq.w	8009aee <_printf_float+0xb6>
 8009c98:	f109 0901 	add.w	r9, r9, #1
 8009c9c:	e7e8      	b.n	8009c70 <_printf_float+0x238>
 8009c9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	dc39      	bgt.n	8009d18 <_printf_float+0x2e0>
 8009ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8009d14 <_printf_float+0x2dc>)
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	4631      	mov	r1, r6
 8009caa:	4628      	mov	r0, r5
 8009cac:	47b8      	blx	r7
 8009cae:	3001      	adds	r0, #1
 8009cb0:	f43f af1d 	beq.w	8009aee <_printf_float+0xb6>
 8009cb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009cb8:	ea59 0303 	orrs.w	r3, r9, r3
 8009cbc:	d102      	bne.n	8009cc4 <_printf_float+0x28c>
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	07d9      	lsls	r1, r3, #31
 8009cc2:	d5d7      	bpl.n	8009c74 <_printf_float+0x23c>
 8009cc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f af0d 	beq.w	8009aee <_printf_float+0xb6>
 8009cd4:	f04f 0a00 	mov.w	sl, #0
 8009cd8:	f104 0b1a 	add.w	fp, r4, #26
 8009cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cde:	425b      	negs	r3, r3
 8009ce0:	4553      	cmp	r3, sl
 8009ce2:	dc01      	bgt.n	8009ce8 <_printf_float+0x2b0>
 8009ce4:	464b      	mov	r3, r9
 8009ce6:	e793      	b.n	8009c10 <_printf_float+0x1d8>
 8009ce8:	2301      	movs	r3, #1
 8009cea:	465a      	mov	r2, fp
 8009cec:	4631      	mov	r1, r6
 8009cee:	4628      	mov	r0, r5
 8009cf0:	47b8      	blx	r7
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	f43f aefb 	beq.w	8009aee <_printf_float+0xb6>
 8009cf8:	f10a 0a01 	add.w	sl, sl, #1
 8009cfc:	e7ee      	b.n	8009cdc <_printf_float+0x2a4>
 8009cfe:	bf00      	nop
 8009d00:	7fefffff 	.word	0x7fefffff
 8009d04:	0801129c 	.word	0x0801129c
 8009d08:	080112a0 	.word	0x080112a0
 8009d0c:	080112a4 	.word	0x080112a4
 8009d10:	080112a8 	.word	0x080112a8
 8009d14:	080112ac 	.word	0x080112ac
 8009d18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d1e:	4553      	cmp	r3, sl
 8009d20:	bfa8      	it	ge
 8009d22:	4653      	movge	r3, sl
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	4699      	mov	r9, r3
 8009d28:	dc36      	bgt.n	8009d98 <_printf_float+0x360>
 8009d2a:	f04f 0b00 	mov.w	fp, #0
 8009d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d32:	f104 021a 	add.w	r2, r4, #26
 8009d36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009d38:	9306      	str	r3, [sp, #24]
 8009d3a:	eba3 0309 	sub.w	r3, r3, r9
 8009d3e:	455b      	cmp	r3, fp
 8009d40:	dc31      	bgt.n	8009da6 <_printf_float+0x36e>
 8009d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d44:	459a      	cmp	sl, r3
 8009d46:	dc3a      	bgt.n	8009dbe <_printf_float+0x386>
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	07da      	lsls	r2, r3, #31
 8009d4c:	d437      	bmi.n	8009dbe <_printf_float+0x386>
 8009d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d50:	ebaa 0903 	sub.w	r9, sl, r3
 8009d54:	9b06      	ldr	r3, [sp, #24]
 8009d56:	ebaa 0303 	sub.w	r3, sl, r3
 8009d5a:	4599      	cmp	r9, r3
 8009d5c:	bfa8      	it	ge
 8009d5e:	4699      	movge	r9, r3
 8009d60:	f1b9 0f00 	cmp.w	r9, #0
 8009d64:	dc33      	bgt.n	8009dce <_printf_float+0x396>
 8009d66:	f04f 0800 	mov.w	r8, #0
 8009d6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d6e:	f104 0b1a 	add.w	fp, r4, #26
 8009d72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d74:	ebaa 0303 	sub.w	r3, sl, r3
 8009d78:	eba3 0309 	sub.w	r3, r3, r9
 8009d7c:	4543      	cmp	r3, r8
 8009d7e:	f77f af79 	ble.w	8009c74 <_printf_float+0x23c>
 8009d82:	2301      	movs	r3, #1
 8009d84:	465a      	mov	r2, fp
 8009d86:	4631      	mov	r1, r6
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b8      	blx	r7
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	f43f aeae 	beq.w	8009aee <_printf_float+0xb6>
 8009d92:	f108 0801 	add.w	r8, r8, #1
 8009d96:	e7ec      	b.n	8009d72 <_printf_float+0x33a>
 8009d98:	4642      	mov	r2, r8
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b8      	blx	r7
 8009da0:	3001      	adds	r0, #1
 8009da2:	d1c2      	bne.n	8009d2a <_printf_float+0x2f2>
 8009da4:	e6a3      	b.n	8009aee <_printf_float+0xb6>
 8009da6:	2301      	movs	r3, #1
 8009da8:	4631      	mov	r1, r6
 8009daa:	4628      	mov	r0, r5
 8009dac:	9206      	str	r2, [sp, #24]
 8009dae:	47b8      	blx	r7
 8009db0:	3001      	adds	r0, #1
 8009db2:	f43f ae9c 	beq.w	8009aee <_printf_float+0xb6>
 8009db6:	9a06      	ldr	r2, [sp, #24]
 8009db8:	f10b 0b01 	add.w	fp, fp, #1
 8009dbc:	e7bb      	b.n	8009d36 <_printf_float+0x2fe>
 8009dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d1c0      	bne.n	8009d4e <_printf_float+0x316>
 8009dcc:	e68f      	b.n	8009aee <_printf_float+0xb6>
 8009dce:	9a06      	ldr	r2, [sp, #24]
 8009dd0:	464b      	mov	r3, r9
 8009dd2:	4442      	add	r2, r8
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	47b8      	blx	r7
 8009dda:	3001      	adds	r0, #1
 8009ddc:	d1c3      	bne.n	8009d66 <_printf_float+0x32e>
 8009dde:	e686      	b.n	8009aee <_printf_float+0xb6>
 8009de0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009de4:	f1ba 0f01 	cmp.w	sl, #1
 8009de8:	dc01      	bgt.n	8009dee <_printf_float+0x3b6>
 8009dea:	07db      	lsls	r3, r3, #31
 8009dec:	d536      	bpl.n	8009e5c <_printf_float+0x424>
 8009dee:	2301      	movs	r3, #1
 8009df0:	4642      	mov	r2, r8
 8009df2:	4631      	mov	r1, r6
 8009df4:	4628      	mov	r0, r5
 8009df6:	47b8      	blx	r7
 8009df8:	3001      	adds	r0, #1
 8009dfa:	f43f ae78 	beq.w	8009aee <_printf_float+0xb6>
 8009dfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e02:	4631      	mov	r1, r6
 8009e04:	4628      	mov	r0, r5
 8009e06:	47b8      	blx	r7
 8009e08:	3001      	adds	r0, #1
 8009e0a:	f43f ae70 	beq.w	8009aee <_printf_float+0xb6>
 8009e0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009e12:	2200      	movs	r2, #0
 8009e14:	2300      	movs	r3, #0
 8009e16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009e1a:	f7f6 fe85 	bl	8000b28 <__aeabi_dcmpeq>
 8009e1e:	b9c0      	cbnz	r0, 8009e52 <_printf_float+0x41a>
 8009e20:	4653      	mov	r3, sl
 8009e22:	f108 0201 	add.w	r2, r8, #1
 8009e26:	4631      	mov	r1, r6
 8009e28:	4628      	mov	r0, r5
 8009e2a:	47b8      	blx	r7
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	d10c      	bne.n	8009e4a <_printf_float+0x412>
 8009e30:	e65d      	b.n	8009aee <_printf_float+0xb6>
 8009e32:	2301      	movs	r3, #1
 8009e34:	465a      	mov	r2, fp
 8009e36:	4631      	mov	r1, r6
 8009e38:	4628      	mov	r0, r5
 8009e3a:	47b8      	blx	r7
 8009e3c:	3001      	adds	r0, #1
 8009e3e:	f43f ae56 	beq.w	8009aee <_printf_float+0xb6>
 8009e42:	f108 0801 	add.w	r8, r8, #1
 8009e46:	45d0      	cmp	r8, sl
 8009e48:	dbf3      	blt.n	8009e32 <_printf_float+0x3fa>
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009e50:	e6df      	b.n	8009c12 <_printf_float+0x1da>
 8009e52:	f04f 0800 	mov.w	r8, #0
 8009e56:	f104 0b1a 	add.w	fp, r4, #26
 8009e5a:	e7f4      	b.n	8009e46 <_printf_float+0x40e>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	4642      	mov	r2, r8
 8009e60:	e7e1      	b.n	8009e26 <_printf_float+0x3ee>
 8009e62:	2301      	movs	r3, #1
 8009e64:	464a      	mov	r2, r9
 8009e66:	4631      	mov	r1, r6
 8009e68:	4628      	mov	r0, r5
 8009e6a:	47b8      	blx	r7
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	f43f ae3e 	beq.w	8009aee <_printf_float+0xb6>
 8009e72:	f108 0801 	add.w	r8, r8, #1
 8009e76:	68e3      	ldr	r3, [r4, #12]
 8009e78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e7a:	1a5b      	subs	r3, r3, r1
 8009e7c:	4543      	cmp	r3, r8
 8009e7e:	dcf0      	bgt.n	8009e62 <_printf_float+0x42a>
 8009e80:	e6fc      	b.n	8009c7c <_printf_float+0x244>
 8009e82:	f04f 0800 	mov.w	r8, #0
 8009e86:	f104 0919 	add.w	r9, r4, #25
 8009e8a:	e7f4      	b.n	8009e76 <_printf_float+0x43e>

08009e8c <_printf_common>:
 8009e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e90:	4616      	mov	r6, r2
 8009e92:	4698      	mov	r8, r3
 8009e94:	688a      	ldr	r2, [r1, #8]
 8009e96:	690b      	ldr	r3, [r1, #16]
 8009e98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	bfb8      	it	lt
 8009ea0:	4613      	movlt	r3, r2
 8009ea2:	6033      	str	r3, [r6, #0]
 8009ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ea8:	4607      	mov	r7, r0
 8009eaa:	460c      	mov	r4, r1
 8009eac:	b10a      	cbz	r2, 8009eb2 <_printf_common+0x26>
 8009eae:	3301      	adds	r3, #1
 8009eb0:	6033      	str	r3, [r6, #0]
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	0699      	lsls	r1, r3, #26
 8009eb6:	bf42      	ittt	mi
 8009eb8:	6833      	ldrmi	r3, [r6, #0]
 8009eba:	3302      	addmi	r3, #2
 8009ebc:	6033      	strmi	r3, [r6, #0]
 8009ebe:	6825      	ldr	r5, [r4, #0]
 8009ec0:	f015 0506 	ands.w	r5, r5, #6
 8009ec4:	d106      	bne.n	8009ed4 <_printf_common+0x48>
 8009ec6:	f104 0a19 	add.w	sl, r4, #25
 8009eca:	68e3      	ldr	r3, [r4, #12]
 8009ecc:	6832      	ldr	r2, [r6, #0]
 8009ece:	1a9b      	subs	r3, r3, r2
 8009ed0:	42ab      	cmp	r3, r5
 8009ed2:	dc26      	bgt.n	8009f22 <_printf_common+0x96>
 8009ed4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ed8:	6822      	ldr	r2, [r4, #0]
 8009eda:	3b00      	subs	r3, #0
 8009edc:	bf18      	it	ne
 8009ede:	2301      	movne	r3, #1
 8009ee0:	0692      	lsls	r2, r2, #26
 8009ee2:	d42b      	bmi.n	8009f3c <_printf_common+0xb0>
 8009ee4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ee8:	4641      	mov	r1, r8
 8009eea:	4638      	mov	r0, r7
 8009eec:	47c8      	blx	r9
 8009eee:	3001      	adds	r0, #1
 8009ef0:	d01e      	beq.n	8009f30 <_printf_common+0xa4>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	6922      	ldr	r2, [r4, #16]
 8009ef6:	f003 0306 	and.w	r3, r3, #6
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	bf02      	ittt	eq
 8009efe:	68e5      	ldreq	r5, [r4, #12]
 8009f00:	6833      	ldreq	r3, [r6, #0]
 8009f02:	1aed      	subeq	r5, r5, r3
 8009f04:	68a3      	ldr	r3, [r4, #8]
 8009f06:	bf0c      	ite	eq
 8009f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f0c:	2500      	movne	r5, #0
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	bfc4      	itt	gt
 8009f12:	1a9b      	subgt	r3, r3, r2
 8009f14:	18ed      	addgt	r5, r5, r3
 8009f16:	2600      	movs	r6, #0
 8009f18:	341a      	adds	r4, #26
 8009f1a:	42b5      	cmp	r5, r6
 8009f1c:	d11a      	bne.n	8009f54 <_printf_common+0xc8>
 8009f1e:	2000      	movs	r0, #0
 8009f20:	e008      	b.n	8009f34 <_printf_common+0xa8>
 8009f22:	2301      	movs	r3, #1
 8009f24:	4652      	mov	r2, sl
 8009f26:	4641      	mov	r1, r8
 8009f28:	4638      	mov	r0, r7
 8009f2a:	47c8      	blx	r9
 8009f2c:	3001      	adds	r0, #1
 8009f2e:	d103      	bne.n	8009f38 <_printf_common+0xac>
 8009f30:	f04f 30ff 	mov.w	r0, #4294967295
 8009f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f38:	3501      	adds	r5, #1
 8009f3a:	e7c6      	b.n	8009eca <_printf_common+0x3e>
 8009f3c:	18e1      	adds	r1, r4, r3
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	2030      	movs	r0, #48	@ 0x30
 8009f42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f46:	4422      	add	r2, r4
 8009f48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f50:	3302      	adds	r3, #2
 8009f52:	e7c7      	b.n	8009ee4 <_printf_common+0x58>
 8009f54:	2301      	movs	r3, #1
 8009f56:	4622      	mov	r2, r4
 8009f58:	4641      	mov	r1, r8
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	47c8      	blx	r9
 8009f5e:	3001      	adds	r0, #1
 8009f60:	d0e6      	beq.n	8009f30 <_printf_common+0xa4>
 8009f62:	3601      	adds	r6, #1
 8009f64:	e7d9      	b.n	8009f1a <_printf_common+0x8e>
	...

08009f68 <_printf_i>:
 8009f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6c:	7e0f      	ldrb	r7, [r1, #24]
 8009f6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f70:	2f78      	cmp	r7, #120	@ 0x78
 8009f72:	4691      	mov	r9, r2
 8009f74:	4680      	mov	r8, r0
 8009f76:	460c      	mov	r4, r1
 8009f78:	469a      	mov	sl, r3
 8009f7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f7e:	d807      	bhi.n	8009f90 <_printf_i+0x28>
 8009f80:	2f62      	cmp	r7, #98	@ 0x62
 8009f82:	d80a      	bhi.n	8009f9a <_printf_i+0x32>
 8009f84:	2f00      	cmp	r7, #0
 8009f86:	f000 80d2 	beq.w	800a12e <_printf_i+0x1c6>
 8009f8a:	2f58      	cmp	r7, #88	@ 0x58
 8009f8c:	f000 80b9 	beq.w	800a102 <_printf_i+0x19a>
 8009f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f98:	e03a      	b.n	800a010 <_printf_i+0xa8>
 8009f9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f9e:	2b15      	cmp	r3, #21
 8009fa0:	d8f6      	bhi.n	8009f90 <_printf_i+0x28>
 8009fa2:	a101      	add	r1, pc, #4	@ (adr r1, 8009fa8 <_printf_i+0x40>)
 8009fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fa8:	0800a001 	.word	0x0800a001
 8009fac:	0800a015 	.word	0x0800a015
 8009fb0:	08009f91 	.word	0x08009f91
 8009fb4:	08009f91 	.word	0x08009f91
 8009fb8:	08009f91 	.word	0x08009f91
 8009fbc:	08009f91 	.word	0x08009f91
 8009fc0:	0800a015 	.word	0x0800a015
 8009fc4:	08009f91 	.word	0x08009f91
 8009fc8:	08009f91 	.word	0x08009f91
 8009fcc:	08009f91 	.word	0x08009f91
 8009fd0:	08009f91 	.word	0x08009f91
 8009fd4:	0800a115 	.word	0x0800a115
 8009fd8:	0800a03f 	.word	0x0800a03f
 8009fdc:	0800a0cf 	.word	0x0800a0cf
 8009fe0:	08009f91 	.word	0x08009f91
 8009fe4:	08009f91 	.word	0x08009f91
 8009fe8:	0800a137 	.word	0x0800a137
 8009fec:	08009f91 	.word	0x08009f91
 8009ff0:	0800a03f 	.word	0x0800a03f
 8009ff4:	08009f91 	.word	0x08009f91
 8009ff8:	08009f91 	.word	0x08009f91
 8009ffc:	0800a0d7 	.word	0x0800a0d7
 800a000:	6833      	ldr	r3, [r6, #0]
 800a002:	1d1a      	adds	r2, r3, #4
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	6032      	str	r2, [r6, #0]
 800a008:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a00c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a010:	2301      	movs	r3, #1
 800a012:	e09d      	b.n	800a150 <_printf_i+0x1e8>
 800a014:	6833      	ldr	r3, [r6, #0]
 800a016:	6820      	ldr	r0, [r4, #0]
 800a018:	1d19      	adds	r1, r3, #4
 800a01a:	6031      	str	r1, [r6, #0]
 800a01c:	0606      	lsls	r6, r0, #24
 800a01e:	d501      	bpl.n	800a024 <_printf_i+0xbc>
 800a020:	681d      	ldr	r5, [r3, #0]
 800a022:	e003      	b.n	800a02c <_printf_i+0xc4>
 800a024:	0645      	lsls	r5, r0, #25
 800a026:	d5fb      	bpl.n	800a020 <_printf_i+0xb8>
 800a028:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a02c:	2d00      	cmp	r5, #0
 800a02e:	da03      	bge.n	800a038 <_printf_i+0xd0>
 800a030:	232d      	movs	r3, #45	@ 0x2d
 800a032:	426d      	negs	r5, r5
 800a034:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a038:	4859      	ldr	r0, [pc, #356]	@ (800a1a0 <_printf_i+0x238>)
 800a03a:	230a      	movs	r3, #10
 800a03c:	e011      	b.n	800a062 <_printf_i+0xfa>
 800a03e:	6821      	ldr	r1, [r4, #0]
 800a040:	6833      	ldr	r3, [r6, #0]
 800a042:	0608      	lsls	r0, r1, #24
 800a044:	f853 5b04 	ldr.w	r5, [r3], #4
 800a048:	d402      	bmi.n	800a050 <_printf_i+0xe8>
 800a04a:	0649      	lsls	r1, r1, #25
 800a04c:	bf48      	it	mi
 800a04e:	b2ad      	uxthmi	r5, r5
 800a050:	2f6f      	cmp	r7, #111	@ 0x6f
 800a052:	4853      	ldr	r0, [pc, #332]	@ (800a1a0 <_printf_i+0x238>)
 800a054:	6033      	str	r3, [r6, #0]
 800a056:	bf14      	ite	ne
 800a058:	230a      	movne	r3, #10
 800a05a:	2308      	moveq	r3, #8
 800a05c:	2100      	movs	r1, #0
 800a05e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a062:	6866      	ldr	r6, [r4, #4]
 800a064:	60a6      	str	r6, [r4, #8]
 800a066:	2e00      	cmp	r6, #0
 800a068:	bfa2      	ittt	ge
 800a06a:	6821      	ldrge	r1, [r4, #0]
 800a06c:	f021 0104 	bicge.w	r1, r1, #4
 800a070:	6021      	strge	r1, [r4, #0]
 800a072:	b90d      	cbnz	r5, 800a078 <_printf_i+0x110>
 800a074:	2e00      	cmp	r6, #0
 800a076:	d04b      	beq.n	800a110 <_printf_i+0x1a8>
 800a078:	4616      	mov	r6, r2
 800a07a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a07e:	fb03 5711 	mls	r7, r3, r1, r5
 800a082:	5dc7      	ldrb	r7, [r0, r7]
 800a084:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a088:	462f      	mov	r7, r5
 800a08a:	42bb      	cmp	r3, r7
 800a08c:	460d      	mov	r5, r1
 800a08e:	d9f4      	bls.n	800a07a <_printf_i+0x112>
 800a090:	2b08      	cmp	r3, #8
 800a092:	d10b      	bne.n	800a0ac <_printf_i+0x144>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	07df      	lsls	r7, r3, #31
 800a098:	d508      	bpl.n	800a0ac <_printf_i+0x144>
 800a09a:	6923      	ldr	r3, [r4, #16]
 800a09c:	6861      	ldr	r1, [r4, #4]
 800a09e:	4299      	cmp	r1, r3
 800a0a0:	bfde      	ittt	le
 800a0a2:	2330      	movle	r3, #48	@ 0x30
 800a0a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a0a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0ac:	1b92      	subs	r2, r2, r6
 800a0ae:	6122      	str	r2, [r4, #16]
 800a0b0:	f8cd a000 	str.w	sl, [sp]
 800a0b4:	464b      	mov	r3, r9
 800a0b6:	aa03      	add	r2, sp, #12
 800a0b8:	4621      	mov	r1, r4
 800a0ba:	4640      	mov	r0, r8
 800a0bc:	f7ff fee6 	bl	8009e8c <_printf_common>
 800a0c0:	3001      	adds	r0, #1
 800a0c2:	d14a      	bne.n	800a15a <_printf_i+0x1f2>
 800a0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c8:	b004      	add	sp, #16
 800a0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	f043 0320 	orr.w	r3, r3, #32
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	4833      	ldr	r0, [pc, #204]	@ (800a1a4 <_printf_i+0x23c>)
 800a0d8:	2778      	movs	r7, #120	@ 0x78
 800a0da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	6831      	ldr	r1, [r6, #0]
 800a0e2:	061f      	lsls	r7, r3, #24
 800a0e4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0e8:	d402      	bmi.n	800a0f0 <_printf_i+0x188>
 800a0ea:	065f      	lsls	r7, r3, #25
 800a0ec:	bf48      	it	mi
 800a0ee:	b2ad      	uxthmi	r5, r5
 800a0f0:	6031      	str	r1, [r6, #0]
 800a0f2:	07d9      	lsls	r1, r3, #31
 800a0f4:	bf44      	itt	mi
 800a0f6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0fa:	6023      	strmi	r3, [r4, #0]
 800a0fc:	b11d      	cbz	r5, 800a106 <_printf_i+0x19e>
 800a0fe:	2310      	movs	r3, #16
 800a100:	e7ac      	b.n	800a05c <_printf_i+0xf4>
 800a102:	4827      	ldr	r0, [pc, #156]	@ (800a1a0 <_printf_i+0x238>)
 800a104:	e7e9      	b.n	800a0da <_printf_i+0x172>
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	f023 0320 	bic.w	r3, r3, #32
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	e7f6      	b.n	800a0fe <_printf_i+0x196>
 800a110:	4616      	mov	r6, r2
 800a112:	e7bd      	b.n	800a090 <_printf_i+0x128>
 800a114:	6833      	ldr	r3, [r6, #0]
 800a116:	6825      	ldr	r5, [r4, #0]
 800a118:	6961      	ldr	r1, [r4, #20]
 800a11a:	1d18      	adds	r0, r3, #4
 800a11c:	6030      	str	r0, [r6, #0]
 800a11e:	062e      	lsls	r6, r5, #24
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	d501      	bpl.n	800a128 <_printf_i+0x1c0>
 800a124:	6019      	str	r1, [r3, #0]
 800a126:	e002      	b.n	800a12e <_printf_i+0x1c6>
 800a128:	0668      	lsls	r0, r5, #25
 800a12a:	d5fb      	bpl.n	800a124 <_printf_i+0x1bc>
 800a12c:	8019      	strh	r1, [r3, #0]
 800a12e:	2300      	movs	r3, #0
 800a130:	6123      	str	r3, [r4, #16]
 800a132:	4616      	mov	r6, r2
 800a134:	e7bc      	b.n	800a0b0 <_printf_i+0x148>
 800a136:	6833      	ldr	r3, [r6, #0]
 800a138:	1d1a      	adds	r2, r3, #4
 800a13a:	6032      	str	r2, [r6, #0]
 800a13c:	681e      	ldr	r6, [r3, #0]
 800a13e:	6862      	ldr	r2, [r4, #4]
 800a140:	2100      	movs	r1, #0
 800a142:	4630      	mov	r0, r6
 800a144:	f7f6 f874 	bl	8000230 <memchr>
 800a148:	b108      	cbz	r0, 800a14e <_printf_i+0x1e6>
 800a14a:	1b80      	subs	r0, r0, r6
 800a14c:	6060      	str	r0, [r4, #4]
 800a14e:	6863      	ldr	r3, [r4, #4]
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	2300      	movs	r3, #0
 800a154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a158:	e7aa      	b.n	800a0b0 <_printf_i+0x148>
 800a15a:	6923      	ldr	r3, [r4, #16]
 800a15c:	4632      	mov	r2, r6
 800a15e:	4649      	mov	r1, r9
 800a160:	4640      	mov	r0, r8
 800a162:	47d0      	blx	sl
 800a164:	3001      	adds	r0, #1
 800a166:	d0ad      	beq.n	800a0c4 <_printf_i+0x15c>
 800a168:	6823      	ldr	r3, [r4, #0]
 800a16a:	079b      	lsls	r3, r3, #30
 800a16c:	d413      	bmi.n	800a196 <_printf_i+0x22e>
 800a16e:	68e0      	ldr	r0, [r4, #12]
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	4298      	cmp	r0, r3
 800a174:	bfb8      	it	lt
 800a176:	4618      	movlt	r0, r3
 800a178:	e7a6      	b.n	800a0c8 <_printf_i+0x160>
 800a17a:	2301      	movs	r3, #1
 800a17c:	4632      	mov	r2, r6
 800a17e:	4649      	mov	r1, r9
 800a180:	4640      	mov	r0, r8
 800a182:	47d0      	blx	sl
 800a184:	3001      	adds	r0, #1
 800a186:	d09d      	beq.n	800a0c4 <_printf_i+0x15c>
 800a188:	3501      	adds	r5, #1
 800a18a:	68e3      	ldr	r3, [r4, #12]
 800a18c:	9903      	ldr	r1, [sp, #12]
 800a18e:	1a5b      	subs	r3, r3, r1
 800a190:	42ab      	cmp	r3, r5
 800a192:	dcf2      	bgt.n	800a17a <_printf_i+0x212>
 800a194:	e7eb      	b.n	800a16e <_printf_i+0x206>
 800a196:	2500      	movs	r5, #0
 800a198:	f104 0619 	add.w	r6, r4, #25
 800a19c:	e7f5      	b.n	800a18a <_printf_i+0x222>
 800a19e:	bf00      	nop
 800a1a0:	080112ae 	.word	0x080112ae
 800a1a4:	080112bf 	.word	0x080112bf

0800a1a8 <std>:
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	b510      	push	{r4, lr}
 800a1ac:	4604      	mov	r4, r0
 800a1ae:	e9c0 3300 	strd	r3, r3, [r0]
 800a1b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1b6:	6083      	str	r3, [r0, #8]
 800a1b8:	8181      	strh	r1, [r0, #12]
 800a1ba:	6643      	str	r3, [r0, #100]	@ 0x64
 800a1bc:	81c2      	strh	r2, [r0, #14]
 800a1be:	6183      	str	r3, [r0, #24]
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	2208      	movs	r2, #8
 800a1c4:	305c      	adds	r0, #92	@ 0x5c
 800a1c6:	f000 f914 	bl	800a3f2 <memset>
 800a1ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a200 <std+0x58>)
 800a1cc:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a204 <std+0x5c>)
 800a1d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a208 <std+0x60>)
 800a1d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a20c <std+0x64>)
 800a1d8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a1da:	4b0d      	ldr	r3, [pc, #52]	@ (800a210 <std+0x68>)
 800a1dc:	6224      	str	r4, [r4, #32]
 800a1de:	429c      	cmp	r4, r3
 800a1e0:	d006      	beq.n	800a1f0 <std+0x48>
 800a1e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a1e6:	4294      	cmp	r4, r2
 800a1e8:	d002      	beq.n	800a1f0 <std+0x48>
 800a1ea:	33d0      	adds	r3, #208	@ 0xd0
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	d105      	bne.n	800a1fc <std+0x54>
 800a1f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f8:	f000 b978 	b.w	800a4ec <__retarget_lock_init_recursive>
 800a1fc:	bd10      	pop	{r4, pc}
 800a1fe:	bf00      	nop
 800a200:	0800a36d 	.word	0x0800a36d
 800a204:	0800a38f 	.word	0x0800a38f
 800a208:	0800a3c7 	.word	0x0800a3c7
 800a20c:	0800a3eb 	.word	0x0800a3eb
 800a210:	20005ab4 	.word	0x20005ab4

0800a214 <stdio_exit_handler>:
 800a214:	4a02      	ldr	r2, [pc, #8]	@ (800a220 <stdio_exit_handler+0xc>)
 800a216:	4903      	ldr	r1, [pc, #12]	@ (800a224 <stdio_exit_handler+0x10>)
 800a218:	4803      	ldr	r0, [pc, #12]	@ (800a228 <stdio_exit_handler+0x14>)
 800a21a:	f000 b869 	b.w	800a2f0 <_fwalk_sglue>
 800a21e:	bf00      	nop
 800a220:	2000360c 	.word	0x2000360c
 800a224:	0800be4d 	.word	0x0800be4d
 800a228:	2000361c 	.word	0x2000361c

0800a22c <cleanup_stdio>:
 800a22c:	6841      	ldr	r1, [r0, #4]
 800a22e:	4b0c      	ldr	r3, [pc, #48]	@ (800a260 <cleanup_stdio+0x34>)
 800a230:	4299      	cmp	r1, r3
 800a232:	b510      	push	{r4, lr}
 800a234:	4604      	mov	r4, r0
 800a236:	d001      	beq.n	800a23c <cleanup_stdio+0x10>
 800a238:	f001 fe08 	bl	800be4c <_fflush_r>
 800a23c:	68a1      	ldr	r1, [r4, #8]
 800a23e:	4b09      	ldr	r3, [pc, #36]	@ (800a264 <cleanup_stdio+0x38>)
 800a240:	4299      	cmp	r1, r3
 800a242:	d002      	beq.n	800a24a <cleanup_stdio+0x1e>
 800a244:	4620      	mov	r0, r4
 800a246:	f001 fe01 	bl	800be4c <_fflush_r>
 800a24a:	68e1      	ldr	r1, [r4, #12]
 800a24c:	4b06      	ldr	r3, [pc, #24]	@ (800a268 <cleanup_stdio+0x3c>)
 800a24e:	4299      	cmp	r1, r3
 800a250:	d004      	beq.n	800a25c <cleanup_stdio+0x30>
 800a252:	4620      	mov	r0, r4
 800a254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a258:	f001 bdf8 	b.w	800be4c <_fflush_r>
 800a25c:	bd10      	pop	{r4, pc}
 800a25e:	bf00      	nop
 800a260:	20005ab4 	.word	0x20005ab4
 800a264:	20005b1c 	.word	0x20005b1c
 800a268:	20005b84 	.word	0x20005b84

0800a26c <global_stdio_init.part.0>:
 800a26c:	b510      	push	{r4, lr}
 800a26e:	4b0b      	ldr	r3, [pc, #44]	@ (800a29c <global_stdio_init.part.0+0x30>)
 800a270:	4c0b      	ldr	r4, [pc, #44]	@ (800a2a0 <global_stdio_init.part.0+0x34>)
 800a272:	4a0c      	ldr	r2, [pc, #48]	@ (800a2a4 <global_stdio_init.part.0+0x38>)
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	4620      	mov	r0, r4
 800a278:	2200      	movs	r2, #0
 800a27a:	2104      	movs	r1, #4
 800a27c:	f7ff ff94 	bl	800a1a8 <std>
 800a280:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a284:	2201      	movs	r2, #1
 800a286:	2109      	movs	r1, #9
 800a288:	f7ff ff8e 	bl	800a1a8 <std>
 800a28c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a290:	2202      	movs	r2, #2
 800a292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a296:	2112      	movs	r1, #18
 800a298:	f7ff bf86 	b.w	800a1a8 <std>
 800a29c:	20005bec 	.word	0x20005bec
 800a2a0:	20005ab4 	.word	0x20005ab4
 800a2a4:	0800a215 	.word	0x0800a215

0800a2a8 <__sfp_lock_acquire>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	@ (800a2b0 <__sfp_lock_acquire+0x8>)
 800a2aa:	f000 b920 	b.w	800a4ee <__retarget_lock_acquire_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	20005bf5 	.word	0x20005bf5

0800a2b4 <__sfp_lock_release>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	@ (800a2bc <__sfp_lock_release+0x8>)
 800a2b6:	f000 b91b 	b.w	800a4f0 <__retarget_lock_release_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	20005bf5 	.word	0x20005bf5

0800a2c0 <__sinit>:
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	f7ff fff0 	bl	800a2a8 <__sfp_lock_acquire>
 800a2c8:	6a23      	ldr	r3, [r4, #32]
 800a2ca:	b11b      	cbz	r3, 800a2d4 <__sinit+0x14>
 800a2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d0:	f7ff bff0 	b.w	800a2b4 <__sfp_lock_release>
 800a2d4:	4b04      	ldr	r3, [pc, #16]	@ (800a2e8 <__sinit+0x28>)
 800a2d6:	6223      	str	r3, [r4, #32]
 800a2d8:	4b04      	ldr	r3, [pc, #16]	@ (800a2ec <__sinit+0x2c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1f5      	bne.n	800a2cc <__sinit+0xc>
 800a2e0:	f7ff ffc4 	bl	800a26c <global_stdio_init.part.0>
 800a2e4:	e7f2      	b.n	800a2cc <__sinit+0xc>
 800a2e6:	bf00      	nop
 800a2e8:	0800a22d 	.word	0x0800a22d
 800a2ec:	20005bec 	.word	0x20005bec

0800a2f0 <_fwalk_sglue>:
 800a2f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f4:	4607      	mov	r7, r0
 800a2f6:	4688      	mov	r8, r1
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	2600      	movs	r6, #0
 800a2fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a300:	f1b9 0901 	subs.w	r9, r9, #1
 800a304:	d505      	bpl.n	800a312 <_fwalk_sglue+0x22>
 800a306:	6824      	ldr	r4, [r4, #0]
 800a308:	2c00      	cmp	r4, #0
 800a30a:	d1f7      	bne.n	800a2fc <_fwalk_sglue+0xc>
 800a30c:	4630      	mov	r0, r6
 800a30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a312:	89ab      	ldrh	r3, [r5, #12]
 800a314:	2b01      	cmp	r3, #1
 800a316:	d907      	bls.n	800a328 <_fwalk_sglue+0x38>
 800a318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a31c:	3301      	adds	r3, #1
 800a31e:	d003      	beq.n	800a328 <_fwalk_sglue+0x38>
 800a320:	4629      	mov	r1, r5
 800a322:	4638      	mov	r0, r7
 800a324:	47c0      	blx	r8
 800a326:	4306      	orrs	r6, r0
 800a328:	3568      	adds	r5, #104	@ 0x68
 800a32a:	e7e9      	b.n	800a300 <_fwalk_sglue+0x10>

0800a32c <siprintf>:
 800a32c:	b40e      	push	{r1, r2, r3}
 800a32e:	b500      	push	{lr}
 800a330:	b09c      	sub	sp, #112	@ 0x70
 800a332:	ab1d      	add	r3, sp, #116	@ 0x74
 800a334:	9002      	str	r0, [sp, #8]
 800a336:	9006      	str	r0, [sp, #24]
 800a338:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a33c:	4809      	ldr	r0, [pc, #36]	@ (800a364 <siprintf+0x38>)
 800a33e:	9107      	str	r1, [sp, #28]
 800a340:	9104      	str	r1, [sp, #16]
 800a342:	4909      	ldr	r1, [pc, #36]	@ (800a368 <siprintf+0x3c>)
 800a344:	f853 2b04 	ldr.w	r2, [r3], #4
 800a348:	9105      	str	r1, [sp, #20]
 800a34a:	6800      	ldr	r0, [r0, #0]
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	a902      	add	r1, sp, #8
 800a350:	f001 fbfc 	bl	800bb4c <_svfiprintf_r>
 800a354:	9b02      	ldr	r3, [sp, #8]
 800a356:	2200      	movs	r2, #0
 800a358:	701a      	strb	r2, [r3, #0]
 800a35a:	b01c      	add	sp, #112	@ 0x70
 800a35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a360:	b003      	add	sp, #12
 800a362:	4770      	bx	lr
 800a364:	20003618 	.word	0x20003618
 800a368:	ffff0208 	.word	0xffff0208

0800a36c <__sread>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	460c      	mov	r4, r1
 800a370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a374:	f000 f86c 	bl	800a450 <_read_r>
 800a378:	2800      	cmp	r0, #0
 800a37a:	bfab      	itete	ge
 800a37c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a37e:	89a3      	ldrhlt	r3, [r4, #12]
 800a380:	181b      	addge	r3, r3, r0
 800a382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a386:	bfac      	ite	ge
 800a388:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a38a:	81a3      	strhlt	r3, [r4, #12]
 800a38c:	bd10      	pop	{r4, pc}

0800a38e <__swrite>:
 800a38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a392:	461f      	mov	r7, r3
 800a394:	898b      	ldrh	r3, [r1, #12]
 800a396:	05db      	lsls	r3, r3, #23
 800a398:	4605      	mov	r5, r0
 800a39a:	460c      	mov	r4, r1
 800a39c:	4616      	mov	r6, r2
 800a39e:	d505      	bpl.n	800a3ac <__swrite+0x1e>
 800a3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f000 f840 	bl	800a42c <_lseek_r>
 800a3ac:	89a3      	ldrh	r3, [r4, #12]
 800a3ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	4632      	mov	r2, r6
 800a3ba:	463b      	mov	r3, r7
 800a3bc:	4628      	mov	r0, r5
 800a3be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c2:	f000 b857 	b.w	800a474 <_write_r>

0800a3c6 <__sseek>:
 800a3c6:	b510      	push	{r4, lr}
 800a3c8:	460c      	mov	r4, r1
 800a3ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ce:	f000 f82d 	bl	800a42c <_lseek_r>
 800a3d2:	1c43      	adds	r3, r0, #1
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	bf15      	itete	ne
 800a3d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a3da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a3de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3e2:	81a3      	strheq	r3, [r4, #12]
 800a3e4:	bf18      	it	ne
 800a3e6:	81a3      	strhne	r3, [r4, #12]
 800a3e8:	bd10      	pop	{r4, pc}

0800a3ea <__sclose>:
 800a3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ee:	f000 b80d 	b.w	800a40c <_close_r>

0800a3f2 <memset>:
 800a3f2:	4402      	add	r2, r0
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d100      	bne.n	800a3fc <memset+0xa>
 800a3fa:	4770      	bx	lr
 800a3fc:	f803 1b01 	strb.w	r1, [r3], #1
 800a400:	e7f9      	b.n	800a3f6 <memset+0x4>
	...

0800a404 <_localeconv_r>:
 800a404:	4800      	ldr	r0, [pc, #0]	@ (800a408 <_localeconv_r+0x4>)
 800a406:	4770      	bx	lr
 800a408:	20003758 	.word	0x20003758

0800a40c <_close_r>:
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4d06      	ldr	r5, [pc, #24]	@ (800a428 <_close_r+0x1c>)
 800a410:	2300      	movs	r3, #0
 800a412:	4604      	mov	r4, r0
 800a414:	4608      	mov	r0, r1
 800a416:	602b      	str	r3, [r5, #0]
 800a418:	f7f8 fcad 	bl	8002d76 <_close>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	d102      	bne.n	800a426 <_close_r+0x1a>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	b103      	cbz	r3, 800a426 <_close_r+0x1a>
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	bd38      	pop	{r3, r4, r5, pc}
 800a428:	20005bf0 	.word	0x20005bf0

0800a42c <_lseek_r>:
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	4d07      	ldr	r5, [pc, #28]	@ (800a44c <_lseek_r+0x20>)
 800a430:	4604      	mov	r4, r0
 800a432:	4608      	mov	r0, r1
 800a434:	4611      	mov	r1, r2
 800a436:	2200      	movs	r2, #0
 800a438:	602a      	str	r2, [r5, #0]
 800a43a:	461a      	mov	r2, r3
 800a43c:	f7f8 fcc2 	bl	8002dc4 <_lseek>
 800a440:	1c43      	adds	r3, r0, #1
 800a442:	d102      	bne.n	800a44a <_lseek_r+0x1e>
 800a444:	682b      	ldr	r3, [r5, #0]
 800a446:	b103      	cbz	r3, 800a44a <_lseek_r+0x1e>
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	bd38      	pop	{r3, r4, r5, pc}
 800a44c:	20005bf0 	.word	0x20005bf0

0800a450 <_read_r>:
 800a450:	b538      	push	{r3, r4, r5, lr}
 800a452:	4d07      	ldr	r5, [pc, #28]	@ (800a470 <_read_r+0x20>)
 800a454:	4604      	mov	r4, r0
 800a456:	4608      	mov	r0, r1
 800a458:	4611      	mov	r1, r2
 800a45a:	2200      	movs	r2, #0
 800a45c:	602a      	str	r2, [r5, #0]
 800a45e:	461a      	mov	r2, r3
 800a460:	f7f8 fc50 	bl	8002d04 <_read>
 800a464:	1c43      	adds	r3, r0, #1
 800a466:	d102      	bne.n	800a46e <_read_r+0x1e>
 800a468:	682b      	ldr	r3, [r5, #0]
 800a46a:	b103      	cbz	r3, 800a46e <_read_r+0x1e>
 800a46c:	6023      	str	r3, [r4, #0]
 800a46e:	bd38      	pop	{r3, r4, r5, pc}
 800a470:	20005bf0 	.word	0x20005bf0

0800a474 <_write_r>:
 800a474:	b538      	push	{r3, r4, r5, lr}
 800a476:	4d07      	ldr	r5, [pc, #28]	@ (800a494 <_write_r+0x20>)
 800a478:	4604      	mov	r4, r0
 800a47a:	4608      	mov	r0, r1
 800a47c:	4611      	mov	r1, r2
 800a47e:	2200      	movs	r2, #0
 800a480:	602a      	str	r2, [r5, #0]
 800a482:	461a      	mov	r2, r3
 800a484:	f7f8 fc5b 	bl	8002d3e <_write>
 800a488:	1c43      	adds	r3, r0, #1
 800a48a:	d102      	bne.n	800a492 <_write_r+0x1e>
 800a48c:	682b      	ldr	r3, [r5, #0]
 800a48e:	b103      	cbz	r3, 800a492 <_write_r+0x1e>
 800a490:	6023      	str	r3, [r4, #0]
 800a492:	bd38      	pop	{r3, r4, r5, pc}
 800a494:	20005bf0 	.word	0x20005bf0

0800a498 <__errno>:
 800a498:	4b01      	ldr	r3, [pc, #4]	@ (800a4a0 <__errno+0x8>)
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	20003618 	.word	0x20003618

0800a4a4 <__libc_init_array>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	4d0d      	ldr	r5, [pc, #52]	@ (800a4dc <__libc_init_array+0x38>)
 800a4a8:	4c0d      	ldr	r4, [pc, #52]	@ (800a4e0 <__libc_init_array+0x3c>)
 800a4aa:	1b64      	subs	r4, r4, r5
 800a4ac:	10a4      	asrs	r4, r4, #2
 800a4ae:	2600      	movs	r6, #0
 800a4b0:	42a6      	cmp	r6, r4
 800a4b2:	d109      	bne.n	800a4c8 <__libc_init_array+0x24>
 800a4b4:	4d0b      	ldr	r5, [pc, #44]	@ (800a4e4 <__libc_init_array+0x40>)
 800a4b6:	4c0c      	ldr	r4, [pc, #48]	@ (800a4e8 <__libc_init_array+0x44>)
 800a4b8:	f002 f866 	bl	800c588 <_init>
 800a4bc:	1b64      	subs	r4, r4, r5
 800a4be:	10a4      	asrs	r4, r4, #2
 800a4c0:	2600      	movs	r6, #0
 800a4c2:	42a6      	cmp	r6, r4
 800a4c4:	d105      	bne.n	800a4d2 <__libc_init_array+0x2e>
 800a4c6:	bd70      	pop	{r4, r5, r6, pc}
 800a4c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4cc:	4798      	blx	r3
 800a4ce:	3601      	adds	r6, #1
 800a4d0:	e7ee      	b.n	800a4b0 <__libc_init_array+0xc>
 800a4d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4d6:	4798      	blx	r3
 800a4d8:	3601      	adds	r6, #1
 800a4da:	e7f2      	b.n	800a4c2 <__libc_init_array+0x1e>
 800a4dc:	08011618 	.word	0x08011618
 800a4e0:	08011618 	.word	0x08011618
 800a4e4:	08011618 	.word	0x08011618
 800a4e8:	0801161c 	.word	0x0801161c

0800a4ec <__retarget_lock_init_recursive>:
 800a4ec:	4770      	bx	lr

0800a4ee <__retarget_lock_acquire_recursive>:
 800a4ee:	4770      	bx	lr

0800a4f0 <__retarget_lock_release_recursive>:
 800a4f0:	4770      	bx	lr

0800a4f2 <quorem>:
 800a4f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f6:	6903      	ldr	r3, [r0, #16]
 800a4f8:	690c      	ldr	r4, [r1, #16]
 800a4fa:	42a3      	cmp	r3, r4
 800a4fc:	4607      	mov	r7, r0
 800a4fe:	db7e      	blt.n	800a5fe <quorem+0x10c>
 800a500:	3c01      	subs	r4, #1
 800a502:	f101 0814 	add.w	r8, r1, #20
 800a506:	00a3      	lsls	r3, r4, #2
 800a508:	f100 0514 	add.w	r5, r0, #20
 800a50c:	9300      	str	r3, [sp, #0]
 800a50e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a512:	9301      	str	r3, [sp, #4]
 800a514:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a51c:	3301      	adds	r3, #1
 800a51e:	429a      	cmp	r2, r3
 800a520:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a524:	fbb2 f6f3 	udiv	r6, r2, r3
 800a528:	d32e      	bcc.n	800a588 <quorem+0x96>
 800a52a:	f04f 0a00 	mov.w	sl, #0
 800a52e:	46c4      	mov	ip, r8
 800a530:	46ae      	mov	lr, r5
 800a532:	46d3      	mov	fp, sl
 800a534:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a538:	b298      	uxth	r0, r3
 800a53a:	fb06 a000 	mla	r0, r6, r0, sl
 800a53e:	0c02      	lsrs	r2, r0, #16
 800a540:	0c1b      	lsrs	r3, r3, #16
 800a542:	fb06 2303 	mla	r3, r6, r3, r2
 800a546:	f8de 2000 	ldr.w	r2, [lr]
 800a54a:	b280      	uxth	r0, r0
 800a54c:	b292      	uxth	r2, r2
 800a54e:	1a12      	subs	r2, r2, r0
 800a550:	445a      	add	r2, fp
 800a552:	f8de 0000 	ldr.w	r0, [lr]
 800a556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a560:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a564:	b292      	uxth	r2, r2
 800a566:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a56a:	45e1      	cmp	r9, ip
 800a56c:	f84e 2b04 	str.w	r2, [lr], #4
 800a570:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a574:	d2de      	bcs.n	800a534 <quorem+0x42>
 800a576:	9b00      	ldr	r3, [sp, #0]
 800a578:	58eb      	ldr	r3, [r5, r3]
 800a57a:	b92b      	cbnz	r3, 800a588 <quorem+0x96>
 800a57c:	9b01      	ldr	r3, [sp, #4]
 800a57e:	3b04      	subs	r3, #4
 800a580:	429d      	cmp	r5, r3
 800a582:	461a      	mov	r2, r3
 800a584:	d32f      	bcc.n	800a5e6 <quorem+0xf4>
 800a586:	613c      	str	r4, [r7, #16]
 800a588:	4638      	mov	r0, r7
 800a58a:	f001 f97b 	bl	800b884 <__mcmp>
 800a58e:	2800      	cmp	r0, #0
 800a590:	db25      	blt.n	800a5de <quorem+0xec>
 800a592:	4629      	mov	r1, r5
 800a594:	2000      	movs	r0, #0
 800a596:	f858 2b04 	ldr.w	r2, [r8], #4
 800a59a:	f8d1 c000 	ldr.w	ip, [r1]
 800a59e:	fa1f fe82 	uxth.w	lr, r2
 800a5a2:	fa1f f38c 	uxth.w	r3, ip
 800a5a6:	eba3 030e 	sub.w	r3, r3, lr
 800a5aa:	4403      	add	r3, r0
 800a5ac:	0c12      	lsrs	r2, r2, #16
 800a5ae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a5b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5bc:	45c1      	cmp	r9, r8
 800a5be:	f841 3b04 	str.w	r3, [r1], #4
 800a5c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a5c6:	d2e6      	bcs.n	800a596 <quorem+0xa4>
 800a5c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5d0:	b922      	cbnz	r2, 800a5dc <quorem+0xea>
 800a5d2:	3b04      	subs	r3, #4
 800a5d4:	429d      	cmp	r5, r3
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	d30b      	bcc.n	800a5f2 <quorem+0x100>
 800a5da:	613c      	str	r4, [r7, #16]
 800a5dc:	3601      	adds	r6, #1
 800a5de:	4630      	mov	r0, r6
 800a5e0:	b003      	add	sp, #12
 800a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5e6:	6812      	ldr	r2, [r2, #0]
 800a5e8:	3b04      	subs	r3, #4
 800a5ea:	2a00      	cmp	r2, #0
 800a5ec:	d1cb      	bne.n	800a586 <quorem+0x94>
 800a5ee:	3c01      	subs	r4, #1
 800a5f0:	e7c6      	b.n	800a580 <quorem+0x8e>
 800a5f2:	6812      	ldr	r2, [r2, #0]
 800a5f4:	3b04      	subs	r3, #4
 800a5f6:	2a00      	cmp	r2, #0
 800a5f8:	d1ef      	bne.n	800a5da <quorem+0xe8>
 800a5fa:	3c01      	subs	r4, #1
 800a5fc:	e7ea      	b.n	800a5d4 <quorem+0xe2>
 800a5fe:	2000      	movs	r0, #0
 800a600:	e7ee      	b.n	800a5e0 <quorem+0xee>
 800a602:	0000      	movs	r0, r0
 800a604:	0000      	movs	r0, r0
	...

0800a608 <_dtoa_r>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	69c7      	ldr	r7, [r0, #28]
 800a60e:	b099      	sub	sp, #100	@ 0x64
 800a610:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a614:	ec55 4b10 	vmov	r4, r5, d0
 800a618:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a61a:	9109      	str	r1, [sp, #36]	@ 0x24
 800a61c:	4683      	mov	fp, r0
 800a61e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a620:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a622:	b97f      	cbnz	r7, 800a644 <_dtoa_r+0x3c>
 800a624:	2010      	movs	r0, #16
 800a626:	f000 fdfd 	bl	800b224 <malloc>
 800a62a:	4602      	mov	r2, r0
 800a62c:	f8cb 001c 	str.w	r0, [fp, #28]
 800a630:	b920      	cbnz	r0, 800a63c <_dtoa_r+0x34>
 800a632:	4ba7      	ldr	r3, [pc, #668]	@ (800a8d0 <_dtoa_r+0x2c8>)
 800a634:	21ef      	movs	r1, #239	@ 0xef
 800a636:	48a7      	ldr	r0, [pc, #668]	@ (800a8d4 <_dtoa_r+0x2cc>)
 800a638:	f001 fc68 	bl	800bf0c <__assert_func>
 800a63c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a640:	6007      	str	r7, [r0, #0]
 800a642:	60c7      	str	r7, [r0, #12]
 800a644:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a648:	6819      	ldr	r1, [r3, #0]
 800a64a:	b159      	cbz	r1, 800a664 <_dtoa_r+0x5c>
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	604a      	str	r2, [r1, #4]
 800a650:	2301      	movs	r3, #1
 800a652:	4093      	lsls	r3, r2
 800a654:	608b      	str	r3, [r1, #8]
 800a656:	4658      	mov	r0, fp
 800a658:	f000 feda 	bl	800b410 <_Bfree>
 800a65c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a660:	2200      	movs	r2, #0
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	1e2b      	subs	r3, r5, #0
 800a666:	bfb9      	ittee	lt
 800a668:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a66c:	9303      	strlt	r3, [sp, #12]
 800a66e:	2300      	movge	r3, #0
 800a670:	6033      	strge	r3, [r6, #0]
 800a672:	9f03      	ldr	r7, [sp, #12]
 800a674:	4b98      	ldr	r3, [pc, #608]	@ (800a8d8 <_dtoa_r+0x2d0>)
 800a676:	bfbc      	itt	lt
 800a678:	2201      	movlt	r2, #1
 800a67a:	6032      	strlt	r2, [r6, #0]
 800a67c:	43bb      	bics	r3, r7
 800a67e:	d112      	bne.n	800a6a6 <_dtoa_r+0x9e>
 800a680:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a682:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a686:	6013      	str	r3, [r2, #0]
 800a688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a68c:	4323      	orrs	r3, r4
 800a68e:	f000 854d 	beq.w	800b12c <_dtoa_r+0xb24>
 800a692:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a694:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a8ec <_dtoa_r+0x2e4>
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 854f 	beq.w	800b13c <_dtoa_r+0xb34>
 800a69e:	f10a 0303 	add.w	r3, sl, #3
 800a6a2:	f000 bd49 	b.w	800b138 <_dtoa_r+0xb30>
 800a6a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	ec51 0b17 	vmov	r0, r1, d7
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a6b6:	f7f6 fa37 	bl	8000b28 <__aeabi_dcmpeq>
 800a6ba:	4680      	mov	r8, r0
 800a6bc:	b158      	cbz	r0, 800a6d6 <_dtoa_r+0xce>
 800a6be:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	6013      	str	r3, [r2, #0]
 800a6c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6c6:	b113      	cbz	r3, 800a6ce <_dtoa_r+0xc6>
 800a6c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a6ca:	4b84      	ldr	r3, [pc, #528]	@ (800a8dc <_dtoa_r+0x2d4>)
 800a6cc:	6013      	str	r3, [r2, #0]
 800a6ce:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a8f0 <_dtoa_r+0x2e8>
 800a6d2:	f000 bd33 	b.w	800b13c <_dtoa_r+0xb34>
 800a6d6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a6da:	aa16      	add	r2, sp, #88	@ 0x58
 800a6dc:	a917      	add	r1, sp, #92	@ 0x5c
 800a6de:	4658      	mov	r0, fp
 800a6e0:	f001 f980 	bl	800b9e4 <__d2b>
 800a6e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a6e8:	4681      	mov	r9, r0
 800a6ea:	2e00      	cmp	r6, #0
 800a6ec:	d077      	beq.n	800a7de <_dtoa_r+0x1d6>
 800a6ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6f0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a700:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a704:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a708:	4619      	mov	r1, r3
 800a70a:	2200      	movs	r2, #0
 800a70c:	4b74      	ldr	r3, [pc, #464]	@ (800a8e0 <_dtoa_r+0x2d8>)
 800a70e:	f7f5 fdeb 	bl	80002e8 <__aeabi_dsub>
 800a712:	a369      	add	r3, pc, #420	@ (adr r3, 800a8b8 <_dtoa_r+0x2b0>)
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	f7f5 ff9e 	bl	8000658 <__aeabi_dmul>
 800a71c:	a368      	add	r3, pc, #416	@ (adr r3, 800a8c0 <_dtoa_r+0x2b8>)
 800a71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a722:	f7f5 fde3 	bl	80002ec <__adddf3>
 800a726:	4604      	mov	r4, r0
 800a728:	4630      	mov	r0, r6
 800a72a:	460d      	mov	r5, r1
 800a72c:	f7f5 ff2a 	bl	8000584 <__aeabi_i2d>
 800a730:	a365      	add	r3, pc, #404	@ (adr r3, 800a8c8 <_dtoa_r+0x2c0>)
 800a732:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a736:	f7f5 ff8f 	bl	8000658 <__aeabi_dmul>
 800a73a:	4602      	mov	r2, r0
 800a73c:	460b      	mov	r3, r1
 800a73e:	4620      	mov	r0, r4
 800a740:	4629      	mov	r1, r5
 800a742:	f7f5 fdd3 	bl	80002ec <__adddf3>
 800a746:	4604      	mov	r4, r0
 800a748:	460d      	mov	r5, r1
 800a74a:	f7f6 fa35 	bl	8000bb8 <__aeabi_d2iz>
 800a74e:	2200      	movs	r2, #0
 800a750:	4607      	mov	r7, r0
 800a752:	2300      	movs	r3, #0
 800a754:	4620      	mov	r0, r4
 800a756:	4629      	mov	r1, r5
 800a758:	f7f6 f9f0 	bl	8000b3c <__aeabi_dcmplt>
 800a75c:	b140      	cbz	r0, 800a770 <_dtoa_r+0x168>
 800a75e:	4638      	mov	r0, r7
 800a760:	f7f5 ff10 	bl	8000584 <__aeabi_i2d>
 800a764:	4622      	mov	r2, r4
 800a766:	462b      	mov	r3, r5
 800a768:	f7f6 f9de 	bl	8000b28 <__aeabi_dcmpeq>
 800a76c:	b900      	cbnz	r0, 800a770 <_dtoa_r+0x168>
 800a76e:	3f01      	subs	r7, #1
 800a770:	2f16      	cmp	r7, #22
 800a772:	d851      	bhi.n	800a818 <_dtoa_r+0x210>
 800a774:	4b5b      	ldr	r3, [pc, #364]	@ (800a8e4 <_dtoa_r+0x2dc>)
 800a776:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a782:	f7f6 f9db 	bl	8000b3c <__aeabi_dcmplt>
 800a786:	2800      	cmp	r0, #0
 800a788:	d048      	beq.n	800a81c <_dtoa_r+0x214>
 800a78a:	3f01      	subs	r7, #1
 800a78c:	2300      	movs	r3, #0
 800a78e:	9312      	str	r3, [sp, #72]	@ 0x48
 800a790:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a792:	1b9b      	subs	r3, r3, r6
 800a794:	1e5a      	subs	r2, r3, #1
 800a796:	bf44      	itt	mi
 800a798:	f1c3 0801 	rsbmi	r8, r3, #1
 800a79c:	2300      	movmi	r3, #0
 800a79e:	9208      	str	r2, [sp, #32]
 800a7a0:	bf54      	ite	pl
 800a7a2:	f04f 0800 	movpl.w	r8, #0
 800a7a6:	9308      	strmi	r3, [sp, #32]
 800a7a8:	2f00      	cmp	r7, #0
 800a7aa:	db39      	blt.n	800a820 <_dtoa_r+0x218>
 800a7ac:	9b08      	ldr	r3, [sp, #32]
 800a7ae:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a7b0:	443b      	add	r3, r7
 800a7b2:	9308      	str	r3, [sp, #32]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ba:	2b09      	cmp	r3, #9
 800a7bc:	d864      	bhi.n	800a888 <_dtoa_r+0x280>
 800a7be:	2b05      	cmp	r3, #5
 800a7c0:	bfc4      	itt	gt
 800a7c2:	3b04      	subgt	r3, #4
 800a7c4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c8:	f1a3 0302 	sub.w	r3, r3, #2
 800a7cc:	bfcc      	ite	gt
 800a7ce:	2400      	movgt	r4, #0
 800a7d0:	2401      	movle	r4, #1
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d863      	bhi.n	800a89e <_dtoa_r+0x296>
 800a7d6:	e8df f003 	tbb	[pc, r3]
 800a7da:	372a      	.short	0x372a
 800a7dc:	5535      	.short	0x5535
 800a7de:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a7e2:	441e      	add	r6, r3
 800a7e4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a7e8:	2b20      	cmp	r3, #32
 800a7ea:	bfc1      	itttt	gt
 800a7ec:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a7f0:	409f      	lslgt	r7, r3
 800a7f2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a7f6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a7fa:	bfd6      	itet	le
 800a7fc:	f1c3 0320 	rsble	r3, r3, #32
 800a800:	ea47 0003 	orrgt.w	r0, r7, r3
 800a804:	fa04 f003 	lslle.w	r0, r4, r3
 800a808:	f7f5 feac 	bl	8000564 <__aeabi_ui2d>
 800a80c:	2201      	movs	r2, #1
 800a80e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a812:	3e01      	subs	r6, #1
 800a814:	9214      	str	r2, [sp, #80]	@ 0x50
 800a816:	e777      	b.n	800a708 <_dtoa_r+0x100>
 800a818:	2301      	movs	r3, #1
 800a81a:	e7b8      	b.n	800a78e <_dtoa_r+0x186>
 800a81c:	9012      	str	r0, [sp, #72]	@ 0x48
 800a81e:	e7b7      	b.n	800a790 <_dtoa_r+0x188>
 800a820:	427b      	negs	r3, r7
 800a822:	930a      	str	r3, [sp, #40]	@ 0x28
 800a824:	2300      	movs	r3, #0
 800a826:	eba8 0807 	sub.w	r8, r8, r7
 800a82a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a82c:	e7c4      	b.n	800a7b8 <_dtoa_r+0x1b0>
 800a82e:	2300      	movs	r3, #0
 800a830:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a834:	2b00      	cmp	r3, #0
 800a836:	dc35      	bgt.n	800a8a4 <_dtoa_r+0x29c>
 800a838:	2301      	movs	r3, #1
 800a83a:	9300      	str	r3, [sp, #0]
 800a83c:	9307      	str	r3, [sp, #28]
 800a83e:	461a      	mov	r2, r3
 800a840:	920e      	str	r2, [sp, #56]	@ 0x38
 800a842:	e00b      	b.n	800a85c <_dtoa_r+0x254>
 800a844:	2301      	movs	r3, #1
 800a846:	e7f3      	b.n	800a830 <_dtoa_r+0x228>
 800a848:	2300      	movs	r3, #0
 800a84a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a84c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a84e:	18fb      	adds	r3, r7, r3
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	3301      	adds	r3, #1
 800a854:	2b01      	cmp	r3, #1
 800a856:	9307      	str	r3, [sp, #28]
 800a858:	bfb8      	it	lt
 800a85a:	2301      	movlt	r3, #1
 800a85c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a860:	2100      	movs	r1, #0
 800a862:	2204      	movs	r2, #4
 800a864:	f102 0514 	add.w	r5, r2, #20
 800a868:	429d      	cmp	r5, r3
 800a86a:	d91f      	bls.n	800a8ac <_dtoa_r+0x2a4>
 800a86c:	6041      	str	r1, [r0, #4]
 800a86e:	4658      	mov	r0, fp
 800a870:	f000 fd8e 	bl	800b390 <_Balloc>
 800a874:	4682      	mov	sl, r0
 800a876:	2800      	cmp	r0, #0
 800a878:	d13c      	bne.n	800a8f4 <_dtoa_r+0x2ec>
 800a87a:	4b1b      	ldr	r3, [pc, #108]	@ (800a8e8 <_dtoa_r+0x2e0>)
 800a87c:	4602      	mov	r2, r0
 800a87e:	f240 11af 	movw	r1, #431	@ 0x1af
 800a882:	e6d8      	b.n	800a636 <_dtoa_r+0x2e>
 800a884:	2301      	movs	r3, #1
 800a886:	e7e0      	b.n	800a84a <_dtoa_r+0x242>
 800a888:	2401      	movs	r4, #1
 800a88a:	2300      	movs	r3, #0
 800a88c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a88e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a890:	f04f 33ff 	mov.w	r3, #4294967295
 800a894:	9300      	str	r3, [sp, #0]
 800a896:	9307      	str	r3, [sp, #28]
 800a898:	2200      	movs	r2, #0
 800a89a:	2312      	movs	r3, #18
 800a89c:	e7d0      	b.n	800a840 <_dtoa_r+0x238>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a8a2:	e7f5      	b.n	800a890 <_dtoa_r+0x288>
 800a8a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	9307      	str	r3, [sp, #28]
 800a8aa:	e7d7      	b.n	800a85c <_dtoa_r+0x254>
 800a8ac:	3101      	adds	r1, #1
 800a8ae:	0052      	lsls	r2, r2, #1
 800a8b0:	e7d8      	b.n	800a864 <_dtoa_r+0x25c>
 800a8b2:	bf00      	nop
 800a8b4:	f3af 8000 	nop.w
 800a8b8:	636f4361 	.word	0x636f4361
 800a8bc:	3fd287a7 	.word	0x3fd287a7
 800a8c0:	8b60c8b3 	.word	0x8b60c8b3
 800a8c4:	3fc68a28 	.word	0x3fc68a28
 800a8c8:	509f79fb 	.word	0x509f79fb
 800a8cc:	3fd34413 	.word	0x3fd34413
 800a8d0:	080112dd 	.word	0x080112dd
 800a8d4:	080112f4 	.word	0x080112f4
 800a8d8:	7ff00000 	.word	0x7ff00000
 800a8dc:	080112ad 	.word	0x080112ad
 800a8e0:	3ff80000 	.word	0x3ff80000
 800a8e4:	080113f0 	.word	0x080113f0
 800a8e8:	0801134c 	.word	0x0801134c
 800a8ec:	080112d9 	.word	0x080112d9
 800a8f0:	080112ac 	.word	0x080112ac
 800a8f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a8f8:	6018      	str	r0, [r3, #0]
 800a8fa:	9b07      	ldr	r3, [sp, #28]
 800a8fc:	2b0e      	cmp	r3, #14
 800a8fe:	f200 80a4 	bhi.w	800aa4a <_dtoa_r+0x442>
 800a902:	2c00      	cmp	r4, #0
 800a904:	f000 80a1 	beq.w	800aa4a <_dtoa_r+0x442>
 800a908:	2f00      	cmp	r7, #0
 800a90a:	dd33      	ble.n	800a974 <_dtoa_r+0x36c>
 800a90c:	4bad      	ldr	r3, [pc, #692]	@ (800abc4 <_dtoa_r+0x5bc>)
 800a90e:	f007 020f 	and.w	r2, r7, #15
 800a912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a916:	ed93 7b00 	vldr	d7, [r3]
 800a91a:	05f8      	lsls	r0, r7, #23
 800a91c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a920:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a924:	d516      	bpl.n	800a954 <_dtoa_r+0x34c>
 800a926:	4ba8      	ldr	r3, [pc, #672]	@ (800abc8 <_dtoa_r+0x5c0>)
 800a928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a92c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a930:	f7f5 ffbc 	bl	80008ac <__aeabi_ddiv>
 800a934:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a938:	f004 040f 	and.w	r4, r4, #15
 800a93c:	2603      	movs	r6, #3
 800a93e:	4da2      	ldr	r5, [pc, #648]	@ (800abc8 <_dtoa_r+0x5c0>)
 800a940:	b954      	cbnz	r4, 800a958 <_dtoa_r+0x350>
 800a942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a94a:	f7f5 ffaf 	bl	80008ac <__aeabi_ddiv>
 800a94e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a952:	e028      	b.n	800a9a6 <_dtoa_r+0x39e>
 800a954:	2602      	movs	r6, #2
 800a956:	e7f2      	b.n	800a93e <_dtoa_r+0x336>
 800a958:	07e1      	lsls	r1, r4, #31
 800a95a:	d508      	bpl.n	800a96e <_dtoa_r+0x366>
 800a95c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a960:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a964:	f7f5 fe78 	bl	8000658 <__aeabi_dmul>
 800a968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a96c:	3601      	adds	r6, #1
 800a96e:	1064      	asrs	r4, r4, #1
 800a970:	3508      	adds	r5, #8
 800a972:	e7e5      	b.n	800a940 <_dtoa_r+0x338>
 800a974:	f000 80d2 	beq.w	800ab1c <_dtoa_r+0x514>
 800a978:	427c      	negs	r4, r7
 800a97a:	4b92      	ldr	r3, [pc, #584]	@ (800abc4 <_dtoa_r+0x5bc>)
 800a97c:	4d92      	ldr	r5, [pc, #584]	@ (800abc8 <_dtoa_r+0x5c0>)
 800a97e:	f004 020f 	and.w	r2, r4, #15
 800a982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a98e:	f7f5 fe63 	bl	8000658 <__aeabi_dmul>
 800a992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a996:	1124      	asrs	r4, r4, #4
 800a998:	2300      	movs	r3, #0
 800a99a:	2602      	movs	r6, #2
 800a99c:	2c00      	cmp	r4, #0
 800a99e:	f040 80b2 	bne.w	800ab06 <_dtoa_r+0x4fe>
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1d3      	bne.n	800a94e <_dtoa_r+0x346>
 800a9a6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9a8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 80b7 	beq.w	800ab20 <_dtoa_r+0x518>
 800a9b2:	4b86      	ldr	r3, [pc, #536]	@ (800abcc <_dtoa_r+0x5c4>)
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	f7f6 f8bf 	bl	8000b3c <__aeabi_dcmplt>
 800a9be:	2800      	cmp	r0, #0
 800a9c0:	f000 80ae 	beq.w	800ab20 <_dtoa_r+0x518>
 800a9c4:	9b07      	ldr	r3, [sp, #28]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	f000 80aa 	beq.w	800ab20 <_dtoa_r+0x518>
 800a9cc:	9b00      	ldr	r3, [sp, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	dd37      	ble.n	800aa42 <_dtoa_r+0x43a>
 800a9d2:	1e7b      	subs	r3, r7, #1
 800a9d4:	9304      	str	r3, [sp, #16]
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	4b7d      	ldr	r3, [pc, #500]	@ (800abd0 <_dtoa_r+0x5c8>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	4629      	mov	r1, r5
 800a9de:	f7f5 fe3b 	bl	8000658 <__aeabi_dmul>
 800a9e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9e6:	9c00      	ldr	r4, [sp, #0]
 800a9e8:	3601      	adds	r6, #1
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	f7f5 fdca 	bl	8000584 <__aeabi_i2d>
 800a9f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9f4:	f7f5 fe30 	bl	8000658 <__aeabi_dmul>
 800a9f8:	4b76      	ldr	r3, [pc, #472]	@ (800abd4 <_dtoa_r+0x5cc>)
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f7f5 fc76 	bl	80002ec <__adddf3>
 800aa00:	4605      	mov	r5, r0
 800aa02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aa06:	2c00      	cmp	r4, #0
 800aa08:	f040 808d 	bne.w	800ab26 <_dtoa_r+0x51e>
 800aa0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa10:	4b71      	ldr	r3, [pc, #452]	@ (800abd8 <_dtoa_r+0x5d0>)
 800aa12:	2200      	movs	r2, #0
 800aa14:	f7f5 fc68 	bl	80002e8 <__aeabi_dsub>
 800aa18:	4602      	mov	r2, r0
 800aa1a:	460b      	mov	r3, r1
 800aa1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aa20:	462a      	mov	r2, r5
 800aa22:	4633      	mov	r3, r6
 800aa24:	f7f6 f8a8 	bl	8000b78 <__aeabi_dcmpgt>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	f040 828b 	bne.w	800af44 <_dtoa_r+0x93c>
 800aa2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa32:	462a      	mov	r2, r5
 800aa34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aa38:	f7f6 f880 	bl	8000b3c <__aeabi_dcmplt>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f040 8128 	bne.w	800ac92 <_dtoa_r+0x68a>
 800aa42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800aa46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800aa4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	f2c0 815a 	blt.w	800ad06 <_dtoa_r+0x6fe>
 800aa52:	2f0e      	cmp	r7, #14
 800aa54:	f300 8157 	bgt.w	800ad06 <_dtoa_r+0x6fe>
 800aa58:	4b5a      	ldr	r3, [pc, #360]	@ (800abc4 <_dtoa_r+0x5bc>)
 800aa5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aa5e:	ed93 7b00 	vldr	d7, [r3]
 800aa62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	ed8d 7b00 	vstr	d7, [sp]
 800aa6a:	da03      	bge.n	800aa74 <_dtoa_r+0x46c>
 800aa6c:	9b07      	ldr	r3, [sp, #28]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	f340 8101 	ble.w	800ac76 <_dtoa_r+0x66e>
 800aa74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800aa78:	4656      	mov	r6, sl
 800aa7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa7e:	4620      	mov	r0, r4
 800aa80:	4629      	mov	r1, r5
 800aa82:	f7f5 ff13 	bl	80008ac <__aeabi_ddiv>
 800aa86:	f7f6 f897 	bl	8000bb8 <__aeabi_d2iz>
 800aa8a:	4680      	mov	r8, r0
 800aa8c:	f7f5 fd7a 	bl	8000584 <__aeabi_i2d>
 800aa90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa94:	f7f5 fde0 	bl	8000658 <__aeabi_dmul>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800aaa4:	f7f5 fc20 	bl	80002e8 <__aeabi_dsub>
 800aaa8:	f806 4b01 	strb.w	r4, [r6], #1
 800aaac:	9d07      	ldr	r5, [sp, #28]
 800aaae:	eba6 040a 	sub.w	r4, r6, sl
 800aab2:	42a5      	cmp	r5, r4
 800aab4:	4602      	mov	r2, r0
 800aab6:	460b      	mov	r3, r1
 800aab8:	f040 8117 	bne.w	800acea <_dtoa_r+0x6e2>
 800aabc:	f7f5 fc16 	bl	80002ec <__adddf3>
 800aac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aac4:	4604      	mov	r4, r0
 800aac6:	460d      	mov	r5, r1
 800aac8:	f7f6 f856 	bl	8000b78 <__aeabi_dcmpgt>
 800aacc:	2800      	cmp	r0, #0
 800aace:	f040 80f9 	bne.w	800acc4 <_dtoa_r+0x6bc>
 800aad2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aad6:	4620      	mov	r0, r4
 800aad8:	4629      	mov	r1, r5
 800aada:	f7f6 f825 	bl	8000b28 <__aeabi_dcmpeq>
 800aade:	b118      	cbz	r0, 800aae8 <_dtoa_r+0x4e0>
 800aae0:	f018 0f01 	tst.w	r8, #1
 800aae4:	f040 80ee 	bne.w	800acc4 <_dtoa_r+0x6bc>
 800aae8:	4649      	mov	r1, r9
 800aaea:	4658      	mov	r0, fp
 800aaec:	f000 fc90 	bl	800b410 <_Bfree>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	7033      	strb	r3, [r6, #0]
 800aaf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aaf6:	3701      	adds	r7, #1
 800aaf8:	601f      	str	r7, [r3, #0]
 800aafa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 831d 	beq.w	800b13c <_dtoa_r+0xb34>
 800ab02:	601e      	str	r6, [r3, #0]
 800ab04:	e31a      	b.n	800b13c <_dtoa_r+0xb34>
 800ab06:	07e2      	lsls	r2, r4, #31
 800ab08:	d505      	bpl.n	800ab16 <_dtoa_r+0x50e>
 800ab0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab0e:	f7f5 fda3 	bl	8000658 <__aeabi_dmul>
 800ab12:	3601      	adds	r6, #1
 800ab14:	2301      	movs	r3, #1
 800ab16:	1064      	asrs	r4, r4, #1
 800ab18:	3508      	adds	r5, #8
 800ab1a:	e73f      	b.n	800a99c <_dtoa_r+0x394>
 800ab1c:	2602      	movs	r6, #2
 800ab1e:	e742      	b.n	800a9a6 <_dtoa_r+0x39e>
 800ab20:	9c07      	ldr	r4, [sp, #28]
 800ab22:	9704      	str	r7, [sp, #16]
 800ab24:	e761      	b.n	800a9ea <_dtoa_r+0x3e2>
 800ab26:	4b27      	ldr	r3, [pc, #156]	@ (800abc4 <_dtoa_r+0x5bc>)
 800ab28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab32:	4454      	add	r4, sl
 800ab34:	2900      	cmp	r1, #0
 800ab36:	d053      	beq.n	800abe0 <_dtoa_r+0x5d8>
 800ab38:	4928      	ldr	r1, [pc, #160]	@ (800abdc <_dtoa_r+0x5d4>)
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	f7f5 feb6 	bl	80008ac <__aeabi_ddiv>
 800ab40:	4633      	mov	r3, r6
 800ab42:	462a      	mov	r2, r5
 800ab44:	f7f5 fbd0 	bl	80002e8 <__aeabi_dsub>
 800ab48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ab4c:	4656      	mov	r6, sl
 800ab4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab52:	f7f6 f831 	bl	8000bb8 <__aeabi_d2iz>
 800ab56:	4605      	mov	r5, r0
 800ab58:	f7f5 fd14 	bl	8000584 <__aeabi_i2d>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	460b      	mov	r3, r1
 800ab60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab64:	f7f5 fbc0 	bl	80002e8 <__aeabi_dsub>
 800ab68:	3530      	adds	r5, #48	@ 0x30
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab72:	f806 5b01 	strb.w	r5, [r6], #1
 800ab76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab7a:	f7f5 ffdf 	bl	8000b3c <__aeabi_dcmplt>
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d171      	bne.n	800ac66 <_dtoa_r+0x65e>
 800ab82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab86:	4911      	ldr	r1, [pc, #68]	@ (800abcc <_dtoa_r+0x5c4>)
 800ab88:	2000      	movs	r0, #0
 800ab8a:	f7f5 fbad 	bl	80002e8 <__aeabi_dsub>
 800ab8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ab92:	f7f5 ffd3 	bl	8000b3c <__aeabi_dcmplt>
 800ab96:	2800      	cmp	r0, #0
 800ab98:	f040 8095 	bne.w	800acc6 <_dtoa_r+0x6be>
 800ab9c:	42a6      	cmp	r6, r4
 800ab9e:	f43f af50 	beq.w	800aa42 <_dtoa_r+0x43a>
 800aba2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800aba6:	4b0a      	ldr	r3, [pc, #40]	@ (800abd0 <_dtoa_r+0x5c8>)
 800aba8:	2200      	movs	r2, #0
 800abaa:	f7f5 fd55 	bl	8000658 <__aeabi_dmul>
 800abae:	4b08      	ldr	r3, [pc, #32]	@ (800abd0 <_dtoa_r+0x5c8>)
 800abb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abb4:	2200      	movs	r2, #0
 800abb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abba:	f7f5 fd4d 	bl	8000658 <__aeabi_dmul>
 800abbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abc2:	e7c4      	b.n	800ab4e <_dtoa_r+0x546>
 800abc4:	080113f0 	.word	0x080113f0
 800abc8:	080113c8 	.word	0x080113c8
 800abcc:	3ff00000 	.word	0x3ff00000
 800abd0:	40240000 	.word	0x40240000
 800abd4:	401c0000 	.word	0x401c0000
 800abd8:	40140000 	.word	0x40140000
 800abdc:	3fe00000 	.word	0x3fe00000
 800abe0:	4631      	mov	r1, r6
 800abe2:	4628      	mov	r0, r5
 800abe4:	f7f5 fd38 	bl	8000658 <__aeabi_dmul>
 800abe8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800abec:	9415      	str	r4, [sp, #84]	@ 0x54
 800abee:	4656      	mov	r6, sl
 800abf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abf4:	f7f5 ffe0 	bl	8000bb8 <__aeabi_d2iz>
 800abf8:	4605      	mov	r5, r0
 800abfa:	f7f5 fcc3 	bl	8000584 <__aeabi_i2d>
 800abfe:	4602      	mov	r2, r0
 800ac00:	460b      	mov	r3, r1
 800ac02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac06:	f7f5 fb6f 	bl	80002e8 <__aeabi_dsub>
 800ac0a:	3530      	adds	r5, #48	@ 0x30
 800ac0c:	f806 5b01 	strb.w	r5, [r6], #1
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	42a6      	cmp	r6, r4
 800ac16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ac1a:	f04f 0200 	mov.w	r2, #0
 800ac1e:	d124      	bne.n	800ac6a <_dtoa_r+0x662>
 800ac20:	4bac      	ldr	r3, [pc, #688]	@ (800aed4 <_dtoa_r+0x8cc>)
 800ac22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ac26:	f7f5 fb61 	bl	80002ec <__adddf3>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac32:	f7f5 ffa1 	bl	8000b78 <__aeabi_dcmpgt>
 800ac36:	2800      	cmp	r0, #0
 800ac38:	d145      	bne.n	800acc6 <_dtoa_r+0x6be>
 800ac3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ac3e:	49a5      	ldr	r1, [pc, #660]	@ (800aed4 <_dtoa_r+0x8cc>)
 800ac40:	2000      	movs	r0, #0
 800ac42:	f7f5 fb51 	bl	80002e8 <__aeabi_dsub>
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ac4e:	f7f5 ff75 	bl	8000b3c <__aeabi_dcmplt>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	f43f aef5 	beq.w	800aa42 <_dtoa_r+0x43a>
 800ac58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800ac5a:	1e73      	subs	r3, r6, #1
 800ac5c:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ac62:	2b30      	cmp	r3, #48	@ 0x30
 800ac64:	d0f8      	beq.n	800ac58 <_dtoa_r+0x650>
 800ac66:	9f04      	ldr	r7, [sp, #16]
 800ac68:	e73e      	b.n	800aae8 <_dtoa_r+0x4e0>
 800ac6a:	4b9b      	ldr	r3, [pc, #620]	@ (800aed8 <_dtoa_r+0x8d0>)
 800ac6c:	f7f5 fcf4 	bl	8000658 <__aeabi_dmul>
 800ac70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac74:	e7bc      	b.n	800abf0 <_dtoa_r+0x5e8>
 800ac76:	d10c      	bne.n	800ac92 <_dtoa_r+0x68a>
 800ac78:	4b98      	ldr	r3, [pc, #608]	@ (800aedc <_dtoa_r+0x8d4>)
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac80:	f7f5 fcea 	bl	8000658 <__aeabi_dmul>
 800ac84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac88:	f7f5 ff6c 	bl	8000b64 <__aeabi_dcmpge>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	f000 8157 	beq.w	800af40 <_dtoa_r+0x938>
 800ac92:	2400      	movs	r4, #0
 800ac94:	4625      	mov	r5, r4
 800ac96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac98:	43db      	mvns	r3, r3
 800ac9a:	9304      	str	r3, [sp, #16]
 800ac9c:	4656      	mov	r6, sl
 800ac9e:	2700      	movs	r7, #0
 800aca0:	4621      	mov	r1, r4
 800aca2:	4658      	mov	r0, fp
 800aca4:	f000 fbb4 	bl	800b410 <_Bfree>
 800aca8:	2d00      	cmp	r5, #0
 800acaa:	d0dc      	beq.n	800ac66 <_dtoa_r+0x65e>
 800acac:	b12f      	cbz	r7, 800acba <_dtoa_r+0x6b2>
 800acae:	42af      	cmp	r7, r5
 800acb0:	d003      	beq.n	800acba <_dtoa_r+0x6b2>
 800acb2:	4639      	mov	r1, r7
 800acb4:	4658      	mov	r0, fp
 800acb6:	f000 fbab 	bl	800b410 <_Bfree>
 800acba:	4629      	mov	r1, r5
 800acbc:	4658      	mov	r0, fp
 800acbe:	f000 fba7 	bl	800b410 <_Bfree>
 800acc2:	e7d0      	b.n	800ac66 <_dtoa_r+0x65e>
 800acc4:	9704      	str	r7, [sp, #16]
 800acc6:	4633      	mov	r3, r6
 800acc8:	461e      	mov	r6, r3
 800acca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acce:	2a39      	cmp	r2, #57	@ 0x39
 800acd0:	d107      	bne.n	800ace2 <_dtoa_r+0x6da>
 800acd2:	459a      	cmp	sl, r3
 800acd4:	d1f8      	bne.n	800acc8 <_dtoa_r+0x6c0>
 800acd6:	9a04      	ldr	r2, [sp, #16]
 800acd8:	3201      	adds	r2, #1
 800acda:	9204      	str	r2, [sp, #16]
 800acdc:	2230      	movs	r2, #48	@ 0x30
 800acde:	f88a 2000 	strb.w	r2, [sl]
 800ace2:	781a      	ldrb	r2, [r3, #0]
 800ace4:	3201      	adds	r2, #1
 800ace6:	701a      	strb	r2, [r3, #0]
 800ace8:	e7bd      	b.n	800ac66 <_dtoa_r+0x65e>
 800acea:	4b7b      	ldr	r3, [pc, #492]	@ (800aed8 <_dtoa_r+0x8d0>)
 800acec:	2200      	movs	r2, #0
 800acee:	f7f5 fcb3 	bl	8000658 <__aeabi_dmul>
 800acf2:	2200      	movs	r2, #0
 800acf4:	2300      	movs	r3, #0
 800acf6:	4604      	mov	r4, r0
 800acf8:	460d      	mov	r5, r1
 800acfa:	f7f5 ff15 	bl	8000b28 <__aeabi_dcmpeq>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	f43f aebb 	beq.w	800aa7a <_dtoa_r+0x472>
 800ad04:	e6f0      	b.n	800aae8 <_dtoa_r+0x4e0>
 800ad06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad08:	2a00      	cmp	r2, #0
 800ad0a:	f000 80db 	beq.w	800aec4 <_dtoa_r+0x8bc>
 800ad0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad10:	2a01      	cmp	r2, #1
 800ad12:	f300 80bf 	bgt.w	800ae94 <_dtoa_r+0x88c>
 800ad16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	f000 80b7 	beq.w	800ae8c <_dtoa_r+0x884>
 800ad1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ad22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ad24:	4646      	mov	r6, r8
 800ad26:	9a08      	ldr	r2, [sp, #32]
 800ad28:	2101      	movs	r1, #1
 800ad2a:	441a      	add	r2, r3
 800ad2c:	4658      	mov	r0, fp
 800ad2e:	4498      	add	r8, r3
 800ad30:	9208      	str	r2, [sp, #32]
 800ad32:	f000 fc21 	bl	800b578 <__i2b>
 800ad36:	4605      	mov	r5, r0
 800ad38:	b15e      	cbz	r6, 800ad52 <_dtoa_r+0x74a>
 800ad3a:	9b08      	ldr	r3, [sp, #32]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	dd08      	ble.n	800ad52 <_dtoa_r+0x74a>
 800ad40:	42b3      	cmp	r3, r6
 800ad42:	9a08      	ldr	r2, [sp, #32]
 800ad44:	bfa8      	it	ge
 800ad46:	4633      	movge	r3, r6
 800ad48:	eba8 0803 	sub.w	r8, r8, r3
 800ad4c:	1af6      	subs	r6, r6, r3
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	9308      	str	r3, [sp, #32]
 800ad52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad54:	b1f3      	cbz	r3, 800ad94 <_dtoa_r+0x78c>
 800ad56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f000 80b7 	beq.w	800aecc <_dtoa_r+0x8c4>
 800ad5e:	b18c      	cbz	r4, 800ad84 <_dtoa_r+0x77c>
 800ad60:	4629      	mov	r1, r5
 800ad62:	4622      	mov	r2, r4
 800ad64:	4658      	mov	r0, fp
 800ad66:	f000 fcc7 	bl	800b6f8 <__pow5mult>
 800ad6a:	464a      	mov	r2, r9
 800ad6c:	4601      	mov	r1, r0
 800ad6e:	4605      	mov	r5, r0
 800ad70:	4658      	mov	r0, fp
 800ad72:	f000 fc17 	bl	800b5a4 <__multiply>
 800ad76:	4649      	mov	r1, r9
 800ad78:	9004      	str	r0, [sp, #16]
 800ad7a:	4658      	mov	r0, fp
 800ad7c:	f000 fb48 	bl	800b410 <_Bfree>
 800ad80:	9b04      	ldr	r3, [sp, #16]
 800ad82:	4699      	mov	r9, r3
 800ad84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad86:	1b1a      	subs	r2, r3, r4
 800ad88:	d004      	beq.n	800ad94 <_dtoa_r+0x78c>
 800ad8a:	4649      	mov	r1, r9
 800ad8c:	4658      	mov	r0, fp
 800ad8e:	f000 fcb3 	bl	800b6f8 <__pow5mult>
 800ad92:	4681      	mov	r9, r0
 800ad94:	2101      	movs	r1, #1
 800ad96:	4658      	mov	r0, fp
 800ad98:	f000 fbee 	bl	800b578 <__i2b>
 800ad9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad9e:	4604      	mov	r4, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	f000 81cf 	beq.w	800b144 <_dtoa_r+0xb3c>
 800ada6:	461a      	mov	r2, r3
 800ada8:	4601      	mov	r1, r0
 800adaa:	4658      	mov	r0, fp
 800adac:	f000 fca4 	bl	800b6f8 <__pow5mult>
 800adb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	4604      	mov	r4, r0
 800adb6:	f300 8095 	bgt.w	800aee4 <_dtoa_r+0x8dc>
 800adba:	9b02      	ldr	r3, [sp, #8]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f040 8087 	bne.w	800aed0 <_dtoa_r+0x8c8>
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f040 8089 	bne.w	800aee0 <_dtoa_r+0x8d8>
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800add4:	0d1b      	lsrs	r3, r3, #20
 800add6:	051b      	lsls	r3, r3, #20
 800add8:	b12b      	cbz	r3, 800ade6 <_dtoa_r+0x7de>
 800adda:	9b08      	ldr	r3, [sp, #32]
 800addc:	3301      	adds	r3, #1
 800adde:	9308      	str	r3, [sp, #32]
 800ade0:	f108 0801 	add.w	r8, r8, #1
 800ade4:	2301      	movs	r3, #1
 800ade6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ade8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 81b0 	beq.w	800b150 <_dtoa_r+0xb48>
 800adf0:	6923      	ldr	r3, [r4, #16]
 800adf2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800adf6:	6918      	ldr	r0, [r3, #16]
 800adf8:	f000 fb72 	bl	800b4e0 <__hi0bits>
 800adfc:	f1c0 0020 	rsb	r0, r0, #32
 800ae00:	9b08      	ldr	r3, [sp, #32]
 800ae02:	4418      	add	r0, r3
 800ae04:	f010 001f 	ands.w	r0, r0, #31
 800ae08:	d077      	beq.n	800aefa <_dtoa_r+0x8f2>
 800ae0a:	f1c0 0320 	rsb	r3, r0, #32
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	dd6b      	ble.n	800aeea <_dtoa_r+0x8e2>
 800ae12:	9b08      	ldr	r3, [sp, #32]
 800ae14:	f1c0 001c 	rsb	r0, r0, #28
 800ae18:	4403      	add	r3, r0
 800ae1a:	4480      	add	r8, r0
 800ae1c:	4406      	add	r6, r0
 800ae1e:	9308      	str	r3, [sp, #32]
 800ae20:	f1b8 0f00 	cmp.w	r8, #0
 800ae24:	dd05      	ble.n	800ae32 <_dtoa_r+0x82a>
 800ae26:	4649      	mov	r1, r9
 800ae28:	4642      	mov	r2, r8
 800ae2a:	4658      	mov	r0, fp
 800ae2c:	f000 fcbe 	bl	800b7ac <__lshift>
 800ae30:	4681      	mov	r9, r0
 800ae32:	9b08      	ldr	r3, [sp, #32]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	dd05      	ble.n	800ae44 <_dtoa_r+0x83c>
 800ae38:	4621      	mov	r1, r4
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	4658      	mov	r0, fp
 800ae3e:	f000 fcb5 	bl	800b7ac <__lshift>
 800ae42:	4604      	mov	r4, r0
 800ae44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d059      	beq.n	800aefe <_dtoa_r+0x8f6>
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	4648      	mov	r0, r9
 800ae4e:	f000 fd19 	bl	800b884 <__mcmp>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	da53      	bge.n	800aefe <_dtoa_r+0x8f6>
 800ae56:	1e7b      	subs	r3, r7, #1
 800ae58:	9304      	str	r3, [sp, #16]
 800ae5a:	4649      	mov	r1, r9
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	220a      	movs	r2, #10
 800ae60:	4658      	mov	r0, fp
 800ae62:	f000 faf7 	bl	800b454 <__multadd>
 800ae66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ae68:	4681      	mov	r9, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	f000 8172 	beq.w	800b154 <_dtoa_r+0xb4c>
 800ae70:	2300      	movs	r3, #0
 800ae72:	4629      	mov	r1, r5
 800ae74:	220a      	movs	r2, #10
 800ae76:	4658      	mov	r0, fp
 800ae78:	f000 faec 	bl	800b454 <__multadd>
 800ae7c:	9b00      	ldr	r3, [sp, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	4605      	mov	r5, r0
 800ae82:	dc67      	bgt.n	800af54 <_dtoa_r+0x94c>
 800ae84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	dc41      	bgt.n	800af0e <_dtoa_r+0x906>
 800ae8a:	e063      	b.n	800af54 <_dtoa_r+0x94c>
 800ae8c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ae92:	e746      	b.n	800ad22 <_dtoa_r+0x71a>
 800ae94:	9b07      	ldr	r3, [sp, #28]
 800ae96:	1e5c      	subs	r4, r3, #1
 800ae98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae9a:	42a3      	cmp	r3, r4
 800ae9c:	bfbf      	itttt	lt
 800ae9e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aea0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aea2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aea4:	1ae3      	sublt	r3, r4, r3
 800aea6:	bfb4      	ite	lt
 800aea8:	18d2      	addlt	r2, r2, r3
 800aeaa:	1b1c      	subge	r4, r3, r4
 800aeac:	9b07      	ldr	r3, [sp, #28]
 800aeae:	bfbc      	itt	lt
 800aeb0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aeb2:	2400      	movlt	r4, #0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	bfb5      	itete	lt
 800aeb8:	eba8 0603 	sublt.w	r6, r8, r3
 800aebc:	9b07      	ldrge	r3, [sp, #28]
 800aebe:	2300      	movlt	r3, #0
 800aec0:	4646      	movge	r6, r8
 800aec2:	e730      	b.n	800ad26 <_dtoa_r+0x71e>
 800aec4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aec6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aec8:	4646      	mov	r6, r8
 800aeca:	e735      	b.n	800ad38 <_dtoa_r+0x730>
 800aecc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aece:	e75c      	b.n	800ad8a <_dtoa_r+0x782>
 800aed0:	2300      	movs	r3, #0
 800aed2:	e788      	b.n	800ade6 <_dtoa_r+0x7de>
 800aed4:	3fe00000 	.word	0x3fe00000
 800aed8:	40240000 	.word	0x40240000
 800aedc:	40140000 	.word	0x40140000
 800aee0:	9b02      	ldr	r3, [sp, #8]
 800aee2:	e780      	b.n	800ade6 <_dtoa_r+0x7de>
 800aee4:	2300      	movs	r3, #0
 800aee6:	930a      	str	r3, [sp, #40]	@ 0x28
 800aee8:	e782      	b.n	800adf0 <_dtoa_r+0x7e8>
 800aeea:	d099      	beq.n	800ae20 <_dtoa_r+0x818>
 800aeec:	9a08      	ldr	r2, [sp, #32]
 800aeee:	331c      	adds	r3, #28
 800aef0:	441a      	add	r2, r3
 800aef2:	4498      	add	r8, r3
 800aef4:	441e      	add	r6, r3
 800aef6:	9208      	str	r2, [sp, #32]
 800aef8:	e792      	b.n	800ae20 <_dtoa_r+0x818>
 800aefa:	4603      	mov	r3, r0
 800aefc:	e7f6      	b.n	800aeec <_dtoa_r+0x8e4>
 800aefe:	9b07      	ldr	r3, [sp, #28]
 800af00:	9704      	str	r7, [sp, #16]
 800af02:	2b00      	cmp	r3, #0
 800af04:	dc20      	bgt.n	800af48 <_dtoa_r+0x940>
 800af06:	9300      	str	r3, [sp, #0]
 800af08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	dd1e      	ble.n	800af4c <_dtoa_r+0x944>
 800af0e:	9b00      	ldr	r3, [sp, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	f47f aec0 	bne.w	800ac96 <_dtoa_r+0x68e>
 800af16:	4621      	mov	r1, r4
 800af18:	2205      	movs	r2, #5
 800af1a:	4658      	mov	r0, fp
 800af1c:	f000 fa9a 	bl	800b454 <__multadd>
 800af20:	4601      	mov	r1, r0
 800af22:	4604      	mov	r4, r0
 800af24:	4648      	mov	r0, r9
 800af26:	f000 fcad 	bl	800b884 <__mcmp>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	f77f aeb3 	ble.w	800ac96 <_dtoa_r+0x68e>
 800af30:	4656      	mov	r6, sl
 800af32:	2331      	movs	r3, #49	@ 0x31
 800af34:	f806 3b01 	strb.w	r3, [r6], #1
 800af38:	9b04      	ldr	r3, [sp, #16]
 800af3a:	3301      	adds	r3, #1
 800af3c:	9304      	str	r3, [sp, #16]
 800af3e:	e6ae      	b.n	800ac9e <_dtoa_r+0x696>
 800af40:	9c07      	ldr	r4, [sp, #28]
 800af42:	9704      	str	r7, [sp, #16]
 800af44:	4625      	mov	r5, r4
 800af46:	e7f3      	b.n	800af30 <_dtoa_r+0x928>
 800af48:	9b07      	ldr	r3, [sp, #28]
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f000 8104 	beq.w	800b15c <_dtoa_r+0xb54>
 800af54:	2e00      	cmp	r6, #0
 800af56:	dd05      	ble.n	800af64 <_dtoa_r+0x95c>
 800af58:	4629      	mov	r1, r5
 800af5a:	4632      	mov	r2, r6
 800af5c:	4658      	mov	r0, fp
 800af5e:	f000 fc25 	bl	800b7ac <__lshift>
 800af62:	4605      	mov	r5, r0
 800af64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af66:	2b00      	cmp	r3, #0
 800af68:	d05a      	beq.n	800b020 <_dtoa_r+0xa18>
 800af6a:	6869      	ldr	r1, [r5, #4]
 800af6c:	4658      	mov	r0, fp
 800af6e:	f000 fa0f 	bl	800b390 <_Balloc>
 800af72:	4606      	mov	r6, r0
 800af74:	b928      	cbnz	r0, 800af82 <_dtoa_r+0x97a>
 800af76:	4b84      	ldr	r3, [pc, #528]	@ (800b188 <_dtoa_r+0xb80>)
 800af78:	4602      	mov	r2, r0
 800af7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af7e:	f7ff bb5a 	b.w	800a636 <_dtoa_r+0x2e>
 800af82:	692a      	ldr	r2, [r5, #16]
 800af84:	3202      	adds	r2, #2
 800af86:	0092      	lsls	r2, r2, #2
 800af88:	f105 010c 	add.w	r1, r5, #12
 800af8c:	300c      	adds	r0, #12
 800af8e:	f000 ffaf 	bl	800bef0 <memcpy>
 800af92:	2201      	movs	r2, #1
 800af94:	4631      	mov	r1, r6
 800af96:	4658      	mov	r0, fp
 800af98:	f000 fc08 	bl	800b7ac <__lshift>
 800af9c:	f10a 0301 	add.w	r3, sl, #1
 800afa0:	9307      	str	r3, [sp, #28]
 800afa2:	9b00      	ldr	r3, [sp, #0]
 800afa4:	4453      	add	r3, sl
 800afa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afa8:	9b02      	ldr	r3, [sp, #8]
 800afaa:	f003 0301 	and.w	r3, r3, #1
 800afae:	462f      	mov	r7, r5
 800afb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800afb2:	4605      	mov	r5, r0
 800afb4:	9b07      	ldr	r3, [sp, #28]
 800afb6:	4621      	mov	r1, r4
 800afb8:	3b01      	subs	r3, #1
 800afba:	4648      	mov	r0, r9
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	f7ff fa98 	bl	800a4f2 <quorem>
 800afc2:	4639      	mov	r1, r7
 800afc4:	9002      	str	r0, [sp, #8]
 800afc6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800afca:	4648      	mov	r0, r9
 800afcc:	f000 fc5a 	bl	800b884 <__mcmp>
 800afd0:	462a      	mov	r2, r5
 800afd2:	9008      	str	r0, [sp, #32]
 800afd4:	4621      	mov	r1, r4
 800afd6:	4658      	mov	r0, fp
 800afd8:	f000 fc70 	bl	800b8bc <__mdiff>
 800afdc:	68c2      	ldr	r2, [r0, #12]
 800afde:	4606      	mov	r6, r0
 800afe0:	bb02      	cbnz	r2, 800b024 <_dtoa_r+0xa1c>
 800afe2:	4601      	mov	r1, r0
 800afe4:	4648      	mov	r0, r9
 800afe6:	f000 fc4d 	bl	800b884 <__mcmp>
 800afea:	4602      	mov	r2, r0
 800afec:	4631      	mov	r1, r6
 800afee:	4658      	mov	r0, fp
 800aff0:	920e      	str	r2, [sp, #56]	@ 0x38
 800aff2:	f000 fa0d 	bl	800b410 <_Bfree>
 800aff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aff8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800affa:	9e07      	ldr	r6, [sp, #28]
 800affc:	ea43 0102 	orr.w	r1, r3, r2
 800b000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b002:	4319      	orrs	r1, r3
 800b004:	d110      	bne.n	800b028 <_dtoa_r+0xa20>
 800b006:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b00a:	d029      	beq.n	800b060 <_dtoa_r+0xa58>
 800b00c:	9b08      	ldr	r3, [sp, #32]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	dd02      	ble.n	800b018 <_dtoa_r+0xa10>
 800b012:	9b02      	ldr	r3, [sp, #8]
 800b014:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b018:	9b00      	ldr	r3, [sp, #0]
 800b01a:	f883 8000 	strb.w	r8, [r3]
 800b01e:	e63f      	b.n	800aca0 <_dtoa_r+0x698>
 800b020:	4628      	mov	r0, r5
 800b022:	e7bb      	b.n	800af9c <_dtoa_r+0x994>
 800b024:	2201      	movs	r2, #1
 800b026:	e7e1      	b.n	800afec <_dtoa_r+0x9e4>
 800b028:	9b08      	ldr	r3, [sp, #32]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	db04      	blt.n	800b038 <_dtoa_r+0xa30>
 800b02e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b030:	430b      	orrs	r3, r1
 800b032:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b034:	430b      	orrs	r3, r1
 800b036:	d120      	bne.n	800b07a <_dtoa_r+0xa72>
 800b038:	2a00      	cmp	r2, #0
 800b03a:	dded      	ble.n	800b018 <_dtoa_r+0xa10>
 800b03c:	4649      	mov	r1, r9
 800b03e:	2201      	movs	r2, #1
 800b040:	4658      	mov	r0, fp
 800b042:	f000 fbb3 	bl	800b7ac <__lshift>
 800b046:	4621      	mov	r1, r4
 800b048:	4681      	mov	r9, r0
 800b04a:	f000 fc1b 	bl	800b884 <__mcmp>
 800b04e:	2800      	cmp	r0, #0
 800b050:	dc03      	bgt.n	800b05a <_dtoa_r+0xa52>
 800b052:	d1e1      	bne.n	800b018 <_dtoa_r+0xa10>
 800b054:	f018 0f01 	tst.w	r8, #1
 800b058:	d0de      	beq.n	800b018 <_dtoa_r+0xa10>
 800b05a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b05e:	d1d8      	bne.n	800b012 <_dtoa_r+0xa0a>
 800b060:	9a00      	ldr	r2, [sp, #0]
 800b062:	2339      	movs	r3, #57	@ 0x39
 800b064:	7013      	strb	r3, [r2, #0]
 800b066:	4633      	mov	r3, r6
 800b068:	461e      	mov	r6, r3
 800b06a:	3b01      	subs	r3, #1
 800b06c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b070:	2a39      	cmp	r2, #57	@ 0x39
 800b072:	d052      	beq.n	800b11a <_dtoa_r+0xb12>
 800b074:	3201      	adds	r2, #1
 800b076:	701a      	strb	r2, [r3, #0]
 800b078:	e612      	b.n	800aca0 <_dtoa_r+0x698>
 800b07a:	2a00      	cmp	r2, #0
 800b07c:	dd07      	ble.n	800b08e <_dtoa_r+0xa86>
 800b07e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b082:	d0ed      	beq.n	800b060 <_dtoa_r+0xa58>
 800b084:	9a00      	ldr	r2, [sp, #0]
 800b086:	f108 0301 	add.w	r3, r8, #1
 800b08a:	7013      	strb	r3, [r2, #0]
 800b08c:	e608      	b.n	800aca0 <_dtoa_r+0x698>
 800b08e:	9b07      	ldr	r3, [sp, #28]
 800b090:	9a07      	ldr	r2, [sp, #28]
 800b092:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b098:	4293      	cmp	r3, r2
 800b09a:	d028      	beq.n	800b0ee <_dtoa_r+0xae6>
 800b09c:	4649      	mov	r1, r9
 800b09e:	2300      	movs	r3, #0
 800b0a0:	220a      	movs	r2, #10
 800b0a2:	4658      	mov	r0, fp
 800b0a4:	f000 f9d6 	bl	800b454 <__multadd>
 800b0a8:	42af      	cmp	r7, r5
 800b0aa:	4681      	mov	r9, r0
 800b0ac:	f04f 0300 	mov.w	r3, #0
 800b0b0:	f04f 020a 	mov.w	r2, #10
 800b0b4:	4639      	mov	r1, r7
 800b0b6:	4658      	mov	r0, fp
 800b0b8:	d107      	bne.n	800b0ca <_dtoa_r+0xac2>
 800b0ba:	f000 f9cb 	bl	800b454 <__multadd>
 800b0be:	4607      	mov	r7, r0
 800b0c0:	4605      	mov	r5, r0
 800b0c2:	9b07      	ldr	r3, [sp, #28]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	9307      	str	r3, [sp, #28]
 800b0c8:	e774      	b.n	800afb4 <_dtoa_r+0x9ac>
 800b0ca:	f000 f9c3 	bl	800b454 <__multadd>
 800b0ce:	4629      	mov	r1, r5
 800b0d0:	4607      	mov	r7, r0
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	220a      	movs	r2, #10
 800b0d6:	4658      	mov	r0, fp
 800b0d8:	f000 f9bc 	bl	800b454 <__multadd>
 800b0dc:	4605      	mov	r5, r0
 800b0de:	e7f0      	b.n	800b0c2 <_dtoa_r+0xaba>
 800b0e0:	9b00      	ldr	r3, [sp, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	bfcc      	ite	gt
 800b0e6:	461e      	movgt	r6, r3
 800b0e8:	2601      	movle	r6, #1
 800b0ea:	4456      	add	r6, sl
 800b0ec:	2700      	movs	r7, #0
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	2201      	movs	r2, #1
 800b0f2:	4658      	mov	r0, fp
 800b0f4:	f000 fb5a 	bl	800b7ac <__lshift>
 800b0f8:	4621      	mov	r1, r4
 800b0fa:	4681      	mov	r9, r0
 800b0fc:	f000 fbc2 	bl	800b884 <__mcmp>
 800b100:	2800      	cmp	r0, #0
 800b102:	dcb0      	bgt.n	800b066 <_dtoa_r+0xa5e>
 800b104:	d102      	bne.n	800b10c <_dtoa_r+0xb04>
 800b106:	f018 0f01 	tst.w	r8, #1
 800b10a:	d1ac      	bne.n	800b066 <_dtoa_r+0xa5e>
 800b10c:	4633      	mov	r3, r6
 800b10e:	461e      	mov	r6, r3
 800b110:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b114:	2a30      	cmp	r2, #48	@ 0x30
 800b116:	d0fa      	beq.n	800b10e <_dtoa_r+0xb06>
 800b118:	e5c2      	b.n	800aca0 <_dtoa_r+0x698>
 800b11a:	459a      	cmp	sl, r3
 800b11c:	d1a4      	bne.n	800b068 <_dtoa_r+0xa60>
 800b11e:	9b04      	ldr	r3, [sp, #16]
 800b120:	3301      	adds	r3, #1
 800b122:	9304      	str	r3, [sp, #16]
 800b124:	2331      	movs	r3, #49	@ 0x31
 800b126:	f88a 3000 	strb.w	r3, [sl]
 800b12a:	e5b9      	b.n	800aca0 <_dtoa_r+0x698>
 800b12c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b12e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b18c <_dtoa_r+0xb84>
 800b132:	b11b      	cbz	r3, 800b13c <_dtoa_r+0xb34>
 800b134:	f10a 0308 	add.w	r3, sl, #8
 800b138:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	4650      	mov	r0, sl
 800b13e:	b019      	add	sp, #100	@ 0x64
 800b140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b146:	2b01      	cmp	r3, #1
 800b148:	f77f ae37 	ble.w	800adba <_dtoa_r+0x7b2>
 800b14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b14e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b150:	2001      	movs	r0, #1
 800b152:	e655      	b.n	800ae00 <_dtoa_r+0x7f8>
 800b154:	9b00      	ldr	r3, [sp, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	f77f aed6 	ble.w	800af08 <_dtoa_r+0x900>
 800b15c:	4656      	mov	r6, sl
 800b15e:	4621      	mov	r1, r4
 800b160:	4648      	mov	r0, r9
 800b162:	f7ff f9c6 	bl	800a4f2 <quorem>
 800b166:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b16a:	f806 8b01 	strb.w	r8, [r6], #1
 800b16e:	9b00      	ldr	r3, [sp, #0]
 800b170:	eba6 020a 	sub.w	r2, r6, sl
 800b174:	4293      	cmp	r3, r2
 800b176:	ddb3      	ble.n	800b0e0 <_dtoa_r+0xad8>
 800b178:	4649      	mov	r1, r9
 800b17a:	2300      	movs	r3, #0
 800b17c:	220a      	movs	r2, #10
 800b17e:	4658      	mov	r0, fp
 800b180:	f000 f968 	bl	800b454 <__multadd>
 800b184:	4681      	mov	r9, r0
 800b186:	e7ea      	b.n	800b15e <_dtoa_r+0xb56>
 800b188:	0801134c 	.word	0x0801134c
 800b18c:	080112d0 	.word	0x080112d0

0800b190 <_free_r>:
 800b190:	b538      	push	{r3, r4, r5, lr}
 800b192:	4605      	mov	r5, r0
 800b194:	2900      	cmp	r1, #0
 800b196:	d041      	beq.n	800b21c <_free_r+0x8c>
 800b198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b19c:	1f0c      	subs	r4, r1, #4
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	bfb8      	it	lt
 800b1a2:	18e4      	addlt	r4, r4, r3
 800b1a4:	f000 f8e8 	bl	800b378 <__malloc_lock>
 800b1a8:	4a1d      	ldr	r2, [pc, #116]	@ (800b220 <_free_r+0x90>)
 800b1aa:	6813      	ldr	r3, [r2, #0]
 800b1ac:	b933      	cbnz	r3, 800b1bc <_free_r+0x2c>
 800b1ae:	6063      	str	r3, [r4, #4]
 800b1b0:	6014      	str	r4, [r2, #0]
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1b8:	f000 b8e4 	b.w	800b384 <__malloc_unlock>
 800b1bc:	42a3      	cmp	r3, r4
 800b1be:	d908      	bls.n	800b1d2 <_free_r+0x42>
 800b1c0:	6820      	ldr	r0, [r4, #0]
 800b1c2:	1821      	adds	r1, r4, r0
 800b1c4:	428b      	cmp	r3, r1
 800b1c6:	bf01      	itttt	eq
 800b1c8:	6819      	ldreq	r1, [r3, #0]
 800b1ca:	685b      	ldreq	r3, [r3, #4]
 800b1cc:	1809      	addeq	r1, r1, r0
 800b1ce:	6021      	streq	r1, [r4, #0]
 800b1d0:	e7ed      	b.n	800b1ae <_free_r+0x1e>
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	b10b      	cbz	r3, 800b1dc <_free_r+0x4c>
 800b1d8:	42a3      	cmp	r3, r4
 800b1da:	d9fa      	bls.n	800b1d2 <_free_r+0x42>
 800b1dc:	6811      	ldr	r1, [r2, #0]
 800b1de:	1850      	adds	r0, r2, r1
 800b1e0:	42a0      	cmp	r0, r4
 800b1e2:	d10b      	bne.n	800b1fc <_free_r+0x6c>
 800b1e4:	6820      	ldr	r0, [r4, #0]
 800b1e6:	4401      	add	r1, r0
 800b1e8:	1850      	adds	r0, r2, r1
 800b1ea:	4283      	cmp	r3, r0
 800b1ec:	6011      	str	r1, [r2, #0]
 800b1ee:	d1e0      	bne.n	800b1b2 <_free_r+0x22>
 800b1f0:	6818      	ldr	r0, [r3, #0]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	6053      	str	r3, [r2, #4]
 800b1f6:	4408      	add	r0, r1
 800b1f8:	6010      	str	r0, [r2, #0]
 800b1fa:	e7da      	b.n	800b1b2 <_free_r+0x22>
 800b1fc:	d902      	bls.n	800b204 <_free_r+0x74>
 800b1fe:	230c      	movs	r3, #12
 800b200:	602b      	str	r3, [r5, #0]
 800b202:	e7d6      	b.n	800b1b2 <_free_r+0x22>
 800b204:	6820      	ldr	r0, [r4, #0]
 800b206:	1821      	adds	r1, r4, r0
 800b208:	428b      	cmp	r3, r1
 800b20a:	bf04      	itt	eq
 800b20c:	6819      	ldreq	r1, [r3, #0]
 800b20e:	685b      	ldreq	r3, [r3, #4]
 800b210:	6063      	str	r3, [r4, #4]
 800b212:	bf04      	itt	eq
 800b214:	1809      	addeq	r1, r1, r0
 800b216:	6021      	streq	r1, [r4, #0]
 800b218:	6054      	str	r4, [r2, #4]
 800b21a:	e7ca      	b.n	800b1b2 <_free_r+0x22>
 800b21c:	bd38      	pop	{r3, r4, r5, pc}
 800b21e:	bf00      	nop
 800b220:	20005bfc 	.word	0x20005bfc

0800b224 <malloc>:
 800b224:	4b02      	ldr	r3, [pc, #8]	@ (800b230 <malloc+0xc>)
 800b226:	4601      	mov	r1, r0
 800b228:	6818      	ldr	r0, [r3, #0]
 800b22a:	f000 b825 	b.w	800b278 <_malloc_r>
 800b22e:	bf00      	nop
 800b230:	20003618 	.word	0x20003618

0800b234 <sbrk_aligned>:
 800b234:	b570      	push	{r4, r5, r6, lr}
 800b236:	4e0f      	ldr	r6, [pc, #60]	@ (800b274 <sbrk_aligned+0x40>)
 800b238:	460c      	mov	r4, r1
 800b23a:	6831      	ldr	r1, [r6, #0]
 800b23c:	4605      	mov	r5, r0
 800b23e:	b911      	cbnz	r1, 800b246 <sbrk_aligned+0x12>
 800b240:	f000 fe46 	bl	800bed0 <_sbrk_r>
 800b244:	6030      	str	r0, [r6, #0]
 800b246:	4621      	mov	r1, r4
 800b248:	4628      	mov	r0, r5
 800b24a:	f000 fe41 	bl	800bed0 <_sbrk_r>
 800b24e:	1c43      	adds	r3, r0, #1
 800b250:	d103      	bne.n	800b25a <sbrk_aligned+0x26>
 800b252:	f04f 34ff 	mov.w	r4, #4294967295
 800b256:	4620      	mov	r0, r4
 800b258:	bd70      	pop	{r4, r5, r6, pc}
 800b25a:	1cc4      	adds	r4, r0, #3
 800b25c:	f024 0403 	bic.w	r4, r4, #3
 800b260:	42a0      	cmp	r0, r4
 800b262:	d0f8      	beq.n	800b256 <sbrk_aligned+0x22>
 800b264:	1a21      	subs	r1, r4, r0
 800b266:	4628      	mov	r0, r5
 800b268:	f000 fe32 	bl	800bed0 <_sbrk_r>
 800b26c:	3001      	adds	r0, #1
 800b26e:	d1f2      	bne.n	800b256 <sbrk_aligned+0x22>
 800b270:	e7ef      	b.n	800b252 <sbrk_aligned+0x1e>
 800b272:	bf00      	nop
 800b274:	20005bf8 	.word	0x20005bf8

0800b278 <_malloc_r>:
 800b278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b27c:	1ccd      	adds	r5, r1, #3
 800b27e:	f025 0503 	bic.w	r5, r5, #3
 800b282:	3508      	adds	r5, #8
 800b284:	2d0c      	cmp	r5, #12
 800b286:	bf38      	it	cc
 800b288:	250c      	movcc	r5, #12
 800b28a:	2d00      	cmp	r5, #0
 800b28c:	4606      	mov	r6, r0
 800b28e:	db01      	blt.n	800b294 <_malloc_r+0x1c>
 800b290:	42a9      	cmp	r1, r5
 800b292:	d904      	bls.n	800b29e <_malloc_r+0x26>
 800b294:	230c      	movs	r3, #12
 800b296:	6033      	str	r3, [r6, #0]
 800b298:	2000      	movs	r0, #0
 800b29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b29e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b374 <_malloc_r+0xfc>
 800b2a2:	f000 f869 	bl	800b378 <__malloc_lock>
 800b2a6:	f8d8 3000 	ldr.w	r3, [r8]
 800b2aa:	461c      	mov	r4, r3
 800b2ac:	bb44      	cbnz	r4, 800b300 <_malloc_r+0x88>
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	4630      	mov	r0, r6
 800b2b2:	f7ff ffbf 	bl	800b234 <sbrk_aligned>
 800b2b6:	1c43      	adds	r3, r0, #1
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	d158      	bne.n	800b36e <_malloc_r+0xf6>
 800b2bc:	f8d8 4000 	ldr.w	r4, [r8]
 800b2c0:	4627      	mov	r7, r4
 800b2c2:	2f00      	cmp	r7, #0
 800b2c4:	d143      	bne.n	800b34e <_malloc_r+0xd6>
 800b2c6:	2c00      	cmp	r4, #0
 800b2c8:	d04b      	beq.n	800b362 <_malloc_r+0xea>
 800b2ca:	6823      	ldr	r3, [r4, #0]
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	eb04 0903 	add.w	r9, r4, r3
 800b2d4:	f000 fdfc 	bl	800bed0 <_sbrk_r>
 800b2d8:	4581      	cmp	r9, r0
 800b2da:	d142      	bne.n	800b362 <_malloc_r+0xea>
 800b2dc:	6821      	ldr	r1, [r4, #0]
 800b2de:	1a6d      	subs	r5, r5, r1
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7ff ffa6 	bl	800b234 <sbrk_aligned>
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d03a      	beq.n	800b362 <_malloc_r+0xea>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	442b      	add	r3, r5
 800b2f0:	6023      	str	r3, [r4, #0]
 800b2f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2f6:	685a      	ldr	r2, [r3, #4]
 800b2f8:	bb62      	cbnz	r2, 800b354 <_malloc_r+0xdc>
 800b2fa:	f8c8 7000 	str.w	r7, [r8]
 800b2fe:	e00f      	b.n	800b320 <_malloc_r+0xa8>
 800b300:	6822      	ldr	r2, [r4, #0]
 800b302:	1b52      	subs	r2, r2, r5
 800b304:	d420      	bmi.n	800b348 <_malloc_r+0xd0>
 800b306:	2a0b      	cmp	r2, #11
 800b308:	d917      	bls.n	800b33a <_malloc_r+0xc2>
 800b30a:	1961      	adds	r1, r4, r5
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	6025      	str	r5, [r4, #0]
 800b310:	bf18      	it	ne
 800b312:	6059      	strne	r1, [r3, #4]
 800b314:	6863      	ldr	r3, [r4, #4]
 800b316:	bf08      	it	eq
 800b318:	f8c8 1000 	streq.w	r1, [r8]
 800b31c:	5162      	str	r2, [r4, r5]
 800b31e:	604b      	str	r3, [r1, #4]
 800b320:	4630      	mov	r0, r6
 800b322:	f000 f82f 	bl	800b384 <__malloc_unlock>
 800b326:	f104 000b 	add.w	r0, r4, #11
 800b32a:	1d23      	adds	r3, r4, #4
 800b32c:	f020 0007 	bic.w	r0, r0, #7
 800b330:	1ac2      	subs	r2, r0, r3
 800b332:	bf1c      	itt	ne
 800b334:	1a1b      	subne	r3, r3, r0
 800b336:	50a3      	strne	r3, [r4, r2]
 800b338:	e7af      	b.n	800b29a <_malloc_r+0x22>
 800b33a:	6862      	ldr	r2, [r4, #4]
 800b33c:	42a3      	cmp	r3, r4
 800b33e:	bf0c      	ite	eq
 800b340:	f8c8 2000 	streq.w	r2, [r8]
 800b344:	605a      	strne	r2, [r3, #4]
 800b346:	e7eb      	b.n	800b320 <_malloc_r+0xa8>
 800b348:	4623      	mov	r3, r4
 800b34a:	6864      	ldr	r4, [r4, #4]
 800b34c:	e7ae      	b.n	800b2ac <_malloc_r+0x34>
 800b34e:	463c      	mov	r4, r7
 800b350:	687f      	ldr	r7, [r7, #4]
 800b352:	e7b6      	b.n	800b2c2 <_malloc_r+0x4a>
 800b354:	461a      	mov	r2, r3
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	42a3      	cmp	r3, r4
 800b35a:	d1fb      	bne.n	800b354 <_malloc_r+0xdc>
 800b35c:	2300      	movs	r3, #0
 800b35e:	6053      	str	r3, [r2, #4]
 800b360:	e7de      	b.n	800b320 <_malloc_r+0xa8>
 800b362:	230c      	movs	r3, #12
 800b364:	6033      	str	r3, [r6, #0]
 800b366:	4630      	mov	r0, r6
 800b368:	f000 f80c 	bl	800b384 <__malloc_unlock>
 800b36c:	e794      	b.n	800b298 <_malloc_r+0x20>
 800b36e:	6005      	str	r5, [r0, #0]
 800b370:	e7d6      	b.n	800b320 <_malloc_r+0xa8>
 800b372:	bf00      	nop
 800b374:	20005bfc 	.word	0x20005bfc

0800b378 <__malloc_lock>:
 800b378:	4801      	ldr	r0, [pc, #4]	@ (800b380 <__malloc_lock+0x8>)
 800b37a:	f7ff b8b8 	b.w	800a4ee <__retarget_lock_acquire_recursive>
 800b37e:	bf00      	nop
 800b380:	20005bf4 	.word	0x20005bf4

0800b384 <__malloc_unlock>:
 800b384:	4801      	ldr	r0, [pc, #4]	@ (800b38c <__malloc_unlock+0x8>)
 800b386:	f7ff b8b3 	b.w	800a4f0 <__retarget_lock_release_recursive>
 800b38a:	bf00      	nop
 800b38c:	20005bf4 	.word	0x20005bf4

0800b390 <_Balloc>:
 800b390:	b570      	push	{r4, r5, r6, lr}
 800b392:	69c6      	ldr	r6, [r0, #28]
 800b394:	4604      	mov	r4, r0
 800b396:	460d      	mov	r5, r1
 800b398:	b976      	cbnz	r6, 800b3b8 <_Balloc+0x28>
 800b39a:	2010      	movs	r0, #16
 800b39c:	f7ff ff42 	bl	800b224 <malloc>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	61e0      	str	r0, [r4, #28]
 800b3a4:	b920      	cbnz	r0, 800b3b0 <_Balloc+0x20>
 800b3a6:	4b18      	ldr	r3, [pc, #96]	@ (800b408 <_Balloc+0x78>)
 800b3a8:	4818      	ldr	r0, [pc, #96]	@ (800b40c <_Balloc+0x7c>)
 800b3aa:	216b      	movs	r1, #107	@ 0x6b
 800b3ac:	f000 fdae 	bl	800bf0c <__assert_func>
 800b3b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3b4:	6006      	str	r6, [r0, #0]
 800b3b6:	60c6      	str	r6, [r0, #12]
 800b3b8:	69e6      	ldr	r6, [r4, #28]
 800b3ba:	68f3      	ldr	r3, [r6, #12]
 800b3bc:	b183      	cbz	r3, 800b3e0 <_Balloc+0x50>
 800b3be:	69e3      	ldr	r3, [r4, #28]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3c6:	b9b8      	cbnz	r0, 800b3f8 <_Balloc+0x68>
 800b3c8:	2101      	movs	r1, #1
 800b3ca:	fa01 f605 	lsl.w	r6, r1, r5
 800b3ce:	1d72      	adds	r2, r6, #5
 800b3d0:	0092      	lsls	r2, r2, #2
 800b3d2:	4620      	mov	r0, r4
 800b3d4:	f000 fdb8 	bl	800bf48 <_calloc_r>
 800b3d8:	b160      	cbz	r0, 800b3f4 <_Balloc+0x64>
 800b3da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3de:	e00e      	b.n	800b3fe <_Balloc+0x6e>
 800b3e0:	2221      	movs	r2, #33	@ 0x21
 800b3e2:	2104      	movs	r1, #4
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	f000 fdaf 	bl	800bf48 <_calloc_r>
 800b3ea:	69e3      	ldr	r3, [r4, #28]
 800b3ec:	60f0      	str	r0, [r6, #12]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1e4      	bne.n	800b3be <_Balloc+0x2e>
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	bd70      	pop	{r4, r5, r6, pc}
 800b3f8:	6802      	ldr	r2, [r0, #0]
 800b3fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3fe:	2300      	movs	r3, #0
 800b400:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b404:	e7f7      	b.n	800b3f6 <_Balloc+0x66>
 800b406:	bf00      	nop
 800b408:	080112dd 	.word	0x080112dd
 800b40c:	0801135d 	.word	0x0801135d

0800b410 <_Bfree>:
 800b410:	b570      	push	{r4, r5, r6, lr}
 800b412:	69c6      	ldr	r6, [r0, #28]
 800b414:	4605      	mov	r5, r0
 800b416:	460c      	mov	r4, r1
 800b418:	b976      	cbnz	r6, 800b438 <_Bfree+0x28>
 800b41a:	2010      	movs	r0, #16
 800b41c:	f7ff ff02 	bl	800b224 <malloc>
 800b420:	4602      	mov	r2, r0
 800b422:	61e8      	str	r0, [r5, #28]
 800b424:	b920      	cbnz	r0, 800b430 <_Bfree+0x20>
 800b426:	4b09      	ldr	r3, [pc, #36]	@ (800b44c <_Bfree+0x3c>)
 800b428:	4809      	ldr	r0, [pc, #36]	@ (800b450 <_Bfree+0x40>)
 800b42a:	218f      	movs	r1, #143	@ 0x8f
 800b42c:	f000 fd6e 	bl	800bf0c <__assert_func>
 800b430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b434:	6006      	str	r6, [r0, #0]
 800b436:	60c6      	str	r6, [r0, #12]
 800b438:	b13c      	cbz	r4, 800b44a <_Bfree+0x3a>
 800b43a:	69eb      	ldr	r3, [r5, #28]
 800b43c:	6862      	ldr	r2, [r4, #4]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b444:	6021      	str	r1, [r4, #0]
 800b446:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b44a:	bd70      	pop	{r4, r5, r6, pc}
 800b44c:	080112dd 	.word	0x080112dd
 800b450:	0801135d 	.word	0x0801135d

0800b454 <__multadd>:
 800b454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b458:	690d      	ldr	r5, [r1, #16]
 800b45a:	4607      	mov	r7, r0
 800b45c:	460c      	mov	r4, r1
 800b45e:	461e      	mov	r6, r3
 800b460:	f101 0c14 	add.w	ip, r1, #20
 800b464:	2000      	movs	r0, #0
 800b466:	f8dc 3000 	ldr.w	r3, [ip]
 800b46a:	b299      	uxth	r1, r3
 800b46c:	fb02 6101 	mla	r1, r2, r1, r6
 800b470:	0c1e      	lsrs	r6, r3, #16
 800b472:	0c0b      	lsrs	r3, r1, #16
 800b474:	fb02 3306 	mla	r3, r2, r6, r3
 800b478:	b289      	uxth	r1, r1
 800b47a:	3001      	adds	r0, #1
 800b47c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b480:	4285      	cmp	r5, r0
 800b482:	f84c 1b04 	str.w	r1, [ip], #4
 800b486:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b48a:	dcec      	bgt.n	800b466 <__multadd+0x12>
 800b48c:	b30e      	cbz	r6, 800b4d2 <__multadd+0x7e>
 800b48e:	68a3      	ldr	r3, [r4, #8]
 800b490:	42ab      	cmp	r3, r5
 800b492:	dc19      	bgt.n	800b4c8 <__multadd+0x74>
 800b494:	6861      	ldr	r1, [r4, #4]
 800b496:	4638      	mov	r0, r7
 800b498:	3101      	adds	r1, #1
 800b49a:	f7ff ff79 	bl	800b390 <_Balloc>
 800b49e:	4680      	mov	r8, r0
 800b4a0:	b928      	cbnz	r0, 800b4ae <__multadd+0x5a>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b4d8 <__multadd+0x84>)
 800b4a6:	480d      	ldr	r0, [pc, #52]	@ (800b4dc <__multadd+0x88>)
 800b4a8:	21ba      	movs	r1, #186	@ 0xba
 800b4aa:	f000 fd2f 	bl	800bf0c <__assert_func>
 800b4ae:	6922      	ldr	r2, [r4, #16]
 800b4b0:	3202      	adds	r2, #2
 800b4b2:	f104 010c 	add.w	r1, r4, #12
 800b4b6:	0092      	lsls	r2, r2, #2
 800b4b8:	300c      	adds	r0, #12
 800b4ba:	f000 fd19 	bl	800bef0 <memcpy>
 800b4be:	4621      	mov	r1, r4
 800b4c0:	4638      	mov	r0, r7
 800b4c2:	f7ff ffa5 	bl	800b410 <_Bfree>
 800b4c6:	4644      	mov	r4, r8
 800b4c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4cc:	3501      	adds	r5, #1
 800b4ce:	615e      	str	r6, [r3, #20]
 800b4d0:	6125      	str	r5, [r4, #16]
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4d8:	0801134c 	.word	0x0801134c
 800b4dc:	0801135d 	.word	0x0801135d

0800b4e0 <__hi0bits>:
 800b4e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	bf36      	itet	cc
 800b4e8:	0403      	lslcc	r3, r0, #16
 800b4ea:	2000      	movcs	r0, #0
 800b4ec:	2010      	movcc	r0, #16
 800b4ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4f2:	bf3c      	itt	cc
 800b4f4:	021b      	lslcc	r3, r3, #8
 800b4f6:	3008      	addcc	r0, #8
 800b4f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4fc:	bf3c      	itt	cc
 800b4fe:	011b      	lslcc	r3, r3, #4
 800b500:	3004      	addcc	r0, #4
 800b502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b506:	bf3c      	itt	cc
 800b508:	009b      	lslcc	r3, r3, #2
 800b50a:	3002      	addcc	r0, #2
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	db05      	blt.n	800b51c <__hi0bits+0x3c>
 800b510:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b514:	f100 0001 	add.w	r0, r0, #1
 800b518:	bf08      	it	eq
 800b51a:	2020      	moveq	r0, #32
 800b51c:	4770      	bx	lr

0800b51e <__lo0bits>:
 800b51e:	6803      	ldr	r3, [r0, #0]
 800b520:	4602      	mov	r2, r0
 800b522:	f013 0007 	ands.w	r0, r3, #7
 800b526:	d00b      	beq.n	800b540 <__lo0bits+0x22>
 800b528:	07d9      	lsls	r1, r3, #31
 800b52a:	d421      	bmi.n	800b570 <__lo0bits+0x52>
 800b52c:	0798      	lsls	r0, r3, #30
 800b52e:	bf49      	itett	mi
 800b530:	085b      	lsrmi	r3, r3, #1
 800b532:	089b      	lsrpl	r3, r3, #2
 800b534:	2001      	movmi	r0, #1
 800b536:	6013      	strmi	r3, [r2, #0]
 800b538:	bf5c      	itt	pl
 800b53a:	6013      	strpl	r3, [r2, #0]
 800b53c:	2002      	movpl	r0, #2
 800b53e:	4770      	bx	lr
 800b540:	b299      	uxth	r1, r3
 800b542:	b909      	cbnz	r1, 800b548 <__lo0bits+0x2a>
 800b544:	0c1b      	lsrs	r3, r3, #16
 800b546:	2010      	movs	r0, #16
 800b548:	b2d9      	uxtb	r1, r3
 800b54a:	b909      	cbnz	r1, 800b550 <__lo0bits+0x32>
 800b54c:	3008      	adds	r0, #8
 800b54e:	0a1b      	lsrs	r3, r3, #8
 800b550:	0719      	lsls	r1, r3, #28
 800b552:	bf04      	itt	eq
 800b554:	091b      	lsreq	r3, r3, #4
 800b556:	3004      	addeq	r0, #4
 800b558:	0799      	lsls	r1, r3, #30
 800b55a:	bf04      	itt	eq
 800b55c:	089b      	lsreq	r3, r3, #2
 800b55e:	3002      	addeq	r0, #2
 800b560:	07d9      	lsls	r1, r3, #31
 800b562:	d403      	bmi.n	800b56c <__lo0bits+0x4e>
 800b564:	085b      	lsrs	r3, r3, #1
 800b566:	f100 0001 	add.w	r0, r0, #1
 800b56a:	d003      	beq.n	800b574 <__lo0bits+0x56>
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	4770      	bx	lr
 800b570:	2000      	movs	r0, #0
 800b572:	4770      	bx	lr
 800b574:	2020      	movs	r0, #32
 800b576:	4770      	bx	lr

0800b578 <__i2b>:
 800b578:	b510      	push	{r4, lr}
 800b57a:	460c      	mov	r4, r1
 800b57c:	2101      	movs	r1, #1
 800b57e:	f7ff ff07 	bl	800b390 <_Balloc>
 800b582:	4602      	mov	r2, r0
 800b584:	b928      	cbnz	r0, 800b592 <__i2b+0x1a>
 800b586:	4b05      	ldr	r3, [pc, #20]	@ (800b59c <__i2b+0x24>)
 800b588:	4805      	ldr	r0, [pc, #20]	@ (800b5a0 <__i2b+0x28>)
 800b58a:	f240 1145 	movw	r1, #325	@ 0x145
 800b58e:	f000 fcbd 	bl	800bf0c <__assert_func>
 800b592:	2301      	movs	r3, #1
 800b594:	6144      	str	r4, [r0, #20]
 800b596:	6103      	str	r3, [r0, #16]
 800b598:	bd10      	pop	{r4, pc}
 800b59a:	bf00      	nop
 800b59c:	0801134c 	.word	0x0801134c
 800b5a0:	0801135d 	.word	0x0801135d

0800b5a4 <__multiply>:
 800b5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a8:	4614      	mov	r4, r2
 800b5aa:	690a      	ldr	r2, [r1, #16]
 800b5ac:	6923      	ldr	r3, [r4, #16]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	bfa8      	it	ge
 800b5b2:	4623      	movge	r3, r4
 800b5b4:	460f      	mov	r7, r1
 800b5b6:	bfa4      	itt	ge
 800b5b8:	460c      	movge	r4, r1
 800b5ba:	461f      	movge	r7, r3
 800b5bc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b5c0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b5c4:	68a3      	ldr	r3, [r4, #8]
 800b5c6:	6861      	ldr	r1, [r4, #4]
 800b5c8:	eb0a 0609 	add.w	r6, sl, r9
 800b5cc:	42b3      	cmp	r3, r6
 800b5ce:	b085      	sub	sp, #20
 800b5d0:	bfb8      	it	lt
 800b5d2:	3101      	addlt	r1, #1
 800b5d4:	f7ff fedc 	bl	800b390 <_Balloc>
 800b5d8:	b930      	cbnz	r0, 800b5e8 <__multiply+0x44>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	4b44      	ldr	r3, [pc, #272]	@ (800b6f0 <__multiply+0x14c>)
 800b5de:	4845      	ldr	r0, [pc, #276]	@ (800b6f4 <__multiply+0x150>)
 800b5e0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b5e4:	f000 fc92 	bl	800bf0c <__assert_func>
 800b5e8:	f100 0514 	add.w	r5, r0, #20
 800b5ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b5f0:	462b      	mov	r3, r5
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	4543      	cmp	r3, r8
 800b5f6:	d321      	bcc.n	800b63c <__multiply+0x98>
 800b5f8:	f107 0114 	add.w	r1, r7, #20
 800b5fc:	f104 0214 	add.w	r2, r4, #20
 800b600:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b604:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b608:	9302      	str	r3, [sp, #8]
 800b60a:	1b13      	subs	r3, r2, r4
 800b60c:	3b15      	subs	r3, #21
 800b60e:	f023 0303 	bic.w	r3, r3, #3
 800b612:	3304      	adds	r3, #4
 800b614:	f104 0715 	add.w	r7, r4, #21
 800b618:	42ba      	cmp	r2, r7
 800b61a:	bf38      	it	cc
 800b61c:	2304      	movcc	r3, #4
 800b61e:	9301      	str	r3, [sp, #4]
 800b620:	9b02      	ldr	r3, [sp, #8]
 800b622:	9103      	str	r1, [sp, #12]
 800b624:	428b      	cmp	r3, r1
 800b626:	d80c      	bhi.n	800b642 <__multiply+0x9e>
 800b628:	2e00      	cmp	r6, #0
 800b62a:	dd03      	ble.n	800b634 <__multiply+0x90>
 800b62c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b630:	2b00      	cmp	r3, #0
 800b632:	d05b      	beq.n	800b6ec <__multiply+0x148>
 800b634:	6106      	str	r6, [r0, #16]
 800b636:	b005      	add	sp, #20
 800b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63c:	f843 2b04 	str.w	r2, [r3], #4
 800b640:	e7d8      	b.n	800b5f4 <__multiply+0x50>
 800b642:	f8b1 a000 	ldrh.w	sl, [r1]
 800b646:	f1ba 0f00 	cmp.w	sl, #0
 800b64a:	d024      	beq.n	800b696 <__multiply+0xf2>
 800b64c:	f104 0e14 	add.w	lr, r4, #20
 800b650:	46a9      	mov	r9, r5
 800b652:	f04f 0c00 	mov.w	ip, #0
 800b656:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b65a:	f8d9 3000 	ldr.w	r3, [r9]
 800b65e:	fa1f fb87 	uxth.w	fp, r7
 800b662:	b29b      	uxth	r3, r3
 800b664:	fb0a 330b 	mla	r3, sl, fp, r3
 800b668:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b66c:	f8d9 7000 	ldr.w	r7, [r9]
 800b670:	4463      	add	r3, ip
 800b672:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b676:	fb0a c70b 	mla	r7, sl, fp, ip
 800b67a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b67e:	b29b      	uxth	r3, r3
 800b680:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b684:	4572      	cmp	r2, lr
 800b686:	f849 3b04 	str.w	r3, [r9], #4
 800b68a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b68e:	d8e2      	bhi.n	800b656 <__multiply+0xb2>
 800b690:	9b01      	ldr	r3, [sp, #4]
 800b692:	f845 c003 	str.w	ip, [r5, r3]
 800b696:	9b03      	ldr	r3, [sp, #12]
 800b698:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b69c:	3104      	adds	r1, #4
 800b69e:	f1b9 0f00 	cmp.w	r9, #0
 800b6a2:	d021      	beq.n	800b6e8 <__multiply+0x144>
 800b6a4:	682b      	ldr	r3, [r5, #0]
 800b6a6:	f104 0c14 	add.w	ip, r4, #20
 800b6aa:	46ae      	mov	lr, r5
 800b6ac:	f04f 0a00 	mov.w	sl, #0
 800b6b0:	f8bc b000 	ldrh.w	fp, [ip]
 800b6b4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b6b8:	fb09 770b 	mla	r7, r9, fp, r7
 800b6bc:	4457      	add	r7, sl
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b6c4:	f84e 3b04 	str.w	r3, [lr], #4
 800b6c8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b6cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6d0:	f8be 3000 	ldrh.w	r3, [lr]
 800b6d4:	fb09 330a 	mla	r3, r9, sl, r3
 800b6d8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b6dc:	4562      	cmp	r2, ip
 800b6de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6e2:	d8e5      	bhi.n	800b6b0 <__multiply+0x10c>
 800b6e4:	9f01      	ldr	r7, [sp, #4]
 800b6e6:	51eb      	str	r3, [r5, r7]
 800b6e8:	3504      	adds	r5, #4
 800b6ea:	e799      	b.n	800b620 <__multiply+0x7c>
 800b6ec:	3e01      	subs	r6, #1
 800b6ee:	e79b      	b.n	800b628 <__multiply+0x84>
 800b6f0:	0801134c 	.word	0x0801134c
 800b6f4:	0801135d 	.word	0x0801135d

0800b6f8 <__pow5mult>:
 800b6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6fc:	4615      	mov	r5, r2
 800b6fe:	f012 0203 	ands.w	r2, r2, #3
 800b702:	4607      	mov	r7, r0
 800b704:	460e      	mov	r6, r1
 800b706:	d007      	beq.n	800b718 <__pow5mult+0x20>
 800b708:	4c25      	ldr	r4, [pc, #148]	@ (800b7a0 <__pow5mult+0xa8>)
 800b70a:	3a01      	subs	r2, #1
 800b70c:	2300      	movs	r3, #0
 800b70e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b712:	f7ff fe9f 	bl	800b454 <__multadd>
 800b716:	4606      	mov	r6, r0
 800b718:	10ad      	asrs	r5, r5, #2
 800b71a:	d03d      	beq.n	800b798 <__pow5mult+0xa0>
 800b71c:	69fc      	ldr	r4, [r7, #28]
 800b71e:	b97c      	cbnz	r4, 800b740 <__pow5mult+0x48>
 800b720:	2010      	movs	r0, #16
 800b722:	f7ff fd7f 	bl	800b224 <malloc>
 800b726:	4602      	mov	r2, r0
 800b728:	61f8      	str	r0, [r7, #28]
 800b72a:	b928      	cbnz	r0, 800b738 <__pow5mult+0x40>
 800b72c:	4b1d      	ldr	r3, [pc, #116]	@ (800b7a4 <__pow5mult+0xac>)
 800b72e:	481e      	ldr	r0, [pc, #120]	@ (800b7a8 <__pow5mult+0xb0>)
 800b730:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b734:	f000 fbea 	bl	800bf0c <__assert_func>
 800b738:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b73c:	6004      	str	r4, [r0, #0]
 800b73e:	60c4      	str	r4, [r0, #12]
 800b740:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b748:	b94c      	cbnz	r4, 800b75e <__pow5mult+0x66>
 800b74a:	f240 2171 	movw	r1, #625	@ 0x271
 800b74e:	4638      	mov	r0, r7
 800b750:	f7ff ff12 	bl	800b578 <__i2b>
 800b754:	2300      	movs	r3, #0
 800b756:	f8c8 0008 	str.w	r0, [r8, #8]
 800b75a:	4604      	mov	r4, r0
 800b75c:	6003      	str	r3, [r0, #0]
 800b75e:	f04f 0900 	mov.w	r9, #0
 800b762:	07eb      	lsls	r3, r5, #31
 800b764:	d50a      	bpl.n	800b77c <__pow5mult+0x84>
 800b766:	4631      	mov	r1, r6
 800b768:	4622      	mov	r2, r4
 800b76a:	4638      	mov	r0, r7
 800b76c:	f7ff ff1a 	bl	800b5a4 <__multiply>
 800b770:	4631      	mov	r1, r6
 800b772:	4680      	mov	r8, r0
 800b774:	4638      	mov	r0, r7
 800b776:	f7ff fe4b 	bl	800b410 <_Bfree>
 800b77a:	4646      	mov	r6, r8
 800b77c:	106d      	asrs	r5, r5, #1
 800b77e:	d00b      	beq.n	800b798 <__pow5mult+0xa0>
 800b780:	6820      	ldr	r0, [r4, #0]
 800b782:	b938      	cbnz	r0, 800b794 <__pow5mult+0x9c>
 800b784:	4622      	mov	r2, r4
 800b786:	4621      	mov	r1, r4
 800b788:	4638      	mov	r0, r7
 800b78a:	f7ff ff0b 	bl	800b5a4 <__multiply>
 800b78e:	6020      	str	r0, [r4, #0]
 800b790:	f8c0 9000 	str.w	r9, [r0]
 800b794:	4604      	mov	r4, r0
 800b796:	e7e4      	b.n	800b762 <__pow5mult+0x6a>
 800b798:	4630      	mov	r0, r6
 800b79a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b79e:	bf00      	nop
 800b7a0:	080113b8 	.word	0x080113b8
 800b7a4:	080112dd 	.word	0x080112dd
 800b7a8:	0801135d 	.word	0x0801135d

0800b7ac <__lshift>:
 800b7ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b0:	460c      	mov	r4, r1
 800b7b2:	6849      	ldr	r1, [r1, #4]
 800b7b4:	6923      	ldr	r3, [r4, #16]
 800b7b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7ba:	68a3      	ldr	r3, [r4, #8]
 800b7bc:	4607      	mov	r7, r0
 800b7be:	4691      	mov	r9, r2
 800b7c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7c4:	f108 0601 	add.w	r6, r8, #1
 800b7c8:	42b3      	cmp	r3, r6
 800b7ca:	db0b      	blt.n	800b7e4 <__lshift+0x38>
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	f7ff fddf 	bl	800b390 <_Balloc>
 800b7d2:	4605      	mov	r5, r0
 800b7d4:	b948      	cbnz	r0, 800b7ea <__lshift+0x3e>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	4b28      	ldr	r3, [pc, #160]	@ (800b87c <__lshift+0xd0>)
 800b7da:	4829      	ldr	r0, [pc, #164]	@ (800b880 <__lshift+0xd4>)
 800b7dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b7e0:	f000 fb94 	bl	800bf0c <__assert_func>
 800b7e4:	3101      	adds	r1, #1
 800b7e6:	005b      	lsls	r3, r3, #1
 800b7e8:	e7ee      	b.n	800b7c8 <__lshift+0x1c>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	f100 0114 	add.w	r1, r0, #20
 800b7f0:	f100 0210 	add.w	r2, r0, #16
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	4553      	cmp	r3, sl
 800b7f8:	db33      	blt.n	800b862 <__lshift+0xb6>
 800b7fa:	6920      	ldr	r0, [r4, #16]
 800b7fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b800:	f104 0314 	add.w	r3, r4, #20
 800b804:	f019 091f 	ands.w	r9, r9, #31
 800b808:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b80c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b810:	d02b      	beq.n	800b86a <__lshift+0xbe>
 800b812:	f1c9 0e20 	rsb	lr, r9, #32
 800b816:	468a      	mov	sl, r1
 800b818:	2200      	movs	r2, #0
 800b81a:	6818      	ldr	r0, [r3, #0]
 800b81c:	fa00 f009 	lsl.w	r0, r0, r9
 800b820:	4310      	orrs	r0, r2
 800b822:	f84a 0b04 	str.w	r0, [sl], #4
 800b826:	f853 2b04 	ldr.w	r2, [r3], #4
 800b82a:	459c      	cmp	ip, r3
 800b82c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b830:	d8f3      	bhi.n	800b81a <__lshift+0x6e>
 800b832:	ebac 0304 	sub.w	r3, ip, r4
 800b836:	3b15      	subs	r3, #21
 800b838:	f023 0303 	bic.w	r3, r3, #3
 800b83c:	3304      	adds	r3, #4
 800b83e:	f104 0015 	add.w	r0, r4, #21
 800b842:	4584      	cmp	ip, r0
 800b844:	bf38      	it	cc
 800b846:	2304      	movcc	r3, #4
 800b848:	50ca      	str	r2, [r1, r3]
 800b84a:	b10a      	cbz	r2, 800b850 <__lshift+0xa4>
 800b84c:	f108 0602 	add.w	r6, r8, #2
 800b850:	3e01      	subs	r6, #1
 800b852:	4638      	mov	r0, r7
 800b854:	612e      	str	r6, [r5, #16]
 800b856:	4621      	mov	r1, r4
 800b858:	f7ff fdda 	bl	800b410 <_Bfree>
 800b85c:	4628      	mov	r0, r5
 800b85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b862:	f842 0f04 	str.w	r0, [r2, #4]!
 800b866:	3301      	adds	r3, #1
 800b868:	e7c5      	b.n	800b7f6 <__lshift+0x4a>
 800b86a:	3904      	subs	r1, #4
 800b86c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b870:	f841 2f04 	str.w	r2, [r1, #4]!
 800b874:	459c      	cmp	ip, r3
 800b876:	d8f9      	bhi.n	800b86c <__lshift+0xc0>
 800b878:	e7ea      	b.n	800b850 <__lshift+0xa4>
 800b87a:	bf00      	nop
 800b87c:	0801134c 	.word	0x0801134c
 800b880:	0801135d 	.word	0x0801135d

0800b884 <__mcmp>:
 800b884:	690a      	ldr	r2, [r1, #16]
 800b886:	4603      	mov	r3, r0
 800b888:	6900      	ldr	r0, [r0, #16]
 800b88a:	1a80      	subs	r0, r0, r2
 800b88c:	b530      	push	{r4, r5, lr}
 800b88e:	d10e      	bne.n	800b8ae <__mcmp+0x2a>
 800b890:	3314      	adds	r3, #20
 800b892:	3114      	adds	r1, #20
 800b894:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b898:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b89c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b8a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b8a4:	4295      	cmp	r5, r2
 800b8a6:	d003      	beq.n	800b8b0 <__mcmp+0x2c>
 800b8a8:	d205      	bcs.n	800b8b6 <__mcmp+0x32>
 800b8aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ae:	bd30      	pop	{r4, r5, pc}
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	d3f3      	bcc.n	800b89c <__mcmp+0x18>
 800b8b4:	e7fb      	b.n	800b8ae <__mcmp+0x2a>
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	e7f9      	b.n	800b8ae <__mcmp+0x2a>
	...

0800b8bc <__mdiff>:
 800b8bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8c0:	4689      	mov	r9, r1
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	4611      	mov	r1, r2
 800b8c6:	4648      	mov	r0, r9
 800b8c8:	4614      	mov	r4, r2
 800b8ca:	f7ff ffdb 	bl	800b884 <__mcmp>
 800b8ce:	1e05      	subs	r5, r0, #0
 800b8d0:	d112      	bne.n	800b8f8 <__mdiff+0x3c>
 800b8d2:	4629      	mov	r1, r5
 800b8d4:	4630      	mov	r0, r6
 800b8d6:	f7ff fd5b 	bl	800b390 <_Balloc>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	b928      	cbnz	r0, 800b8ea <__mdiff+0x2e>
 800b8de:	4b3f      	ldr	r3, [pc, #252]	@ (800b9dc <__mdiff+0x120>)
 800b8e0:	f240 2137 	movw	r1, #567	@ 0x237
 800b8e4:	483e      	ldr	r0, [pc, #248]	@ (800b9e0 <__mdiff+0x124>)
 800b8e6:	f000 fb11 	bl	800bf0c <__assert_func>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	b003      	add	sp, #12
 800b8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f8:	bfbc      	itt	lt
 800b8fa:	464b      	movlt	r3, r9
 800b8fc:	46a1      	movlt	r9, r4
 800b8fe:	4630      	mov	r0, r6
 800b900:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b904:	bfba      	itte	lt
 800b906:	461c      	movlt	r4, r3
 800b908:	2501      	movlt	r5, #1
 800b90a:	2500      	movge	r5, #0
 800b90c:	f7ff fd40 	bl	800b390 <_Balloc>
 800b910:	4602      	mov	r2, r0
 800b912:	b918      	cbnz	r0, 800b91c <__mdiff+0x60>
 800b914:	4b31      	ldr	r3, [pc, #196]	@ (800b9dc <__mdiff+0x120>)
 800b916:	f240 2145 	movw	r1, #581	@ 0x245
 800b91a:	e7e3      	b.n	800b8e4 <__mdiff+0x28>
 800b91c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b920:	6926      	ldr	r6, [r4, #16]
 800b922:	60c5      	str	r5, [r0, #12]
 800b924:	f109 0310 	add.w	r3, r9, #16
 800b928:	f109 0514 	add.w	r5, r9, #20
 800b92c:	f104 0e14 	add.w	lr, r4, #20
 800b930:	f100 0b14 	add.w	fp, r0, #20
 800b934:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b938:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b93c:	9301      	str	r3, [sp, #4]
 800b93e:	46d9      	mov	r9, fp
 800b940:	f04f 0c00 	mov.w	ip, #0
 800b944:	9b01      	ldr	r3, [sp, #4]
 800b946:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b94a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b94e:	9301      	str	r3, [sp, #4]
 800b950:	fa1f f38a 	uxth.w	r3, sl
 800b954:	4619      	mov	r1, r3
 800b956:	b283      	uxth	r3, r0
 800b958:	1acb      	subs	r3, r1, r3
 800b95a:	0c00      	lsrs	r0, r0, #16
 800b95c:	4463      	add	r3, ip
 800b95e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b962:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b966:	b29b      	uxth	r3, r3
 800b968:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b96c:	4576      	cmp	r6, lr
 800b96e:	f849 3b04 	str.w	r3, [r9], #4
 800b972:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b976:	d8e5      	bhi.n	800b944 <__mdiff+0x88>
 800b978:	1b33      	subs	r3, r6, r4
 800b97a:	3b15      	subs	r3, #21
 800b97c:	f023 0303 	bic.w	r3, r3, #3
 800b980:	3415      	adds	r4, #21
 800b982:	3304      	adds	r3, #4
 800b984:	42a6      	cmp	r6, r4
 800b986:	bf38      	it	cc
 800b988:	2304      	movcc	r3, #4
 800b98a:	441d      	add	r5, r3
 800b98c:	445b      	add	r3, fp
 800b98e:	461e      	mov	r6, r3
 800b990:	462c      	mov	r4, r5
 800b992:	4544      	cmp	r4, r8
 800b994:	d30e      	bcc.n	800b9b4 <__mdiff+0xf8>
 800b996:	f108 0103 	add.w	r1, r8, #3
 800b99a:	1b49      	subs	r1, r1, r5
 800b99c:	f021 0103 	bic.w	r1, r1, #3
 800b9a0:	3d03      	subs	r5, #3
 800b9a2:	45a8      	cmp	r8, r5
 800b9a4:	bf38      	it	cc
 800b9a6:	2100      	movcc	r1, #0
 800b9a8:	440b      	add	r3, r1
 800b9aa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b9ae:	b191      	cbz	r1, 800b9d6 <__mdiff+0x11a>
 800b9b0:	6117      	str	r7, [r2, #16]
 800b9b2:	e79d      	b.n	800b8f0 <__mdiff+0x34>
 800b9b4:	f854 1b04 	ldr.w	r1, [r4], #4
 800b9b8:	46e6      	mov	lr, ip
 800b9ba:	0c08      	lsrs	r0, r1, #16
 800b9bc:	fa1c fc81 	uxtah	ip, ip, r1
 800b9c0:	4471      	add	r1, lr
 800b9c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b9c6:	b289      	uxth	r1, r1
 800b9c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b9cc:	f846 1b04 	str.w	r1, [r6], #4
 800b9d0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9d4:	e7dd      	b.n	800b992 <__mdiff+0xd6>
 800b9d6:	3f01      	subs	r7, #1
 800b9d8:	e7e7      	b.n	800b9aa <__mdiff+0xee>
 800b9da:	bf00      	nop
 800b9dc:	0801134c 	.word	0x0801134c
 800b9e0:	0801135d 	.word	0x0801135d

0800b9e4 <__d2b>:
 800b9e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9e8:	460f      	mov	r7, r1
 800b9ea:	2101      	movs	r1, #1
 800b9ec:	ec59 8b10 	vmov	r8, r9, d0
 800b9f0:	4616      	mov	r6, r2
 800b9f2:	f7ff fccd 	bl	800b390 <_Balloc>
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	b930      	cbnz	r0, 800ba08 <__d2b+0x24>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	4b23      	ldr	r3, [pc, #140]	@ (800ba8c <__d2b+0xa8>)
 800b9fe:	4824      	ldr	r0, [pc, #144]	@ (800ba90 <__d2b+0xac>)
 800ba00:	f240 310f 	movw	r1, #783	@ 0x30f
 800ba04:	f000 fa82 	bl	800bf0c <__assert_func>
 800ba08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ba0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ba10:	b10d      	cbz	r5, 800ba16 <__d2b+0x32>
 800ba12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ba16:	9301      	str	r3, [sp, #4]
 800ba18:	f1b8 0300 	subs.w	r3, r8, #0
 800ba1c:	d023      	beq.n	800ba66 <__d2b+0x82>
 800ba1e:	4668      	mov	r0, sp
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	f7ff fd7c 	bl	800b51e <__lo0bits>
 800ba26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba2a:	b1d0      	cbz	r0, 800ba62 <__d2b+0x7e>
 800ba2c:	f1c0 0320 	rsb	r3, r0, #32
 800ba30:	fa02 f303 	lsl.w	r3, r2, r3
 800ba34:	430b      	orrs	r3, r1
 800ba36:	40c2      	lsrs	r2, r0
 800ba38:	6163      	str	r3, [r4, #20]
 800ba3a:	9201      	str	r2, [sp, #4]
 800ba3c:	9b01      	ldr	r3, [sp, #4]
 800ba3e:	61a3      	str	r3, [r4, #24]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	bf0c      	ite	eq
 800ba44:	2201      	moveq	r2, #1
 800ba46:	2202      	movne	r2, #2
 800ba48:	6122      	str	r2, [r4, #16]
 800ba4a:	b1a5      	cbz	r5, 800ba76 <__d2b+0x92>
 800ba4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba50:	4405      	add	r5, r0
 800ba52:	603d      	str	r5, [r7, #0]
 800ba54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba58:	6030      	str	r0, [r6, #0]
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	b003      	add	sp, #12
 800ba5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba62:	6161      	str	r1, [r4, #20]
 800ba64:	e7ea      	b.n	800ba3c <__d2b+0x58>
 800ba66:	a801      	add	r0, sp, #4
 800ba68:	f7ff fd59 	bl	800b51e <__lo0bits>
 800ba6c:	9b01      	ldr	r3, [sp, #4]
 800ba6e:	6163      	str	r3, [r4, #20]
 800ba70:	3020      	adds	r0, #32
 800ba72:	2201      	movs	r2, #1
 800ba74:	e7e8      	b.n	800ba48 <__d2b+0x64>
 800ba76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba7e:	6038      	str	r0, [r7, #0]
 800ba80:	6918      	ldr	r0, [r3, #16]
 800ba82:	f7ff fd2d 	bl	800b4e0 <__hi0bits>
 800ba86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba8a:	e7e5      	b.n	800ba58 <__d2b+0x74>
 800ba8c:	0801134c 	.word	0x0801134c
 800ba90:	0801135d 	.word	0x0801135d

0800ba94 <__ssputs_r>:
 800ba94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba98:	688e      	ldr	r6, [r1, #8]
 800ba9a:	461f      	mov	r7, r3
 800ba9c:	42be      	cmp	r6, r7
 800ba9e:	680b      	ldr	r3, [r1, #0]
 800baa0:	4682      	mov	sl, r0
 800baa2:	460c      	mov	r4, r1
 800baa4:	4690      	mov	r8, r2
 800baa6:	d82d      	bhi.n	800bb04 <__ssputs_r+0x70>
 800baa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800baac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bab0:	d026      	beq.n	800bb00 <__ssputs_r+0x6c>
 800bab2:	6965      	ldr	r5, [r4, #20]
 800bab4:	6909      	ldr	r1, [r1, #16]
 800bab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baba:	eba3 0901 	sub.w	r9, r3, r1
 800babe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bac2:	1c7b      	adds	r3, r7, #1
 800bac4:	444b      	add	r3, r9
 800bac6:	106d      	asrs	r5, r5, #1
 800bac8:	429d      	cmp	r5, r3
 800baca:	bf38      	it	cc
 800bacc:	461d      	movcc	r5, r3
 800bace:	0553      	lsls	r3, r2, #21
 800bad0:	d527      	bpl.n	800bb22 <__ssputs_r+0x8e>
 800bad2:	4629      	mov	r1, r5
 800bad4:	f7ff fbd0 	bl	800b278 <_malloc_r>
 800bad8:	4606      	mov	r6, r0
 800bada:	b360      	cbz	r0, 800bb36 <__ssputs_r+0xa2>
 800badc:	6921      	ldr	r1, [r4, #16]
 800bade:	464a      	mov	r2, r9
 800bae0:	f000 fa06 	bl	800bef0 <memcpy>
 800bae4:	89a3      	ldrh	r3, [r4, #12]
 800bae6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800baea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baee:	81a3      	strh	r3, [r4, #12]
 800baf0:	6126      	str	r6, [r4, #16]
 800baf2:	6165      	str	r5, [r4, #20]
 800baf4:	444e      	add	r6, r9
 800baf6:	eba5 0509 	sub.w	r5, r5, r9
 800bafa:	6026      	str	r6, [r4, #0]
 800bafc:	60a5      	str	r5, [r4, #8]
 800bafe:	463e      	mov	r6, r7
 800bb00:	42be      	cmp	r6, r7
 800bb02:	d900      	bls.n	800bb06 <__ssputs_r+0x72>
 800bb04:	463e      	mov	r6, r7
 800bb06:	6820      	ldr	r0, [r4, #0]
 800bb08:	4632      	mov	r2, r6
 800bb0a:	4641      	mov	r1, r8
 800bb0c:	f000 f9c6 	bl	800be9c <memmove>
 800bb10:	68a3      	ldr	r3, [r4, #8]
 800bb12:	1b9b      	subs	r3, r3, r6
 800bb14:	60a3      	str	r3, [r4, #8]
 800bb16:	6823      	ldr	r3, [r4, #0]
 800bb18:	4433      	add	r3, r6
 800bb1a:	6023      	str	r3, [r4, #0]
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb22:	462a      	mov	r2, r5
 800bb24:	f000 fa36 	bl	800bf94 <_realloc_r>
 800bb28:	4606      	mov	r6, r0
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	d1e0      	bne.n	800baf0 <__ssputs_r+0x5c>
 800bb2e:	6921      	ldr	r1, [r4, #16]
 800bb30:	4650      	mov	r0, sl
 800bb32:	f7ff fb2d 	bl	800b190 <_free_r>
 800bb36:	230c      	movs	r3, #12
 800bb38:	f8ca 3000 	str.w	r3, [sl]
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb42:	81a3      	strh	r3, [r4, #12]
 800bb44:	f04f 30ff 	mov.w	r0, #4294967295
 800bb48:	e7e9      	b.n	800bb1e <__ssputs_r+0x8a>
	...

0800bb4c <_svfiprintf_r>:
 800bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb50:	4698      	mov	r8, r3
 800bb52:	898b      	ldrh	r3, [r1, #12]
 800bb54:	061b      	lsls	r3, r3, #24
 800bb56:	b09d      	sub	sp, #116	@ 0x74
 800bb58:	4607      	mov	r7, r0
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	4614      	mov	r4, r2
 800bb5e:	d510      	bpl.n	800bb82 <_svfiprintf_r+0x36>
 800bb60:	690b      	ldr	r3, [r1, #16]
 800bb62:	b973      	cbnz	r3, 800bb82 <_svfiprintf_r+0x36>
 800bb64:	2140      	movs	r1, #64	@ 0x40
 800bb66:	f7ff fb87 	bl	800b278 <_malloc_r>
 800bb6a:	6028      	str	r0, [r5, #0]
 800bb6c:	6128      	str	r0, [r5, #16]
 800bb6e:	b930      	cbnz	r0, 800bb7e <_svfiprintf_r+0x32>
 800bb70:	230c      	movs	r3, #12
 800bb72:	603b      	str	r3, [r7, #0]
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	b01d      	add	sp, #116	@ 0x74
 800bb7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb7e:	2340      	movs	r3, #64	@ 0x40
 800bb80:	616b      	str	r3, [r5, #20]
 800bb82:	2300      	movs	r3, #0
 800bb84:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb86:	2320      	movs	r3, #32
 800bb88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb90:	2330      	movs	r3, #48	@ 0x30
 800bb92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd30 <_svfiprintf_r+0x1e4>
 800bb96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb9a:	f04f 0901 	mov.w	r9, #1
 800bb9e:	4623      	mov	r3, r4
 800bba0:	469a      	mov	sl, r3
 800bba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bba6:	b10a      	cbz	r2, 800bbac <_svfiprintf_r+0x60>
 800bba8:	2a25      	cmp	r2, #37	@ 0x25
 800bbaa:	d1f9      	bne.n	800bba0 <_svfiprintf_r+0x54>
 800bbac:	ebba 0b04 	subs.w	fp, sl, r4
 800bbb0:	d00b      	beq.n	800bbca <_svfiprintf_r+0x7e>
 800bbb2:	465b      	mov	r3, fp
 800bbb4:	4622      	mov	r2, r4
 800bbb6:	4629      	mov	r1, r5
 800bbb8:	4638      	mov	r0, r7
 800bbba:	f7ff ff6b 	bl	800ba94 <__ssputs_r>
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	f000 80a7 	beq.w	800bd12 <_svfiprintf_r+0x1c6>
 800bbc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbc6:	445a      	add	r2, fp
 800bbc8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbca:	f89a 3000 	ldrb.w	r3, [sl]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 809f 	beq.w	800bd12 <_svfiprintf_r+0x1c6>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbde:	f10a 0a01 	add.w	sl, sl, #1
 800bbe2:	9304      	str	r3, [sp, #16]
 800bbe4:	9307      	str	r3, [sp, #28]
 800bbe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbea:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbec:	4654      	mov	r4, sl
 800bbee:	2205      	movs	r2, #5
 800bbf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf4:	484e      	ldr	r0, [pc, #312]	@ (800bd30 <_svfiprintf_r+0x1e4>)
 800bbf6:	f7f4 fb1b 	bl	8000230 <memchr>
 800bbfa:	9a04      	ldr	r2, [sp, #16]
 800bbfc:	b9d8      	cbnz	r0, 800bc36 <_svfiprintf_r+0xea>
 800bbfe:	06d0      	lsls	r0, r2, #27
 800bc00:	bf44      	itt	mi
 800bc02:	2320      	movmi	r3, #32
 800bc04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc08:	0711      	lsls	r1, r2, #28
 800bc0a:	bf44      	itt	mi
 800bc0c:	232b      	movmi	r3, #43	@ 0x2b
 800bc0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc12:	f89a 3000 	ldrb.w	r3, [sl]
 800bc16:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc18:	d015      	beq.n	800bc46 <_svfiprintf_r+0xfa>
 800bc1a:	9a07      	ldr	r2, [sp, #28]
 800bc1c:	4654      	mov	r4, sl
 800bc1e:	2000      	movs	r0, #0
 800bc20:	f04f 0c0a 	mov.w	ip, #10
 800bc24:	4621      	mov	r1, r4
 800bc26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc2a:	3b30      	subs	r3, #48	@ 0x30
 800bc2c:	2b09      	cmp	r3, #9
 800bc2e:	d94b      	bls.n	800bcc8 <_svfiprintf_r+0x17c>
 800bc30:	b1b0      	cbz	r0, 800bc60 <_svfiprintf_r+0x114>
 800bc32:	9207      	str	r2, [sp, #28]
 800bc34:	e014      	b.n	800bc60 <_svfiprintf_r+0x114>
 800bc36:	eba0 0308 	sub.w	r3, r0, r8
 800bc3a:	fa09 f303 	lsl.w	r3, r9, r3
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	9304      	str	r3, [sp, #16]
 800bc42:	46a2      	mov	sl, r4
 800bc44:	e7d2      	b.n	800bbec <_svfiprintf_r+0xa0>
 800bc46:	9b03      	ldr	r3, [sp, #12]
 800bc48:	1d19      	adds	r1, r3, #4
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	9103      	str	r1, [sp, #12]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bfbb      	ittet	lt
 800bc52:	425b      	neglt	r3, r3
 800bc54:	f042 0202 	orrlt.w	r2, r2, #2
 800bc58:	9307      	strge	r3, [sp, #28]
 800bc5a:	9307      	strlt	r3, [sp, #28]
 800bc5c:	bfb8      	it	lt
 800bc5e:	9204      	strlt	r2, [sp, #16]
 800bc60:	7823      	ldrb	r3, [r4, #0]
 800bc62:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc64:	d10a      	bne.n	800bc7c <_svfiprintf_r+0x130>
 800bc66:	7863      	ldrb	r3, [r4, #1]
 800bc68:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc6a:	d132      	bne.n	800bcd2 <_svfiprintf_r+0x186>
 800bc6c:	9b03      	ldr	r3, [sp, #12]
 800bc6e:	1d1a      	adds	r2, r3, #4
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	9203      	str	r2, [sp, #12]
 800bc74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc78:	3402      	adds	r4, #2
 800bc7a:	9305      	str	r3, [sp, #20]
 800bc7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd40 <_svfiprintf_r+0x1f4>
 800bc80:	7821      	ldrb	r1, [r4, #0]
 800bc82:	2203      	movs	r2, #3
 800bc84:	4650      	mov	r0, sl
 800bc86:	f7f4 fad3 	bl	8000230 <memchr>
 800bc8a:	b138      	cbz	r0, 800bc9c <_svfiprintf_r+0x150>
 800bc8c:	9b04      	ldr	r3, [sp, #16]
 800bc8e:	eba0 000a 	sub.w	r0, r0, sl
 800bc92:	2240      	movs	r2, #64	@ 0x40
 800bc94:	4082      	lsls	r2, r0
 800bc96:	4313      	orrs	r3, r2
 800bc98:	3401      	adds	r4, #1
 800bc9a:	9304      	str	r3, [sp, #16]
 800bc9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca0:	4824      	ldr	r0, [pc, #144]	@ (800bd34 <_svfiprintf_r+0x1e8>)
 800bca2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bca6:	2206      	movs	r2, #6
 800bca8:	f7f4 fac2 	bl	8000230 <memchr>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d036      	beq.n	800bd1e <_svfiprintf_r+0x1d2>
 800bcb0:	4b21      	ldr	r3, [pc, #132]	@ (800bd38 <_svfiprintf_r+0x1ec>)
 800bcb2:	bb1b      	cbnz	r3, 800bcfc <_svfiprintf_r+0x1b0>
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	3307      	adds	r3, #7
 800bcb8:	f023 0307 	bic.w	r3, r3, #7
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	9303      	str	r3, [sp, #12]
 800bcc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc2:	4433      	add	r3, r6
 800bcc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcc6:	e76a      	b.n	800bb9e <_svfiprintf_r+0x52>
 800bcc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bccc:	460c      	mov	r4, r1
 800bcce:	2001      	movs	r0, #1
 800bcd0:	e7a8      	b.n	800bc24 <_svfiprintf_r+0xd8>
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	3401      	adds	r4, #1
 800bcd6:	9305      	str	r3, [sp, #20]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	f04f 0c0a 	mov.w	ip, #10
 800bcde:	4620      	mov	r0, r4
 800bce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bce4:	3a30      	subs	r2, #48	@ 0x30
 800bce6:	2a09      	cmp	r2, #9
 800bce8:	d903      	bls.n	800bcf2 <_svfiprintf_r+0x1a6>
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0c6      	beq.n	800bc7c <_svfiprintf_r+0x130>
 800bcee:	9105      	str	r1, [sp, #20]
 800bcf0:	e7c4      	b.n	800bc7c <_svfiprintf_r+0x130>
 800bcf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcf6:	4604      	mov	r4, r0
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e7f0      	b.n	800bcde <_svfiprintf_r+0x192>
 800bcfc:	ab03      	add	r3, sp, #12
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	462a      	mov	r2, r5
 800bd02:	4b0e      	ldr	r3, [pc, #56]	@ (800bd3c <_svfiprintf_r+0x1f0>)
 800bd04:	a904      	add	r1, sp, #16
 800bd06:	4638      	mov	r0, r7
 800bd08:	f7fd fe96 	bl	8009a38 <_printf_float>
 800bd0c:	1c42      	adds	r2, r0, #1
 800bd0e:	4606      	mov	r6, r0
 800bd10:	d1d6      	bne.n	800bcc0 <_svfiprintf_r+0x174>
 800bd12:	89ab      	ldrh	r3, [r5, #12]
 800bd14:	065b      	lsls	r3, r3, #25
 800bd16:	f53f af2d 	bmi.w	800bb74 <_svfiprintf_r+0x28>
 800bd1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd1c:	e72c      	b.n	800bb78 <_svfiprintf_r+0x2c>
 800bd1e:	ab03      	add	r3, sp, #12
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	462a      	mov	r2, r5
 800bd24:	4b05      	ldr	r3, [pc, #20]	@ (800bd3c <_svfiprintf_r+0x1f0>)
 800bd26:	a904      	add	r1, sp, #16
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f7fe f91d 	bl	8009f68 <_printf_i>
 800bd2e:	e7ed      	b.n	800bd0c <_svfiprintf_r+0x1c0>
 800bd30:	080114b8 	.word	0x080114b8
 800bd34:	080114c2 	.word	0x080114c2
 800bd38:	08009a39 	.word	0x08009a39
 800bd3c:	0800ba95 	.word	0x0800ba95
 800bd40:	080114be 	.word	0x080114be

0800bd44 <__sflush_r>:
 800bd44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4c:	0716      	lsls	r6, r2, #28
 800bd4e:	4605      	mov	r5, r0
 800bd50:	460c      	mov	r4, r1
 800bd52:	d454      	bmi.n	800bdfe <__sflush_r+0xba>
 800bd54:	684b      	ldr	r3, [r1, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	dc02      	bgt.n	800bd60 <__sflush_r+0x1c>
 800bd5a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	dd48      	ble.n	800bdf2 <__sflush_r+0xae>
 800bd60:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd62:	2e00      	cmp	r6, #0
 800bd64:	d045      	beq.n	800bdf2 <__sflush_r+0xae>
 800bd66:	2300      	movs	r3, #0
 800bd68:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd6c:	682f      	ldr	r7, [r5, #0]
 800bd6e:	6a21      	ldr	r1, [r4, #32]
 800bd70:	602b      	str	r3, [r5, #0]
 800bd72:	d030      	beq.n	800bdd6 <__sflush_r+0x92>
 800bd74:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd76:	89a3      	ldrh	r3, [r4, #12]
 800bd78:	0759      	lsls	r1, r3, #29
 800bd7a:	d505      	bpl.n	800bd88 <__sflush_r+0x44>
 800bd7c:	6863      	ldr	r3, [r4, #4]
 800bd7e:	1ad2      	subs	r2, r2, r3
 800bd80:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd82:	b10b      	cbz	r3, 800bd88 <__sflush_r+0x44>
 800bd84:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd86:	1ad2      	subs	r2, r2, r3
 800bd88:	2300      	movs	r3, #0
 800bd8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd8c:	6a21      	ldr	r1, [r4, #32]
 800bd8e:	4628      	mov	r0, r5
 800bd90:	47b0      	blx	r6
 800bd92:	1c43      	adds	r3, r0, #1
 800bd94:	89a3      	ldrh	r3, [r4, #12]
 800bd96:	d106      	bne.n	800bda6 <__sflush_r+0x62>
 800bd98:	6829      	ldr	r1, [r5, #0]
 800bd9a:	291d      	cmp	r1, #29
 800bd9c:	d82b      	bhi.n	800bdf6 <__sflush_r+0xb2>
 800bd9e:	4a2a      	ldr	r2, [pc, #168]	@ (800be48 <__sflush_r+0x104>)
 800bda0:	410a      	asrs	r2, r1
 800bda2:	07d6      	lsls	r6, r2, #31
 800bda4:	d427      	bmi.n	800bdf6 <__sflush_r+0xb2>
 800bda6:	2200      	movs	r2, #0
 800bda8:	6062      	str	r2, [r4, #4]
 800bdaa:	04d9      	lsls	r1, r3, #19
 800bdac:	6922      	ldr	r2, [r4, #16]
 800bdae:	6022      	str	r2, [r4, #0]
 800bdb0:	d504      	bpl.n	800bdbc <__sflush_r+0x78>
 800bdb2:	1c42      	adds	r2, r0, #1
 800bdb4:	d101      	bne.n	800bdba <__sflush_r+0x76>
 800bdb6:	682b      	ldr	r3, [r5, #0]
 800bdb8:	b903      	cbnz	r3, 800bdbc <__sflush_r+0x78>
 800bdba:	6560      	str	r0, [r4, #84]	@ 0x54
 800bdbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdbe:	602f      	str	r7, [r5, #0]
 800bdc0:	b1b9      	cbz	r1, 800bdf2 <__sflush_r+0xae>
 800bdc2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdc6:	4299      	cmp	r1, r3
 800bdc8:	d002      	beq.n	800bdd0 <__sflush_r+0x8c>
 800bdca:	4628      	mov	r0, r5
 800bdcc:	f7ff f9e0 	bl	800b190 <_free_r>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdd4:	e00d      	b.n	800bdf2 <__sflush_r+0xae>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	4628      	mov	r0, r5
 800bdda:	47b0      	blx	r6
 800bddc:	4602      	mov	r2, r0
 800bdde:	1c50      	adds	r0, r2, #1
 800bde0:	d1c9      	bne.n	800bd76 <__sflush_r+0x32>
 800bde2:	682b      	ldr	r3, [r5, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d0c6      	beq.n	800bd76 <__sflush_r+0x32>
 800bde8:	2b1d      	cmp	r3, #29
 800bdea:	d001      	beq.n	800bdf0 <__sflush_r+0xac>
 800bdec:	2b16      	cmp	r3, #22
 800bdee:	d11e      	bne.n	800be2e <__sflush_r+0xea>
 800bdf0:	602f      	str	r7, [r5, #0]
 800bdf2:	2000      	movs	r0, #0
 800bdf4:	e022      	b.n	800be3c <__sflush_r+0xf8>
 800bdf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdfa:	b21b      	sxth	r3, r3
 800bdfc:	e01b      	b.n	800be36 <__sflush_r+0xf2>
 800bdfe:	690f      	ldr	r7, [r1, #16]
 800be00:	2f00      	cmp	r7, #0
 800be02:	d0f6      	beq.n	800bdf2 <__sflush_r+0xae>
 800be04:	0793      	lsls	r3, r2, #30
 800be06:	680e      	ldr	r6, [r1, #0]
 800be08:	bf08      	it	eq
 800be0a:	694b      	ldreq	r3, [r1, #20]
 800be0c:	600f      	str	r7, [r1, #0]
 800be0e:	bf18      	it	ne
 800be10:	2300      	movne	r3, #0
 800be12:	eba6 0807 	sub.w	r8, r6, r7
 800be16:	608b      	str	r3, [r1, #8]
 800be18:	f1b8 0f00 	cmp.w	r8, #0
 800be1c:	dde9      	ble.n	800bdf2 <__sflush_r+0xae>
 800be1e:	6a21      	ldr	r1, [r4, #32]
 800be20:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800be22:	4643      	mov	r3, r8
 800be24:	463a      	mov	r2, r7
 800be26:	4628      	mov	r0, r5
 800be28:	47b0      	blx	r6
 800be2a:	2800      	cmp	r0, #0
 800be2c:	dc08      	bgt.n	800be40 <__sflush_r+0xfc>
 800be2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be36:	81a3      	strh	r3, [r4, #12]
 800be38:	f04f 30ff 	mov.w	r0, #4294967295
 800be3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be40:	4407      	add	r7, r0
 800be42:	eba8 0800 	sub.w	r8, r8, r0
 800be46:	e7e7      	b.n	800be18 <__sflush_r+0xd4>
 800be48:	dfbffffe 	.word	0xdfbffffe

0800be4c <_fflush_r>:
 800be4c:	b538      	push	{r3, r4, r5, lr}
 800be4e:	690b      	ldr	r3, [r1, #16]
 800be50:	4605      	mov	r5, r0
 800be52:	460c      	mov	r4, r1
 800be54:	b913      	cbnz	r3, 800be5c <_fflush_r+0x10>
 800be56:	2500      	movs	r5, #0
 800be58:	4628      	mov	r0, r5
 800be5a:	bd38      	pop	{r3, r4, r5, pc}
 800be5c:	b118      	cbz	r0, 800be66 <_fflush_r+0x1a>
 800be5e:	6a03      	ldr	r3, [r0, #32]
 800be60:	b90b      	cbnz	r3, 800be66 <_fflush_r+0x1a>
 800be62:	f7fe fa2d 	bl	800a2c0 <__sinit>
 800be66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d0f3      	beq.n	800be56 <_fflush_r+0xa>
 800be6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be70:	07d0      	lsls	r0, r2, #31
 800be72:	d404      	bmi.n	800be7e <_fflush_r+0x32>
 800be74:	0599      	lsls	r1, r3, #22
 800be76:	d402      	bmi.n	800be7e <_fflush_r+0x32>
 800be78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be7a:	f7fe fb38 	bl	800a4ee <__retarget_lock_acquire_recursive>
 800be7e:	4628      	mov	r0, r5
 800be80:	4621      	mov	r1, r4
 800be82:	f7ff ff5f 	bl	800bd44 <__sflush_r>
 800be86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be88:	07da      	lsls	r2, r3, #31
 800be8a:	4605      	mov	r5, r0
 800be8c:	d4e4      	bmi.n	800be58 <_fflush_r+0xc>
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	059b      	lsls	r3, r3, #22
 800be92:	d4e1      	bmi.n	800be58 <_fflush_r+0xc>
 800be94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be96:	f7fe fb2b 	bl	800a4f0 <__retarget_lock_release_recursive>
 800be9a:	e7dd      	b.n	800be58 <_fflush_r+0xc>

0800be9c <memmove>:
 800be9c:	4288      	cmp	r0, r1
 800be9e:	b510      	push	{r4, lr}
 800bea0:	eb01 0402 	add.w	r4, r1, r2
 800bea4:	d902      	bls.n	800beac <memmove+0x10>
 800bea6:	4284      	cmp	r4, r0
 800bea8:	4623      	mov	r3, r4
 800beaa:	d807      	bhi.n	800bebc <memmove+0x20>
 800beac:	1e43      	subs	r3, r0, #1
 800beae:	42a1      	cmp	r1, r4
 800beb0:	d008      	beq.n	800bec4 <memmove+0x28>
 800beb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beba:	e7f8      	b.n	800beae <memmove+0x12>
 800bebc:	4402      	add	r2, r0
 800bebe:	4601      	mov	r1, r0
 800bec0:	428a      	cmp	r2, r1
 800bec2:	d100      	bne.n	800bec6 <memmove+0x2a>
 800bec4:	bd10      	pop	{r4, pc}
 800bec6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800beca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bece:	e7f7      	b.n	800bec0 <memmove+0x24>

0800bed0 <_sbrk_r>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	4d06      	ldr	r5, [pc, #24]	@ (800beec <_sbrk_r+0x1c>)
 800bed4:	2300      	movs	r3, #0
 800bed6:	4604      	mov	r4, r0
 800bed8:	4608      	mov	r0, r1
 800beda:	602b      	str	r3, [r5, #0]
 800bedc:	f7f6 ff80 	bl	8002de0 <_sbrk>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	d102      	bne.n	800beea <_sbrk_r+0x1a>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	b103      	cbz	r3, 800beea <_sbrk_r+0x1a>
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	20005bf0 	.word	0x20005bf0

0800bef0 <memcpy>:
 800bef0:	440a      	add	r2, r1
 800bef2:	4291      	cmp	r1, r2
 800bef4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bef8:	d100      	bne.n	800befc <memcpy+0xc>
 800befa:	4770      	bx	lr
 800befc:	b510      	push	{r4, lr}
 800befe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf06:	4291      	cmp	r1, r2
 800bf08:	d1f9      	bne.n	800befe <memcpy+0xe>
 800bf0a:	bd10      	pop	{r4, pc}

0800bf0c <__assert_func>:
 800bf0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf0e:	4614      	mov	r4, r2
 800bf10:	461a      	mov	r2, r3
 800bf12:	4b09      	ldr	r3, [pc, #36]	@ (800bf38 <__assert_func+0x2c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4605      	mov	r5, r0
 800bf18:	68d8      	ldr	r0, [r3, #12]
 800bf1a:	b954      	cbnz	r4, 800bf32 <__assert_func+0x26>
 800bf1c:	4b07      	ldr	r3, [pc, #28]	@ (800bf3c <__assert_func+0x30>)
 800bf1e:	461c      	mov	r4, r3
 800bf20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf24:	9100      	str	r1, [sp, #0]
 800bf26:	462b      	mov	r3, r5
 800bf28:	4905      	ldr	r1, [pc, #20]	@ (800bf40 <__assert_func+0x34>)
 800bf2a:	f000 f86f 	bl	800c00c <fiprintf>
 800bf2e:	f000 f87f 	bl	800c030 <abort>
 800bf32:	4b04      	ldr	r3, [pc, #16]	@ (800bf44 <__assert_func+0x38>)
 800bf34:	e7f4      	b.n	800bf20 <__assert_func+0x14>
 800bf36:	bf00      	nop
 800bf38:	20003618 	.word	0x20003618
 800bf3c:	0801150e 	.word	0x0801150e
 800bf40:	080114e0 	.word	0x080114e0
 800bf44:	080114d3 	.word	0x080114d3

0800bf48 <_calloc_r>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	fba1 5402 	umull	r5, r4, r1, r2
 800bf4e:	b93c      	cbnz	r4, 800bf60 <_calloc_r+0x18>
 800bf50:	4629      	mov	r1, r5
 800bf52:	f7ff f991 	bl	800b278 <_malloc_r>
 800bf56:	4606      	mov	r6, r0
 800bf58:	b928      	cbnz	r0, 800bf66 <_calloc_r+0x1e>
 800bf5a:	2600      	movs	r6, #0
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	bd70      	pop	{r4, r5, r6, pc}
 800bf60:	220c      	movs	r2, #12
 800bf62:	6002      	str	r2, [r0, #0]
 800bf64:	e7f9      	b.n	800bf5a <_calloc_r+0x12>
 800bf66:	462a      	mov	r2, r5
 800bf68:	4621      	mov	r1, r4
 800bf6a:	f7fe fa42 	bl	800a3f2 <memset>
 800bf6e:	e7f5      	b.n	800bf5c <_calloc_r+0x14>

0800bf70 <__ascii_mbtowc>:
 800bf70:	b082      	sub	sp, #8
 800bf72:	b901      	cbnz	r1, 800bf76 <__ascii_mbtowc+0x6>
 800bf74:	a901      	add	r1, sp, #4
 800bf76:	b142      	cbz	r2, 800bf8a <__ascii_mbtowc+0x1a>
 800bf78:	b14b      	cbz	r3, 800bf8e <__ascii_mbtowc+0x1e>
 800bf7a:	7813      	ldrb	r3, [r2, #0]
 800bf7c:	600b      	str	r3, [r1, #0]
 800bf7e:	7812      	ldrb	r2, [r2, #0]
 800bf80:	1e10      	subs	r0, r2, #0
 800bf82:	bf18      	it	ne
 800bf84:	2001      	movne	r0, #1
 800bf86:	b002      	add	sp, #8
 800bf88:	4770      	bx	lr
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	e7fb      	b.n	800bf86 <__ascii_mbtowc+0x16>
 800bf8e:	f06f 0001 	mvn.w	r0, #1
 800bf92:	e7f8      	b.n	800bf86 <__ascii_mbtowc+0x16>

0800bf94 <_realloc_r>:
 800bf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf98:	4680      	mov	r8, r0
 800bf9a:	4615      	mov	r5, r2
 800bf9c:	460c      	mov	r4, r1
 800bf9e:	b921      	cbnz	r1, 800bfaa <_realloc_r+0x16>
 800bfa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	f7ff b967 	b.w	800b278 <_malloc_r>
 800bfaa:	b92a      	cbnz	r2, 800bfb8 <_realloc_r+0x24>
 800bfac:	f7ff f8f0 	bl	800b190 <_free_r>
 800bfb0:	2400      	movs	r4, #0
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb8:	f000 f841 	bl	800c03e <_malloc_usable_size_r>
 800bfbc:	4285      	cmp	r5, r0
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	d802      	bhi.n	800bfc8 <_realloc_r+0x34>
 800bfc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bfc6:	d8f4      	bhi.n	800bfb2 <_realloc_r+0x1e>
 800bfc8:	4629      	mov	r1, r5
 800bfca:	4640      	mov	r0, r8
 800bfcc:	f7ff f954 	bl	800b278 <_malloc_r>
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	2800      	cmp	r0, #0
 800bfd4:	d0ec      	beq.n	800bfb0 <_realloc_r+0x1c>
 800bfd6:	42b5      	cmp	r5, r6
 800bfd8:	462a      	mov	r2, r5
 800bfda:	4621      	mov	r1, r4
 800bfdc:	bf28      	it	cs
 800bfde:	4632      	movcs	r2, r6
 800bfe0:	f7ff ff86 	bl	800bef0 <memcpy>
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	f7ff f8d2 	bl	800b190 <_free_r>
 800bfec:	463c      	mov	r4, r7
 800bfee:	e7e0      	b.n	800bfb2 <_realloc_r+0x1e>

0800bff0 <__ascii_wctomb>:
 800bff0:	4603      	mov	r3, r0
 800bff2:	4608      	mov	r0, r1
 800bff4:	b141      	cbz	r1, 800c008 <__ascii_wctomb+0x18>
 800bff6:	2aff      	cmp	r2, #255	@ 0xff
 800bff8:	d904      	bls.n	800c004 <__ascii_wctomb+0x14>
 800bffa:	228a      	movs	r2, #138	@ 0x8a
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295
 800c002:	4770      	bx	lr
 800c004:	700a      	strb	r2, [r1, #0]
 800c006:	2001      	movs	r0, #1
 800c008:	4770      	bx	lr
	...

0800c00c <fiprintf>:
 800c00c:	b40e      	push	{r1, r2, r3}
 800c00e:	b503      	push	{r0, r1, lr}
 800c010:	4601      	mov	r1, r0
 800c012:	ab03      	add	r3, sp, #12
 800c014:	4805      	ldr	r0, [pc, #20]	@ (800c02c <fiprintf+0x20>)
 800c016:	f853 2b04 	ldr.w	r2, [r3], #4
 800c01a:	6800      	ldr	r0, [r0, #0]
 800c01c:	9301      	str	r3, [sp, #4]
 800c01e:	f000 f83f 	bl	800c0a0 <_vfiprintf_r>
 800c022:	b002      	add	sp, #8
 800c024:	f85d eb04 	ldr.w	lr, [sp], #4
 800c028:	b003      	add	sp, #12
 800c02a:	4770      	bx	lr
 800c02c:	20003618 	.word	0x20003618

0800c030 <abort>:
 800c030:	b508      	push	{r3, lr}
 800c032:	2006      	movs	r0, #6
 800c034:	f000 fa08 	bl	800c448 <raise>
 800c038:	2001      	movs	r0, #1
 800c03a:	f7f6 fe58 	bl	8002cee <_exit>

0800c03e <_malloc_usable_size_r>:
 800c03e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c042:	1f18      	subs	r0, r3, #4
 800c044:	2b00      	cmp	r3, #0
 800c046:	bfbc      	itt	lt
 800c048:	580b      	ldrlt	r3, [r1, r0]
 800c04a:	18c0      	addlt	r0, r0, r3
 800c04c:	4770      	bx	lr

0800c04e <__sfputc_r>:
 800c04e:	6893      	ldr	r3, [r2, #8]
 800c050:	3b01      	subs	r3, #1
 800c052:	2b00      	cmp	r3, #0
 800c054:	b410      	push	{r4}
 800c056:	6093      	str	r3, [r2, #8]
 800c058:	da08      	bge.n	800c06c <__sfputc_r+0x1e>
 800c05a:	6994      	ldr	r4, [r2, #24]
 800c05c:	42a3      	cmp	r3, r4
 800c05e:	db01      	blt.n	800c064 <__sfputc_r+0x16>
 800c060:	290a      	cmp	r1, #10
 800c062:	d103      	bne.n	800c06c <__sfputc_r+0x1e>
 800c064:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c068:	f000 b932 	b.w	800c2d0 <__swbuf_r>
 800c06c:	6813      	ldr	r3, [r2, #0]
 800c06e:	1c58      	adds	r0, r3, #1
 800c070:	6010      	str	r0, [r2, #0]
 800c072:	7019      	strb	r1, [r3, #0]
 800c074:	4608      	mov	r0, r1
 800c076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <__sfputs_r>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	4606      	mov	r6, r0
 800c080:	460f      	mov	r7, r1
 800c082:	4614      	mov	r4, r2
 800c084:	18d5      	adds	r5, r2, r3
 800c086:	42ac      	cmp	r4, r5
 800c088:	d101      	bne.n	800c08e <__sfputs_r+0x12>
 800c08a:	2000      	movs	r0, #0
 800c08c:	e007      	b.n	800c09e <__sfputs_r+0x22>
 800c08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c092:	463a      	mov	r2, r7
 800c094:	4630      	mov	r0, r6
 800c096:	f7ff ffda 	bl	800c04e <__sfputc_r>
 800c09a:	1c43      	adds	r3, r0, #1
 800c09c:	d1f3      	bne.n	800c086 <__sfputs_r+0xa>
 800c09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c0a0 <_vfiprintf_r>:
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	460d      	mov	r5, r1
 800c0a6:	b09d      	sub	sp, #116	@ 0x74
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	4698      	mov	r8, r3
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	b118      	cbz	r0, 800c0b8 <_vfiprintf_r+0x18>
 800c0b0:	6a03      	ldr	r3, [r0, #32]
 800c0b2:	b90b      	cbnz	r3, 800c0b8 <_vfiprintf_r+0x18>
 800c0b4:	f7fe f904 	bl	800a2c0 <__sinit>
 800c0b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0ba:	07d9      	lsls	r1, r3, #31
 800c0bc:	d405      	bmi.n	800c0ca <_vfiprintf_r+0x2a>
 800c0be:	89ab      	ldrh	r3, [r5, #12]
 800c0c0:	059a      	lsls	r2, r3, #22
 800c0c2:	d402      	bmi.n	800c0ca <_vfiprintf_r+0x2a>
 800c0c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0c6:	f7fe fa12 	bl	800a4ee <__retarget_lock_acquire_recursive>
 800c0ca:	89ab      	ldrh	r3, [r5, #12]
 800c0cc:	071b      	lsls	r3, r3, #28
 800c0ce:	d501      	bpl.n	800c0d4 <_vfiprintf_r+0x34>
 800c0d0:	692b      	ldr	r3, [r5, #16]
 800c0d2:	b99b      	cbnz	r3, 800c0fc <_vfiprintf_r+0x5c>
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	f000 f938 	bl	800c34c <__swsetup_r>
 800c0dc:	b170      	cbz	r0, 800c0fc <_vfiprintf_r+0x5c>
 800c0de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0e0:	07dc      	lsls	r4, r3, #31
 800c0e2:	d504      	bpl.n	800c0ee <_vfiprintf_r+0x4e>
 800c0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e8:	b01d      	add	sp, #116	@ 0x74
 800c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ee:	89ab      	ldrh	r3, [r5, #12]
 800c0f0:	0598      	lsls	r0, r3, #22
 800c0f2:	d4f7      	bmi.n	800c0e4 <_vfiprintf_r+0x44>
 800c0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0f6:	f7fe f9fb 	bl	800a4f0 <__retarget_lock_release_recursive>
 800c0fa:	e7f3      	b.n	800c0e4 <_vfiprintf_r+0x44>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c100:	2320      	movs	r3, #32
 800c102:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c106:	f8cd 800c 	str.w	r8, [sp, #12]
 800c10a:	2330      	movs	r3, #48	@ 0x30
 800c10c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c2bc <_vfiprintf_r+0x21c>
 800c110:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c114:	f04f 0901 	mov.w	r9, #1
 800c118:	4623      	mov	r3, r4
 800c11a:	469a      	mov	sl, r3
 800c11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c120:	b10a      	cbz	r2, 800c126 <_vfiprintf_r+0x86>
 800c122:	2a25      	cmp	r2, #37	@ 0x25
 800c124:	d1f9      	bne.n	800c11a <_vfiprintf_r+0x7a>
 800c126:	ebba 0b04 	subs.w	fp, sl, r4
 800c12a:	d00b      	beq.n	800c144 <_vfiprintf_r+0xa4>
 800c12c:	465b      	mov	r3, fp
 800c12e:	4622      	mov	r2, r4
 800c130:	4629      	mov	r1, r5
 800c132:	4630      	mov	r0, r6
 800c134:	f7ff ffa2 	bl	800c07c <__sfputs_r>
 800c138:	3001      	adds	r0, #1
 800c13a:	f000 80a7 	beq.w	800c28c <_vfiprintf_r+0x1ec>
 800c13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c140:	445a      	add	r2, fp
 800c142:	9209      	str	r2, [sp, #36]	@ 0x24
 800c144:	f89a 3000 	ldrb.w	r3, [sl]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f000 809f 	beq.w	800c28c <_vfiprintf_r+0x1ec>
 800c14e:	2300      	movs	r3, #0
 800c150:	f04f 32ff 	mov.w	r2, #4294967295
 800c154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c158:	f10a 0a01 	add.w	sl, sl, #1
 800c15c:	9304      	str	r3, [sp, #16]
 800c15e:	9307      	str	r3, [sp, #28]
 800c160:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c164:	931a      	str	r3, [sp, #104]	@ 0x68
 800c166:	4654      	mov	r4, sl
 800c168:	2205      	movs	r2, #5
 800c16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c16e:	4853      	ldr	r0, [pc, #332]	@ (800c2bc <_vfiprintf_r+0x21c>)
 800c170:	f7f4 f85e 	bl	8000230 <memchr>
 800c174:	9a04      	ldr	r2, [sp, #16]
 800c176:	b9d8      	cbnz	r0, 800c1b0 <_vfiprintf_r+0x110>
 800c178:	06d1      	lsls	r1, r2, #27
 800c17a:	bf44      	itt	mi
 800c17c:	2320      	movmi	r3, #32
 800c17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c182:	0713      	lsls	r3, r2, #28
 800c184:	bf44      	itt	mi
 800c186:	232b      	movmi	r3, #43	@ 0x2b
 800c188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c18c:	f89a 3000 	ldrb.w	r3, [sl]
 800c190:	2b2a      	cmp	r3, #42	@ 0x2a
 800c192:	d015      	beq.n	800c1c0 <_vfiprintf_r+0x120>
 800c194:	9a07      	ldr	r2, [sp, #28]
 800c196:	4654      	mov	r4, sl
 800c198:	2000      	movs	r0, #0
 800c19a:	f04f 0c0a 	mov.w	ip, #10
 800c19e:	4621      	mov	r1, r4
 800c1a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a4:	3b30      	subs	r3, #48	@ 0x30
 800c1a6:	2b09      	cmp	r3, #9
 800c1a8:	d94b      	bls.n	800c242 <_vfiprintf_r+0x1a2>
 800c1aa:	b1b0      	cbz	r0, 800c1da <_vfiprintf_r+0x13a>
 800c1ac:	9207      	str	r2, [sp, #28]
 800c1ae:	e014      	b.n	800c1da <_vfiprintf_r+0x13a>
 800c1b0:	eba0 0308 	sub.w	r3, r0, r8
 800c1b4:	fa09 f303 	lsl.w	r3, r9, r3
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	9304      	str	r3, [sp, #16]
 800c1bc:	46a2      	mov	sl, r4
 800c1be:	e7d2      	b.n	800c166 <_vfiprintf_r+0xc6>
 800c1c0:	9b03      	ldr	r3, [sp, #12]
 800c1c2:	1d19      	adds	r1, r3, #4
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	9103      	str	r1, [sp, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	bfbb      	ittet	lt
 800c1cc:	425b      	neglt	r3, r3
 800c1ce:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d2:	9307      	strge	r3, [sp, #28]
 800c1d4:	9307      	strlt	r3, [sp, #28]
 800c1d6:	bfb8      	it	lt
 800c1d8:	9204      	strlt	r2, [sp, #16]
 800c1da:	7823      	ldrb	r3, [r4, #0]
 800c1dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1de:	d10a      	bne.n	800c1f6 <_vfiprintf_r+0x156>
 800c1e0:	7863      	ldrb	r3, [r4, #1]
 800c1e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1e4:	d132      	bne.n	800c24c <_vfiprintf_r+0x1ac>
 800c1e6:	9b03      	ldr	r3, [sp, #12]
 800c1e8:	1d1a      	adds	r2, r3, #4
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	9203      	str	r2, [sp, #12]
 800c1ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1f2:	3402      	adds	r4, #2
 800c1f4:	9305      	str	r3, [sp, #20]
 800c1f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c2cc <_vfiprintf_r+0x22c>
 800c1fa:	7821      	ldrb	r1, [r4, #0]
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	4650      	mov	r0, sl
 800c200:	f7f4 f816 	bl	8000230 <memchr>
 800c204:	b138      	cbz	r0, 800c216 <_vfiprintf_r+0x176>
 800c206:	9b04      	ldr	r3, [sp, #16]
 800c208:	eba0 000a 	sub.w	r0, r0, sl
 800c20c:	2240      	movs	r2, #64	@ 0x40
 800c20e:	4082      	lsls	r2, r0
 800c210:	4313      	orrs	r3, r2
 800c212:	3401      	adds	r4, #1
 800c214:	9304      	str	r3, [sp, #16]
 800c216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c21a:	4829      	ldr	r0, [pc, #164]	@ (800c2c0 <_vfiprintf_r+0x220>)
 800c21c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c220:	2206      	movs	r2, #6
 800c222:	f7f4 f805 	bl	8000230 <memchr>
 800c226:	2800      	cmp	r0, #0
 800c228:	d03f      	beq.n	800c2aa <_vfiprintf_r+0x20a>
 800c22a:	4b26      	ldr	r3, [pc, #152]	@ (800c2c4 <_vfiprintf_r+0x224>)
 800c22c:	bb1b      	cbnz	r3, 800c276 <_vfiprintf_r+0x1d6>
 800c22e:	9b03      	ldr	r3, [sp, #12]
 800c230:	3307      	adds	r3, #7
 800c232:	f023 0307 	bic.w	r3, r3, #7
 800c236:	3308      	adds	r3, #8
 800c238:	9303      	str	r3, [sp, #12]
 800c23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c23c:	443b      	add	r3, r7
 800c23e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c240:	e76a      	b.n	800c118 <_vfiprintf_r+0x78>
 800c242:	fb0c 3202 	mla	r2, ip, r2, r3
 800c246:	460c      	mov	r4, r1
 800c248:	2001      	movs	r0, #1
 800c24a:	e7a8      	b.n	800c19e <_vfiprintf_r+0xfe>
 800c24c:	2300      	movs	r3, #0
 800c24e:	3401      	adds	r4, #1
 800c250:	9305      	str	r3, [sp, #20]
 800c252:	4619      	mov	r1, r3
 800c254:	f04f 0c0a 	mov.w	ip, #10
 800c258:	4620      	mov	r0, r4
 800c25a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c25e:	3a30      	subs	r2, #48	@ 0x30
 800c260:	2a09      	cmp	r2, #9
 800c262:	d903      	bls.n	800c26c <_vfiprintf_r+0x1cc>
 800c264:	2b00      	cmp	r3, #0
 800c266:	d0c6      	beq.n	800c1f6 <_vfiprintf_r+0x156>
 800c268:	9105      	str	r1, [sp, #20]
 800c26a:	e7c4      	b.n	800c1f6 <_vfiprintf_r+0x156>
 800c26c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c270:	4604      	mov	r4, r0
 800c272:	2301      	movs	r3, #1
 800c274:	e7f0      	b.n	800c258 <_vfiprintf_r+0x1b8>
 800c276:	ab03      	add	r3, sp, #12
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	462a      	mov	r2, r5
 800c27c:	4b12      	ldr	r3, [pc, #72]	@ (800c2c8 <_vfiprintf_r+0x228>)
 800c27e:	a904      	add	r1, sp, #16
 800c280:	4630      	mov	r0, r6
 800c282:	f7fd fbd9 	bl	8009a38 <_printf_float>
 800c286:	4607      	mov	r7, r0
 800c288:	1c78      	adds	r0, r7, #1
 800c28a:	d1d6      	bne.n	800c23a <_vfiprintf_r+0x19a>
 800c28c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c28e:	07d9      	lsls	r1, r3, #31
 800c290:	d405      	bmi.n	800c29e <_vfiprintf_r+0x1fe>
 800c292:	89ab      	ldrh	r3, [r5, #12]
 800c294:	059a      	lsls	r2, r3, #22
 800c296:	d402      	bmi.n	800c29e <_vfiprintf_r+0x1fe>
 800c298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c29a:	f7fe f929 	bl	800a4f0 <__retarget_lock_release_recursive>
 800c29e:	89ab      	ldrh	r3, [r5, #12]
 800c2a0:	065b      	lsls	r3, r3, #25
 800c2a2:	f53f af1f 	bmi.w	800c0e4 <_vfiprintf_r+0x44>
 800c2a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2a8:	e71e      	b.n	800c0e8 <_vfiprintf_r+0x48>
 800c2aa:	ab03      	add	r3, sp, #12
 800c2ac:	9300      	str	r3, [sp, #0]
 800c2ae:	462a      	mov	r2, r5
 800c2b0:	4b05      	ldr	r3, [pc, #20]	@ (800c2c8 <_vfiprintf_r+0x228>)
 800c2b2:	a904      	add	r1, sp, #16
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f7fd fe57 	bl	8009f68 <_printf_i>
 800c2ba:	e7e4      	b.n	800c286 <_vfiprintf_r+0x1e6>
 800c2bc:	080114b8 	.word	0x080114b8
 800c2c0:	080114c2 	.word	0x080114c2
 800c2c4:	08009a39 	.word	0x08009a39
 800c2c8:	0800c07d 	.word	0x0800c07d
 800c2cc:	080114be 	.word	0x080114be

0800c2d0 <__swbuf_r>:
 800c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d2:	460e      	mov	r6, r1
 800c2d4:	4614      	mov	r4, r2
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	b118      	cbz	r0, 800c2e2 <__swbuf_r+0x12>
 800c2da:	6a03      	ldr	r3, [r0, #32]
 800c2dc:	b90b      	cbnz	r3, 800c2e2 <__swbuf_r+0x12>
 800c2de:	f7fd ffef 	bl	800a2c0 <__sinit>
 800c2e2:	69a3      	ldr	r3, [r4, #24]
 800c2e4:	60a3      	str	r3, [r4, #8]
 800c2e6:	89a3      	ldrh	r3, [r4, #12]
 800c2e8:	071a      	lsls	r2, r3, #28
 800c2ea:	d501      	bpl.n	800c2f0 <__swbuf_r+0x20>
 800c2ec:	6923      	ldr	r3, [r4, #16]
 800c2ee:	b943      	cbnz	r3, 800c302 <__swbuf_r+0x32>
 800c2f0:	4621      	mov	r1, r4
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	f000 f82a 	bl	800c34c <__swsetup_r>
 800c2f8:	b118      	cbz	r0, 800c302 <__swbuf_r+0x32>
 800c2fa:	f04f 37ff 	mov.w	r7, #4294967295
 800c2fe:	4638      	mov	r0, r7
 800c300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c302:	6823      	ldr	r3, [r4, #0]
 800c304:	6922      	ldr	r2, [r4, #16]
 800c306:	1a98      	subs	r0, r3, r2
 800c308:	6963      	ldr	r3, [r4, #20]
 800c30a:	b2f6      	uxtb	r6, r6
 800c30c:	4283      	cmp	r3, r0
 800c30e:	4637      	mov	r7, r6
 800c310:	dc05      	bgt.n	800c31e <__swbuf_r+0x4e>
 800c312:	4621      	mov	r1, r4
 800c314:	4628      	mov	r0, r5
 800c316:	f7ff fd99 	bl	800be4c <_fflush_r>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d1ed      	bne.n	800c2fa <__swbuf_r+0x2a>
 800c31e:	68a3      	ldr	r3, [r4, #8]
 800c320:	3b01      	subs	r3, #1
 800c322:	60a3      	str	r3, [r4, #8]
 800c324:	6823      	ldr	r3, [r4, #0]
 800c326:	1c5a      	adds	r2, r3, #1
 800c328:	6022      	str	r2, [r4, #0]
 800c32a:	701e      	strb	r6, [r3, #0]
 800c32c:	6962      	ldr	r2, [r4, #20]
 800c32e:	1c43      	adds	r3, r0, #1
 800c330:	429a      	cmp	r2, r3
 800c332:	d004      	beq.n	800c33e <__swbuf_r+0x6e>
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	07db      	lsls	r3, r3, #31
 800c338:	d5e1      	bpl.n	800c2fe <__swbuf_r+0x2e>
 800c33a:	2e0a      	cmp	r6, #10
 800c33c:	d1df      	bne.n	800c2fe <__swbuf_r+0x2e>
 800c33e:	4621      	mov	r1, r4
 800c340:	4628      	mov	r0, r5
 800c342:	f7ff fd83 	bl	800be4c <_fflush_r>
 800c346:	2800      	cmp	r0, #0
 800c348:	d0d9      	beq.n	800c2fe <__swbuf_r+0x2e>
 800c34a:	e7d6      	b.n	800c2fa <__swbuf_r+0x2a>

0800c34c <__swsetup_r>:
 800c34c:	b538      	push	{r3, r4, r5, lr}
 800c34e:	4b29      	ldr	r3, [pc, #164]	@ (800c3f4 <__swsetup_r+0xa8>)
 800c350:	4605      	mov	r5, r0
 800c352:	6818      	ldr	r0, [r3, #0]
 800c354:	460c      	mov	r4, r1
 800c356:	b118      	cbz	r0, 800c360 <__swsetup_r+0x14>
 800c358:	6a03      	ldr	r3, [r0, #32]
 800c35a:	b90b      	cbnz	r3, 800c360 <__swsetup_r+0x14>
 800c35c:	f7fd ffb0 	bl	800a2c0 <__sinit>
 800c360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c364:	0719      	lsls	r1, r3, #28
 800c366:	d422      	bmi.n	800c3ae <__swsetup_r+0x62>
 800c368:	06da      	lsls	r2, r3, #27
 800c36a:	d407      	bmi.n	800c37c <__swsetup_r+0x30>
 800c36c:	2209      	movs	r2, #9
 800c36e:	602a      	str	r2, [r5, #0]
 800c370:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c374:	81a3      	strh	r3, [r4, #12]
 800c376:	f04f 30ff 	mov.w	r0, #4294967295
 800c37a:	e033      	b.n	800c3e4 <__swsetup_r+0x98>
 800c37c:	0758      	lsls	r0, r3, #29
 800c37e:	d512      	bpl.n	800c3a6 <__swsetup_r+0x5a>
 800c380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c382:	b141      	cbz	r1, 800c396 <__swsetup_r+0x4a>
 800c384:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c388:	4299      	cmp	r1, r3
 800c38a:	d002      	beq.n	800c392 <__swsetup_r+0x46>
 800c38c:	4628      	mov	r0, r5
 800c38e:	f7fe feff 	bl	800b190 <_free_r>
 800c392:	2300      	movs	r3, #0
 800c394:	6363      	str	r3, [r4, #52]	@ 0x34
 800c396:	89a3      	ldrh	r3, [r4, #12]
 800c398:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c39c:	81a3      	strh	r3, [r4, #12]
 800c39e:	2300      	movs	r3, #0
 800c3a0:	6063      	str	r3, [r4, #4]
 800c3a2:	6923      	ldr	r3, [r4, #16]
 800c3a4:	6023      	str	r3, [r4, #0]
 800c3a6:	89a3      	ldrh	r3, [r4, #12]
 800c3a8:	f043 0308 	orr.w	r3, r3, #8
 800c3ac:	81a3      	strh	r3, [r4, #12]
 800c3ae:	6923      	ldr	r3, [r4, #16]
 800c3b0:	b94b      	cbnz	r3, 800c3c6 <__swsetup_r+0x7a>
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c3b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3bc:	d003      	beq.n	800c3c6 <__swsetup_r+0x7a>
 800c3be:	4621      	mov	r1, r4
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	f000 f883 	bl	800c4cc <__smakebuf_r>
 800c3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ca:	f013 0201 	ands.w	r2, r3, #1
 800c3ce:	d00a      	beq.n	800c3e6 <__swsetup_r+0x9a>
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	60a2      	str	r2, [r4, #8]
 800c3d4:	6962      	ldr	r2, [r4, #20]
 800c3d6:	4252      	negs	r2, r2
 800c3d8:	61a2      	str	r2, [r4, #24]
 800c3da:	6922      	ldr	r2, [r4, #16]
 800c3dc:	b942      	cbnz	r2, 800c3f0 <__swsetup_r+0xa4>
 800c3de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c3e2:	d1c5      	bne.n	800c370 <__swsetup_r+0x24>
 800c3e4:	bd38      	pop	{r3, r4, r5, pc}
 800c3e6:	0799      	lsls	r1, r3, #30
 800c3e8:	bf58      	it	pl
 800c3ea:	6962      	ldrpl	r2, [r4, #20]
 800c3ec:	60a2      	str	r2, [r4, #8]
 800c3ee:	e7f4      	b.n	800c3da <__swsetup_r+0x8e>
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	e7f7      	b.n	800c3e4 <__swsetup_r+0x98>
 800c3f4:	20003618 	.word	0x20003618

0800c3f8 <_raise_r>:
 800c3f8:	291f      	cmp	r1, #31
 800c3fa:	b538      	push	{r3, r4, r5, lr}
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	460c      	mov	r4, r1
 800c400:	d904      	bls.n	800c40c <_raise_r+0x14>
 800c402:	2316      	movs	r3, #22
 800c404:	6003      	str	r3, [r0, #0]
 800c406:	f04f 30ff 	mov.w	r0, #4294967295
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c40e:	b112      	cbz	r2, 800c416 <_raise_r+0x1e>
 800c410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c414:	b94b      	cbnz	r3, 800c42a <_raise_r+0x32>
 800c416:	4628      	mov	r0, r5
 800c418:	f000 f830 	bl	800c47c <_getpid_r>
 800c41c:	4622      	mov	r2, r4
 800c41e:	4601      	mov	r1, r0
 800c420:	4628      	mov	r0, r5
 800c422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c426:	f000 b817 	b.w	800c458 <_kill_r>
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d00a      	beq.n	800c444 <_raise_r+0x4c>
 800c42e:	1c59      	adds	r1, r3, #1
 800c430:	d103      	bne.n	800c43a <_raise_r+0x42>
 800c432:	2316      	movs	r3, #22
 800c434:	6003      	str	r3, [r0, #0]
 800c436:	2001      	movs	r0, #1
 800c438:	e7e7      	b.n	800c40a <_raise_r+0x12>
 800c43a:	2100      	movs	r1, #0
 800c43c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c440:	4620      	mov	r0, r4
 800c442:	4798      	blx	r3
 800c444:	2000      	movs	r0, #0
 800c446:	e7e0      	b.n	800c40a <_raise_r+0x12>

0800c448 <raise>:
 800c448:	4b02      	ldr	r3, [pc, #8]	@ (800c454 <raise+0xc>)
 800c44a:	4601      	mov	r1, r0
 800c44c:	6818      	ldr	r0, [r3, #0]
 800c44e:	f7ff bfd3 	b.w	800c3f8 <_raise_r>
 800c452:	bf00      	nop
 800c454:	20003618 	.word	0x20003618

0800c458 <_kill_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d07      	ldr	r5, [pc, #28]	@ (800c478 <_kill_r+0x20>)
 800c45c:	2300      	movs	r3, #0
 800c45e:	4604      	mov	r4, r0
 800c460:	4608      	mov	r0, r1
 800c462:	4611      	mov	r1, r2
 800c464:	602b      	str	r3, [r5, #0]
 800c466:	f7f6 fc32 	bl	8002cce <_kill>
 800c46a:	1c43      	adds	r3, r0, #1
 800c46c:	d102      	bne.n	800c474 <_kill_r+0x1c>
 800c46e:	682b      	ldr	r3, [r5, #0]
 800c470:	b103      	cbz	r3, 800c474 <_kill_r+0x1c>
 800c472:	6023      	str	r3, [r4, #0]
 800c474:	bd38      	pop	{r3, r4, r5, pc}
 800c476:	bf00      	nop
 800c478:	20005bf0 	.word	0x20005bf0

0800c47c <_getpid_r>:
 800c47c:	f7f6 bc1f 	b.w	8002cbe <_getpid>

0800c480 <__swhatbuf_r>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	460c      	mov	r4, r1
 800c484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c488:	2900      	cmp	r1, #0
 800c48a:	b096      	sub	sp, #88	@ 0x58
 800c48c:	4615      	mov	r5, r2
 800c48e:	461e      	mov	r6, r3
 800c490:	da0d      	bge.n	800c4ae <__swhatbuf_r+0x2e>
 800c492:	89a3      	ldrh	r3, [r4, #12]
 800c494:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c498:	f04f 0100 	mov.w	r1, #0
 800c49c:	bf14      	ite	ne
 800c49e:	2340      	movne	r3, #64	@ 0x40
 800c4a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	6031      	str	r1, [r6, #0]
 800c4a8:	602b      	str	r3, [r5, #0]
 800c4aa:	b016      	add	sp, #88	@ 0x58
 800c4ac:	bd70      	pop	{r4, r5, r6, pc}
 800c4ae:	466a      	mov	r2, sp
 800c4b0:	f000 f848 	bl	800c544 <_fstat_r>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	dbec      	blt.n	800c492 <__swhatbuf_r+0x12>
 800c4b8:	9901      	ldr	r1, [sp, #4]
 800c4ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c4be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c4c2:	4259      	negs	r1, r3
 800c4c4:	4159      	adcs	r1, r3
 800c4c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c4ca:	e7eb      	b.n	800c4a4 <__swhatbuf_r+0x24>

0800c4cc <__smakebuf_r>:
 800c4cc:	898b      	ldrh	r3, [r1, #12]
 800c4ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4d0:	079d      	lsls	r5, r3, #30
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	460c      	mov	r4, r1
 800c4d6:	d507      	bpl.n	800c4e8 <__smakebuf_r+0x1c>
 800c4d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	6163      	str	r3, [r4, #20]
 800c4e4:	b003      	add	sp, #12
 800c4e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e8:	ab01      	add	r3, sp, #4
 800c4ea:	466a      	mov	r2, sp
 800c4ec:	f7ff ffc8 	bl	800c480 <__swhatbuf_r>
 800c4f0:	9f00      	ldr	r7, [sp, #0]
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	4639      	mov	r1, r7
 800c4f6:	4630      	mov	r0, r6
 800c4f8:	f7fe febe 	bl	800b278 <_malloc_r>
 800c4fc:	b948      	cbnz	r0, 800c512 <__smakebuf_r+0x46>
 800c4fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c502:	059a      	lsls	r2, r3, #22
 800c504:	d4ee      	bmi.n	800c4e4 <__smakebuf_r+0x18>
 800c506:	f023 0303 	bic.w	r3, r3, #3
 800c50a:	f043 0302 	orr.w	r3, r3, #2
 800c50e:	81a3      	strh	r3, [r4, #12]
 800c510:	e7e2      	b.n	800c4d8 <__smakebuf_r+0xc>
 800c512:	89a3      	ldrh	r3, [r4, #12]
 800c514:	6020      	str	r0, [r4, #0]
 800c516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c51a:	81a3      	strh	r3, [r4, #12]
 800c51c:	9b01      	ldr	r3, [sp, #4]
 800c51e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c522:	b15b      	cbz	r3, 800c53c <__smakebuf_r+0x70>
 800c524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c528:	4630      	mov	r0, r6
 800c52a:	f000 f81d 	bl	800c568 <_isatty_r>
 800c52e:	b128      	cbz	r0, 800c53c <__smakebuf_r+0x70>
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	f023 0303 	bic.w	r3, r3, #3
 800c536:	f043 0301 	orr.w	r3, r3, #1
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	431d      	orrs	r5, r3
 800c540:	81a5      	strh	r5, [r4, #12]
 800c542:	e7cf      	b.n	800c4e4 <__smakebuf_r+0x18>

0800c544 <_fstat_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4d07      	ldr	r5, [pc, #28]	@ (800c564 <_fstat_r+0x20>)
 800c548:	2300      	movs	r3, #0
 800c54a:	4604      	mov	r4, r0
 800c54c:	4608      	mov	r0, r1
 800c54e:	4611      	mov	r1, r2
 800c550:	602b      	str	r3, [r5, #0]
 800c552:	f7f6 fc1c 	bl	8002d8e <_fstat>
 800c556:	1c43      	adds	r3, r0, #1
 800c558:	d102      	bne.n	800c560 <_fstat_r+0x1c>
 800c55a:	682b      	ldr	r3, [r5, #0]
 800c55c:	b103      	cbz	r3, 800c560 <_fstat_r+0x1c>
 800c55e:	6023      	str	r3, [r4, #0]
 800c560:	bd38      	pop	{r3, r4, r5, pc}
 800c562:	bf00      	nop
 800c564:	20005bf0 	.word	0x20005bf0

0800c568 <_isatty_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d06      	ldr	r5, [pc, #24]	@ (800c584 <_isatty_r+0x1c>)
 800c56c:	2300      	movs	r3, #0
 800c56e:	4604      	mov	r4, r0
 800c570:	4608      	mov	r0, r1
 800c572:	602b      	str	r3, [r5, #0]
 800c574:	f7f6 fc1b 	bl	8002dae <_isatty>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d102      	bne.n	800c582 <_isatty_r+0x1a>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	b103      	cbz	r3, 800c582 <_isatty_r+0x1a>
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	20005bf0 	.word	0x20005bf0

0800c588 <_init>:
 800c588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58a:	bf00      	nop
 800c58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c58e:	bc08      	pop	{r3}
 800c590:	469e      	mov	lr, r3
 800c592:	4770      	bx	lr

0800c594 <_fini>:
 800c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c596:	bf00      	nop
 800c598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c59a:	bc08      	pop	{r3}
 800c59c:	469e      	mov	lr, r3
 800c59e:	4770      	bx	lr
