
FL_MED_PT_MON_HMX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a08  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005048  08009bd8  08009bd8  0000abd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec20  0800ec20  000137d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec20  0800ec20  0000fc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec28  0800ec28  000137d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec28  0800ec28  0000fc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec2c  0800ec2c  0000fc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000037d4  20000000  0800ec30  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022f8  200037d4  08012404  000137d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005acc  08012404  00013acc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000137d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001351a  00000000  00000000  00013804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003587  00000000  00000000  00026d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  0002a2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da6  00000000  00000000  0002b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018080  00000000  00000000  0002c226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184d1  00000000  00000000  000442a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000853a2  00000000  00000000  0005c777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1b19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b8  00000000  00000000  000e1b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e7414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200037d4 	.word	0x200037d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009bc0 	.word	0x08009bc0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200037d8 	.word	0x200037d8
 800020c:	08009bc0 	.word	0x08009bc0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96a 	b.w	8000ef4 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	460c      	mov	r4, r1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d14e      	bne.n	8000ce2 <__udivmoddi4+0xaa>
 8000c44:	4694      	mov	ip, r2
 8000c46:	458c      	cmp	ip, r1
 8000c48:	4686      	mov	lr, r0
 8000c4a:	fab2 f282 	clz	r2, r2
 8000c4e:	d962      	bls.n	8000d16 <__udivmoddi4+0xde>
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0320 	rsb	r3, r2, #32
 8000c56:	4091      	lsls	r1, r2
 8000c58:	fa20 f303 	lsr.w	r3, r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	4319      	orrs	r1, r3
 8000c62:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6a:	fa1f f68c 	uxth.w	r6, ip
 8000c6e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb07 1114 	mls	r1, r7, r4, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb04 f106 	mul.w	r1, r4, r6
 8000c82:	4299      	cmp	r1, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x64>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c8e:	f080 8112 	bcs.w	8000eb6 <__udivmoddi4+0x27e>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 810f 	bls.w	8000eb6 <__udivmoddi4+0x27e>
 8000c98:	3c02      	subs	r4, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1a59      	subs	r1, r3, r1
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ca6:	fb07 1110 	mls	r1, r7, r0, r1
 8000caa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cae:	fb00 f606 	mul.w	r6, r0, r6
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	d90a      	bls.n	8000ccc <__udivmoddi4+0x94>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cbe:	f080 80fc 	bcs.w	8000eba <__udivmoddi4+0x282>
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	f240 80f9 	bls.w	8000eba <__udivmoddi4+0x282>
 8000cc8:	4463      	add	r3, ip
 8000cca:	3802      	subs	r0, #2
 8000ccc:	1b9b      	subs	r3, r3, r6
 8000cce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	b11d      	cbz	r5, 8000cde <__udivmoddi4+0xa6>
 8000cd6:	40d3      	lsrs	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	e9c5 3200 	strd	r3, r2, [r5]
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d905      	bls.n	8000cf2 <__udivmoddi4+0xba>
 8000ce6:	b10d      	cbz	r5, 8000cec <__udivmoddi4+0xb4>
 8000ce8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	4608      	mov	r0, r1
 8000cf0:	e7f5      	b.n	8000cde <__udivmoddi4+0xa6>
 8000cf2:	fab3 f183 	clz	r1, r3
 8000cf6:	2900      	cmp	r1, #0
 8000cf8:	d146      	bne.n	8000d88 <__udivmoddi4+0x150>
 8000cfa:	42a3      	cmp	r3, r4
 8000cfc:	d302      	bcc.n	8000d04 <__udivmoddi4+0xcc>
 8000cfe:	4290      	cmp	r0, r2
 8000d00:	f0c0 80f0 	bcc.w	8000ee4 <__udivmoddi4+0x2ac>
 8000d04:	1a86      	subs	r6, r0, r2
 8000d06:	eb64 0303 	sbc.w	r3, r4, r3
 8000d0a:	2001      	movs	r0, #1
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d0e6      	beq.n	8000cde <__udivmoddi4+0xa6>
 8000d10:	e9c5 6300 	strd	r6, r3, [r5]
 8000d14:	e7e3      	b.n	8000cde <__udivmoddi4+0xa6>
 8000d16:	2a00      	cmp	r2, #0
 8000d18:	f040 8090 	bne.w	8000e3c <__udivmoddi4+0x204>
 8000d1c:	eba1 040c 	sub.w	r4, r1, ip
 8000d20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d24:	fa1f f78c 	uxth.w	r7, ip
 8000d28:	2101      	movs	r1, #1
 8000d2a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d2e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d32:	fb08 4416 	mls	r4, r8, r6, r4
 8000d36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d3a:	fb07 f006 	mul.w	r0, r7, r6
 8000d3e:	4298      	cmp	r0, r3
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x11c>
 8000d42:	eb1c 0303 	adds.w	r3, ip, r3
 8000d46:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x11a>
 8000d4c:	4298      	cmp	r0, r3
 8000d4e:	f200 80cd 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d52:	4626      	mov	r6, r4
 8000d54:	1a1c      	subs	r4, r3, r0
 8000d56:	fa1f f38e 	uxth.w	r3, lr
 8000d5a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d5e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d66:	fb00 f707 	mul.w	r7, r0, r7
 8000d6a:	429f      	cmp	r7, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x148>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x146>
 8000d78:	429f      	cmp	r7, r3
 8000d7a:	f200 80b0 	bhi.w	8000ede <__udivmoddi4+0x2a6>
 8000d7e:	4620      	mov	r0, r4
 8000d80:	1bdb      	subs	r3, r3, r7
 8000d82:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d86:	e7a5      	b.n	8000cd4 <__udivmoddi4+0x9c>
 8000d88:	f1c1 0620 	rsb	r6, r1, #32
 8000d8c:	408b      	lsls	r3, r1
 8000d8e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d92:	431f      	orrs	r7, r3
 8000d94:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d98:	fa04 f301 	lsl.w	r3, r4, r1
 8000d9c:	ea43 030c 	orr.w	r3, r3, ip
 8000da0:	40f4      	lsrs	r4, r6
 8000da2:	fa00 f801 	lsl.w	r8, r0, r1
 8000da6:	0c38      	lsrs	r0, r7, #16
 8000da8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dac:	fbb4 fef0 	udiv	lr, r4, r0
 8000db0:	fa1f fc87 	uxth.w	ip, r7
 8000db4:	fb00 441e 	mls	r4, r0, lr, r4
 8000db8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dbc:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc0:	45a1      	cmp	r9, r4
 8000dc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000dc6:	d90a      	bls.n	8000dde <__udivmoddi4+0x1a6>
 8000dc8:	193c      	adds	r4, r7, r4
 8000dca:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dce:	f080 8084 	bcs.w	8000eda <__udivmoddi4+0x2a2>
 8000dd2:	45a1      	cmp	r9, r4
 8000dd4:	f240 8081 	bls.w	8000eda <__udivmoddi4+0x2a2>
 8000dd8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ddc:	443c      	add	r4, r7
 8000dde:	eba4 0409 	sub.w	r4, r4, r9
 8000de2:	fa1f f983 	uxth.w	r9, r3
 8000de6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dea:	fb00 4413 	mls	r4, r0, r3, r4
 8000dee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000df2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x1d2>
 8000dfa:	193c      	adds	r4, r7, r4
 8000dfc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e00:	d267      	bcs.n	8000ed2 <__udivmoddi4+0x29a>
 8000e02:	45a4      	cmp	ip, r4
 8000e04:	d965      	bls.n	8000ed2 <__udivmoddi4+0x29a>
 8000e06:	3b02      	subs	r3, #2
 8000e08:	443c      	add	r4, r7
 8000e0a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e0e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e12:	eba4 040c 	sub.w	r4, r4, ip
 8000e16:	429c      	cmp	r4, r3
 8000e18:	46ce      	mov	lr, r9
 8000e1a:	469c      	mov	ip, r3
 8000e1c:	d351      	bcc.n	8000ec2 <__udivmoddi4+0x28a>
 8000e1e:	d04e      	beq.n	8000ebe <__udivmoddi4+0x286>
 8000e20:	b155      	cbz	r5, 8000e38 <__udivmoddi4+0x200>
 8000e22:	ebb8 030e 	subs.w	r3, r8, lr
 8000e26:	eb64 040c 	sbc.w	r4, r4, ip
 8000e2a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e2e:	40cb      	lsrs	r3, r1
 8000e30:	431e      	orrs	r6, r3
 8000e32:	40cc      	lsrs	r4, r1
 8000e34:	e9c5 6400 	strd	r6, r4, [r5]
 8000e38:	2100      	movs	r1, #0
 8000e3a:	e750      	b.n	8000cde <__udivmoddi4+0xa6>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f103 	lsr.w	r1, r0, r3
 8000e44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e48:	fa24 f303 	lsr.w	r3, r4, r3
 8000e4c:	4094      	lsls	r4, r2
 8000e4e:	430c      	orrs	r4, r1
 8000e50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e54:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e58:	fa1f f78c 	uxth.w	r7, ip
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3110 	mls	r1, r8, r0, r3
 8000e64:	0c23      	lsrs	r3, r4, #16
 8000e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e6a:	fb00 f107 	mul.w	r1, r0, r7
 8000e6e:	4299      	cmp	r1, r3
 8000e70:	d908      	bls.n	8000e84 <__udivmoddi4+0x24c>
 8000e72:	eb1c 0303 	adds.w	r3, ip, r3
 8000e76:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e7a:	d22c      	bcs.n	8000ed6 <__udivmoddi4+0x29e>
 8000e7c:	4299      	cmp	r1, r3
 8000e7e:	d92a      	bls.n	8000ed6 <__udivmoddi4+0x29e>
 8000e80:	3802      	subs	r0, #2
 8000e82:	4463      	add	r3, ip
 8000e84:	1a5b      	subs	r3, r3, r1
 8000e86:	b2a4      	uxth	r4, r4
 8000e88:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e8c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e94:	fb01 f307 	mul.w	r3, r1, r7
 8000e98:	42a3      	cmp	r3, r4
 8000e9a:	d908      	bls.n	8000eae <__udivmoddi4+0x276>
 8000e9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ea4:	d213      	bcs.n	8000ece <__udivmoddi4+0x296>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d911      	bls.n	8000ece <__udivmoddi4+0x296>
 8000eaa:	3902      	subs	r1, #2
 8000eac:	4464      	add	r4, ip
 8000eae:	1ae4      	subs	r4, r4, r3
 8000eb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000eb4:	e739      	b.n	8000d2a <__udivmoddi4+0xf2>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	e6f0      	b.n	8000c9c <__udivmoddi4+0x64>
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e706      	b.n	8000ccc <__udivmoddi4+0x94>
 8000ebe:	45c8      	cmp	r8, r9
 8000ec0:	d2ae      	bcs.n	8000e20 <__udivmoddi4+0x1e8>
 8000ec2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ec6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eca:	3801      	subs	r0, #1
 8000ecc:	e7a8      	b.n	8000e20 <__udivmoddi4+0x1e8>
 8000ece:	4631      	mov	r1, r6
 8000ed0:	e7ed      	b.n	8000eae <__udivmoddi4+0x276>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	e799      	b.n	8000e0a <__udivmoddi4+0x1d2>
 8000ed6:	4630      	mov	r0, r6
 8000ed8:	e7d4      	b.n	8000e84 <__udivmoddi4+0x24c>
 8000eda:	46d6      	mov	lr, sl
 8000edc:	e77f      	b.n	8000dde <__udivmoddi4+0x1a6>
 8000ede:	4463      	add	r3, ip
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	e74d      	b.n	8000d80 <__udivmoddi4+0x148>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	4608      	mov	r0, r1
 8000eea:	e70f      	b.n	8000d0c <__udivmoddi4+0xd4>
 8000eec:	3e02      	subs	r6, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	e730      	b.n	8000d54 <__udivmoddi4+0x11c>
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <Display_app_init>:
char data[10];

uint8_t tx_buf[256 * 64 / 2];

void Display_app_init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	 Display_init();
 8000efc:	f004 fe4d 	bl	8005b9a <Display_init>
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <Set_Display_buffsize>:

void Set_Display_buffsize(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	 set_buffer_size(256, 64);
 8000f08:	2140      	movs	r1, #64	@ 0x40
 8000f0a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f0e:	f004 ff13 	bl	8005d38 <set_buffer_size>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <Display_refresh>:

void Display_refresh(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
	 Set_Display_buffsize();
 8000f1c:	f7ff fff2 	bl	8000f04 <Set_Display_buffsize>
	 fill_buffer(tx_buf, 0);
 8000f20:	2100      	movs	r1, #0
 8000f22:	4807      	ldr	r0, [pc, #28]	@ (8000f40 <Display_refresh+0x28>)
 8000f24:	f004 ff1c 	bl	8005d60 <fill_buffer>
	 send_buffer_to_OLED(tx_buf, 0, 0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4804      	ldr	r0, [pc, #16]	@ (8000f40 <Display_refresh+0x28>)
 8000f2e:	f005 f921 	bl	8006174 <send_buffer_to_OLED>
     //HAL_Delay(10);
     fill_buffer(tx_buf, 0);
 8000f32:	2100      	movs	r1, #0
 8000f34:	4802      	ldr	r0, [pc, #8]	@ (8000f40 <Display_refresh+0x28>)
 8000f36:	f004 ff13 	bl	8005d60 <fill_buffer>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20003844 	.word	0x20003844

08000f44 <Display_company_name>:
	send_buffer_to_OLED(tx_buf, 0, 0);
	HAL_Delay(5000);

}
void Display_company_name(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af02      	add	r7, sp, #8
	select_font(&FreeMonoBold12pt7b);
 8000f4a:	4814      	ldr	r0, [pc, #80]	@ (8000f9c <Display_company_name+0x58>)
 8000f4c:	f004 ffe2 	bl	8005f14 <select_font>
	draw_bitmap_4bpp(tx_buf, matrix, 0, 0, 32, 43);
 8000f50:	232b      	movs	r3, #43	@ 0x2b
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	2320      	movs	r3, #32
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4910      	ldr	r1, [pc, #64]	@ (8000fa0 <Display_company_name+0x5c>)
 8000f5e:	4811      	ldr	r0, [pc, #68]	@ (8000fa4 <Display_company_name+0x60>)
 8000f60:	f005 f8b4 	bl	80060cc <draw_bitmap_4bpp>
    draw_text(tx_buf, "HEALOMEX BIO", 32, 20, 15);
 8000f64:	230f      	movs	r3, #15
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2314      	movs	r3, #20
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	490e      	ldr	r1, [pc, #56]	@ (8000fa8 <Display_company_name+0x64>)
 8000f6e:	480d      	ldr	r0, [pc, #52]	@ (8000fa4 <Display_company_name+0x60>)
 8000f70:	f005 f878 	bl	8006064 <draw_text>
    draw_text(tx_buf, "SCIENCES PVT LTD", 32, 45, 15);
 8000f74:	230f      	movs	r3, #15
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	232d      	movs	r3, #45	@ 0x2d
 8000f7a:	2220      	movs	r2, #32
 8000f7c:	490b      	ldr	r1, [pc, #44]	@ (8000fac <Display_company_name+0x68>)
 8000f7e:	4809      	ldr	r0, [pc, #36]	@ (8000fa4 <Display_company_name+0x60>)
 8000f80:	f005 f870 	bl	8006064 <draw_text>
    send_buffer_to_OLED(tx_buf, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	4806      	ldr	r0, [pc, #24]	@ (8000fa4 <Display_company_name+0x60>)
 8000f8a:	f005 f8f3 	bl	8006174 <send_buffer_to_OLED>
	HAL_Delay(5000);
 8000f8e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f92:	f000 fed3 	bl	8001d3c <HAL_Delay>

}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	0800a680 	.word	0x0800a680
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	20003844 	.word	0x20003844
 8000fa8:	08009bd8 	.word	0x08009bd8
 8000fac:	08009be8 	.word	0x08009be8

08000fb0 <Display_contct_num>:
void Display_contct_num(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af02      	add	r7, sp, #8
	select_font(&FreeMonoBold12pt7b);
 8000fb6:	480f      	ldr	r0, [pc, #60]	@ (8000ff4 <Display_contct_num+0x44>)
 8000fb8:	f004 ffac 	bl	8005f14 <select_font>
    draw_text(tx_buf, "CONTACT", 10, 20, 15);
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2314      	movs	r3, #20
 8000fc2:	220a      	movs	r2, #10
 8000fc4:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <Display_contct_num+0x48>)
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fc8:	f005 f84c 	bl	8006064 <draw_text>
	draw_text(tx_buf, "+91 9603966993", 10, 45, 15);
 8000fcc:	230f      	movs	r3, #15
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	232d      	movs	r3, #45	@ 0x2d
 8000fd2:	220a      	movs	r2, #10
 8000fd4:	490a      	ldr	r1, [pc, #40]	@ (8001000 <Display_contct_num+0x50>)
 8000fd6:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fd8:	f005 f844 	bl	8006064 <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4806      	ldr	r0, [pc, #24]	@ (8000ffc <Display_contct_num+0x4c>)
 8000fe2:	f005 f8c7 	bl	8006174 <send_buffer_to_OLED>
    HAL_Delay(2000);
 8000fe6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000fea:	f000 fea7 	bl	8001d3c <HAL_Delay>
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0800a680 	.word	0x0800a680
 8000ff8:	08009bfc 	.word	0x08009bfc
 8000ffc:	20003844 	.word	0x20003844
 8001000:	08009c04 	.word	0x08009c04

08001004 <Display_Managmnt_sys>:
void Display_Managmnt_sys(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af02      	add	r7, sp, #8
	select_font(&FreeMono9pt7b);
 800100a:	481b      	ldr	r0, [pc, #108]	@ (8001078 <Display_Managmnt_sys+0x74>)
 800100c:	f004 ff82 	bl	8005f14 <select_font>
	draw_text(tx_buf, "TEMPERATURE", 10, 20, 15);
 8001010:	230f      	movs	r3, #15
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2314      	movs	r3, #20
 8001016:	220a      	movs	r2, #10
 8001018:	4918      	ldr	r1, [pc, #96]	@ (800107c <Display_Managmnt_sys+0x78>)
 800101a:	4819      	ldr	r0, [pc, #100]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 800101c:	f005 f822 	bl	8006064 <draw_text>
	draw_bitmap_4bpp(tx_buf, p_warm, 200, 10, 40, 42);
 8001020:	232a      	movs	r3, #42	@ 0x2a
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	2328      	movs	r3, #40	@ 0x28
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	230a      	movs	r3, #10
 800102a:	22c8      	movs	r2, #200	@ 0xc8
 800102c:	4915      	ldr	r1, [pc, #84]	@ (8001084 <Display_Managmnt_sys+0x80>)
 800102e:	4814      	ldr	r0, [pc, #80]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001030:	f005 f84c 	bl	80060cc <draw_bitmap_4bpp>
	select_font(&Font5x7FixedMono);
 8001034:	4814      	ldr	r0, [pc, #80]	@ (8001088 <Display_Managmnt_sys+0x84>)
 8001036:	f004 ff6d 	bl	8005f14 <select_font>
	draw_text(tx_buf, "HMX-V01", 150, 20, 15);
 800103a:	230f      	movs	r3, #15
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2314      	movs	r3, #20
 8001040:	2296      	movs	r2, #150	@ 0x96
 8001042:	4912      	ldr	r1, [pc, #72]	@ (800108c <Display_Managmnt_sys+0x88>)
 8001044:	480e      	ldr	r0, [pc, #56]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001046:	f005 f80d 	bl	8006064 <draw_text>
	select_font(&FreeMono9pt7b);
 800104a:	480b      	ldr	r0, [pc, #44]	@ (8001078 <Display_Managmnt_sys+0x74>)
 800104c:	f004 ff62 	bl	8005f14 <select_font>
	draw_text(tx_buf, "MANAGEMENT SYSTEM", 10, 45, 15);
 8001050:	230f      	movs	r3, #15
 8001052:	9300      	str	r3, [sp, #0]
 8001054:	232d      	movs	r3, #45	@ 0x2d
 8001056:	220a      	movs	r2, #10
 8001058:	490d      	ldr	r1, [pc, #52]	@ (8001090 <Display_Managmnt_sys+0x8c>)
 800105a:	4809      	ldr	r0, [pc, #36]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 800105c:	f005 f802 	bl	8006064 <draw_text>
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	4806      	ldr	r0, [pc, #24]	@ (8001080 <Display_Managmnt_sys+0x7c>)
 8001066:	f005 f885 	bl	8006174 <send_buffer_to_OLED>
	HAL_Delay(5000);
 800106a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800106e:	f000 fe65 	bl	8001d3c <HAL_Delay>
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	0800b15c 	.word	0x0800b15c
 800107c:	08009c14 	.word	0x08009c14
 8001080:	20003844 	.word	0x20003844
 8001084:	200032b0 	.word	0x200032b0
 8001088:	0800ab08 	.word	0x0800ab08
 800108c:	08009c20 	.word	0x08009c20
 8001090:	08009c28 	.word	0x08009c28

08001094 <Display_curr_temp>:

void Display_curr_temp(void)
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af02      	add	r7, sp, #8
	select_font(&Font5x7FixedMono);
 800109a:	48bd      	ldr	r0, [pc, #756]	@ (8001390 <Display_curr_temp+0x2fc>)
 800109c:	f004 ff3a 	bl	8005f14 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80010a0:	230f      	movs	r3, #15
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	230a      	movs	r3, #10
 80010a6:	220a      	movs	r2, #10
 80010a8:	49ba      	ldr	r1, [pc, #744]	@ (8001394 <Display_curr_temp+0x300>)
 80010aa:	48bb      	ldr	r0, [pc, #748]	@ (8001398 <Display_curr_temp+0x304>)
 80010ac:	f004 ffda 	bl	8006064 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80010b0:	48ba      	ldr	r0, [pc, #744]	@ (800139c <Display_curr_temp+0x308>)
 80010b2:	f004 ff2f 	bl	8005f14 <select_font>
    sprintf(data,"%.1f%.f",Temp[0],Temp[1]);
 80010b6:	4bba      	ldr	r3, [pc, #744]	@ (80013a0 <Display_curr_temp+0x30c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa74 	bl	80005a8 <__aeabi_f2d>
 80010c0:	4604      	mov	r4, r0
 80010c2:	460d      	mov	r5, r1
 80010c4:	4bb6      	ldr	r3, [pc, #728]	@ (80013a0 <Display_curr_temp+0x30c>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa6d 	bl	80005a8 <__aeabi_f2d>
 80010ce:	4602      	mov	r2, r0
 80010d0:	460b      	mov	r3, r1
 80010d2:	e9cd 2300 	strd	r2, r3, [sp]
 80010d6:	4622      	mov	r2, r4
 80010d8:	462b      	mov	r3, r5
 80010da:	49b2      	ldr	r1, [pc, #712]	@ (80013a4 <Display_curr_temp+0x310>)
 80010dc:	48b2      	ldr	r0, [pc, #712]	@ (80013a8 <Display_curr_temp+0x314>)
 80010de:	f006 fc41 	bl	8007964 <siprintf>
    draw_text(tx_buf, data, 5, 55, 15);
 80010e2:	230f      	movs	r3, #15
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2337      	movs	r3, #55	@ 0x37
 80010e8:	2205      	movs	r2, #5
 80010ea:	49af      	ldr	r1, [pc, #700]	@ (80013a8 <Display_curr_temp+0x314>)
 80010ec:	48aa      	ldr	r0, [pc, #680]	@ (8001398 <Display_curr_temp+0x304>)
 80010ee:	f004 ffb9 	bl	8006064 <draw_text>
    select_font(&DSEG7_Classic_Bold_16);
 80010f2:	48ae      	ldr	r0, [pc, #696]	@ (80013ac <Display_curr_temp+0x318>)
 80010f4:	f004 ff0e 	bl	8005f14 <select_font>
    draw_text(tx_buf, "C", 148, 55, 15);
 80010f8:	230f      	movs	r3, #15
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	2337      	movs	r3, #55	@ 0x37
 80010fe:	2294      	movs	r2, #148	@ 0x94
 8001100:	49ab      	ldr	r1, [pc, #684]	@ (80013b0 <Display_curr_temp+0x31c>)
 8001102:	48a5      	ldr	r0, [pc, #660]	@ (8001398 <Display_curr_temp+0x304>)
 8001104:	f004 ffae 	bl	8006064 <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_off, 200, 0, 40, 42);
	draw_bitmap_4bpp(tx_buf, fan_1gif,160,0, 64, 64);
 8001108:	2340      	movs	r3, #64	@ 0x40
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	2340      	movs	r3, #64	@ 0x40
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	2300      	movs	r3, #0
 8001112:	22a0      	movs	r2, #160	@ 0xa0
 8001114:	49a7      	ldr	r1, [pc, #668]	@ (80013b4 <Display_curr_temp+0x320>)
 8001116:	48a0      	ldr	r0, [pc, #640]	@ (8001398 <Display_curr_temp+0x304>)
 8001118:	f004 ffd8 	bl	80060cc <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 180, 0, 16, 16);
	send_buffer_to_OLED(tx_buf, 0, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2100      	movs	r1, #0
 8001120:	489d      	ldr	r0, [pc, #628]	@ (8001398 <Display_curr_temp+0x304>)
 8001122:	f005 f827 	bl	8006174 <send_buffer_to_OLED>
//	HAL_Delay(2000);
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001126:	2300      	movs	r3, #0
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	2340      	movs	r3, #64	@ 0x40
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001132:	2200      	movs	r2, #0
 8001134:	2100      	movs	r1, #0
 8001136:	4898      	ldr	r0, [pc, #608]	@ (8001398 <Display_curr_temp+0x304>)
 8001138:	f004 febe 	bl	8005eb8 <draw_rect_filled>
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 800113c:	4894      	ldr	r0, [pc, #592]	@ (8001390 <Display_curr_temp+0x2fc>)
 800113e:	f004 fee9 	bl	8005f14 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 8001142:	230f      	movs	r3, #15
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	230a      	movs	r3, #10
 8001148:	220a      	movs	r2, #10
 800114a:	4992      	ldr	r1, [pc, #584]	@ (8001394 <Display_curr_temp+0x300>)
 800114c:	4892      	ldr	r0, [pc, #584]	@ (8001398 <Display_curr_temp+0x304>)
 800114e:	f004 ff89 	bl	8006064 <draw_text>
	select_font(&Seven_Segment32pt7b);
 8001152:	4892      	ldr	r0, [pc, #584]	@ (800139c <Display_curr_temp+0x308>)
 8001154:	f004 fede 	bl	8005f14 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001158:	230f      	movs	r3, #15
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2337      	movs	r3, #55	@ 0x37
 800115e:	2205      	movs	r2, #5
 8001160:	4991      	ldr	r1, [pc, #580]	@ (80013a8 <Display_curr_temp+0x314>)
 8001162:	488d      	ldr	r0, [pc, #564]	@ (8001398 <Display_curr_temp+0x304>)
 8001164:	f004 ff7e 	bl	8006064 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 8001168:	4890      	ldr	r0, [pc, #576]	@ (80013ac <Display_curr_temp+0x318>)
 800116a:	f004 fed3 	bl	8005f14 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 800116e:	230f      	movs	r3, #15
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	2337      	movs	r3, #55	@ 0x37
 8001174:	2294      	movs	r2, #148	@ 0x94
 8001176:	498e      	ldr	r1, [pc, #568]	@ (80013b0 <Display_curr_temp+0x31c>)
 8001178:	4887      	ldr	r0, [pc, #540]	@ (8001398 <Display_curr_temp+0x304>)
 800117a:	f004 ff73 	bl	8006064 <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_alert, 200, 0, 40, 42);
	draw_bitmap_4bpp(tx_buf, fan_2gif, 160, 0, 64, 64);
 800117e:	2340      	movs	r3, #64	@ 0x40
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	2340      	movs	r3, #64	@ 0x40
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2300      	movs	r3, #0
 8001188:	22a0      	movs	r2, #160	@ 0xa0
 800118a:	498b      	ldr	r1, [pc, #556]	@ (80013b8 <Display_curr_temp+0x324>)
 800118c:	4882      	ldr	r0, [pc, #520]	@ (8001398 <Display_curr_temp+0x304>)
 800118e:	f004 ff9d 	bl	80060cc <draw_bitmap_4bpp>
//	draw_bitmap_4bpp(tx_buf, notify, 185, 0, 16, 16);
	send_buffer_to_OLED(tx_buf, 0, 0);
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	4880      	ldr	r0, [pc, #512]	@ (8001398 <Display_curr_temp+0x304>)
 8001198:	f004 ffec 	bl	8006174 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 800119c:	2300      	movs	r3, #0
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2340      	movs	r3, #64	@ 0x40
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	487a      	ldr	r0, [pc, #488]	@ (8001398 <Display_curr_temp+0x304>)
 80011ae:	f004 fe83 	bl	8005eb8 <draw_rect_filled>
//	HAL_Delay(10);
//	Display_refresh();
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 80011b2:	4877      	ldr	r0, [pc, #476]	@ (8001390 <Display_curr_temp+0x2fc>)
 80011b4:	f004 feae 	bl	8005f14 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80011b8:	230f      	movs	r3, #15
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	230a      	movs	r3, #10
 80011be:	220a      	movs	r2, #10
 80011c0:	4974      	ldr	r1, [pc, #464]	@ (8001394 <Display_curr_temp+0x300>)
 80011c2:	4875      	ldr	r0, [pc, #468]	@ (8001398 <Display_curr_temp+0x304>)
 80011c4:	f004 ff4e 	bl	8006064 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80011c8:	4874      	ldr	r0, [pc, #464]	@ (800139c <Display_curr_temp+0x308>)
 80011ca:	f004 fea3 	bl	8005f14 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 80011ce:	230f      	movs	r3, #15
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2337      	movs	r3, #55	@ 0x37
 80011d4:	2205      	movs	r2, #5
 80011d6:	4974      	ldr	r1, [pc, #464]	@ (80013a8 <Display_curr_temp+0x314>)
 80011d8:	486f      	ldr	r0, [pc, #444]	@ (8001398 <Display_curr_temp+0x304>)
 80011da:	f004 ff43 	bl	8006064 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 80011de:	4873      	ldr	r0, [pc, #460]	@ (80013ac <Display_curr_temp+0x318>)
 80011e0:	f004 fe98 	bl	8005f14 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80011e4:	230f      	movs	r3, #15
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2337      	movs	r3, #55	@ 0x37
 80011ea:	2294      	movs	r2, #148	@ 0x94
 80011ec:	4970      	ldr	r1, [pc, #448]	@ (80013b0 <Display_curr_temp+0x31c>)
 80011ee:	486a      	ldr	r0, [pc, #424]	@ (8001398 <Display_curr_temp+0x304>)
 80011f0:	f004 ff38 	bl	8006064 <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_low, 200, 0, 40, 42);
	draw_bitmap_4bpp(tx_buf, fan_3gif, 160, 0, 64, 64);
 80011f4:	2340      	movs	r3, #64	@ 0x40
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2340      	movs	r3, #64	@ 0x40
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	22a0      	movs	r2, #160	@ 0xa0
 8001200:	496e      	ldr	r1, [pc, #440]	@ (80013bc <Display_curr_temp+0x328>)
 8001202:	4865      	ldr	r0, [pc, #404]	@ (8001398 <Display_curr_temp+0x304>)
 8001204:	f004 ff62 	bl	80060cc <draw_bitmap_4bpp>
    send_buffer_to_OLED(tx_buf, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	4862      	ldr	r0, [pc, #392]	@ (8001398 <Display_curr_temp+0x304>)
 800120e:	f004 ffb1 	bl	8006174 <send_buffer_to_OLED>
    draw_rect_filled(tx_buf,0,0,256,64,0);
 8001212:	2300      	movs	r3, #0
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2340      	movs	r3, #64	@ 0x40
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800121e:	2200      	movs	r2, #0
 8001220:	2100      	movs	r1, #0
 8001222:	485d      	ldr	r0, [pc, #372]	@ (8001398 <Display_curr_temp+0x304>)
 8001224:	f004 fe48 	bl	8005eb8 <draw_rect_filled>
//    HAL_Delay(10);
//    Display_refresh();
//    draw_text(tx_buf, "TEMP:", 10, 20, 15);
    select_font(&Font5x7FixedMono);
 8001228:	4859      	ldr	r0, [pc, #356]	@ (8001390 <Display_curr_temp+0x2fc>)
 800122a:	f004 fe73 	bl	8005f14 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800122e:	230f      	movs	r3, #15
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	230a      	movs	r3, #10
 8001234:	220a      	movs	r2, #10
 8001236:	4957      	ldr	r1, [pc, #348]	@ (8001394 <Display_curr_temp+0x300>)
 8001238:	4857      	ldr	r0, [pc, #348]	@ (8001398 <Display_curr_temp+0x304>)
 800123a:	f004 ff13 	bl	8006064 <draw_text>
	select_font(&Seven_Segment32pt7b);
 800123e:	4857      	ldr	r0, [pc, #348]	@ (800139c <Display_curr_temp+0x308>)
 8001240:	f004 fe68 	bl	8005f14 <select_font>
    draw_text(tx_buf, data, 5, 55, 15);
 8001244:	230f      	movs	r3, #15
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2337      	movs	r3, #55	@ 0x37
 800124a:	2205      	movs	r2, #5
 800124c:	4956      	ldr	r1, [pc, #344]	@ (80013a8 <Display_curr_temp+0x314>)
 800124e:	4852      	ldr	r0, [pc, #328]	@ (8001398 <Display_curr_temp+0x304>)
 8001250:	f004 ff08 	bl	8006064 <draw_text>
    select_font(&DSEG7_Classic_Bold_16);
 8001254:	4855      	ldr	r0, [pc, #340]	@ (80013ac <Display_curr_temp+0x318>)
 8001256:	f004 fe5d 	bl	8005f14 <select_font>
    draw_text(tx_buf, "C", 148, 55, 15);
 800125a:	230f      	movs	r3, #15
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2337      	movs	r3, #55	@ 0x37
 8001260:	2294      	movs	r2, #148	@ 0x94
 8001262:	4953      	ldr	r1, [pc, #332]	@ (80013b0 <Display_curr_temp+0x31c>)
 8001264:	484c      	ldr	r0, [pc, #304]	@ (8001398 <Display_curr_temp+0x304>)
 8001266:	f004 fefd 	bl	8006064 <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_mid, 200, 0, 40, 42);
	draw_bitmap_4bpp(tx_buf, fan_4gif, 160, 0, 64, 64);
 800126a:	2340      	movs	r3, #64	@ 0x40
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	2340      	movs	r3, #64	@ 0x40
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	2300      	movs	r3, #0
 8001274:	22a0      	movs	r2, #160	@ 0xa0
 8001276:	4952      	ldr	r1, [pc, #328]	@ (80013c0 <Display_curr_temp+0x32c>)
 8001278:	4847      	ldr	r0, [pc, #284]	@ (8001398 <Display_curr_temp+0x304>)
 800127a:	f004 ff27 	bl	80060cc <draw_bitmap_4bpp>
	send_buffer_to_OLED(tx_buf, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	4845      	ldr	r0, [pc, #276]	@ (8001398 <Display_curr_temp+0x304>)
 8001284:	f004 ff76 	bl	8006174 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001288:	2300      	movs	r3, #0
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	2340      	movs	r3, #64	@ 0x40
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001294:	2200      	movs	r2, #0
 8001296:	2100      	movs	r1, #0
 8001298:	483f      	ldr	r0, [pc, #252]	@ (8001398 <Display_curr_temp+0x304>)
 800129a:	f004 fe0d 	bl	8005eb8 <draw_rect_filled>
//	HAL_Delay(10);
//	Display_refresh();
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
	select_font(&Font5x7FixedMono);
 800129e:	483c      	ldr	r0, [pc, #240]	@ (8001390 <Display_curr_temp+0x2fc>)
 80012a0:	f004 fe38 	bl	8005f14 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 80012a4:	230f      	movs	r3, #15
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	230a      	movs	r3, #10
 80012aa:	220a      	movs	r2, #10
 80012ac:	4939      	ldr	r1, [pc, #228]	@ (8001394 <Display_curr_temp+0x300>)
 80012ae:	483a      	ldr	r0, [pc, #232]	@ (8001398 <Display_curr_temp+0x304>)
 80012b0:	f004 fed8 	bl	8006064 <draw_text>
	select_font(&Seven_Segment32pt7b);
 80012b4:	4839      	ldr	r0, [pc, #228]	@ (800139c <Display_curr_temp+0x308>)
 80012b6:	f004 fe2d 	bl	8005f14 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 80012ba:	230f      	movs	r3, #15
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	2337      	movs	r3, #55	@ 0x37
 80012c0:	2205      	movs	r2, #5
 80012c2:	4939      	ldr	r1, [pc, #228]	@ (80013a8 <Display_curr_temp+0x314>)
 80012c4:	4834      	ldr	r0, [pc, #208]	@ (8001398 <Display_curr_temp+0x304>)
 80012c6:	f004 fecd 	bl	8006064 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 80012ca:	4838      	ldr	r0, [pc, #224]	@ (80013ac <Display_curr_temp+0x318>)
 80012cc:	f004 fe22 	bl	8005f14 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 80012d0:	230f      	movs	r3, #15
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2337      	movs	r3, #55	@ 0x37
 80012d6:	2294      	movs	r2, #148	@ 0x94
 80012d8:	4935      	ldr	r1, [pc, #212]	@ (80013b0 <Display_curr_temp+0x31c>)
 80012da:	482f      	ldr	r0, [pc, #188]	@ (8001398 <Display_curr_temp+0x304>)
 80012dc:	f004 fec2 	bl	8006064 <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_high, 200, 0, 40, 42);
	draw_bitmap_4bpp(tx_buf, fan_5gif, 160, 0, 64, 64);
 80012e0:	2340      	movs	r3, #64	@ 0x40
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	2340      	movs	r3, #64	@ 0x40
 80012e6:	9300      	str	r3, [sp, #0]
 80012e8:	2300      	movs	r3, #0
 80012ea:	22a0      	movs	r2, #160	@ 0xa0
 80012ec:	4935      	ldr	r1, [pc, #212]	@ (80013c4 <Display_curr_temp+0x330>)
 80012ee:	482a      	ldr	r0, [pc, #168]	@ (8001398 <Display_curr_temp+0x304>)
 80012f0:	f004 feec 	bl	80060cc <draw_bitmap_4bpp>
	send_buffer_to_OLED(tx_buf, 0, 0);
 80012f4:	2200      	movs	r2, #0
 80012f6:	2100      	movs	r1, #0
 80012f8:	4827      	ldr	r0, [pc, #156]	@ (8001398 <Display_curr_temp+0x304>)
 80012fa:	f004 ff3b 	bl	8006174 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 80012fe:	2300      	movs	r3, #0
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2340      	movs	r3, #64	@ 0x40
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800130a:	2200      	movs	r2, #0
 800130c:	2100      	movs	r1, #0
 800130e:	4822      	ldr	r0, [pc, #136]	@ (8001398 <Display_curr_temp+0x304>)
 8001310:	f004 fdd2 	bl	8005eb8 <draw_rect_filled>
//	draw_text(tx_buf, "TEMP:", 10, 20, 15);
//	draw_text(tx_buf, data, 80, 20, 15);
//	draw_bitmap_4bpp(tx_buf, notify, 180, 0, 16, 16);
//	send_buffer_to_OLED(tx_buf, 0, 0);
//	HAL_Delay(1000);
	select_font(&Font5x7FixedMono);
 8001314:	481e      	ldr	r0, [pc, #120]	@ (8001390 <Display_curr_temp+0x2fc>)
 8001316:	f004 fdfd 	bl	8005f14 <select_font>
	draw_text(tx_buf, "TEMP", 10, 10, 15);
 800131a:	230f      	movs	r3, #15
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	230a      	movs	r3, #10
 8001320:	220a      	movs	r2, #10
 8001322:	491c      	ldr	r1, [pc, #112]	@ (8001394 <Display_curr_temp+0x300>)
 8001324:	481c      	ldr	r0, [pc, #112]	@ (8001398 <Display_curr_temp+0x304>)
 8001326:	f004 fe9d 	bl	8006064 <draw_text>
	select_font(&Seven_Segment32pt7b);
 800132a:	481c      	ldr	r0, [pc, #112]	@ (800139c <Display_curr_temp+0x308>)
 800132c:	f004 fdf2 	bl	8005f14 <select_font>
	draw_text(tx_buf, data, 5, 55, 15);
 8001330:	230f      	movs	r3, #15
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2337      	movs	r3, #55	@ 0x37
 8001336:	2205      	movs	r2, #5
 8001338:	491b      	ldr	r1, [pc, #108]	@ (80013a8 <Display_curr_temp+0x314>)
 800133a:	4817      	ldr	r0, [pc, #92]	@ (8001398 <Display_curr_temp+0x304>)
 800133c:	f004 fe92 	bl	8006064 <draw_text>
	select_font(&DSEG7_Classic_Bold_16);
 8001340:	481a      	ldr	r0, [pc, #104]	@ (80013ac <Display_curr_temp+0x318>)
 8001342:	f004 fde7 	bl	8005f14 <select_font>
	draw_text(tx_buf, "C", 148, 55, 15);
 8001346:	230f      	movs	r3, #15
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2337      	movs	r3, #55	@ 0x37
 800134c:	2294      	movs	r2, #148	@ 0x94
 800134e:	4918      	ldr	r1, [pc, #96]	@ (80013b0 <Display_curr_temp+0x31c>)
 8001350:	4811      	ldr	r0, [pc, #68]	@ (8001398 <Display_curr_temp+0x304>)
 8001352:	f004 fe87 	bl	8006064 <draw_text>
//	draw_bitmap_4bpp(tx_buf, fan_high, 200, 0, 40, 42);
	draw_bitmap_4bpp(tx_buf, fan_6gif, 160, 0, 64, 64);
 8001356:	2340      	movs	r3, #64	@ 0x40
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	2340      	movs	r3, #64	@ 0x40
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	22a0      	movs	r2, #160	@ 0xa0
 8001362:	4919      	ldr	r1, [pc, #100]	@ (80013c8 <Display_curr_temp+0x334>)
 8001364:	480c      	ldr	r0, [pc, #48]	@ (8001398 <Display_curr_temp+0x304>)
 8001366:	f004 feb1 	bl	80060cc <draw_bitmap_4bpp>
	send_buffer_to_OLED(tx_buf, 0, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2100      	movs	r1, #0
 800136e:	480a      	ldr	r0, [pc, #40]	@ (8001398 <Display_curr_temp+0x304>)
 8001370:	f004 ff00 	bl	8006174 <send_buffer_to_OLED>
	draw_rect_filled(tx_buf,0,0,256,64,0);
 8001374:	2300      	movs	r3, #0
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	2340      	movs	r3, #64	@ 0x40
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	4804      	ldr	r0, [pc, #16]	@ (8001398 <Display_curr_temp+0x304>)
 8001386:	f004 fd97 	bl	8005eb8 <draw_rect_filled>


}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	e01d      	b.n	80013cc <Display_curr_temp+0x338>
 8001390:	0800ab08 	.word	0x0800ab08
 8001394:	08009c3c 	.word	0x08009c3c
 8001398:	20003844 	.word	0x20003844
 800139c:	0800e884 	.word	0x0800e884
 80013a0:	20005934 	.word	0x20005934
 80013a4:	08009c44 	.word	0x08009c44
 80013a8:	20003838 	.word	0x20003838
 80013ac:	0800b97c 	.word	0x0800b97c
 80013b0:	08009c4c 	.word	0x08009c4c
 80013b4:	200002b0 	.word	0x200002b0
 80013b8:	20000ab0 	.word	0x20000ab0
 80013bc:	200012b0 	.word	0x200012b0
 80013c0:	20001ab0 	.word	0x20001ab0
 80013c4:	200022b0 	.word	0x200022b0
 80013c8:	20002ab0 	.word	0x20002ab0
 80013cc:	bdb0      	pop	{r4, r5, r7, pc}
 80013ce:	bf00      	nop

080013d0 <Gpio_Ex_init>:

void Gpio_Ex_init()
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	Ex_gpio_init();
 80013d4:	f005 f872 	bl	80064bc <Ex_gpio_init>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}

080013dc <RTC_init>:

}


void RTC_init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

MX_RTC_Init();
 80013e0:	f004 fae4 	bl	80059ac <MX_RTC_Init>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <MX_USART1_UART_Init>:
/* USER CODE END EV */



void MX_USART1_UART_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013ec:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 80013ee:	4a12      	ldr	r2, [pc, #72]	@ (8001438 <MX_USART1_UART_Init+0x50>)
 80013f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013f2:	4b10      	ldr	r3, [pc, #64]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 80013f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800140c:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 800140e:	220c      	movs	r2, #12
 8001410:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 800141a:	2200      	movs	r2, #0
 800141c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 800141e:	4805      	ldr	r0, [pc, #20]	@ (8001434 <MX_USART1_UART_Init+0x4c>)
 8001420:	f003 fb9e 	bl	8004b60 <HAL_HalfDuplex_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800142a:	f000 f9bb 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	200037f0 	.word	0x200037f0
 8001438:	40011000 	.word	0x40011000

0800143c <USART1_IRQHandler>:
/**
  * @brief This function handles Non maskable interrupt.
  */

void USART1_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	 owReadHandler();
 8001440:	f005 f904 	bl	800664c <owReadHandler>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <USART1_IRQHandler+0x14>)
 8001446:	f003 fbe3 	bl	8004c10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200037f0 	.word	0x200037f0

08001454 <MX_GPIO_Init>:
 */

#include "gpio.h"

void MX_GPIO_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
 8001468:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b43      	ldr	r3, [pc, #268]	@ (800157c <MX_GPIO_Init+0x128>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a42      	ldr	r2, [pc, #264]	@ (800157c <MX_GPIO_Init+0x128>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b40      	ldr	r3, [pc, #256]	@ (800157c <MX_GPIO_Init+0x128>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b3c      	ldr	r3, [pc, #240]	@ (800157c <MX_GPIO_Init+0x128>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a3b      	ldr	r2, [pc, #236]	@ (800157c <MX_GPIO_Init+0x128>)
 8001490:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b39      	ldr	r3, [pc, #228]	@ (800157c <MX_GPIO_Init+0x128>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
 80014a6:	4b35      	ldr	r3, [pc, #212]	@ (800157c <MX_GPIO_Init+0x128>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a34      	ldr	r2, [pc, #208]	@ (800157c <MX_GPIO_Init+0x128>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b32      	ldr	r3, [pc, #200]	@ (800157c <MX_GPIO_Init+0x128>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60bb      	str	r3, [r7, #8]
 80014bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	4b2e      	ldr	r3, [pc, #184]	@ (800157c <MX_GPIO_Init+0x128>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	4a2d      	ldr	r2, [pc, #180]	@ (800157c <MX_GPIO_Init+0x128>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ce:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <MX_GPIO_Init+0x128>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2130      	movs	r1, #48	@ 0x30
 80014de:	4828      	ldr	r0, [pc, #160]	@ (8001580 <MX_GPIO_Init+0x12c>)
 80014e0:	f000 ff68 	bl	80023b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2110      	movs	r1, #16
 80014e8:	4826      	ldr	r0, [pc, #152]	@ (8001584 <MX_GPIO_Init+0x130>)
 80014ea:	f000 ff63 	bl	80023b4 <HAL_GPIO_WritePin>
//  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
//


  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80014ee:	2330      	movs	r3, #48	@ 0x30
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 0314 	add.w	r3, r7, #20
 8001502:	4619      	mov	r1, r3
 8001504:	481e      	ldr	r0, [pc, #120]	@ (8001580 <MX_GPIO_Init+0x12c>)
 8001506:	f000 fde1 	bl	80020cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800150a:	f24f 0302 	movw	r3, #61442	@ 0xf002
 800150e:	617b      	str	r3, [r7, #20]
                            |GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001510:	2300      	movs	r3, #0
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001514:	2301      	movs	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	481a      	ldr	r0, [pc, #104]	@ (8001588 <MX_GPIO_Init+0x134>)
 8001520:	f000 fdd4 	bl	80020cc <HAL_GPIO_Init>

    /*Configure GPIO pin : PA11 */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001524:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152e:	2301      	movs	r3, #1
 8001530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4812      	ldr	r0, [pc, #72]	@ (8001584 <MX_GPIO_Init+0x130>)
 800153a:	f000 fdc7 	bl	80020cc <HAL_GPIO_Init>

    /*Configure GPIO pin : PC10 */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800153e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001548:	2301      	movs	r3, #1
 800154a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	480b      	ldr	r0, [pc, #44]	@ (8001580 <MX_GPIO_Init+0x12c>)
 8001554:	f000 fdba 	bl	80020cc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001558:	2310      	movs	r3, #16
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001560:	2301      	movs	r3, #1
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_GPIO_Init+0x130>)
 8001570:	f000 fdac 	bl	80020cc <HAL_GPIO_Init>

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	@ 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40020800 	.word	0x40020800
 8001584:	40020000 	.word	0x40020000
 8001588:	40020400 	.word	0x40020400

0800158c <MX_I2C1_Init>:
  * @param None
  * @retval None
  *
  */
void MX_I2C1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <MX_I2C1_Init+0x50>)
 8001592:	4a13      	ldr	r2, [pc, #76]	@ (80015e0 <MX_I2C1_Init+0x54>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_I2C1_Init+0x50>)
 8001598:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <MX_I2C1_Init+0x58>)
 800159a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	@ (80015dc <MX_I2C1_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b0:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015b6:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015bc:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_I2C1_Init+0x50>)
 80015ca:	f000 ff0d 	bl	80023e8 <HAL_I2C_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015d4:	f000 f8e6 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	200058c8 	.word	0x200058c8
 80015e0:	40005400 	.word	0x40005400
 80015e4:	000186a0 	.word	0x000186a0

080015e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08a      	sub	sp, #40	@ 0x28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a19      	ldr	r2, [pc, #100]	@ (800166c <HAL_I2C_MspInit+0x84>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d12b      	bne.n	8001662 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a17      	ldr	r2, [pc, #92]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]
 8001624:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001626:	23c0      	movs	r3, #192	@ 0xc0
 8001628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800162a:	2312      	movs	r3, #18
 800162c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001636:	2304      	movs	r3, #4
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	480c      	ldr	r0, [pc, #48]	@ (8001674 <HAL_I2C_MspInit+0x8c>)
 8001642:	f000 fd43 	bl	80020cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 8001650:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001654:	6413      	str	r3, [r2, #64]	@ 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_I2C_MspInit+0x88>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	@ 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40005400 	.word	0x40005400
 8001670:	40023800 	.word	0x40023800
 8001674:	40020400 	.word	0x40020400

08001678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800167c:	f000 faec 	bl	8001c58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001680:	f000 f824 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001684:	f7ff fee6 	bl	8001454 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001688:	f000 f892 	bl	80017b0 <MX_SPI1_Init>
  Display_app_init();
 800168c:	f7ff fc34 	bl	8000ef8 <Display_app_init>
  MX_USART1_UART_Init();
 8001690:	f7ff feaa 	bl	80013e8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001694:	f7ff ff7a 	bl	800158c <MX_I2C1_Init>
  Gpio_Ex_init();
 8001698:	f7ff fe9a 	bl	80013d0 <Gpio_Ex_init>
  //button_false_init();
  RTC_init();
 800169c:	f7ff fe9e 	bl	80013dc <RTC_init>


  /* USER CODE BEGIN 2 */
//  Display_refresh();
//  company_logo();
  Display_refresh();
 80016a0:	f7ff fc3a 	bl	8000f18 <Display_refresh>
  Display_company_name();
 80016a4:	f7ff fc4e 	bl	8000f44 <Display_company_name>
  Display_refresh();
 80016a8:	f7ff fc36 	bl	8000f18 <Display_refresh>
  Display_Managmnt_sys();
 80016ac:	f7ff fcaa 	bl	8001004 <Display_Managmnt_sys>
  Display_refresh();
 80016b0:	f7ff fc32 	bl	8000f18 <Display_refresh>
  Display_contct_num();
 80016b4:	f7ff fc7c 	bl	8000fb0 <Display_contct_num>
  Display_refresh();
 80016b8:	f7ff fc2e 	bl	8000f18 <Display_refresh>
  get_ROMid();
 80016bc:	f005 faf8 	bl	8006cb0 <get_ROMid>

  while (1)
  {
//	  Tempset_35();

	get_Temperature();
 80016c0:	f005 fbb4 	bl	8006e2c <get_Temperature>
//    HAL_Delay(10);
//    Display_refresh();
    Display_curr_temp();
 80016c4:	f7ff fce6 	bl	8001094 <Display_curr_temp>
	get_Temperature();
 80016c8:	bf00      	nop
 80016ca:	e7f9      	b.n	80016c0 <main+0x48>

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b094      	sub	sp, #80	@ 0x50
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	2234      	movs	r2, #52	@ 0x34
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f006 f9a5 	bl	8007a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	f107 0308 	add.w	r3, r7, #8
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	4b29      	ldr	r3, [pc, #164]	@ (800179c <SystemClock_Config+0xd0>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	4a28      	ldr	r2, [pc, #160]	@ (800179c <SystemClock_Config+0xd0>)
 80016fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001700:	4b26      	ldr	r3, [pc, #152]	@ (800179c <SystemClock_Config+0xd0>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800170c:	2300      	movs	r3, #0
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	4b23      	ldr	r3, [pc, #140]	@ (80017a0 <SystemClock_Config+0xd4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a22      	ldr	r2, [pc, #136]	@ (80017a0 <SystemClock_Config+0xd4>)
 8001716:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b20      	ldr	r3, [pc, #128]	@ (80017a0 <SystemClock_Config+0xd4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001728:	2309      	movs	r3, #9
 800172a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800172c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001730:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001732:	2301      	movs	r3, #1
 8001734:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001736:	2302      	movs	r3, #2
 8001738:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800173a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800173e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001740:	2304      	movs	r3, #4
 8001742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001744:	2332      	movs	r3, #50	@ 0x32
 8001746:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001748:	2302      	movs	r3, #2
 800174a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800174c:	2304      	movs	r3, #4
 800174e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001750:	2302      	movs	r3, #2
 8001752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	4618      	mov	r0, r3
 800175a:	f002 fa93 	bl	8003c84 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001764:	f000 f81e 	bl	80017a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	230f      	movs	r3, #15
 800176a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176c:	2302      	movs	r3, #2
 800176e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800177c:	f107 0308 	add.w	r3, r7, #8
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f001 ff82 	bl	800368c <HAL_RCC_ClockConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800178e:	f000 f809 	bl	80017a4 <Error_Handler>
  }
}
 8001792:	bf00      	nop
 8001794:	3750      	adds	r7, #80	@ 0x50
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a8:	b672      	cpsid	i
}
 80017aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <Error_Handler+0x8>

080017b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017b4:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017b6:	4a18      	ldr	r2, [pc, #96]	@ (8001818 <MX_SPI1_Init+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017ba:	4b16      	ldr	r3, [pc, #88]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017d0:	2202      	movs	r2, #2
 80017d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017e4:	2210      	movs	r2, #16
 80017e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ee:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 15;
 80017fa:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <MX_SPI1_Init+0x64>)
 80017fc:	220f      	movs	r2, #15
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	@ (8001814 <MX_SPI1_Init+0x64>)
 8001802:	f002 ff05 	bl	8004610 <HAL_SPI_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800180c:	f7ff ffca 	bl	80017a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20005844 	.word	0x20005844
 8001818:	40013000 	.word	0x40013000

0800181c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	@ 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a19      	ldr	r2, [pc, #100]	@ (80018a0 <HAL_SPI_MspInit+0x84>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d12b      	bne.n	8001896 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 8001848:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800184c:	6453      	str	r3, [r2, #68]	@ 0x44
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a10      	ldr	r2, [pc, #64]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <HAL_SPI_MspInit+0x88>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001876:	23a0      	movs	r3, #160	@ 0xa0
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001886:	2305      	movs	r3, #5
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <HAL_SPI_MspInit+0x8c>)
 8001892:	f000 fc1b 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3728      	adds	r7, #40	@ 0x28
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40013000 	.word	0x40013000
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000

080018ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	4a0f      	ldr	r2, [pc, #60]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_MspInit+0x4c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018ea:	2007      	movs	r0, #7
 80018ec:	f000 fb1a 	bl	8001f24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40023800 	.word	0x40023800

080018fc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
 8001914:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a0c      	ldr	r2, [pc, #48]	@ (800194c <HAL_RTC_MspInit+0x50>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d111      	bne.n	8001944 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001920:	2304      	movs	r3, #4
 8001922:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001924:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001928:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4618      	mov	r0, r3
 8001930:	f002 f8cc 	bl	8003acc <HAL_RCCEx_PeriphCLKConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800193a:	f7ff ff33 	bl	80017a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800193e:	4b04      	ldr	r3, [pc, #16]	@ (8001950 <HAL_RTC_MspInit+0x54>)
 8001940:	2201      	movs	r2, #1
 8001942:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40002800 	.word	0x40002800
 8001950:	42470e3c 	.word	0x42470e3c

08001954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	@ 0x28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a1d      	ldr	r2, [pc, #116]	@ (80019e8 <HAL_UART_MspInit+0x94>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d134      	bne.n	80019e0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ec <HAL_UART_MspInit+0x98>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800197e:	4a1b      	ldr	r2, [pc, #108]	@ (80019ec <HAL_UART_MspInit+0x98>)
 8001980:	f043 0310 	orr.w	r3, r3, #16
 8001984:	6453      	str	r3, [r2, #68]	@ 0x44
 8001986:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <HAL_UART_MspInit+0x98>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <HAL_UART_MspInit+0x98>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a14      	ldr	r2, [pc, #80]	@ (80019ec <HAL_UART_MspInit+0x98>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_UART_MspInit+0x98>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b4:	2312      	movs	r3, #18
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c0:	2307      	movs	r3, #7
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	4809      	ldr	r0, [pc, #36]	@ (80019f0 <HAL_UART_MspInit+0x9c>)
 80019cc:	f000 fb7e 	bl	80020cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	2025      	movs	r0, #37	@ 0x25
 80019d6:	f000 fab0 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019da:	2025      	movs	r0, #37	@ 0x25
 80019dc:	f000 fac9 	bl	8001f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80019e0:	bf00      	nop
 80019e2:	3728      	adds	r7, #40	@ 0x28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40011000 	.word	0x40011000
 80019ec:	40023800 	.word	0x40023800
 80019f0:	40020000 	.word	0x40020000

080019f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <NMI_Handler+0x4>

080019fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a00:	bf00      	nop
 8001a02:	e7fd      	b.n	8001a00 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	bf00      	nop
 8001a0a:	e7fd      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a10:	bf00      	nop
 8001a12:	e7fd      	b.n	8001a10 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4a:	f000 f957 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0
  return 1;
 8001a56:	2301      	movs	r3, #1
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <_kill>:

int _kill(int pid, int sig)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a6c:	f006 f830 	bl	8007ad0 <__errno>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2216      	movs	r2, #22
 8001a74:	601a      	str	r2, [r3, #0]
  return -1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_exit>:

void _exit (int status)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b082      	sub	sp, #8
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffe7 	bl	8001a62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a94:	bf00      	nop
 8001a96:	e7fd      	b.n	8001a94 <_exit+0x12>

08001a98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e00a      	b.n	8001ac0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aaa:	f3af 8000 	nop.w
 8001aae:	4601      	mov	r1, r0
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	60ba      	str	r2, [r7, #8]
 8001ab6:	b2ca      	uxtb	r2, r1
 8001ab8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbf0      	blt.n	8001aaa <_read+0x12>
  }

  return len;
 8001ac8:	687b      	ldr	r3, [r7, #4]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b086      	sub	sp, #24
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e009      	b.n	8001af8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	60ba      	str	r2, [r7, #8]
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	3301      	adds	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbf1      	blt.n	8001ae4 <_write+0x12>
  }
  return len;
 8001b00:	687b      	ldr	r3, [r7, #4]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <_close>:

int _close(int file)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
 8001b2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b32:	605a      	str	r2, [r3, #4]
  return 0;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <_isatty>:

int _isatty(int file)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b7c:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <_sbrk+0x5c>)
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <_sbrk+0x60>)
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4b13      	ldr	r3, [pc, #76]	@ (8001bd8 <_sbrk+0x64>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <_sbrk+0x64>)
 8001b92:	4a12      	ldr	r2, [pc, #72]	@ (8001bdc <_sbrk+0x68>)
 8001b94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	4b10      	ldr	r3, [pc, #64]	@ (8001bd8 <_sbrk+0x64>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d207      	bcs.n	8001bb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba4:	f005 ff94 	bl	8007ad0 <__errno>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	220c      	movs	r2, #12
 8001bac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	e009      	b.n	8001bc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	@ (8001bd8 <_sbrk+0x64>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bba:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <_sbrk+0x64>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4a05      	ldr	r2, [pc, #20]	@ (8001bd8 <_sbrk+0x64>)
 8001bc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20008000 	.word	0x20008000
 8001bd4:	00000400 	.word	0x00000400
 8001bd8:	2000589c 	.word	0x2000589c
 8001bdc:	20005ad0 	.word	0x20005ad0

08001be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001be4:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <SystemInit+0x20>)
 8001be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bea:	4a05      	ldr	r2, [pc, #20]	@ (8001c00 <SystemInit+0x20>)
 8001bec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c08:	f7ff ffea 	bl	8001be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c0c:	480c      	ldr	r0, [pc, #48]	@ (8001c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c0e:	490d      	ldr	r1, [pc, #52]	@ (8001c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c10:	4a0d      	ldr	r2, [pc, #52]	@ (8001c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c14:	e002      	b.n	8001c1c <LoopCopyDataInit>

08001c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1a:	3304      	adds	r3, #4

08001c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c20:	d3f9      	bcc.n	8001c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c22:	4a0a      	ldr	r2, [pc, #40]	@ (8001c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c24:	4c0a      	ldr	r4, [pc, #40]	@ (8001c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c28:	e001      	b.n	8001c2e <LoopFillZerobss>

08001c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c2c:	3204      	adds	r2, #4

08001c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c30:	d3fb      	bcc.n	8001c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c32:	f005 ff53 	bl	8007adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c36:	f7ff fd1f 	bl	8001678 <main>
  bx  lr    
 8001c3a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c44:	200037d4 	.word	0x200037d4
  ldr r2, =_sidata
 8001c48:	0800ec30 	.word	0x0800ec30
  ldr r2, =_sbss
 8001c4c:	200037d4 	.word	0x200037d4
  ldr r4, =_ebss
 8001c50:	20005acc 	.word	0x20005acc

08001c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c54:	e7fe      	b.n	8001c54 <ADC_IRQHandler>
	...

08001c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c98 <HAL_Init+0x40>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a0d      	ldr	r2, [pc, #52]	@ (8001c98 <HAL_Init+0x40>)
 8001c62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <HAL_Init+0x40>)
 8001c6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a07      	ldr	r2, [pc, #28]	@ (8001c98 <HAL_Init+0x40>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c80:	2003      	movs	r0, #3
 8001c82:	f000 f94f 	bl	8001f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c86:	2000      	movs	r0, #0
 8001c88:	f000 f808 	bl	8001c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c8c:	f7ff fe0e 	bl	80018ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023c00 	.word	0x40023c00

08001c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca4:	4b12      	ldr	r3, [pc, #72]	@ (8001cf0 <HAL_InitTick+0x54>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <HAL_InitTick+0x58>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	4619      	mov	r1, r3
 8001cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f967 	bl	8001f8e <HAL_SYSTICK_Config>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e00e      	b.n	8001ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b0f      	cmp	r3, #15
 8001cce:	d80a      	bhi.n	8001ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	f000 f92f 	bl	8001f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cdc:	4a06      	ldr	r2, [pc, #24]	@ (8001cf8 <HAL_InitTick+0x5c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	e000      	b.n	8001ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	200035f8 	.word	0x200035f8
 8001cf4:	20003600 	.word	0x20003600
 8001cf8:	200035fc 	.word	0x200035fc

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20003600 	.word	0x20003600
 8001d20:	200058a0 	.word	0x200058a0

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	200058a0 	.word	0x200058a0

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d56:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20003600 	.word	0x20003600

08001d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	f003 0307 	and.w	r3, r3, #7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0b      	blt.n	8001e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4907      	ldr	r1, [pc, #28]	@ (8001e20 <__NVIC_EnableIRQ+0x38>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	@ (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	@ (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	@ 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef0:	d301      	bcc.n	8001ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00f      	b.n	8001f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <SysTick_Config+0x40>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efe:	210f      	movs	r1, #15
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f7ff ff8e 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <SysTick_Config+0x40>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0e:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <SysTick_Config+0x40>)
 8001f10:	2207      	movs	r2, #7
 8001f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	e000e010 	.word	0xe000e010

08001f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff29 	bl	8001d84 <__NVIC_SetPriorityGrouping>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4c:	f7ff ff3e 	bl	8001dcc <__NVIC_GetPriorityGrouping>
 8001f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff ff8e 	bl	8001e78 <NVIC_EncodePriority>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff5d 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff31 	bl	8001de8 <__NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffa2 	bl	8001ee0 <SysTick_Config>
 8001f9c:	4603      	mov	r3, r0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fb4:	f7ff feb6 	bl	8001d24 <HAL_GetTick>
 8001fb8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d008      	beq.n	8001fd8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2280      	movs	r2, #128	@ 0x80
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e052      	b.n	800207e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0216 	bic.w	r2, r2, #22
 8001fe6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ff6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d103      	bne.n	8002008 <HAL_DMA_Abort+0x62>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0208 	bic.w	r2, r2, #8
 8002016:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002028:	e013      	b.n	8002052 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800202a:	f7ff fe7b 	bl	8001d24 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b05      	cmp	r3, #5
 8002036:	d90c      	bls.n	8002052 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2203      	movs	r2, #3
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e015      	b.n	800207e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1e4      	bne.n	800202a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002064:	223f      	movs	r2, #63	@ 0x3f
 8002066:	409a      	lsls	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d004      	beq.n	80020a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2280      	movs	r2, #128	@ 0x80
 800209e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e00c      	b.n	80020be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2205      	movs	r2, #5
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e14d      	b.n	8002384 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	f040 813c 	bne.w	800237e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d005      	beq.n	800211e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211a:	2b02      	cmp	r3, #2
 800211c:	d130      	bne.n	8002180 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	2203      	movs	r2, #3
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	43db      	mvns	r3, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4013      	ands	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68da      	ldr	r2, [r3, #12]
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 0201 	and.w	r2, r3, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b03      	cmp	r3, #3
 800218a:	d017      	beq.n	80021bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	2203      	movs	r2, #3
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d123      	bne.n	8002210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	08da      	lsrs	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3208      	adds	r2, #8
 800220a:	69b9      	ldr	r1, [r7, #24]
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 8096 	beq.w	800237e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b51      	ldr	r3, [pc, #324]	@ (800239c <HAL_GPIO_Init+0x2d0>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800225a:	4a50      	ldr	r2, [pc, #320]	@ (800239c <HAL_GPIO_Init+0x2d0>)
 800225c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002260:	6453      	str	r3, [r2, #68]	@ 0x44
 8002262:	4b4e      	ldr	r3, [pc, #312]	@ (800239c <HAL_GPIO_Init+0x2d0>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226e:	4a4c      	ldr	r2, [pc, #304]	@ (80023a0 <HAL_GPIO_Init+0x2d4>)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a43      	ldr	r2, [pc, #268]	@ (80023a4 <HAL_GPIO_Init+0x2d8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00d      	beq.n	80022b6 <HAL_GPIO_Init+0x1ea>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a42      	ldr	r2, [pc, #264]	@ (80023a8 <HAL_GPIO_Init+0x2dc>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <HAL_GPIO_Init+0x1e6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a41      	ldr	r2, [pc, #260]	@ (80023ac <HAL_GPIO_Init+0x2e0>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_GPIO_Init+0x1e2>
 80022aa:	2302      	movs	r3, #2
 80022ac:	e004      	b.n	80022b8 <HAL_GPIO_Init+0x1ec>
 80022ae:	2307      	movs	r3, #7
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_Init+0x1ec>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_GPIO_Init+0x1ec>
 80022b6:	2300      	movs	r3, #0
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	f002 0203 	and.w	r2, r2, #3
 80022be:	0092      	lsls	r2, r2, #2
 80022c0:	4093      	lsls	r3, r2
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022c8:	4935      	ldr	r1, [pc, #212]	@ (80023a0 <HAL_GPIO_Init+0x2d4>)
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022d6:	4b36      	ldr	r3, [pc, #216]	@ (80023b0 <HAL_GPIO_Init+0x2e4>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	43db      	mvns	r3, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4013      	ands	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022fa:	4a2d      	ldr	r2, [pc, #180]	@ (80023b0 <HAL_GPIO_Init+0x2e4>)
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002300:	4b2b      	ldr	r3, [pc, #172]	@ (80023b0 <HAL_GPIO_Init+0x2e4>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	43db      	mvns	r3, r3
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4013      	ands	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d003      	beq.n	8002324 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002324:	4a22      	ldr	r2, [pc, #136]	@ (80023b0 <HAL_GPIO_Init+0x2e4>)
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800232a:	4b21      	ldr	r3, [pc, #132]	@ (80023b0 <HAL_GPIO_Init+0x2e4>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800234e:	4a18      	ldr	r2, [pc, #96]	@ (80023b0 <HAL_GPIO_Init+0x2e4>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002354:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <HAL_GPIO_Init+0x2e4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002378:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <HAL_GPIO_Init+0x2e4>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3301      	adds	r3, #1
 8002382:	61fb      	str	r3, [r7, #28]
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	2b0f      	cmp	r3, #15
 8002388:	f67f aeae 	bls.w	80020e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	3724      	adds	r7, #36	@ 0x24
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40023800 	.word	0x40023800
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40020000 	.word	0x40020000
 80023a8:	40020400 	.word	0x40020400
 80023ac:	40020800 	.word	0x40020800
 80023b0:	40013c00 	.word	0x40013c00

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d0:	e003      	b.n	80023da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	041a      	lsls	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e12b      	b.n	8002652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff f8ea 	bl	80015e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2224      	movs	r2, #36	@ 0x24
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800243a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800244a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800244c:	f001 fb16 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8002450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4a81      	ldr	r2, [pc, #516]	@ (800265c <HAL_I2C_Init+0x274>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d807      	bhi.n	800246c <HAL_I2C_Init+0x84>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a80      	ldr	r2, [pc, #512]	@ (8002660 <HAL_I2C_Init+0x278>)
 8002460:	4293      	cmp	r3, r2
 8002462:	bf94      	ite	ls
 8002464:	2301      	movls	r3, #1
 8002466:	2300      	movhi	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e006      	b.n	800247a <HAL_I2C_Init+0x92>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a7d      	ldr	r2, [pc, #500]	@ (8002664 <HAL_I2C_Init+0x27c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	bf94      	ite	ls
 8002474:	2301      	movls	r3, #1
 8002476:	2300      	movhi	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0e7      	b.n	8002652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a78      	ldr	r2, [pc, #480]	@ (8002668 <HAL_I2C_Init+0x280>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0c9b      	lsrs	r3, r3, #18
 800248c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a6a      	ldr	r2, [pc, #424]	@ (800265c <HAL_I2C_Init+0x274>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d802      	bhi.n	80024bc <HAL_I2C_Init+0xd4>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3301      	adds	r3, #1
 80024ba:	e009      	b.n	80024d0 <HAL_I2C_Init+0xe8>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	4a69      	ldr	r2, [pc, #420]	@ (800266c <HAL_I2C_Init+0x284>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	3301      	adds	r3, #1
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	495c      	ldr	r1, [pc, #368]	@ (800265c <HAL_I2C_Init+0x274>)
 80024ec:	428b      	cmp	r3, r1
 80024ee:	d819      	bhi.n	8002524 <HAL_I2C_Init+0x13c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e59      	subs	r1, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fe:	1c59      	adds	r1, r3, #1
 8002500:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002504:	400b      	ands	r3, r1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_I2C_Init+0x138>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1e59      	subs	r1, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fbb1 f3f3 	udiv	r3, r1, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251e:	e051      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 8002520:	2304      	movs	r3, #4
 8002522:	e04f      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <HAL_I2C_Init+0x168>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	440b      	add	r3, r1
 800253a:	fbb0 f3f3 	udiv	r3, r0, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e012      	b.n	8002576 <HAL_I2C_Init+0x18e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	0099      	lsls	r1, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Init+0x196>
 800257a:	2301      	movs	r3, #1
 800257c:	e022      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10e      	bne.n	80025a4 <HAL_I2C_Init+0x1bc>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1e58      	subs	r0, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	440b      	add	r3, r1
 8002594:	fbb0 f3f3 	udiv	r3, r0, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025a2:	e00f      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	0099      	lsls	r1, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	6809      	ldr	r1, [r1, #0]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6911      	ldr	r1, [r2, #16]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	430b      	orrs	r3, r1
 8002606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	000186a0 	.word	0x000186a0
 8002660:	001e847f 	.word	0x001e847f
 8002664:	003d08ff 	.word	0x003d08ff
 8002668:	431bde83 	.word	0x431bde83
 800266c:	10624dd3 	.word	0x10624dd3

08002670 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af02      	add	r7, sp, #8
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	4608      	mov	r0, r1
 800267a:	4611      	mov	r1, r2
 800267c:	461a      	mov	r2, r3
 800267e:	4603      	mov	r3, r0
 8002680:	817b      	strh	r3, [r7, #10]
 8002682:	460b      	mov	r3, r1
 8002684:	813b      	strh	r3, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800268a:	f7ff fb4b 	bl	8001d24 <HAL_GetTick>
 800268e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b20      	cmp	r3, #32
 800269a:	f040 80d9 	bne.w	8002850 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2319      	movs	r3, #25
 80026a4:	2201      	movs	r2, #1
 80026a6:	496d      	ldr	r1, [pc, #436]	@ (800285c <HAL_I2C_Mem_Write+0x1ec>)
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fdb9 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
 80026b6:	e0cc      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Mem_Write+0x56>
 80026c2:	2302      	movs	r3, #2
 80026c4:	e0c5      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d007      	beq.n	80026ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2221      	movs	r2, #33	@ 0x21
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2240      	movs	r2, #64	@ 0x40
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a3a      	ldr	r2, [r7, #32]
 8002716:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800271c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4a4d      	ldr	r2, [pc, #308]	@ (8002860 <HAL_I2C_Mem_Write+0x1f0>)
 800272c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800272e:	88f8      	ldrh	r0, [r7, #6]
 8002730:	893a      	ldrh	r2, [r7, #8]
 8002732:	8979      	ldrh	r1, [r7, #10]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	4603      	mov	r3, r0
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 fbf0 	bl	8002f24 <I2C_RequestMemoryWrite>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d052      	beq.n	80027f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e081      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fe7e 	bl	8003454 <I2C_WaitOnTXEFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b04      	cmp	r3, #4
 8002764:	d107      	bne.n	8002776 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06b      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b04      	cmp	r3, #4
 80027b6:	d11b      	bne.n	80027f0 <HAL_I2C_Mem_Write+0x180>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d017      	beq.n	80027f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c4:	781a      	ldrb	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1aa      	bne.n	800274e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 fe71 	bl	80034e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00d      	beq.n	8002824 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	2b04      	cmp	r3, #4
 800280e:	d107      	bne.n	8002820 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e016      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	e000      	b.n	8002852 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002850:	2302      	movs	r3, #2
  }
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	00100002 	.word	0x00100002
 8002860:	ffff0000 	.word	0xffff0000

08002864 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b08c      	sub	sp, #48	@ 0x30
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	4608      	mov	r0, r1
 800286e:	4611      	mov	r1, r2
 8002870:	461a      	mov	r2, r3
 8002872:	4603      	mov	r3, r0
 8002874:	817b      	strh	r3, [r7, #10]
 8002876:	460b      	mov	r3, r1
 8002878:	813b      	strh	r3, [r7, #8]
 800287a:	4613      	mov	r3, r2
 800287c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800287e:	f7ff fa51 	bl	8001d24 <HAL_GetTick>
 8002882:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b20      	cmp	r3, #32
 800288e:	f040 8214 	bne.w	8002cba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2319      	movs	r3, #25
 8002898:	2201      	movs	r2, #1
 800289a:	497b      	ldr	r1, [pc, #492]	@ (8002a88 <HAL_I2C_Mem_Read+0x224>)
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fcbf 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
 80028aa:	e207      	b.n	8002cbc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_I2C_Mem_Read+0x56>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e200      	b.n	8002cbc <HAL_I2C_Mem_Read+0x458>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d007      	beq.n	80028e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2222      	movs	r2, #34	@ 0x22
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2240      	movs	r2, #64	@ 0x40
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002910:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4a5b      	ldr	r2, [pc, #364]	@ (8002a8c <HAL_I2C_Mem_Read+0x228>)
 8002920:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002922:	88f8      	ldrh	r0, [r7, #6]
 8002924:	893a      	ldrh	r2, [r7, #8]
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	4603      	mov	r3, r0
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fb8c 	bl	8003050 <I2C_RequestMemoryRead>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e1bc      	b.n	8002cbc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	2b00      	cmp	r3, #0
 8002948:	d113      	bne.n	8002972 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e190      	b.n	8002c94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002976:	2b01      	cmp	r3, #1
 8002978:	d11b      	bne.n	80029b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	61fb      	str	r3, [r7, #28]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e170      	b.n	8002c94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d11b      	bne.n	80029f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	e150      	b.n	8002c94 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a08:	e144      	b.n	8002c94 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	f200 80f1 	bhi.w	8002bf6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d123      	bne.n	8002a64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fda7 	bl	8003574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e145      	b.n	8002cbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a62:	e117      	b.n	8002c94 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d14e      	bne.n	8002b0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a72:	2200      	movs	r2, #0
 8002a74:	4906      	ldr	r1, [pc, #24]	@ (8002a90 <HAL_I2C_Mem_Read+0x22c>)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fbd2 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e11a      	b.n	8002cbc <HAL_I2C_Mem_Read+0x458>
 8002a86:	bf00      	nop
 8002a88:	00100002 	.word	0x00100002
 8002a8c:	ffff0000 	.word	0xffff0000
 8002a90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691a      	ldr	r2, [r3, #16]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	1c5a      	adds	r2, r3, #1
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b08:	e0c4      	b.n	8002c94 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b10:	2200      	movs	r2, #0
 8002b12:	496c      	ldr	r1, [pc, #432]	@ (8002cc4 <HAL_I2C_Mem_Read+0x460>)
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fb83 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0cb      	b.n	8002cbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4955      	ldr	r1, [pc, #340]	@ (8002cc4 <HAL_I2C_Mem_Read+0x460>)
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fb55 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e09d      	b.n	8002cbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691a      	ldr	r2, [r3, #16]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	1c5a      	adds	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	691a      	ldr	r2, [r3, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bcc:	b2d2      	uxtb	r2, r2
 8002bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bf4:	e04e      	b.n	8002c94 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bf8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fcba 	bl	8003574 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e058      	b.n	8002cbc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c26:	3b01      	subs	r3, #1
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	3b01      	subs	r3, #1
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d124      	bne.n	8002c94 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d107      	bne.n	8002c62 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c60:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	b2d2      	uxtb	r2, r2
 8002c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f47f aeb6 	bne.w	8002a0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e000      	b.n	8002cbc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
  }
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3728      	adds	r7, #40	@ 0x28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	00010004 	.word	0x00010004

08002cc8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b08a      	sub	sp, #40	@ 0x28
 8002ccc:	af02      	add	r7, sp, #8
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002cd8:	f7ff f824 	bl	8001d24 <HAL_GetTick>
 8002cdc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	f040 8111 	bne.w	8002f12 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	9300      	str	r3, [sp, #0]
 8002cf4:	2319      	movs	r3, #25
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	4988      	ldr	r1, [pc, #544]	@ (8002f1c <HAL_I2C_IsDeviceReady+0x254>)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fa90 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
 8002d08:	e104      	b.n	8002f14 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_I2C_IsDeviceReady+0x50>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e0fd      	b.n	8002f14 <HAL_I2C_IsDeviceReady+0x24c>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d007      	beq.n	8002d3e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2224      	movs	r2, #36	@ 0x24
 8002d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a70      	ldr	r2, [pc, #448]	@ (8002f20 <HAL_I2C_IsDeviceReady+0x258>)
 8002d60:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d70:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 fa4e 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00d      	beq.n	8002da6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d98:	d103      	bne.n	8002da2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002da0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0b6      	b.n	8002f14 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002db4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002db6:	f7fe ffb5 	bl	8001d24 <HAL_GetTick>
 8002dba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	bf0c      	ite	eq
 8002dca:	2301      	moveq	r3, #1
 8002dcc:	2300      	movne	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ddc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002de0:	bf0c      	ite	eq
 8002de2:	2301      	moveq	r3, #1
 8002de4:	2300      	movne	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002dea:	e025      	b.n	8002e38 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dec:	f7fe ff9a 	bl	8001d24 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d302      	bcc.n	8002e02 <HAL_I2C_IsDeviceReady+0x13a>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d103      	bne.n	8002e0a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	22a0      	movs	r2, #160	@ 0xa0
 8002e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e42:	d005      	beq.n	8002e50 <HAL_I2C_IsDeviceReady+0x188>
 8002e44:	7dfb      	ldrb	r3, [r7, #23]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <HAL_I2C_IsDeviceReady+0x188>
 8002e4a:	7dbb      	ldrb	r3, [r7, #22]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0cd      	beq.n	8002dec <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d129      	bne.n	8002eba <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e74:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e76:	2300      	movs	r3, #0
 8002e78:	613b      	str	r3, [r7, #16]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	613b      	str	r3, [r7, #16]
 8002e8a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2319      	movs	r3, #25
 8002e92:	2201      	movs	r2, #1
 8002e94:	4921      	ldr	r1, [pc, #132]	@ (8002f1c <HAL_I2C_IsDeviceReady+0x254>)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f9c2 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e036      	b.n	8002f14 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e02c      	b.n	8002f14 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ec8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ed2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	2319      	movs	r3, #25
 8002eda:	2201      	movs	r2, #1
 8002edc:	490f      	ldr	r1, [pc, #60]	@ (8002f1c <HAL_I2C_IsDeviceReady+0x254>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f99e 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e012      	b.n	8002f14 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	f4ff af32 	bcc.w	8002d62 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
  }
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	00100002 	.word	0x00100002
 8002f20:	ffff0000 	.word	0xffff0000

08002f24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	4608      	mov	r0, r1
 8002f2e:	4611      	mov	r1, r2
 8002f30:	461a      	mov	r2, r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	817b      	strh	r3, [r7, #10]
 8002f36:	460b      	mov	r3, r1
 8002f38:	813b      	strh	r3, [r7, #8]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f960 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f74:	d103      	bne.n	8002f7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f7c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e05f      	b.n	8003042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f82:	897b      	ldrh	r3, [r7, #10]
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f94:	6a3a      	ldr	r2, [r7, #32]
 8002f96:	492d      	ldr	r1, [pc, #180]	@ (800304c <I2C_RequestMemoryWrite+0x128>)
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f9bb 	bl	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e04c      	b.n	8003042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc0:	6a39      	ldr	r1, [r7, #32]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 fa46 	bl	8003454 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00d      	beq.n	8002fea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d107      	bne.n	8002fe6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e02b      	b.n	8003042 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fea:	88fb      	ldrh	r3, [r7, #6]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ff0:	893b      	ldrh	r3, [r7, #8]
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	611a      	str	r2, [r3, #16]
 8002ffa:	e021      	b.n	8003040 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ffc:	893b      	ldrh	r3, [r7, #8]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	b29b      	uxth	r3, r3
 8003002:	b2da      	uxtb	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800300a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300c:	6a39      	ldr	r1, [r7, #32]
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 fa20 	bl	8003454 <I2C_WaitOnTXEFlagUntilTimeout>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00d      	beq.n	8003036 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	2b04      	cmp	r3, #4
 8003020:	d107      	bne.n	8003032 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003030:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e005      	b.n	8003042 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003036:	893b      	ldrh	r3, [r7, #8]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	00010002 	.word	0x00010002

08003050 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af02      	add	r7, sp, #8
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	4608      	mov	r0, r1
 800305a:	4611      	mov	r1, r2
 800305c:	461a      	mov	r2, r3
 800305e:	4603      	mov	r3, r0
 8003060:	817b      	strh	r3, [r7, #10]
 8003062:	460b      	mov	r3, r1
 8003064:	813b      	strh	r3, [r7, #8]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003078:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003088:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	2200      	movs	r2, #0
 8003092:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 f8c2 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b0:	d103      	bne.n	80030ba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0aa      	b.n	8003214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	6a3a      	ldr	r2, [r7, #32]
 80030d2:	4952      	ldr	r1, [pc, #328]	@ (800321c <I2C_RequestMemoryRead+0x1cc>)
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f91d 	bl	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e097      	b.n	8003214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e4:	2300      	movs	r3, #0
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	617b      	str	r3, [r7, #20]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fc:	6a39      	ldr	r1, [r7, #32]
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 f9a8 	bl	8003454 <I2C_WaitOnTXEFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310e:	2b04      	cmp	r3, #4
 8003110:	d107      	bne.n	8003122 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003120:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e076      	b.n	8003214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003126:	88fb      	ldrh	r3, [r7, #6]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800312c:	893b      	ldrh	r3, [r7, #8]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	611a      	str	r2, [r3, #16]
 8003136:	e021      	b.n	800317c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003138:	893b      	ldrh	r3, [r7, #8]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	b29b      	uxth	r3, r3
 800313e:	b2da      	uxtb	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003148:	6a39      	ldr	r1, [r7, #32]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 f982 	bl	8003454 <I2C_WaitOnTXEFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00d      	beq.n	8003172 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315a:	2b04      	cmp	r3, #4
 800315c:	d107      	bne.n	800316e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800316c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e050      	b.n	8003214 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003172:	893b      	ldrh	r3, [r7, #8]
 8003174:	b2da      	uxtb	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800317c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800317e:	6a39      	ldr	r1, [r7, #32]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f967 	bl	8003454 <I2C_WaitOnTXEFlagUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00d      	beq.n	80031a8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003190:	2b04      	cmp	r3, #4
 8003192:	d107      	bne.n	80031a4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031a2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e035      	b.n	8003214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031b6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	2200      	movs	r2, #0
 80031c0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 f82b 	bl	8003220 <I2C_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00d      	beq.n	80031ec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031de:	d103      	bne.n	80031e8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e013      	b.n	8003214 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031ec:	897b      	ldrh	r3, [r7, #10]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fe:	6a3a      	ldr	r2, [r7, #32]
 8003200:	4906      	ldr	r1, [pc, #24]	@ (800321c <I2C_RequestMemoryRead+0x1cc>)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f886 	bl	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	00010002 	.word	0x00010002

08003220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	603b      	str	r3, [r7, #0]
 800322c:	4613      	mov	r3, r2
 800322e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003230:	e048      	b.n	80032c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003238:	d044      	beq.n	80032c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800323a:	f7fe fd73 	bl	8001d24 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d302      	bcc.n	8003250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d139      	bne.n	80032c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	0c1b      	lsrs	r3, r3, #16
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d10d      	bne.n	8003276 <I2C_WaitOnFlagUntilTimeout+0x56>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	43da      	mvns	r2, r3
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	4013      	ands	r3, r2
 8003266:	b29b      	uxth	r3, r3
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf0c      	ite	eq
 800326c:	2301      	moveq	r3, #1
 800326e:	2300      	movne	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	461a      	mov	r2, r3
 8003274:	e00c      	b.n	8003290 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	43da      	mvns	r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	4013      	ands	r3, r2
 8003282:	b29b      	uxth	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf0c      	ite	eq
 8003288:	2301      	moveq	r3, #1
 800328a:	2300      	movne	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	429a      	cmp	r2, r3
 8003294:	d116      	bne.n	80032c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e023      	b.n	800330c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	0c1b      	lsrs	r3, r3, #16
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d10d      	bne.n	80032ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	43da      	mvns	r2, r3
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	4013      	ands	r3, r2
 80032da:	b29b      	uxth	r3, r3
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf0c      	ite	eq
 80032e0:	2301      	moveq	r3, #1
 80032e2:	2300      	movne	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	461a      	mov	r2, r3
 80032e8:	e00c      	b.n	8003304 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	43da      	mvns	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4013      	ands	r3, r2
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	79fb      	ldrb	r3, [r7, #7]
 8003306:	429a      	cmp	r2, r3
 8003308:	d093      	beq.n	8003232 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003322:	e071      	b.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003332:	d123      	bne.n	800337c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003342:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800334c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	f043 0204 	orr.w	r2, r3, #4
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e067      	b.n	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003382:	d041      	beq.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003384:	f7fe fcce 	bl	8001d24 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d302      	bcc.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d136      	bne.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d10c      	bne.n	80033be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf14      	ite	ne
 80033b6:	2301      	movne	r3, #1
 80033b8:	2300      	moveq	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	e00b      	b.n	80033d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	43da      	mvns	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	4013      	ands	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d016      	beq.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e021      	b.n	800344c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	0c1b      	lsrs	r3, r3, #16
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b01      	cmp	r3, #1
 8003410:	d10c      	bne.n	800342c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	43da      	mvns	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4013      	ands	r3, r2
 800341e:	b29b      	uxth	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	bf14      	ite	ne
 8003424:	2301      	movne	r3, #1
 8003426:	2300      	moveq	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e00b      	b.n	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	43da      	mvns	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	4013      	ands	r3, r2
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	bf14      	ite	ne
 800343e:	2301      	movne	r3, #1
 8003440:	2300      	moveq	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	f47f af6d 	bne.w	8003324 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003460:	e034      	b.n	80034cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f8e3 	bl	800362e <I2C_IsAcknowledgeFailed>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e034      	b.n	80034dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003478:	d028      	beq.n	80034cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347a:	f7fe fc53 	bl	8001d24 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d11d      	bne.n	80034cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800349a:	2b80      	cmp	r3, #128	@ 0x80
 800349c:	d016      	beq.n	80034cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	f043 0220 	orr.w	r2, r3, #32
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e007      	b.n	80034dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d6:	2b80      	cmp	r3, #128	@ 0x80
 80034d8:	d1c3      	bne.n	8003462 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034f0:	e034      	b.n	800355c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f89b 	bl	800362e <I2C_IsAcknowledgeFailed>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e034      	b.n	800356c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d028      	beq.n	800355c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350a:	f7fe fc0b 	bl	8001d24 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11d      	bne.n	800355c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b04      	cmp	r3, #4
 800352c:	d016      	beq.n	800355c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e007      	b.n	800356c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	2b04      	cmp	r3, #4
 8003568:	d1c3      	bne.n	80034f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003580:	e049      	b.n	8003616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b10      	cmp	r3, #16
 800358e:	d119      	bne.n	80035c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0210 	mvn.w	r2, #16
 8003598:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e030      	b.n	8003626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c4:	f7fe fbae 	bl	8001d24 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d302      	bcc.n	80035da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11d      	bne.n	8003616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e4:	2b40      	cmp	r3, #64	@ 0x40
 80035e6:	d016      	beq.n	8003616 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e007      	b.n	8003626 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003620:	2b40      	cmp	r3, #64	@ 0x40
 8003622:	d1ae      	bne.n	8003582 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003640:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003644:	d11b      	bne.n	800367e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800364e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366a:	f043 0204 	orr.w	r2, r3, #4
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e0cc      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a0:	4b68      	ldr	r3, [pc, #416]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d90c      	bls.n	80036c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b65      	ldr	r3, [pc, #404]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b63      	ldr	r3, [pc, #396]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0b8      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d020      	beq.n	8003716 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036e0:	4b59      	ldr	r3, [pc, #356]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	4a58      	ldr	r2, [pc, #352]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0308 	and.w	r3, r3, #8
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f8:	4b53      	ldr	r3, [pc, #332]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a52      	ldr	r2, [pc, #328]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003702:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003704:	4b50      	ldr	r3, [pc, #320]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	494d      	ldr	r1, [pc, #308]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d044      	beq.n	80037ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d107      	bne.n	800373a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372a:	4b47      	ldr	r3, [pc, #284]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d119      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d003      	beq.n	800374a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003746:	2b03      	cmp	r3, #3
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374a:	4b3f      	ldr	r3, [pc, #252]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d109      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e06f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375a:	4b3b      	ldr	r3, [pc, #236]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0302 	and.w	r3, r3, #2
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e067      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376a:	4b37      	ldr	r3, [pc, #220]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f023 0203 	bic.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	4934      	ldr	r1, [pc, #208]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	4313      	orrs	r3, r2
 800377a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800377c:	f7fe fad2 	bl	8001d24 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7fe face 	bl	8001d24 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e04f      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	4b2b      	ldr	r3, [pc, #172]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 020c 	and.w	r2, r3, #12
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d1eb      	bne.n	8003784 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037ac:	4b25      	ldr	r3, [pc, #148]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d20c      	bcs.n	80037d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b22      	ldr	r3, [pc, #136]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b20      	ldr	r3, [pc, #128]	@ (8003844 <HAL_RCC_ClockConfig+0x1b8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e032      	b.n	800383a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e0:	4b19      	ldr	r3, [pc, #100]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4916      	ldr	r1, [pc, #88]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d009      	beq.n	8003812 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037fe:	4b12      	ldr	r3, [pc, #72]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	490e      	ldr	r1, [pc, #56]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003812:	f000 f821 	bl	8003858 <HAL_RCC_GetSysClockFreq>
 8003816:	4602      	mov	r2, r0
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	091b      	lsrs	r3, r3, #4
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	490a      	ldr	r1, [pc, #40]	@ (800384c <HAL_RCC_ClockConfig+0x1c0>)
 8003824:	5ccb      	ldrb	r3, [r1, r3]
 8003826:	fa22 f303 	lsr.w	r3, r2, r3
 800382a:	4a09      	ldr	r2, [pc, #36]	@ (8003850 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800382e:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fa32 	bl	8001c9c <HAL_InitTick>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023c00 	.word	0x40023c00
 8003848:	40023800 	.word	0x40023800
 800384c:	0800e894 	.word	0x0800e894
 8003850:	200035f8 	.word	0x200035f8
 8003854:	200035fc 	.word	0x200035fc

08003858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800385c:	b094      	sub	sp, #80	@ 0x50
 800385e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003860:	2300      	movs	r3, #0
 8003862:	647b      	str	r3, [r7, #68]	@ 0x44
 8003864:	2300      	movs	r3, #0
 8003866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003868:	2300      	movs	r3, #0
 800386a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003870:	4b79      	ldr	r3, [pc, #484]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	2b08      	cmp	r3, #8
 800387a:	d00d      	beq.n	8003898 <HAL_RCC_GetSysClockFreq+0x40>
 800387c:	2b08      	cmp	r3, #8
 800387e:	f200 80e1 	bhi.w	8003a44 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_RCC_GetSysClockFreq+0x34>
 8003886:	2b04      	cmp	r3, #4
 8003888:	d003      	beq.n	8003892 <HAL_RCC_GetSysClockFreq+0x3a>
 800388a:	e0db      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4b73      	ldr	r3, [pc, #460]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x204>)
 800388e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003890:	e0db      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003892:	4b73      	ldr	r3, [pc, #460]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x208>)
 8003894:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003896:	e0d8      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003898:	4b6f      	ldr	r3, [pc, #444]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d063      	beq.n	8003976 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	099b      	lsrs	r3, r3, #6
 80038b4:	2200      	movs	r2, #0
 80038b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80038c2:	2300      	movs	r3, #0
 80038c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80038c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038ca:	4622      	mov	r2, r4
 80038cc:	462b      	mov	r3, r5
 80038ce:	f04f 0000 	mov.w	r0, #0
 80038d2:	f04f 0100 	mov.w	r1, #0
 80038d6:	0159      	lsls	r1, r3, #5
 80038d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038dc:	0150      	lsls	r0, r2, #5
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4621      	mov	r1, r4
 80038e4:	1a51      	subs	r1, r2, r1
 80038e6:	6139      	str	r1, [r7, #16]
 80038e8:	4629      	mov	r1, r5
 80038ea:	eb63 0301 	sbc.w	r3, r3, r1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038fc:	4659      	mov	r1, fp
 80038fe:	018b      	lsls	r3, r1, #6
 8003900:	4651      	mov	r1, sl
 8003902:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003906:	4651      	mov	r1, sl
 8003908:	018a      	lsls	r2, r1, #6
 800390a:	4651      	mov	r1, sl
 800390c:	ebb2 0801 	subs.w	r8, r2, r1
 8003910:	4659      	mov	r1, fp
 8003912:	eb63 0901 	sbc.w	r9, r3, r1
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003922:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003926:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800392a:	4690      	mov	r8, r2
 800392c:	4699      	mov	r9, r3
 800392e:	4623      	mov	r3, r4
 8003930:	eb18 0303 	adds.w	r3, r8, r3
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	462b      	mov	r3, r5
 8003938:	eb49 0303 	adc.w	r3, r9, r3
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800394a:	4629      	mov	r1, r5
 800394c:	024b      	lsls	r3, r1, #9
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003954:	4621      	mov	r1, r4
 8003956:	024a      	lsls	r2, r1, #9
 8003958:	4610      	mov	r0, r2
 800395a:	4619      	mov	r1, r3
 800395c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800395e:	2200      	movs	r2, #0
 8003960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003964:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003968:	f7fd f94e 	bl	8000c08 <__aeabi_uldivmod>
 800396c:	4602      	mov	r2, r0
 800396e:	460b      	mov	r3, r1
 8003970:	4613      	mov	r3, r2
 8003972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003974:	e058      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003976:	4b38      	ldr	r3, [pc, #224]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	099b      	lsrs	r3, r3, #6
 800397c:	2200      	movs	r2, #0
 800397e:	4618      	mov	r0, r3
 8003980:	4611      	mov	r1, r2
 8003982:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003986:	623b      	str	r3, [r7, #32]
 8003988:	2300      	movs	r3, #0
 800398a:	627b      	str	r3, [r7, #36]	@ 0x24
 800398c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003990:	4642      	mov	r2, r8
 8003992:	464b      	mov	r3, r9
 8003994:	f04f 0000 	mov.w	r0, #0
 8003998:	f04f 0100 	mov.w	r1, #0
 800399c:	0159      	lsls	r1, r3, #5
 800399e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a2:	0150      	lsls	r0, r2, #5
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4641      	mov	r1, r8
 80039aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80039ae:	4649      	mov	r1, r9
 80039b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80039b4:	f04f 0200 	mov.w	r2, #0
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039c8:	ebb2 040a 	subs.w	r4, r2, sl
 80039cc:	eb63 050b 	sbc.w	r5, r3, fp
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	00eb      	lsls	r3, r5, #3
 80039da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039de:	00e2      	lsls	r2, r4, #3
 80039e0:	4614      	mov	r4, r2
 80039e2:	461d      	mov	r5, r3
 80039e4:	4643      	mov	r3, r8
 80039e6:	18e3      	adds	r3, r4, r3
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	464b      	mov	r3, r9
 80039ec:	eb45 0303 	adc.w	r3, r5, r3
 80039f0:	607b      	str	r3, [r7, #4]
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039fe:	4629      	mov	r1, r5
 8003a00:	028b      	lsls	r3, r1, #10
 8003a02:	4621      	mov	r1, r4
 8003a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a08:	4621      	mov	r1, r4
 8003a0a:	028a      	lsls	r2, r1, #10
 8003a0c:	4610      	mov	r0, r2
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a12:	2200      	movs	r2, #0
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	61fa      	str	r2, [r7, #28]
 8003a18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a1c:	f7fd f8f4 	bl	8000c08 <__aeabi_uldivmod>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4613      	mov	r3, r2
 8003a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a28:	4b0b      	ldr	r3, [pc, #44]	@ (8003a58 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	3301      	adds	r3, #1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003a38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x204>)
 8003a46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3750      	adds	r7, #80	@ 0x50
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a56:	bf00      	nop
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	00f42400 	.word	0x00f42400
 8003a60:	007a1200 	.word	0x007a1200

08003a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a68:	4b03      	ldr	r3, [pc, #12]	@ (8003a78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	200035f8 	.word	0x200035f8

08003a7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a80:	f7ff fff0 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	4b05      	ldr	r3, [pc, #20]	@ (8003a9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	0a9b      	lsrs	r3, r3, #10
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	4903      	ldr	r1, [pc, #12]	@ (8003aa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a92:	5ccb      	ldrb	r3, [r1, r3]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	0800e8a4 	.word	0x0800e8a4

08003aa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa8:	f7ff ffdc 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003aac:	4602      	mov	r2, r0
 8003aae:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	0b5b      	lsrs	r3, r3, #13
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	4903      	ldr	r1, [pc, #12]	@ (8003ac8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aba:	5ccb      	ldrb	r3, [r1, r3]
 8003abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	0800e8a4 	.word	0x0800e8a4

08003acc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 8083 	beq.w	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	4b61      	ldr	r3, [pc, #388]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	4a60      	ldr	r2, [pc, #384]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003afa:	4b5e      	ldr	r3, [pc, #376]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003b06:	4b5c      	ldr	r3, [pc, #368]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b10:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003b12:	f7fe f907 	bl	8001d24 <HAL_GetTick>
 8003b16:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x60>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b1a:	f7fe f903 	bl	8001d24 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x60>
      {
        return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e09f      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003b2c:	4b52      	ldr	r3, [pc, #328]	@ (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b38:	4b4e      	ldr	r3, [pc, #312]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b40:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d02f      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d028      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b56:	4b47      	ldr	r3, [pc, #284]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b60:	4b46      	ldr	r3, [pc, #280]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b66:	4b45      	ldr	r3, [pc, #276]	@ (8003c7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003b6c:	4a41      	ldr	r2, [pc, #260]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003b72:	4b40      	ldr	r3, [pc, #256]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d114      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003b7e:	f7fe f8d1 	bl	8001d24 <HAL_GetTick>
 8003b82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b84:	e00a      	b.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b86:	f7fe f8cd 	bl	8001d24 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xd0>
          {
            return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e067      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b9c:	4b35      	ldr	r3, [pc, #212]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ee      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xba>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bb4:	d10d      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bb6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003bc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bca:	492a      	ldr	r1, [pc, #168]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]
 8003bd0:	e005      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003bd2:	4b28      	ldr	r3, [pc, #160]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	4a27      	ldr	r2, [pc, #156]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bd8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003bdc:	6093      	str	r3, [r2, #8]
 8003bde:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003be0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bea:	4922      	ldr	r1, [pc, #136]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7d1a      	ldrb	r2, [r3, #20]
 8003c00:	4b1f      	ldr	r3, [pc, #124]	@ (8003c80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003c02:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0308 	and.w	r3, r3, #8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00a      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8003c10:	4b18      	ldr	r3, [pc, #96]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c16:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	4915      	ldr	r1, [pc, #84]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c32:	4b10      	ldr	r3, [pc, #64]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c38:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	490c      	ldr	r1, [pc, #48]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }

  /*---------------------------- I2S Configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPBCLKSOURCE(PeriphClkInit->I2SClockSelection));

    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2SClockSelection);
 8003c54:	4b07      	ldr	r3, [pc, #28]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c5a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4904      	ldr	r1, [pc, #16]	@ (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3718      	adds	r7, #24
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40007000 	.word	0x40007000
 8003c7c:	42470e40 	.word	0x42470e40
 8003c80:	424711e0 	.word	0x424711e0

08003c84 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e273      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d075      	beq.n	8003d8e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003ca2:	4b88      	ldr	r3, [pc, #544]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d00c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cae:	4b85      	ldr	r3, [pc, #532]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d112      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b82      	ldr	r3, [pc, #520]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05b      	beq.n	8003d8c <HAL_RCC_OscConfig+0x108>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d157      	bne.n	8003d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e24e      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x74>
 8003cea:	4b76      	ldr	r3, [pc, #472]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a75      	ldr	r2, [pc, #468]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e01d      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x98>
 8003d02:	4b70      	ldr	r3, [pc, #448]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6f      	ldr	r2, [pc, #444]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6c      	ldr	r2, [pc, #432]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003d1c:	4b69      	ldr	r3, [pc, #420]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a68      	ldr	r2, [pc, #416]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b66      	ldr	r3, [pc, #408]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a65      	ldr	r2, [pc, #404]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fd fff2 	bl	8001d24 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fd ffee 	bl	8001d24 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	@ 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e213      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0xc0>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fd ffde 	bl	8001d24 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fd ffda 	bl	8001d24 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	@ 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1ff      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	4b51      	ldr	r3, [pc, #324]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0xe8>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da6:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11c      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b44      	ldr	r3, [pc, #272]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	4b41      	ldr	r3, [pc, #260]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1d3      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4937      	ldr	r1, [pc, #220]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	e03a      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df4:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fd ff93 	bl	8001d24 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e02:	f7fd ff8f 	bl	8001d24 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e1b4      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b28      	ldr	r3, [pc, #160]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4925      	ldr	r1, [pc, #148]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e36:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd ff72 	bl	8001d24 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fd ff6e 	bl	8001d24 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e193      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d036      	beq.n	8003edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e76:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fd ff52 	bl	8001d24 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e84:	f7fd ff4e 	bl	8001d24 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e173      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x200>
 8003ea2:	e01b      	b.n	8003edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea4:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eaa:	f7fd ff3b 	bl	8001d24 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb0:	e00e      	b.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb2:	f7fd ff37 	bl	8001d24 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d907      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e15c      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	42470000 	.word	0x42470000
 8003ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	4b8a      	ldr	r3, [pc, #552]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ea      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8097 	beq.w	8004018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b83      	ldr	r3, [pc, #524]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	4b7f      	ldr	r3, [pc, #508]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	4a7e      	ldr	r2, [pc, #504]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f0a:	4b7c      	ldr	r3, [pc, #496]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b79      	ldr	r3, [pc, #484]	@ (8004100 <HAL_RCC_OscConfig+0x47c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f26:	4b76      	ldr	r3, [pc, #472]	@ (8004100 <HAL_RCC_OscConfig+0x47c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a75      	ldr	r2, [pc, #468]	@ (8004100 <HAL_RCC_OscConfig+0x47c>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7fd fef7 	bl	8001d24 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fd fef3 	bl	8001d24 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e118      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004100 <HAL_RCC_OscConfig+0x47c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x2ea>
 8003f60:	4b66      	ldr	r3, [pc, #408]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4a65      	ldr	r2, [pc, #404]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6c:	e01c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x30c>
 8003f76:	4b61      	ldr	r3, [pc, #388]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a60      	ldr	r2, [pc, #384]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f7c:	f043 0304 	orr.w	r3, r3, #4
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f82:	4b5e      	ldr	r3, [pc, #376]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a5d      	ldr	r2, [pc, #372]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f90:	4b5a      	ldr	r3, [pc, #360]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f94:	4a59      	ldr	r2, [pc, #356]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9c:	4b57      	ldr	r3, [pc, #348]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4a56      	ldr	r2, [pc, #344]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fd feb8 	bl	8001d24 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fd feb4 	bl	8001d24 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0d7      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fce:	4b4b      	ldr	r3, [pc, #300]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ee      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x334>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fdc:	f7fd fea2 	bl	8001d24 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe4:	f7fd fe9e 	bl	8001d24 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0c1      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffa:	4b40      	ldr	r3, [pc, #256]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ee      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400c:	4b3b      	ldr	r3, [pc, #236]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	4a3a      	ldr	r2, [pc, #232]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004016:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80ad 	beq.w	800417c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004022:	4b36      	ldr	r3, [pc, #216]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b08      	cmp	r3, #8
 800402c:	d060      	beq.n	80040f0 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d145      	bne.n	80040c2 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	4b33      	ldr	r3, [pc, #204]	@ (8004104 <HAL_RCC_OscConfig+0x480>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403c:	f7fd fe72 	bl	8001d24 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7fd fe6e 	bl	8001d24 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e093      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	4b29      	ldr	r3, [pc, #164]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	071b      	lsls	r3, r3, #28
 800408e:	491b      	ldr	r1, [pc, #108]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004094:	4b1b      	ldr	r3, [pc, #108]	@ (8004104 <HAL_RCC_OscConfig+0x480>)
 8004096:	2201      	movs	r2, #1
 8004098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fd fe43 	bl	8001d24 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fd fe3f 	bl	8001d24 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e064      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b4:	4b11      	ldr	r3, [pc, #68]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x41e>
 80040c0:	e05c      	b.n	800417c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c2:	4b10      	ldr	r3, [pc, #64]	@ (8004104 <HAL_RCC_OscConfig+0x480>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fd fe2c 	bl	8001d24 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d0:	f7fd fe28 	bl	8001d24 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e04d      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e2:	4b06      	ldr	r3, [pc, #24]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x44c>
 80040ee:	e045      	b.n	800417c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d107      	bne.n	8004108 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e040      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
 80040fc:	40023800 	.word	0x40023800
 8004100:	40007000 	.word	0x40007000
 8004104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004108:	4b1f      	ldr	r3, [pc, #124]	@ (8004188 <HAL_RCC_OscConfig+0x504>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d030      	beq.n	8004178 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d129      	bne.n	8004178 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	429a      	cmp	r2, r3
 8004130:	d122      	bne.n	8004178 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004138:	4013      	ands	r3, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800413e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004140:	4293      	cmp	r3, r2
 8004142:	d119      	bne.n	8004178 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800414e:	085b      	lsrs	r3, r3, #1
 8004150:	3b01      	subs	r3, #1
 8004152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d10f      	bne.n	8004178 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004164:	429a      	cmp	r2, r3
 8004166:	d107      	bne.n	8004178 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004172:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d001      	beq.n	800417c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	40023800 	.word	0x40023800

0800418c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e073      	b.n	800428a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7f5b      	ldrb	r3, [r3, #29]
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fd fba2 	bl	80018fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2202      	movs	r2, #2
 80041bc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d055      	beq.n	8004278 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	22ca      	movs	r2, #202	@ 0xca
 80041d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2253      	movs	r2, #83	@ 0x53
 80041da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 f99d 	bl	800451c <RTC_EnterInitMode>
 80041e2:	4603      	mov	r3, r0
 80041e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d12c      	bne.n	8004246 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80041fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041fe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6899      	ldr	r1, [r3, #8]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	68d2      	ldr	r2, [r2, #12]
 8004226:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6919      	ldr	r1, [r3, #16]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	041a      	lsls	r2, r3, #16
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f9a4 	bl	800458a <RTC_ExitInitMode>
 8004242:	4603      	mov	r3, r0
 8004244:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004246:	7bfb      	ldrb	r3, [r7, #15]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d110      	bne.n	800426e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800425a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	22ff      	movs	r2, #255	@ 0xff
 8004274:	625a      	str	r2, [r3, #36]	@ 0x24
 8004276:	e001      	b.n	800427c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004292:	b590      	push	{r4, r7, lr}
 8004294:	b087      	sub	sp, #28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	7f1b      	ldrb	r3, [r3, #28]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_RTC_SetTime+0x1c>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e087      	b.n	80043be <HAL_RTC_SetTime+0x12c>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2202      	movs	r2, #2
 80042b8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d126      	bne.n	800430e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2200      	movs	r2, #0
 80042d2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f97b 	bl	80045d4 <RTC_ByteToBcd2>
 80042de:	4603      	mov	r3, r0
 80042e0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	785b      	ldrb	r3, [r3, #1]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 f974 	bl	80045d4 <RTC_ByteToBcd2>
 80042ec:	4603      	mov	r3, r0
 80042ee:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80042f0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	789b      	ldrb	r3, [r3, #2]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f96c 	bl	80045d4 <RTC_ByteToBcd2>
 80042fc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80042fe:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	78db      	ldrb	r3, [r3, #3]
 8004306:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004308:	4313      	orrs	r3, r2
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	e018      	b.n	8004340 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	2200      	movs	r2, #0
 8004320:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	785b      	ldrb	r3, [r3, #1]
 800432c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800432e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004334:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	78db      	ldrb	r3, [r3, #3]
 800433a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	22ca      	movs	r2, #202	@ 0xca
 8004346:	625a      	str	r2, [r3, #36]	@ 0x24
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2253      	movs	r2, #83	@ 0x53
 800434e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f8e3 	bl	800451c <RTC_EnterInitMode>
 8004356:	4603      	mov	r3, r0
 8004358:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800435a:	7cfb      	ldrb	r3, [r7, #19]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d120      	bne.n	80043a2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800436a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800436e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800437e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6899      	ldr	r1, [r3, #8]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	431a      	orrs	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	430a      	orrs	r2, r1
 8004396:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f8f6 	bl	800458a <RTC_ExitInitMode>
 800439e:	4603      	mov	r3, r0
 80043a0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80043a2:	7cfb      	ldrb	r3, [r7, #19]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2201      	movs	r2, #1
 80043ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	22ff      	movs	r2, #255	@ 0xff
 80043b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]

  return status;
 80043bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd90      	pop	{r4, r7, pc}

080043c6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043c6:	b590      	push	{r4, r7, lr}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	7f1b      	ldrb	r3, [r3, #28]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_RTC_SetDate+0x1c>
 80043de:	2302      	movs	r3, #2
 80043e0:	e071      	b.n	80044c6 <HAL_RTC_SetDate+0x100>
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2202      	movs	r2, #2
 80043ec:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10e      	bne.n	8004412 <HAL_RTC_SetDate+0x4c>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d008      	beq.n	8004412 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	f023 0310 	bic.w	r3, r3, #16
 8004408:	b2db      	uxtb	r3, r3
 800440a:	330a      	adds	r3, #10
 800440c:	b2da      	uxtb	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d11c      	bne.n	8004452 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	78db      	ldrb	r3, [r3, #3]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f8d9 	bl	80045d4 <RTC_ByteToBcd2>
 8004422:	4603      	mov	r3, r0
 8004424:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	785b      	ldrb	r3, [r3, #1]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 f8d2 	bl	80045d4 <RTC_ByteToBcd2>
 8004430:	4603      	mov	r3, r0
 8004432:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004434:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	789b      	ldrb	r3, [r3, #2]
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f8ca 	bl	80045d4 <RTC_ByteToBcd2>
 8004440:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004442:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e00e      	b.n	8004470 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	78db      	ldrb	r3, [r3, #3]
 8004456:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800445e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004464:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	22ca      	movs	r2, #202	@ 0xca
 8004476:	625a      	str	r2, [r3, #36]	@ 0x24
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2253      	movs	r2, #83	@ 0x53
 800447e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f84b 	bl	800451c <RTC_EnterInitMode>
 8004486:	4603      	mov	r3, r0
 8004488:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800448a:	7cfb      	ldrb	r3, [r7, #19]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10c      	bne.n	80044aa <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800449a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800449e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f872 	bl	800458a <RTC_ExitInitMode>
 80044a6:	4603      	mov	r3, r0
 80044a8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2201      	movs	r2, #1
 80044b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	22ff      	movs	r2, #255	@ 0xff
 80044bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	771a      	strb	r2, [r3, #28]

  return status;
 80044c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	371c      	adds	r7, #28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd90      	pop	{r4, r7, pc}
	...

080044d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0d      	ldr	r2, [pc, #52]	@ (8004518 <HAL_RTC_WaitForSynchro+0x48>)
 80044e2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044e4:	f7fd fc1e 	bl	8001d24 <HAL_GetTick>
 80044e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044ea:	e009      	b.n	8004500 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044ec:	f7fd fc1a 	bl	8001d24 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044fa:	d901      	bls.n	8004500 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e007      	b.n	8004510 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0ee      	beq.n	80044ec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	00017f5f 	.word	0x00017f5f

0800451c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d122      	bne.n	8004580 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004548:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800454a:	f7fd fbeb 	bl	8001d24 <HAL_GetTick>
 800454e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004550:	e00c      	b.n	800456c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004552:	f7fd fbe7 	bl	8001d24 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004560:	d904      	bls.n	800456c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2204      	movs	r2, #4
 8004566:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004576:	2b00      	cmp	r3, #0
 8004578:	d102      	bne.n	8004580 <RTC_EnterInitMode+0x64>
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d1e8      	bne.n	8004552 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045a4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d10a      	bne.n	80045ca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ff8b 	bl	80044d0 <HAL_RTC_WaitForSynchro>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2204      	movs	r2, #4
 80045c4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80045e2:	e005      	b.n	80045f0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3301      	adds	r3, #1
 80045e8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	3b0a      	subs	r3, #10
 80045ee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80045f0:	79fb      	ldrb	r3, [r7, #7]
 80045f2:	2b09      	cmp	r3, #9
 80045f4:	d8f6      	bhi.n	80045e4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	79fb      	ldrb	r3, [r7, #7]
 8004600:	4313      	orrs	r3, r2
 8004602:	b2db      	uxtb	r3, r3
}
 8004604:	4618      	mov	r0, r3
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e07b      	b.n	800471a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	2b00      	cmp	r3, #0
 8004628:	d108      	bne.n	800463c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004632:	d009      	beq.n	8004648 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	61da      	str	r2, [r3, #28]
 800463a:	e005      	b.n	8004648 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f7fd f8da 	bl	800181c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800467e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004690:	431a      	orrs	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046cc:	ea42 0103 	orr.w	r1, r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	f003 0104 	and.w	r1, r3, #4
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ee:	f003 0210 	and.w	r2, r3, #16
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	69da      	ldr	r2, [r3, #28]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004708:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b088      	sub	sp, #32
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800473c:	2b01      	cmp	r3, #1
 800473e:	d101      	bne.n	8004744 <HAL_SPI_Transmit+0x22>
 8004740:	2302      	movs	r3, #2
 8004742:	e12d      	b.n	80049a0 <HAL_SPI_Transmit+0x27e>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800474c:	f7fd faea 	bl	8001d24 <HAL_GetTick>
 8004750:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004762:	2302      	movs	r3, #2
 8004764:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004766:	e116      	b.n	8004996 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_SPI_Transmit+0x52>
 800476e:	88fb      	ldrh	r3, [r7, #6]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004778:	e10d      	b.n	8004996 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2203      	movs	r2, #3
 800477e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	88fa      	ldrh	r2, [r7, #6]
 8004792:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c0:	d10f      	bne.n	80047e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d007      	beq.n	8004800 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004808:	d14f      	bne.n	80048aa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_SPI_Transmit+0xf6>
 8004812:	8afb      	ldrh	r3, [r7, #22]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d142      	bne.n	800489e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481c:	881a      	ldrh	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	1c9a      	adds	r2, r3, #2
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800483c:	e02f      	b.n	800489e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d112      	bne.n	8004872 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004850:	881a      	ldrh	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485c:	1c9a      	adds	r2, r3, #2
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004870:	e015      	b.n	800489e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004872:	f7fd fa57 	bl	8001d24 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d803      	bhi.n	800488a <HAL_SPI_Transmit+0x168>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d102      	bne.n	8004890 <HAL_SPI_Transmit+0x16e>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800489c:	e07b      	b.n	8004996 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1ca      	bne.n	800483e <HAL_SPI_Transmit+0x11c>
 80048a8:	e050      	b.n	800494c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d002      	beq.n	80048b8 <HAL_SPI_Transmit+0x196>
 80048b2:	8afb      	ldrh	r3, [r7, #22]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d144      	bne.n	8004942 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	330c      	adds	r3, #12
 80048c2:	7812      	ldrb	r2, [r2, #0]
 80048c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	3b01      	subs	r3, #1
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048de:	e030      	b.n	8004942 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d113      	bne.n	8004916 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	330c      	adds	r3, #12
 80048f8:	7812      	ldrb	r2, [r2, #0]
 80048fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	1c5a      	adds	r2, r3, #1
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004914:	e015      	b.n	8004942 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004916:	f7fd fa05 	bl	8001d24 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d803      	bhi.n	800492e <HAL_SPI_Transmit+0x20c>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d102      	bne.n	8004934 <HAL_SPI_Transmit+0x212>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004940:	e029      	b.n	8004996 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1c9      	bne.n	80048e0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f8b1 	bl	8004ab8 <SPI_EndRxTxTransaction>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2220      	movs	r2, #32
 8004960:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800496a:	2300      	movs	r3, #0
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	613b      	str	r3, [r7, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e003      	b.n	8004996 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800499e:	7ffb      	ldrb	r3, [r7, #31]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b088      	sub	sp, #32
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	603b      	str	r3, [r7, #0]
 80049b4:	4613      	mov	r3, r2
 80049b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049b8:	f7fd f9b4 	bl	8001d24 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c0:	1a9b      	subs	r3, r3, r2
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	4413      	add	r3, r2
 80049c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049c8:	f7fd f9ac 	bl	8001d24 <HAL_GetTick>
 80049cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049ce:	4b39      	ldr	r3, [pc, #228]	@ (8004ab4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	015b      	lsls	r3, r3, #5
 80049d4:	0d1b      	lsrs	r3, r3, #20
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80049de:	e054      	b.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d050      	beq.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80049e8:	f7fd f99c 	bl	8001d24 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d902      	bls.n	80049fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d13d      	bne.n	8004a7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a16:	d111      	bne.n	8004a3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a20:	d004      	beq.n	8004a2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a2a:	d107      	bne.n	8004a3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a44:	d10f      	bne.n	8004a66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e017      	b.n	8004aaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	3b01      	subs	r3, #1
 8004a88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4013      	ands	r3, r2
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	bf0c      	ite	eq
 8004a9a:	2301      	moveq	r3, #1
 8004a9c:	2300      	movne	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d19b      	bne.n	80049e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	200035f8 	.word	0x200035f8

08004ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2201      	movs	r2, #1
 8004acc:	2102      	movs	r1, #2
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f7ff ff6a 	bl	80049a8 <SPI_WaitFlagStateUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d007      	beq.n	8004aea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ade:	f043 0220 	orr.w	r2, r3, #32
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e032      	b.n	8004b50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004aea:	4b1b      	ldr	r3, [pc, #108]	@ (8004b58 <SPI_EndRxTxTransaction+0xa0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a1b      	ldr	r2, [pc, #108]	@ (8004b5c <SPI_EndRxTxTransaction+0xa4>)
 8004af0:	fba2 2303 	umull	r2, r3, r2, r3
 8004af4:	0d5b      	lsrs	r3, r3, #21
 8004af6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b08:	d112      	bne.n	8004b30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2200      	movs	r2, #0
 8004b12:	2180      	movs	r1, #128	@ 0x80
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f7ff ff47 	bl	80049a8 <SPI_WaitFlagStateUntilTimeout>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d016      	beq.n	8004b4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b24:	f043 0220 	orr.w	r2, r3, #32
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e00f      	b.n	8004b50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b46:	2b80      	cmp	r3, #128	@ 0x80
 8004b48:	d0f2      	beq.n	8004b30 <SPI_EndRxTxTransaction+0x78>
 8004b4a:	e000      	b.n	8004b4e <SPI_EndRxTxTransaction+0x96>
        break;
 8004b4c:	bf00      	nop
  }

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	200035f8 	.word	0x200035f8
 8004b5c:	165e9f81 	.word	0x165e9f81

08004b60 <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e04a      	b.n	8004c08 <HAL_HalfDuplex_Init+0xa8>
  /* Check the parameters */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fc fee4 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2224      	movs	r2, #36	@ 0x24
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fc8d 	bl	80054c4 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695a      	ldr	r2, [r3, #20]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004bc8:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0208 	orr.w	r2, r2, #8
 8004bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b0ba      	sub	sp, #232	@ 0xe8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10f      	bne.n	8004c76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <HAL_UART_IRQHandler+0x66>
 8004c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c66:	f003 0320 	and.w	r3, r3, #32
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fb69 	bl	8005346 <UART_Receive_IT>
      return;
 8004c74:	e25b      	b.n	800512e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f000 80de 	beq.w	8004e3c <HAL_UART_IRQHandler+0x22c>
 8004c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80d1 	beq.w	8004e3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00b      	beq.n	8004cbe <HAL_UART_IRQHandler+0xae>
 8004ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d005      	beq.n	8004cbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb6:	f043 0201 	orr.w	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00b      	beq.n	8004ce2 <HAL_UART_IRQHandler+0xd2>
 8004cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d005      	beq.n	8004ce2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cda:	f043 0202 	orr.w	r2, r3, #2
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <HAL_UART_IRQHandler+0xf6>
 8004cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d005      	beq.n	8004d06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfe:	f043 0204 	orr.w	r2, r3, #4
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d011      	beq.n	8004d36 <HAL_UART_IRQHandler+0x126>
 8004d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d105      	bne.n	8004d2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	f043 0208 	orr.w	r2, r3, #8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 81f2 	beq.w	8005124 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_UART_IRQHandler+0x14e>
 8004d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 faf4 	bl	8005346 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d68:	2b40      	cmp	r3, #64	@ 0x40
 8004d6a:	bf0c      	ite	eq
 8004d6c:	2301      	moveq	r3, #1
 8004d6e:	2300      	movne	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d103      	bne.n	8004d8a <HAL_UART_IRQHandler+0x17a>
 8004d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d04f      	beq.n	8004e2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f9fc 	bl	8005188 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9a:	2b40      	cmp	r3, #64	@ 0x40
 8004d9c:	d141      	bne.n	8004e22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004db8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3314      	adds	r3, #20
 8004dc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004dca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004dd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004de2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1d9      	bne.n	8004d9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d013      	beq.n	8004e1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ff0 <HAL_UART_IRQHandler+0x3e0>)
 8004df8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fd f941 	bl	8002086 <HAL_DMA_Abort_IT>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e14:	4610      	mov	r0, r2
 8004e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	e00e      	b.n	8004e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f99e 	bl	800515c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e20:	e00a      	b.n	8004e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f99a 	bl	800515c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e28:	e006      	b.n	8004e38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f996 	bl	800515c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e36:	e175      	b.n	8005124 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e38:	bf00      	nop
    return;
 8004e3a:	e173      	b.n	8005124 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	f040 814f 	bne.w	80050e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8148 	beq.w	80050e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8141 	beq.w	80050e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	60bb      	str	r3, [r7, #8]
 8004e76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e82:	2b40      	cmp	r3, #64	@ 0x40
 8004e84:	f040 80b6 	bne.w	8004ff4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8145 	beq.w	8005128 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	f080 813e 	bcs.w	8005128 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004eb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ebe:	f000 8088 	beq.w	8004fd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	330c      	adds	r3, #12
 8004ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	330c      	adds	r3, #12
 8004eea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004efa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1d9      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3314      	adds	r3, #20
 8004f14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3314      	adds	r3, #20
 8004f2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e1      	bne.n	8004f0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3314      	adds	r3, #20
 8004f50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3314      	adds	r3, #20
 8004f6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e3      	bne.n	8004f4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	330c      	adds	r3, #12
 8004f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fa2:	f023 0310 	bic.w	r3, r3, #16
 8004fa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	330c      	adds	r3, #12
 8004fb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004fb4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004fb6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004fba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004fbc:	e841 2300 	strex	r3, r2, [r1]
 8004fc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d1e3      	bne.n	8004f90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fc ffea 	bl	8001fa6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2202      	movs	r2, #2
 8004fd6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f8c1 	bl	8005170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fee:	e09b      	b.n	8005128 <HAL_UART_IRQHandler+0x518>
 8004ff0:	0800524f 	.word	0x0800524f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 808e 	beq.w	800512c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 8089 	beq.w	800512c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	330c      	adds	r3, #12
 8005020:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800502a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005030:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	330c      	adds	r3, #12
 800503a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800503e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005040:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800504c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e3      	bne.n	800501a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3314      	adds	r3, #20
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	623b      	str	r3, [r7, #32]
   return(result);
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	f023 0301 	bic.w	r3, r3, #1
 8005068:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	3314      	adds	r3, #20
 8005072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005076:	633a      	str	r2, [r7, #48]	@ 0x30
 8005078:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800507c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800507e:	e841 2300 	strex	r3, r2, [r1]
 8005082:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1e3      	bne.n	8005052 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	330c      	adds	r3, #12
 800509e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	e853 3f00 	ldrex	r3, [r3]
 80050a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0310 	bic.w	r3, r3, #16
 80050ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050bc:	61fa      	str	r2, [r7, #28]
 80050be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	e841 2300 	strex	r3, r2, [r1]
 80050c8:	617b      	str	r3, [r7, #20]
   return(result);
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1e3      	bne.n	8005098 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050da:	4619      	mov	r1, r3
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f847 	bl	8005170 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050e2:	e023      	b.n	800512c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d009      	beq.n	8005104 <HAL_UART_IRQHandler+0x4f4>
 80050f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f8ba 	bl	8005276 <UART_Transmit_IT>
    return;
 8005102:	e014      	b.n	800512e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00e      	beq.n	800512e <HAL_UART_IRQHandler+0x51e>
 8005110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f8fa 	bl	8005316 <UART_EndTransmit_IT>
    return;
 8005122:	e004      	b.n	800512e <HAL_UART_IRQHandler+0x51e>
    return;
 8005124:	bf00      	nop
 8005126:	e002      	b.n	800512e <HAL_UART_IRQHandler+0x51e>
      return;
 8005128:	bf00      	nop
 800512a:	e000      	b.n	800512e <HAL_UART_IRQHandler+0x51e>
      return;
 800512c:	bf00      	nop
  }
}
 800512e:	37e8      	adds	r7, #232	@ 0xe8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800513c:	bf00      	nop
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	460b      	mov	r3, r1
 800517a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b095      	sub	sp, #84	@ 0x54
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	330c      	adds	r3, #12
 8005196:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800519a:	e853 3f00 	ldrex	r3, [r3]
 800519e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	330c      	adds	r3, #12
 80051ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80051b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051b8:	e841 2300 	strex	r3, r2, [r1]
 80051bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1e5      	bne.n	8005190 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3314      	adds	r3, #20
 80051ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	e853 3f00 	ldrex	r3, [r3]
 80051d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3314      	adds	r3, #20
 80051e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051ec:	e841 2300 	strex	r3, r2, [r1]
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1e5      	bne.n	80051c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d119      	bne.n	8005234 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f023 0310 	bic.w	r3, r3, #16
 8005216:	647b      	str	r3, [r7, #68]	@ 0x44
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005220:	61ba      	str	r2, [r7, #24]
 8005222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6979      	ldr	r1, [r7, #20]
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	613b      	str	r3, [r7, #16]
   return(result);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e5      	bne.n	8005200 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005242:	bf00      	nop
 8005244:	3754      	adds	r7, #84	@ 0x54
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800525a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f7ff ff77 	bl	800515c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005276:	b480      	push	{r7}
 8005278:	b085      	sub	sp, #20
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b21      	cmp	r3, #33	@ 0x21
 8005288:	d13e      	bne.n	8005308 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005292:	d114      	bne.n	80052be <UART_Transmit_IT+0x48>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d110      	bne.n	80052be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	1c9a      	adds	r2, r3, #2
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	621a      	str	r2, [r3, #32]
 80052bc:	e008      	b.n	80052d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	1c59      	adds	r1, r3, #1
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6211      	str	r1, [r2, #32]
 80052c8:	781a      	ldrb	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29b      	uxth	r3, r3
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	4619      	mov	r1, r3
 80052de:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10f      	bne.n	8005304 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68da      	ldr	r2, [r3, #12]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80052f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005302:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005304:	2300      	movs	r3, #0
 8005306:	e000      	b.n	800530a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005308:	2302      	movs	r3, #2
  }
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68da      	ldr	r2, [r3, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800532c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2220      	movs	r2, #32
 8005332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f7ff fefc 	bl	8005134 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b08c      	sub	sp, #48	@ 0x30
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b22      	cmp	r3, #34	@ 0x22
 8005358:	f040 80ae 	bne.w	80054b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005364:	d117      	bne.n	8005396 <UART_Receive_IT+0x50>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d113      	bne.n	8005396 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800536e:	2300      	movs	r3, #0
 8005370:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005376:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	b29b      	uxth	r3, r3
 8005380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005384:	b29a      	uxth	r2, r3
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538e:	1c9a      	adds	r2, r3, #2
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	629a      	str	r2, [r3, #40]	@ 0x28
 8005394:	e026      	b.n	80053e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053a8:	d007      	beq.n	80053ba <UART_Receive_IT+0x74>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10a      	bne.n	80053c8 <UART_Receive_IT+0x82>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d106      	bne.n	80053c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e008      	b.n	80053da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4619      	mov	r1, r3
 80053f2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d15d      	bne.n	80054b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0220 	bic.w	r2, r2, #32
 8005406:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005416:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	695a      	ldr	r2, [r3, #20]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0201 	bic.w	r2, r2, #1
 8005426:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543a:	2b01      	cmp	r3, #1
 800543c:	d135      	bne.n	80054aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	330c      	adds	r3, #12
 800544a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	613b      	str	r3, [r7, #16]
   return(result);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	f023 0310 	bic.w	r3, r3, #16
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005464:	623a      	str	r2, [r7, #32]
 8005466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	69f9      	ldr	r1, [r7, #28]
 800546a:	6a3a      	ldr	r2, [r7, #32]
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	61bb      	str	r3, [r7, #24]
   return(result);
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e5      	bne.n	8005444 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b10      	cmp	r3, #16
 8005484:	d10a      	bne.n	800549c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fe64 	bl	8005170 <HAL_UARTEx_RxEventCallback>
 80054a8:	e002      	b.n	80054b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7ff fe4c 	bl	8005148 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	e002      	b.n	80054ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e000      	b.n	80054ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3730      	adds	r7, #48	@ 0x30
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054c8:	b0c0      	sub	sp, #256	@ 0x100
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	68d9      	ldr	r1, [r3, #12]
 80054e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	ea40 0301 	orr.w	r3, r0, r1
 80054ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	431a      	orrs	r2, r3
 8005504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005508:	69db      	ldr	r3, [r3, #28]
 800550a:	4313      	orrs	r3, r2
 800550c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800551c:	f021 010c 	bic.w	r1, r1, #12
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800552a:	430b      	orrs	r3, r1
 800552c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800552e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800553a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553e:	6999      	ldr	r1, [r3, #24]
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	ea40 0301 	orr.w	r3, r0, r1
 800554a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b8f      	ldr	r3, [pc, #572]	@ (8005790 <UART_SetConfig+0x2cc>)
 8005554:	429a      	cmp	r2, r3
 8005556:	d005      	beq.n	8005564 <UART_SetConfig+0xa0>
 8005558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	4b8d      	ldr	r3, [pc, #564]	@ (8005794 <UART_SetConfig+0x2d0>)
 8005560:	429a      	cmp	r2, r3
 8005562:	d104      	bne.n	800556e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005564:	f7fe fa9e 	bl	8003aa4 <HAL_RCC_GetPCLK2Freq>
 8005568:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800556c:	e003      	b.n	8005576 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800556e:	f7fe fa85 	bl	8003a7c <HAL_RCC_GetPCLK1Freq>
 8005572:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557a:	69db      	ldr	r3, [r3, #28]
 800557c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005580:	f040 810c 	bne.w	800579c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005588:	2200      	movs	r2, #0
 800558a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800558e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005592:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005596:	4622      	mov	r2, r4
 8005598:	462b      	mov	r3, r5
 800559a:	1891      	adds	r1, r2, r2
 800559c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800559e:	415b      	adcs	r3, r3
 80055a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055a6:	4621      	mov	r1, r4
 80055a8:	eb12 0801 	adds.w	r8, r2, r1
 80055ac:	4629      	mov	r1, r5
 80055ae:	eb43 0901 	adc.w	r9, r3, r1
 80055b2:	f04f 0200 	mov.w	r2, #0
 80055b6:	f04f 0300 	mov.w	r3, #0
 80055ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055c6:	4690      	mov	r8, r2
 80055c8:	4699      	mov	r9, r3
 80055ca:	4623      	mov	r3, r4
 80055cc:	eb18 0303 	adds.w	r3, r8, r3
 80055d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055d4:	462b      	mov	r3, r5
 80055d6:	eb49 0303 	adc.w	r3, r9, r3
 80055da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80055ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80055f2:	460b      	mov	r3, r1
 80055f4:	18db      	adds	r3, r3, r3
 80055f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80055f8:	4613      	mov	r3, r2
 80055fa:	eb42 0303 	adc.w	r3, r2, r3
 80055fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8005600:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005604:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005608:	f7fb fafe 	bl	8000c08 <__aeabi_uldivmod>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4b61      	ldr	r3, [pc, #388]	@ (8005798 <UART_SetConfig+0x2d4>)
 8005612:	fba3 2302 	umull	r2, r3, r3, r2
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	011c      	lsls	r4, r3, #4
 800561a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800561e:	2200      	movs	r2, #0
 8005620:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005624:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005628:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800562c:	4642      	mov	r2, r8
 800562e:	464b      	mov	r3, r9
 8005630:	1891      	adds	r1, r2, r2
 8005632:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005634:	415b      	adcs	r3, r3
 8005636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005638:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800563c:	4641      	mov	r1, r8
 800563e:	eb12 0a01 	adds.w	sl, r2, r1
 8005642:	4649      	mov	r1, r9
 8005644:	eb43 0b01 	adc.w	fp, r3, r1
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005654:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800565c:	4692      	mov	sl, r2
 800565e:	469b      	mov	fp, r3
 8005660:	4643      	mov	r3, r8
 8005662:	eb1a 0303 	adds.w	r3, sl, r3
 8005666:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800566a:	464b      	mov	r3, r9
 800566c:	eb4b 0303 	adc.w	r3, fp, r3
 8005670:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005680:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005684:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005688:	460b      	mov	r3, r1
 800568a:	18db      	adds	r3, r3, r3
 800568c:	643b      	str	r3, [r7, #64]	@ 0x40
 800568e:	4613      	mov	r3, r2
 8005690:	eb42 0303 	adc.w	r3, r2, r3
 8005694:	647b      	str	r3, [r7, #68]	@ 0x44
 8005696:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800569a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800569e:	f7fb fab3 	bl	8000c08 <__aeabi_uldivmod>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	4b3b      	ldr	r3, [pc, #236]	@ (8005798 <UART_SetConfig+0x2d4>)
 80056aa:	fba3 2301 	umull	r2, r3, r3, r1
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	2264      	movs	r2, #100	@ 0x64
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
 80056b6:	1acb      	subs	r3, r1, r3
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056be:	4b36      	ldr	r3, [pc, #216]	@ (8005798 <UART_SetConfig+0x2d4>)
 80056c0:	fba3 2302 	umull	r2, r3, r3, r2
 80056c4:	095b      	lsrs	r3, r3, #5
 80056c6:	005b      	lsls	r3, r3, #1
 80056c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056cc:	441c      	add	r4, r3
 80056ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80056dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80056e0:	4642      	mov	r2, r8
 80056e2:	464b      	mov	r3, r9
 80056e4:	1891      	adds	r1, r2, r2
 80056e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80056e8:	415b      	adcs	r3, r3
 80056ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056f0:	4641      	mov	r1, r8
 80056f2:	1851      	adds	r1, r2, r1
 80056f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80056f6:	4649      	mov	r1, r9
 80056f8:	414b      	adcs	r3, r1
 80056fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005708:	4659      	mov	r1, fp
 800570a:	00cb      	lsls	r3, r1, #3
 800570c:	4651      	mov	r1, sl
 800570e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005712:	4651      	mov	r1, sl
 8005714:	00ca      	lsls	r2, r1, #3
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	4603      	mov	r3, r0
 800571c:	4642      	mov	r2, r8
 800571e:	189b      	adds	r3, r3, r2
 8005720:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005724:	464b      	mov	r3, r9
 8005726:	460a      	mov	r2, r1
 8005728:	eb42 0303 	adc.w	r3, r2, r3
 800572c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800573c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005740:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005744:	460b      	mov	r3, r1
 8005746:	18db      	adds	r3, r3, r3
 8005748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800574a:	4613      	mov	r3, r2
 800574c:	eb42 0303 	adc.w	r3, r2, r3
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005752:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005756:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800575a:	f7fb fa55 	bl	8000c08 <__aeabi_uldivmod>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <UART_SetConfig+0x2d4>)
 8005764:	fba3 1302 	umull	r1, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	2164      	movs	r1, #100	@ 0x64
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	3332      	adds	r3, #50	@ 0x32
 8005776:	4a08      	ldr	r2, [pc, #32]	@ (8005798 <UART_SetConfig+0x2d4>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	f003 0207 	and.w	r2, r3, #7
 8005782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4422      	add	r2, r4
 800578a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800578c:	e106      	b.n	800599c <UART_SetConfig+0x4d8>
 800578e:	bf00      	nop
 8005790:	40011000 	.word	0x40011000
 8005794:	40011400 	.word	0x40011400
 8005798:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800579c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057a0:	2200      	movs	r2, #0
 80057a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057ae:	4642      	mov	r2, r8
 80057b0:	464b      	mov	r3, r9
 80057b2:	1891      	adds	r1, r2, r2
 80057b4:	6239      	str	r1, [r7, #32]
 80057b6:	415b      	adcs	r3, r3
 80057b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057be:	4641      	mov	r1, r8
 80057c0:	1854      	adds	r4, r2, r1
 80057c2:	4649      	mov	r1, r9
 80057c4:	eb43 0501 	adc.w	r5, r3, r1
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	00eb      	lsls	r3, r5, #3
 80057d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057d6:	00e2      	lsls	r2, r4, #3
 80057d8:	4614      	mov	r4, r2
 80057da:	461d      	mov	r5, r3
 80057dc:	4643      	mov	r3, r8
 80057de:	18e3      	adds	r3, r4, r3
 80057e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80057e4:	464b      	mov	r3, r9
 80057e6:	eb45 0303 	adc.w	r3, r5, r3
 80057ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80057fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f04f 0300 	mov.w	r3, #0
 8005806:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800580a:	4629      	mov	r1, r5
 800580c:	008b      	lsls	r3, r1, #2
 800580e:	4621      	mov	r1, r4
 8005810:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005814:	4621      	mov	r1, r4
 8005816:	008a      	lsls	r2, r1, #2
 8005818:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800581c:	f7fb f9f4 	bl	8000c08 <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4b60      	ldr	r3, [pc, #384]	@ (80059a8 <UART_SetConfig+0x4e4>)
 8005826:	fba3 2302 	umull	r2, r3, r3, r2
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	011c      	lsls	r4, r3, #4
 800582e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005832:	2200      	movs	r2, #0
 8005834:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005838:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800583c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005840:	4642      	mov	r2, r8
 8005842:	464b      	mov	r3, r9
 8005844:	1891      	adds	r1, r2, r2
 8005846:	61b9      	str	r1, [r7, #24]
 8005848:	415b      	adcs	r3, r3
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005850:	4641      	mov	r1, r8
 8005852:	1851      	adds	r1, r2, r1
 8005854:	6139      	str	r1, [r7, #16]
 8005856:	4649      	mov	r1, r9
 8005858:	414b      	adcs	r3, r1
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005868:	4659      	mov	r1, fp
 800586a:	00cb      	lsls	r3, r1, #3
 800586c:	4651      	mov	r1, sl
 800586e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005872:	4651      	mov	r1, sl
 8005874:	00ca      	lsls	r2, r1, #3
 8005876:	4610      	mov	r0, r2
 8005878:	4619      	mov	r1, r3
 800587a:	4603      	mov	r3, r0
 800587c:	4642      	mov	r2, r8
 800587e:	189b      	adds	r3, r3, r2
 8005880:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005884:	464b      	mov	r3, r9
 8005886:	460a      	mov	r2, r1
 8005888:	eb42 0303 	adc.w	r3, r2, r3
 800588c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	67bb      	str	r3, [r7, #120]	@ 0x78
 800589a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058a8:	4649      	mov	r1, r9
 80058aa:	008b      	lsls	r3, r1, #2
 80058ac:	4641      	mov	r1, r8
 80058ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b2:	4641      	mov	r1, r8
 80058b4:	008a      	lsls	r2, r1, #2
 80058b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058ba:	f7fb f9a5 	bl	8000c08 <__aeabi_uldivmod>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4611      	mov	r1, r2
 80058c4:	4b38      	ldr	r3, [pc, #224]	@ (80059a8 <UART_SetConfig+0x4e4>)
 80058c6:	fba3 2301 	umull	r2, r3, r3, r1
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	2264      	movs	r2, #100	@ 0x64
 80058ce:	fb02 f303 	mul.w	r3, r2, r3
 80058d2:	1acb      	subs	r3, r1, r3
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	3332      	adds	r3, #50	@ 0x32
 80058d8:	4a33      	ldr	r2, [pc, #204]	@ (80059a8 <UART_SetConfig+0x4e4>)
 80058da:	fba2 2303 	umull	r2, r3, r2, r3
 80058de:	095b      	lsrs	r3, r3, #5
 80058e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058e4:	441c      	add	r4, r3
 80058e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058ea:	2200      	movs	r2, #0
 80058ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80058ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80058f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	1891      	adds	r1, r2, r2
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	415b      	adcs	r3, r3
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005904:	4641      	mov	r1, r8
 8005906:	1851      	adds	r1, r2, r1
 8005908:	6039      	str	r1, [r7, #0]
 800590a:	4649      	mov	r1, r9
 800590c:	414b      	adcs	r3, r1
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800591c:	4659      	mov	r1, fp
 800591e:	00cb      	lsls	r3, r1, #3
 8005920:	4651      	mov	r1, sl
 8005922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005926:	4651      	mov	r1, sl
 8005928:	00ca      	lsls	r2, r1, #3
 800592a:	4610      	mov	r0, r2
 800592c:	4619      	mov	r1, r3
 800592e:	4603      	mov	r3, r0
 8005930:	4642      	mov	r2, r8
 8005932:	189b      	adds	r3, r3, r2
 8005934:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005936:	464b      	mov	r3, r9
 8005938:	460a      	mov	r2, r1
 800593a:	eb42 0303 	adc.w	r3, r2, r3
 800593e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	663b      	str	r3, [r7, #96]	@ 0x60
 800594a:	667a      	str	r2, [r7, #100]	@ 0x64
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005958:	4649      	mov	r1, r9
 800595a:	008b      	lsls	r3, r1, #2
 800595c:	4641      	mov	r1, r8
 800595e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005962:	4641      	mov	r1, r8
 8005964:	008a      	lsls	r2, r1, #2
 8005966:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800596a:	f7fb f94d 	bl	8000c08 <__aeabi_uldivmod>
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4b0d      	ldr	r3, [pc, #52]	@ (80059a8 <UART_SetConfig+0x4e4>)
 8005974:	fba3 1302 	umull	r1, r3, r3, r2
 8005978:	095b      	lsrs	r3, r3, #5
 800597a:	2164      	movs	r1, #100	@ 0x64
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	3332      	adds	r3, #50	@ 0x32
 8005986:	4a08      	ldr	r2, [pc, #32]	@ (80059a8 <UART_SetConfig+0x4e4>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	f003 020f 	and.w	r2, r3, #15
 8005992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4422      	add	r2, r4
 800599a:	609a      	str	r2, [r3, #8]
}
 800599c:	bf00      	nop
 800599e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059a2:	46bd      	mov	sp, r7
 80059a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059a8:	51eb851f 	.word	0x51eb851f

080059ac <MX_RTC_Init>:
   * @brief RTC Initialization Function
   * @param None
   * @retval None
   */
  void MX_RTC_Init(void)
 {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0

   /* USER CODE BEGIN RTC_Init 0 */

   /* USER CODE END RTC_Init 0 */

   RTC_TimeTypeDef sTime = {0};
 80059b2:	1d3b      	adds	r3, r7, #4
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	605a      	str	r2, [r3, #4]
 80059ba:	609a      	str	r2, [r3, #8]
 80059bc:	60da      	str	r2, [r3, #12]
 80059be:	611a      	str	r2, [r3, #16]
   RTC_DateTypeDef sDate = {0};
 80059c0:	2300      	movs	r3, #0
 80059c2:	603b      	str	r3, [r7, #0]

   /* USER CODE END RTC_Init 1 */

   /** Initialize RTC Only
   */
   hrtc.Instance = RTC;
 80059c4:	4b24      	ldr	r3, [pc, #144]	@ (8005a58 <MX_RTC_Init+0xac>)
 80059c6:	4a25      	ldr	r2, [pc, #148]	@ (8005a5c <MX_RTC_Init+0xb0>)
 80059c8:	601a      	str	r2, [r3, #0]
   hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80059ca:	4b23      	ldr	r3, [pc, #140]	@ (8005a58 <MX_RTC_Init+0xac>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	605a      	str	r2, [r3, #4]
   hrtc.Init.AsynchPrediv = 127;
 80059d0:	4b21      	ldr	r3, [pc, #132]	@ (8005a58 <MX_RTC_Init+0xac>)
 80059d2:	227f      	movs	r2, #127	@ 0x7f
 80059d4:	609a      	str	r2, [r3, #8]
   hrtc.Init.SynchPrediv = 255;
 80059d6:	4b20      	ldr	r3, [pc, #128]	@ (8005a58 <MX_RTC_Init+0xac>)
 80059d8:	22ff      	movs	r2, #255	@ 0xff
 80059da:	60da      	str	r2, [r3, #12]
   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80059dc:	4b1e      	ldr	r3, [pc, #120]	@ (8005a58 <MX_RTC_Init+0xac>)
 80059de:	2200      	movs	r2, #0
 80059e0:	611a      	str	r2, [r3, #16]
   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80059e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005a58 <MX_RTC_Init+0xac>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	615a      	str	r2, [r3, #20]
   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80059e8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a58 <MX_RTC_Init+0xac>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	619a      	str	r2, [r3, #24]
   if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80059ee:	481a      	ldr	r0, [pc, #104]	@ (8005a58 <MX_RTC_Init+0xac>)
 80059f0:	f7fe fbcc 	bl	800418c <HAL_RTC_Init>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <MX_RTC_Init+0x52>
   {
     Error_Handler();
 80059fa:	f7fb fed3 	bl	80017a4 <Error_Handler>

   /* USER CODE END Check_RTC_BKUP */

   /** Initialize RTC and set the Time and Date
   */
   sTime.Hours = 0x00;
 80059fe:	2300      	movs	r3, #0
 8005a00:	713b      	strb	r3, [r7, #4]
   sTime.Minutes = 0x0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	717b      	strb	r3, [r7, #5]
   sTime.Seconds = 0x00;
 8005a06:	2300      	movs	r3, #0
 8005a08:	71bb      	strb	r3, [r7, #6]
   sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
   sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]
   if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005a12:	1d3b      	adds	r3, r7, #4
 8005a14:	2201      	movs	r2, #1
 8005a16:	4619      	mov	r1, r3
 8005a18:	480f      	ldr	r0, [pc, #60]	@ (8005a58 <MX_RTC_Init+0xac>)
 8005a1a:	f7fe fc3a 	bl	8004292 <HAL_RTC_SetTime>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d001      	beq.n	8005a28 <MX_RTC_Init+0x7c>
   {
     Error_Handler();
 8005a24:	f7fb febe 	bl	80017a4 <Error_Handler>
   }
   sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8005a28:	2306      	movs	r3, #6
 8005a2a:	703b      	strb	r3, [r7, #0]
   sDate.Month = RTC_MONTH_APRIL;
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	707b      	strb	r3, [r7, #1]
   sDate.Date = 0x20;
 8005a30:	2320      	movs	r3, #32
 8005a32:	70bb      	strb	r3, [r7, #2]
   sDate.Year = 0x0;
 8005a34:	2300      	movs	r3, #0
 8005a36:	70fb      	strb	r3, [r7, #3]

   if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8005a38:	463b      	mov	r3, r7
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4806      	ldr	r0, [pc, #24]	@ (8005a58 <MX_RTC_Init+0xac>)
 8005a40:	f7fe fcc1 	bl	80043c6 <HAL_RTC_SetDate>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <MX_RTC_Init+0xa2>
   {
     Error_Handler();
 8005a4a:	f7fb feab 	bl	80017a4 <Error_Handler>
   }
   /* USER CODE BEGIN RTC_Init 2 */

   /* USER CODE END RTC_Init 2 */

 }
 8005a4e:	bf00      	nop
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	200058a4 	.word	0x200058a4
 8005a5c:	40002800 	.word	0x40002800

08005a60 <Drive_CS_low>:




void Drive_CS_low()
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8005a64:	2200      	movs	r2, #0
 8005a66:	2110      	movs	r1, #16
 8005a68:	4802      	ldr	r0, [pc, #8]	@ (8005a74 <Drive_CS_low+0x14>)
 8005a6a:	f7fc fca3 	bl	80023b4 <HAL_GPIO_WritePin>
}
 8005a6e:	bf00      	nop
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40020000 	.word	0x40020000

08005a78 <Drive_CS_high>:


void Drive_CS_high()
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	2110      	movs	r1, #16
 8005a80:	4802      	ldr	r0, [pc, #8]	@ (8005a8c <Drive_CS_high+0x14>)
 8005a82:	f7fc fc97 	bl	80023b4 <HAL_GPIO_WritePin>
}
 8005a86:	bf00      	nop
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40020000 	.word	0x40020000

08005a90 <Drive_DC_low>:


void Drive_DC_low()
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 0);
 8005a94:	2200      	movs	r2, #0
 8005a96:	2110      	movs	r1, #16
 8005a98:	4802      	ldr	r0, [pc, #8]	@ (8005aa4 <Drive_DC_low+0x14>)
 8005a9a:	f7fc fc8b 	bl	80023b4 <HAL_GPIO_WritePin>
}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	40020800 	.word	0x40020800

08005aa8 <Drive_DC_high>:


void Drive_DC_high()
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, 1);
 8005aac:	2201      	movs	r2, #1
 8005aae:	2110      	movs	r1, #16
 8005ab0:	4802      	ldr	r0, [pc, #8]	@ (8005abc <Drive_DC_high+0x14>)
 8005ab2:	f7fc fc7f 	bl	80023b4 <HAL_GPIO_WritePin>
}
 8005ab6:	bf00      	nop
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40020800 	.word	0x40020800

08005ac0 <Drive_RESET_low>:


void Drive_RESET_low()
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 0);
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2120      	movs	r1, #32
 8005ac8:	4802      	ldr	r0, [pc, #8]	@ (8005ad4 <Drive_RESET_low+0x14>)
 8005aca:	f7fc fc73 	bl	80023b4 <HAL_GPIO_WritePin>
}
 8005ace:	bf00      	nop
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40020800 	.word	0x40020800

08005ad8 <Drive_RESET_high>:


void Drive_RESET_high()
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, 1);
 8005adc:	2201      	movs	r2, #1
 8005ade:	2120      	movs	r1, #32
 8005ae0:	4802      	ldr	r0, [pc, #8]	@ (8005aec <Drive_RESET_high+0x14>)
 8005ae2:	f7fc fc67 	bl	80023b4 <HAL_GPIO_WritePin>
}
 8005ae6:	bf00      	nop
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	40020800 	.word	0x40020800

08005af0 <SPI_send_byte>:


void SPI_send_byte(uint8_t byte_to_transmit)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &byte_to_transmit, 1, 10);
 8005afa:	1df9      	adds	r1, r7, #7
 8005afc:	230a      	movs	r3, #10
 8005afe:	2201      	movs	r2, #1
 8005b00:	4803      	ldr	r0, [pc, #12]	@ (8005b10 <SPI_send_byte+0x20>)
 8005b02:	f7fe fe0e 	bl	8004722 <HAL_SPI_Transmit>
}
 8005b06:	bf00      	nop
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	20005844 	.word	0x20005844

08005b14 <SPI_send_array>:


void SPI_send_array(uint8_t *array_to_transmit, uint32_t array_size)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&hspi1, array_to_transmit, array_size, 100);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	2364      	movs	r3, #100	@ 0x64
 8005b24:	6879      	ldr	r1, [r7, #4]
 8005b26:	4803      	ldr	r0, [pc, #12]	@ (8005b34 <SPI_send_array+0x20>)
 8005b28:	f7fe fdfb 	bl	8004722 <HAL_SPI_Transmit>
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20005844 	.word	0x20005844

08005b38 <msDelay>:


void msDelay(uint32_t milliseconds)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b082      	sub	sp, #8
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fc f8fb 	bl	8001d3c <HAL_Delay>
}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <Display_command>:


void Display_command(uint8_t command)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	4603      	mov	r3, r0
 8005b56:	71fb      	strb	r3, [r7, #7]
	Drive_CS_low();
 8005b58:	f7ff ff82 	bl	8005a60 <Drive_CS_low>
	Drive_DC_low();
 8005b5c:	f7ff ff98 	bl	8005a90 <Drive_DC_low>
	SPI_send_byte(command);
 8005b60:	79fb      	ldrb	r3, [r7, #7]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7ff ffc4 	bl	8005af0 <SPI_send_byte>
	Drive_CS_high();
 8005b68:	f7ff ff86 	bl	8005a78 <Drive_CS_high>
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <Display_data>:

void Display_data(uint8_t data)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	71fb      	strb	r3, [r7, #7]
	Drive_CS_low();
 8005b7e:	f7ff ff6f 	bl	8005a60 <Drive_CS_low>
	Drive_DC_high();
 8005b82:	f7ff ff91 	bl	8005aa8 <Drive_DC_high>
	SPI_send_byte(data);
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff ffb1 	bl	8005af0 <SPI_send_byte>
	Drive_CS_high();
 8005b8e:	f7ff ff73 	bl	8005a78 <Drive_CS_high>
}
 8005b92:	bf00      	nop
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <Display_init>:
//====================== initialization sequence ========================//
/**
 *  @brief Initializes SSD1322 OLED display.
 */
void Display_init()
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	af00      	add	r7, sp, #0
	Drive_RESET_low();
 8005b9e:	f7ff ff8f 	bl	8005ac0 <Drive_RESET_low>
	msDelay(1);
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	f7ff ffc8 	bl	8005b38 <msDelay>
	Drive_RESET_high();
 8005ba8:	f7ff ff96 	bl	8005ad8 <Drive_RESET_high>
	msDelay(50);
 8005bac:	2032      	movs	r0, #50	@ 0x32
 8005bae:	f7ff ffc3 	bl	8005b38 <msDelay>
	Display_command(0xFD);
 8005bb2:	20fd      	movs	r0, #253	@ 0xfd
 8005bb4:	f7ff ffcb 	bl	8005b4e <Display_command>
	Display_data(0x12);
 8005bb8:	2012      	movs	r0, #18
 8005bba:	f7ff ffdb 	bl	8005b74 <Display_data>
	Display_command(0xAE);
 8005bbe:	20ae      	movs	r0, #174	@ 0xae
 8005bc0:	f7ff ffc5 	bl	8005b4e <Display_command>
	Display_command(0xB3);
 8005bc4:	20b3      	movs	r0, #179	@ 0xb3
 8005bc6:	f7ff ffc2 	bl	8005b4e <Display_command>
	Display_data(0x91);
 8005bca:	2091      	movs	r0, #145	@ 0x91
 8005bcc:	f7ff ffd2 	bl	8005b74 <Display_data>
	Display_command(0xCA);
 8005bd0:	20ca      	movs	r0, #202	@ 0xca
 8005bd2:	f7ff ffbc 	bl	8005b4e <Display_command>
	Display_data(0x3F);
 8005bd6:	203f      	movs	r0, #63	@ 0x3f
 8005bd8:	f7ff ffcc 	bl	8005b74 <Display_data>
	Display_command(0xA2);
 8005bdc:	20a2      	movs	r0, #162	@ 0xa2
 8005bde:	f7ff ffb6 	bl	8005b4e <Display_command>
	Display_data(0x00);
 8005be2:	2000      	movs	r0, #0
 8005be4:	f7ff ffc6 	bl	8005b74 <Display_data>
	Display_command(0xA1);
 8005be8:	20a1      	movs	r0, #161	@ 0xa1
 8005bea:	f7ff ffb0 	bl	8005b4e <Display_command>
	Display_data(0x00);
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f7ff ffc0 	bl	8005b74 <Display_data>
	Display_command(0xA0);
 8005bf4:	20a0      	movs	r0, #160	@ 0xa0
 8005bf6:	f7ff ffaa 	bl	8005b4e <Display_command>
	Display_data(0x14);
 8005bfa:	2014      	movs	r0, #20
 8005bfc:	f7ff ffba 	bl	8005b74 <Display_data>
	Display_data(0x11);
 8005c00:	2011      	movs	r0, #17
 8005c02:	f7ff ffb7 	bl	8005b74 <Display_data>
	Display_command(0xB5);
 8005c06:	20b5      	movs	r0, #181	@ 0xb5
 8005c08:	f7ff ffa1 	bl	8005b4e <Display_command>
	Display_data(0x00);
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	f7ff ffb1 	bl	8005b74 <Display_data>
	Display_command(0xAB);
 8005c12:	20ab      	movs	r0, #171	@ 0xab
 8005c14:	f7ff ff9b 	bl	8005b4e <Display_command>
	Display_data(0x01);
 8005c18:	2001      	movs	r0, #1
 8005c1a:	f7ff ffab 	bl	8005b74 <Display_data>
	Display_command(0xB4);
 8005c1e:	20b4      	movs	r0, #180	@ 0xb4
 8005c20:	f7ff ff95 	bl	8005b4e <Display_command>
	Display_data(0xA0);
 8005c24:	20a0      	movs	r0, #160	@ 0xa0
 8005c26:	f7ff ffa5 	bl	8005b74 <Display_data>
	Display_data(0xFD);
 8005c2a:	20fd      	movs	r0, #253	@ 0xfd
 8005c2c:	f7ff ffa2 	bl	8005b74 <Display_data>
	Display_command(0xC1);
 8005c30:	20c1      	movs	r0, #193	@ 0xc1
 8005c32:	f7ff ff8c 	bl	8005b4e <Display_command>
	Display_data(0xFF);
 8005c36:	20ff      	movs	r0, #255	@ 0xff
 8005c38:	f7ff ff9c 	bl	8005b74 <Display_data>
	Display_command(0xC7);
 8005c3c:	20c7      	movs	r0, #199	@ 0xc7
 8005c3e:	f7ff ff86 	bl	8005b4e <Display_command>
	Display_data(0x0F);
 8005c42:	200f      	movs	r0, #15
 8005c44:	f7ff ff96 	bl	8005b74 <Display_data>
	Display_command(0xB9);
 8005c48:	20b9      	movs	r0, #185	@ 0xb9
 8005c4a:	f7ff ff80 	bl	8005b4e <Display_command>
	Display_command(0xB1);
 8005c4e:	20b1      	movs	r0, #177	@ 0xb1
 8005c50:	f7ff ff7d 	bl	8005b4e <Display_command>
	Display_data(0xE2);
 8005c54:	20e2      	movs	r0, #226	@ 0xe2
 8005c56:	f7ff ff8d 	bl	8005b74 <Display_data>
	Display_command(0xD1);
 8005c5a:	20d1      	movs	r0, #209	@ 0xd1
 8005c5c:	f7ff ff77 	bl	8005b4e <Display_command>
	Display_data(0x82);
 8005c60:	2082      	movs	r0, #130	@ 0x82
 8005c62:	f7ff ff87 	bl	8005b74 <Display_data>
	Display_data(0x20);
 8005c66:	2020      	movs	r0, #32
 8005c68:	f7ff ff84 	bl	8005b74 <Display_data>
	Display_command(0xBB);
 8005c6c:	20bb      	movs	r0, #187	@ 0xbb
 8005c6e:	f7ff ff6e 	bl	8005b4e <Display_command>
	Display_data(0x1F);
 8005c72:	201f      	movs	r0, #31
 8005c74:	f7ff ff7e 	bl	8005b74 <Display_data>
	Display_command(0xB6);
 8005c78:	20b6      	movs	r0, #182	@ 0xb6
 8005c7a:	f7ff ff68 	bl	8005b4e <Display_command>
	Display_data(0x08);
 8005c7e:	2008      	movs	r0, #8
 8005c80:	f7ff ff78 	bl	8005b74 <Display_data>
	Display_command(0xBE);
 8005c84:	20be      	movs	r0, #190	@ 0xbe
 8005c86:	f7ff ff62 	bl	8005b4e <Display_command>
	Display_data(0x07);
 8005c8a:	2007      	movs	r0, #7
 8005c8c:	f7ff ff72 	bl	8005b74 <Display_data>
	Display_command(0xA6);
 8005c90:	20a6      	movs	r0, #166	@ 0xa6
 8005c92:	f7ff ff5c 	bl	8005b4e <Display_command>
	Display_command(0xA9);
 8005c96:	20a9      	movs	r0, #169	@ 0xa9
 8005c98:	f7ff ff59 	bl	8005b4e <Display_command>
	msDelay(10);
 8005c9c:	200a      	movs	r0, #10
 8005c9e:	f7ff ff4b 	bl	8005b38 <msDelay>
	Display_command(0xAF);
 8005ca2:	20af      	movs	r0, #175	@ 0xaf
 8005ca4:	f7ff ff53 	bl	8005b4e <Display_command>
	msDelay(50);
 8005ca8:	2032      	movs	r0, #50	@ 0x32
 8005caa:	f7ff ff45 	bl	8005b38 <msDelay>
}
 8005cae:	bf00      	nop
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <Display_set_window>:
	Display_command(SET_DEFAULT_GRAYSCALE_TAB);
}


void Display_set_window(uint8_t start_column, uint8_t end_column, uint8_t start_row, uint8_t end_row)
{
 8005cb2:	b590      	push	{r4, r7, lr}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	4604      	mov	r4, r0
 8005cba:	4608      	mov	r0, r1
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	4623      	mov	r3, r4
 8005cc2:	71fb      	strb	r3, [r7, #7]
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	71bb      	strb	r3, [r7, #6]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	717b      	strb	r3, [r7, #5]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	713b      	strb	r3, [r7, #4]
	Display_command(SET_COLUMN_ADDR);  //set columns range
 8005cd0:	2015      	movs	r0, #21
 8005cd2:	f7ff ff3c 	bl	8005b4e <Display_command>
	Display_data(28+start_column);
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	331c      	adds	r3, #28
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff ff49 	bl	8005b74 <Display_data>
	Display_data(28+end_column);
 8005ce2:	79bb      	ldrb	r3, [r7, #6]
 8005ce4:	331c      	adds	r3, #28
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff ff43 	bl	8005b74 <Display_data>
	Display_command(SET_ROW_ADDR);  //set rows range
 8005cee:	2075      	movs	r0, #117	@ 0x75
 8005cf0:	f7ff ff2d 	bl	8005b4e <Display_command>
	Display_data(start_row);
 8005cf4:	797b      	ldrb	r3, [r7, #5]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff ff3c 	bl	8005b74 <Display_data>
	Display_data(end_row);
 8005cfc:	793b      	ldrb	r3, [r7, #4]
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff ff38 	bl	8005b74 <Display_data>
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd90      	pop	{r4, r7, pc}

08005d0c <Send_buffer>:


void Send_buffer(uint8_t* buffer, uint32_t buffer_size)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
	Display_command(ENABLE_RAM_WRITE);  //enable write of pixels
 8005d16:	205c      	movs	r0, #92	@ 0x5c
 8005d18:	f7ff ff19 	bl	8005b4e <Display_command>
	Drive_CS_low();
 8005d1c:	f7ff fea0 	bl	8005a60 <Drive_CS_low>
	Drive_DC_high();
 8005d20:	f7ff fec2 	bl	8005aa8 <Drive_DC_high>
	SPI_send_array(buffer, buffer_size);
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7ff fef4 	bl	8005b14 <SPI_send_array>
	Drive_CS_high();
 8005d2c:	f7ff fea4 	bl	8005a78 <Drive_CS_high>
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <set_buffer_size>:

uint16_t _buffer_height = 64;       //buffer dimensions used to determine if pixel is within array bounds
uint16_t _buffer_width = 256;      //by default buffer size is equal to OLED size

void set_buffer_size(uint16_t _buffer_width, uint16_t buffer_height)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	4603      	mov	r3, r0
 8005d40:	460a      	mov	r2, r1
 8005d42:	80fb      	strh	r3, [r7, #6]
 8005d44:	4613      	mov	r3, r2
 8005d46:	80bb      	strh	r3, [r7, #4]
	_buffer_height = buffer_height;
 8005d48:	4a04      	ldr	r2, [pc, #16]	@ (8005d5c <set_buffer_size+0x24>)
 8005d4a:	88bb      	ldrh	r3, [r7, #4]
 8005d4c:	8013      	strh	r3, [r2, #0]
	_buffer_width = _buffer_width;
}
 8005d4e:	bf00      	nop
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	20003602 	.word	0x20003602

08005d60 <fill_buffer>:

void fill_buffer(uint8_t *frame_buffer, uint8_t brightness)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
	uint8_t byte_value = (brightness << 4) | brightness;
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	b25a      	sxtb	r2, r3
 8005d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	b25b      	sxtb	r3, r3
 8005d7a:	72fb      	strb	r3, [r7, #11]
	uint32_t buffer_size = _buffer_height * _buffer_width / 2;
 8005d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005db8 <fill_buffer+0x58>)
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	461a      	mov	r2, r3
 8005d82:	4b0e      	ldr	r3, [pc, #56]	@ (8005dbc <fill_buffer+0x5c>)
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	fb02 f303 	mul.w	r3, r2, r3
 8005d8a:	0fda      	lsrs	r2, r3, #31
 8005d8c:	4413      	add	r3, r2
 8005d8e:	105b      	asrs	r3, r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
	while (buffer_size--)
 8005d92:	e004      	b.n	8005d9e <fill_buffer+0x3e>
	{
		*frame_buffer++ = byte_value;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	607a      	str	r2, [r7, #4]
 8005d9a:	7afa      	ldrb	r2, [r7, #11]
 8005d9c:	701a      	strb	r2, [r3, #0]
	while (buffer_size--)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1e5a      	subs	r2, r3, #1
 8005da2:	60fa      	str	r2, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1f5      	bne.n	8005d94 <fill_buffer+0x34>
	}
}
 8005da8:	bf00      	nop
 8005daa:	bf00      	nop
 8005dac:	3714      	adds	r7, #20
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	20003602 	.word	0x20003602
 8005dbc:	20003604 	.word	0x20003604

08005dc0 <draw_pixel>:

void draw_pixel(uint8_t *frame_buffer, uint16_t x, uint16_t y, uint8_t brightness)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	4608      	mov	r0, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	817b      	strh	r3, [r7, #10]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	813b      	strh	r3, [r7, #8]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	71fb      	strb	r3, [r7, #7]
	if(x > (_buffer_width-1) || y > (_buffer_height-1))
 8005dda:	4b35      	ldr	r3, [pc, #212]	@ (8005eb0 <draw_pixel+0xf0>)
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	897a      	ldrh	r2, [r7, #10]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d25f      	bcs.n	8005ea4 <draw_pixel+0xe4>
 8005de4:	4b33      	ldr	r3, [pc, #204]	@ (8005eb4 <draw_pixel+0xf4>)
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	893a      	ldrh	r2, [r7, #8]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d25a      	bcs.n	8005ea4 <draw_pixel+0xe4>
		return;

	if ((y * _buffer_width + x) % 2 == 1)
 8005dee:	893b      	ldrh	r3, [r7, #8]
 8005df0:	4a2f      	ldr	r2, [pc, #188]	@ (8005eb0 <draw_pixel+0xf0>)
 8005df2:	8812      	ldrh	r2, [r2, #0]
 8005df4:	fb03 f202 	mul.w	r2, r3, r2
 8005df8:	897b      	ldrh	r3, [r7, #10]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	bfb8      	it	lt
 8005e04:	425b      	neglt	r3, r3
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d125      	bne.n	8005e56 <draw_pixel+0x96>
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0xF0) | brightness;
 8005e0a:	893b      	ldrh	r3, [r7, #8]
 8005e0c:	4a28      	ldr	r2, [pc, #160]	@ (8005eb0 <draw_pixel+0xf0>)
 8005e0e:	8812      	ldrh	r2, [r2, #0]
 8005e10:	fb03 f202 	mul.w	r2, r3, r2
 8005e14:	897b      	ldrh	r3, [r7, #10]
 8005e16:	4413      	add	r3, r2
 8005e18:	0fda      	lsrs	r2, r3, #31
 8005e1a:	4413      	add	r3, r2
 8005e1c:	105b      	asrs	r3, r3, #1
 8005e1e:	461a      	mov	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	b25b      	sxtb	r3, r3
 8005e28:	f023 030f 	bic.w	r3, r3, #15
 8005e2c:	b25a      	sxtb	r2, r3
 8005e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	b259      	sxtb	r1, r3
 8005e36:	893b      	ldrh	r3, [r7, #8]
 8005e38:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb0 <draw_pixel+0xf0>)
 8005e3a:	8812      	ldrh	r2, [r2, #0]
 8005e3c:	fb03 f202 	mul.w	r2, r3, r2
 8005e40:	897b      	ldrh	r3, [r7, #10]
 8005e42:	4413      	add	r3, r2
 8005e44:	0fda      	lsrs	r2, r3, #31
 8005e46:	4413      	add	r3, r2
 8005e48:	105b      	asrs	r3, r3, #1
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	b2ca      	uxtb	r2, r1
 8005e52:	701a      	strb	r2, [r3, #0]
 8005e54:	e027      	b.n	8005ea6 <draw_pixel+0xe6>
	}
	else
	{
		frame_buffer[((y * _buffer_width) + x) / 2] = (frame_buffer[((y * _buffer_width) + x) / 2] & 0x0F) | (brightness << 4);
 8005e56:	893b      	ldrh	r3, [r7, #8]
 8005e58:	4a15      	ldr	r2, [pc, #84]	@ (8005eb0 <draw_pixel+0xf0>)
 8005e5a:	8812      	ldrh	r2, [r2, #0]
 8005e5c:	fb03 f202 	mul.w	r2, r3, r2
 8005e60:	897b      	ldrh	r3, [r7, #10]
 8005e62:	4413      	add	r3, r2
 8005e64:	0fda      	lsrs	r2, r3, #31
 8005e66:	4413      	add	r3, r2
 8005e68:	105b      	asrs	r3, r3, #1
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	b25b      	sxtb	r3, r3
 8005e74:	f003 030f 	and.w	r3, r3, #15
 8005e78:	b25a      	sxtb	r2, r3
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	011b      	lsls	r3, r3, #4
 8005e7e:	b25b      	sxtb	r3, r3
 8005e80:	4313      	orrs	r3, r2
 8005e82:	b259      	sxtb	r1, r3
 8005e84:	893b      	ldrh	r3, [r7, #8]
 8005e86:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb0 <draw_pixel+0xf0>)
 8005e88:	8812      	ldrh	r2, [r2, #0]
 8005e8a:	fb03 f202 	mul.w	r2, r3, r2
 8005e8e:	897b      	ldrh	r3, [r7, #10]
 8005e90:	4413      	add	r3, r2
 8005e92:	0fda      	lsrs	r2, r3, #31
 8005e94:	4413      	add	r3, r2
 8005e96:	105b      	asrs	r3, r3, #1
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	b2ca      	uxtb	r2, r1
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e000      	b.n	8005ea6 <draw_pixel+0xe6>
		return;
 8005ea4:	bf00      	nop
	}
}
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	20003604 	.word	0x20003604
 8005eb4:	20003602 	.word	0x20003602

08005eb8 <draw_rect_filled>:

void draw_rect_filled(uint8_t *frame_buffer, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint8_t brightness)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b086      	sub	sp, #24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	4608      	mov	r0, r1
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	817b      	strh	r3, [r7, #10]
 8005eca:	460b      	mov	r3, r1
 8005ecc:	813b      	strh	r3, [r7, #8]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	80fb      	strh	r3, [r7, #6]
	for (uint16_t i = x0; i <= x1; i++)
 8005ed2:	897b      	ldrh	r3, [r7, #10]
 8005ed4:	82fb      	strh	r3, [r7, #22]
 8005ed6:	e013      	b.n	8005f00 <draw_rect_filled+0x48>
	{
		for (uint16_t j = y0; j <= y1; j++)
 8005ed8:	893b      	ldrh	r3, [r7, #8]
 8005eda:	82bb      	strh	r3, [r7, #20]
 8005edc:	e009      	b.n	8005ef2 <draw_rect_filled+0x3a>
		{
			draw_pixel(frame_buffer, i, j, brightness);
 8005ede:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ee2:	8aba      	ldrh	r2, [r7, #20]
 8005ee4:	8af9      	ldrh	r1, [r7, #22]
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f7ff ff6a 	bl	8005dc0 <draw_pixel>
		for (uint16_t j = y0; j <= y1; j++)
 8005eec:	8abb      	ldrh	r3, [r7, #20]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	82bb      	strh	r3, [r7, #20]
 8005ef2:	8aba      	ldrh	r2, [r7, #20]
 8005ef4:	8c3b      	ldrh	r3, [r7, #32]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d9f1      	bls.n	8005ede <draw_rect_filled+0x26>
	for (uint16_t i = x0; i <= x1; i++)
 8005efa:	8afb      	ldrh	r3, [r7, #22]
 8005efc:	3301      	adds	r3, #1
 8005efe:	82fb      	strh	r3, [r7, #22]
 8005f00:	8afa      	ldrh	r2, [r7, #22]
 8005f02:	88fb      	ldrh	r3, [r7, #6]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d9e7      	bls.n	8005ed8 <draw_rect_filled+0x20>
		}
	}
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <select_font>:

void select_font(const GFXfont *new_gfx_font)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	gfx_font = new_gfx_font;
 8005f1c:	4a04      	ldr	r2, [pc, #16]	@ (8005f30 <select_font+0x1c>)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6013      	str	r3, [r2, #0]
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	200058c4 	.word	0x200058c4

08005f34 <draw_char>:

void draw_char(uint8_t *frame_buffer, uint8_t c, uint16_t x, uint16_t y, uint8_t brightness)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b08a      	sub	sp, #40	@ 0x28
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	4608      	mov	r0, r1
 8005f3e:	4611      	mov	r1, r2
 8005f40:	461a      	mov	r2, r3
 8005f42:	4603      	mov	r3, r0
 8005f44:	72fb      	strb	r3, [r7, #11]
 8005f46:	460b      	mov	r3, r1
 8005f48:	813b      	strh	r3, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	80fb      	strh	r3, [r7, #6]
	if(gfx_font == NULL)
 8005f4e:	4b44      	ldr	r3, [pc, #272]	@ (8006060 <draw_char+0x12c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d07f      	beq.n	8006056 <draw_char+0x122>
		return;

	c -= (uint8_t)gfx_font->first;          //convert input char to corresponding byte from font array
 8005f56:	4b42      	ldr	r3, [pc, #264]	@ (8006060 <draw_char+0x12c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	891b      	ldrh	r3, [r3, #8]
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	7afa      	ldrb	r2, [r7, #11]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	72fb      	strb	r3, [r7, #11]
    GFXglyph *glyph = gfx_font->glyph + c;  //get pointer of glyph corresponding to char
 8005f64:	4b3e      	ldr	r3, [pc, #248]	@ (8006060 <draw_char+0x12c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	7afb      	ldrb	r3, [r7, #11]
 8005f6c:	00db      	lsls	r3, r3, #3
 8005f6e:	4413      	add	r3, r2
 8005f70:	61fb      	str	r3, [r7, #28]
    uint8_t *bitmap = gfx_font->bitmap;     //get pointer of char bitmap
 8005f72:	4b3b      	ldr	r3, [pc, #236]	@ (8006060 <draw_char+0x12c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	61bb      	str	r3, [r7, #24]

    uint16_t bo = glyph->bitmapOffset;
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint8_t width = glyph->width;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	789b      	ldrb	r3, [r3, #2]
 8005f84:	75fb      	strb	r3, [r7, #23]
    uint8_t height = glyph->height;
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	78db      	ldrb	r3, [r3, #3]
 8005f8a:	75bb      	strb	r3, [r7, #22]

    int8_t x_offset = glyph->xOffset;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	795b      	ldrb	r3, [r3, #5]
 8005f90:	757b      	strb	r3, [r7, #21]
    int8_t y_offset = glyph->yOffset;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	799b      	ldrb	r3, [r3, #6]
 8005f96:	753b      	strb	r3, [r7, #20]

    //decide for background brightness or font brightness
    uint8_t bit = 0;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t bits = 0;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    uint8_t y_pos = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint8_t x_pos = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	for (y_pos = 0; y_pos < height; y_pos++)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb6:	e048      	b.n	800604a <draw_char+0x116>
	{
		for (x_pos = 0; x_pos < width; x_pos++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fbe:	e03a      	b.n	8006036 <draw_char+0x102>
		{
			if (!(bit++ & 7))
 8005fc0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	f887 2025 	strb.w	r2, [r7, #37]	@ 0x25
 8005fca:	f003 0307 	and.w	r3, r3, #7
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d108      	bne.n	8005fe4 <draw_char+0xb0>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8005fd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8005fd8:	461a      	mov	r2, r3
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	4413      	add	r3, r2
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			}
			if (bits & 0x80)
 8005fe4:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	da1a      	bge.n	8006022 <draw_char+0xee>
			{
				draw_pixel(frame_buffer, x + x_offset + x_pos, y + y_offset+y_pos, brightness);
 8005fec:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	893b      	ldrh	r3, [r7, #8]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	4413      	add	r3, r2
 8006000:	b299      	uxth	r1, r3
 8006002:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8006006:	b29a      	uxth	r2, r3
 8006008:	88fb      	ldrh	r3, [r7, #6]
 800600a:	4413      	add	r3, r2
 800600c:	b29a      	uxth	r2, r3
 800600e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006012:	b29b      	uxth	r3, r3
 8006014:	4413      	add	r3, r2
 8006016:	b29a      	uxth	r2, r3
 8006018:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f7ff fecf 	bl	8005dc0 <draw_pixel>
			}
			else
			{

			}
			bits <<= 1;
 8006022:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		for (x_pos = 0; x_pos < width; x_pos++)
 800602c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006030:	3301      	adds	r3, #1
 8006032:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006036:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800603a:	7dfb      	ldrb	r3, [r7, #23]
 800603c:	429a      	cmp	r2, r3
 800603e:	d3bf      	bcc.n	8005fc0 <draw_char+0x8c>
	for (y_pos = 0; y_pos < height; y_pos++)
 8006040:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006044:	3301      	adds	r3, #1
 8006046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800604a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800604e:	7dbb      	ldrb	r3, [r7, #22]
 8006050:	429a      	cmp	r2, r3
 8006052:	d3b1      	bcc.n	8005fb8 <draw_char+0x84>
 8006054:	e000      	b.n	8006058 <draw_char+0x124>
		return;
 8006056:	bf00      	nop
		}
	}
}
 8006058:	3728      	adds	r7, #40	@ 0x28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	200058c4 	.word	0x200058c4

08006064 <draw_text>:

void draw_text(uint8_t *frame_buffer, const char* text, uint16_t x, uint16_t y, uint8_t brightness)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	4611      	mov	r1, r2
 8006070:	461a      	mov	r2, r3
 8006072:	460b      	mov	r3, r1
 8006074:	80fb      	strh	r3, [r7, #6]
 8006076:	4613      	mov	r3, r2
 8006078:	80bb      	strh	r3, [r7, #4]
    while (*text)
 800607a:	e01b      	b.n	80060b4 <draw_text+0x50>
    {
        draw_char(frame_buffer, *text, x, y, brightness);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	7819      	ldrb	r1, [r3, #0]
 8006080:	88b8      	ldrh	r0, [r7, #4]
 8006082:	88fa      	ldrh	r2, [r7, #6]
 8006084:	7e3b      	ldrb	r3, [r7, #24]
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	4603      	mov	r3, r0
 800608a:	68f8      	ldr	r0, [r7, #12]
 800608c:	f7ff ff52 	bl	8005f34 <draw_char>
        x = x + gfx_font->glyph[*text-32].xAdvance;
 8006090:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <draw_text+0x64>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685a      	ldr	r2, [r3, #4]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800609e:	3b20      	subs	r3, #32
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	4413      	add	r3, r2
 80060a4:	791b      	ldrb	r3, [r3, #4]
 80060a6:	461a      	mov	r2, r3
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	4413      	add	r3, r2
 80060ac:	80fb      	strh	r3, [r7, #6]
        text++;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60bb      	str	r3, [r7, #8]
    while (*text)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1df      	bne.n	800607c <draw_text+0x18>
    }
}
 80060bc:	bf00      	nop
 80060be:	bf00      	nop
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	200058c4 	.word	0x200058c4

080060cc <draw_bitmap_4bpp>:
		}
	}
}

void draw_bitmap_4bpp(uint8_t *frame_buffer, const uint8_t *bitmap, uint16_t x0, uint16_t y0, uint16_t x_size, uint16_t y_size)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	4611      	mov	r1, r2
 80060d8:	461a      	mov	r2, r3
 80060da:	460b      	mov	r3, r1
 80060dc:	80fb      	strh	r3, [r7, #6]
 80060de:	4613      	mov	r3, r2
 80060e0:	80bb      	strh	r3, [r7, #4]
	uint16_t bitmap_pos = 0;       //byte index in bitmap array
 80060e2:	2300      	movs	r3, #0
 80060e4:	83fb      	strh	r3, [r7, #30]
	uint16_t processed_pixels = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	83bb      	strh	r3, [r7, #28]
	uint8_t pixel_parity = 0;      //if pixel is even = 0; odd = 1
 80060ea:	2300      	movs	r3, #0
 80060ec:	75fb      	strb	r3, [r7, #23]

	for (uint16_t i = y0; i < y0 + y_size; i++)
 80060ee:	88bb      	ldrh	r3, [r7, #4]
 80060f0:	837b      	strh	r3, [r7, #26]
 80060f2:	e034      	b.n	800615e <draw_bitmap_4bpp+0x92>
	{
		for (uint16_t j = x0; j < x0 + x_size; j++)
 80060f4:	88fb      	ldrh	r3, [r7, #6]
 80060f6:	833b      	strh	r3, [r7, #24]
 80060f8:	e028      	b.n	800614c <draw_bitmap_4bpp+0x80>
		{
			pixel_parity = processed_pixels % 2;
 80060fa:	8bbb      	ldrh	r3, [r7, #28]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	75fb      	strb	r3, [r7, #23]

			if(pixel_parity == 0)
 8006104:	7dfb      	ldrb	r3, [r7, #23]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10e      	bne.n	8006128 <draw_bitmap_4bpp+0x5c>
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos] >> 4);
 800610a:	8bfb      	ldrh	r3, [r7, #30]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	4413      	add	r3, r2
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	091b      	lsrs	r3, r3, #4
 8006114:	b2db      	uxtb	r3, r3
 8006116:	8b7a      	ldrh	r2, [r7, #26]
 8006118:	8b39      	ldrh	r1, [r7, #24]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f7ff fe50 	bl	8005dc0 <draw_pixel>
				processed_pixels++;
 8006120:	8bbb      	ldrh	r3, [r7, #28]
 8006122:	3301      	adds	r3, #1
 8006124:	83bb      	strh	r3, [r7, #28]
 8006126:	e00e      	b.n	8006146 <draw_bitmap_4bpp+0x7a>
			}
			else
			{
				draw_pixel(frame_buffer, j, i, bitmap[bitmap_pos]);
 8006128:	8bfb      	ldrh	r3, [r7, #30]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	4413      	add	r3, r2
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	8b7a      	ldrh	r2, [r7, #26]
 8006132:	8b39      	ldrh	r1, [r7, #24]
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f7ff fe43 	bl	8005dc0 <draw_pixel>
				processed_pixels++;
 800613a:	8bbb      	ldrh	r3, [r7, #28]
 800613c:	3301      	adds	r3, #1
 800613e:	83bb      	strh	r3, [r7, #28]
				bitmap_pos++;
 8006140:	8bfb      	ldrh	r3, [r7, #30]
 8006142:	3301      	adds	r3, #1
 8006144:	83fb      	strh	r3, [r7, #30]
		for (uint16_t j = x0; j < x0 + x_size; j++)
 8006146:	8b3b      	ldrh	r3, [r7, #24]
 8006148:	3301      	adds	r3, #1
 800614a:	833b      	strh	r3, [r7, #24]
 800614c:	8b3a      	ldrh	r2, [r7, #24]
 800614e:	88f9      	ldrh	r1, [r7, #6]
 8006150:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006152:	440b      	add	r3, r1
 8006154:	429a      	cmp	r2, r3
 8006156:	dbd0      	blt.n	80060fa <draw_bitmap_4bpp+0x2e>
	for (uint16_t i = y0; i < y0 + y_size; i++)
 8006158:	8b7b      	ldrh	r3, [r7, #26]
 800615a:	3301      	adds	r3, #1
 800615c:	837b      	strh	r3, [r7, #26]
 800615e:	8b7a      	ldrh	r2, [r7, #26]
 8006160:	88b9      	ldrh	r1, [r7, #4]
 8006162:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006164:	440b      	add	r3, r1
 8006166:	429a      	cmp	r2, r3
 8006168:	dbc4      	blt.n	80060f4 <draw_bitmap_4bpp+0x28>
			}
		}
	}
}
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	3720      	adds	r7, #32
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <send_buffer_to_OLED>:

void send_buffer_to_OLED(uint8_t *frame_buffer, uint16_t start_x, uint16_t start_y)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	807b      	strh	r3, [r7, #2]
 8006180:	4613      	mov	r3, r2
 8006182:	803b      	strh	r3, [r7, #0]
	Display_set_window(0, 63, 0, 127);
 8006184:	237f      	movs	r3, #127	@ 0x7f
 8006186:	2200      	movs	r2, #0
 8006188:	213f      	movs	r1, #63	@ 0x3f
 800618a:	2000      	movs	r0, #0
 800618c:	f7ff fd91 	bl	8005cb2 <Display_set_window>
	Send_buffer(frame_buffer + (start_y * OLED_WIDTH / 2) + start_x, 8192);
 8006190:	883b      	ldrh	r3, [r7, #0]
 8006192:	01db      	lsls	r3, r3, #7
 8006194:	461a      	mov	r2, r3
 8006196:	887b      	ldrh	r3, [r7, #2]
 8006198:	4413      	add	r3, r2
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	4413      	add	r3, r2
 800619e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80061a2:	4618      	mov	r0, r3
 80061a4:	f7ff fdb2 	bl	8005d0c <Send_buffer>
}
 80061a8:	bf00      	nop
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <mcp23017_regForPin>:
 * @param pin
 * @param portAaddr
 * @param portBaddr
 * @return
 */
static uint8_t mcp23017_regForPin (uint8_t pin, uint8_t portAaddr, uint8_t portBaddr){
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	71fb      	strb	r3, [r7, #7]
 80061ba:	460b      	mov	r3, r1
 80061bc:	71bb      	strb	r3, [r7, #6]
 80061be:	4613      	mov	r3, r2
 80061c0:	717b      	strb	r3, [r7, #5]
	return(pin<8) ? portAaddr : portBaddr;
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	2b07      	cmp	r3, #7
 80061c6:	d801      	bhi.n	80061cc <mcp23017_regForPin+0x1c>
 80061c8:	79bb      	ldrb	r3, [r7, #6]
 80061ca:	e000      	b.n	80061ce <mcp23017_regForPin+0x1e>
 80061cc:	797b      	ldrb	r3, [r7, #5]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <mcp23017_bitForPin>:
/**
 * Bit number associated to a given pin
 * @param pin
 * @return
 */
static uint8_t mcp23017_bitForPin(uint8_t pin){
 80061da:	b480      	push	{r7}
 80061dc:	b083      	sub	sp, #12
 80061de:	af00      	add	r7, sp, #0
 80061e0:	4603      	mov	r3, r0
 80061e2:	71fb      	strb	r3, [r7, #7]
	return pin % 8;
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	b2db      	uxtb	r3, r3
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <mcp23017_readRegister>:
 * Reads a given register
 * @param hdev
 * @param addr
 * @return
 */
HAL_StatusTypeDef mcp23017_readRegister(MCP23017_HandleTypeDef *hdev, uint8_t addr, uint8_t *data) {
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	@ 0x28
 80061fc:	af04      	add	r7, sp, #16
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	460b      	mov	r3, r1
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	72fb      	strb	r3, [r7, #11]
	// read the current GPINTEN
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Read(hdev->hi2c1, hdev->addr, addr, 1, data, 1, HAL_MAX_DELAY);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6818      	ldr	r0, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	8899      	ldrh	r1, [r3, #4]
 800620e:	7afb      	ldrb	r3, [r7, #11]
 8006210:	b29a      	uxth	r2, r3
 8006212:	f04f 33ff 	mov.w	r3, #4294967295
 8006216:	9302      	str	r3, [sp, #8]
 8006218:	2301      	movs	r3, #1
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	2301      	movs	r3, #1
 8006222:	f7fc fb1f 	bl	8002864 <HAL_I2C_Mem_Read>
 8006226:	4603      	mov	r3, r0
 8006228:	75fb      	strb	r3, [r7, #23]
	return ret;
 800622a:	7dfb      	ldrb	r3, [r7, #23]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3718      	adds	r7, #24
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <mcp23017_writeRegister>:
 * @param regAddr Register Address
 * @param regValue Value to write to
 * @return
 */
static HAL_StatusTypeDef mcp23017_writeRegister(MCP23017_HandleTypeDef *hdev, uint8_t regAddr, uint8_t regValue)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af04      	add	r7, sp, #16
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	70fb      	strb	r3, [r7, #3]
 8006240:	4613      	mov	r3, r2
 8006242:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	ret = HAL_I2C_Mem_Write(hdev->hi2c1, hdev->addr, regAddr, 1, (uint8_t*) &regValue, 1, HAL_MAX_DELAY);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	8899      	ldrh	r1, [r3, #4]
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	b29a      	uxth	r2, r3
 8006250:	f04f 33ff 	mov.w	r3, #4294967295
 8006254:	9302      	str	r3, [sp, #8]
 8006256:	2301      	movs	r3, #1
 8006258:	9301      	str	r3, [sp, #4]
 800625a:	1cbb      	adds	r3, r7, #2
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	2301      	movs	r3, #1
 8006260:	f7fc fa06 	bl	8002670 <HAL_I2C_Mem_Write>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
	return ret;
 8006268:	7bfb      	ldrb	r3, [r7, #15]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <mcp23017_updateRegisterBit>:
 * @param pin
 * @param pValue
 * @param portAaddr
 * @param portBaddr
 */
HAL_StatusTypeDef mcp23017_updateRegisterBit(MCP23017_HandleTypeDef *hdev, uint8_t pin, uint8_t pValue, uint8_t portAaddr, uint8_t portBaddr) {
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	4608      	mov	r0, r1
 800627c:	4611      	mov	r1, r2
 800627e:	461a      	mov	r2, r3
 8006280:	4603      	mov	r3, r0
 8006282:	70fb      	strb	r3, [r7, #3]
 8006284:	460b      	mov	r3, r1
 8006286:	70bb      	strb	r3, [r7, #2]
 8006288:	4613      	mov	r3, r2
 800628a:	707b      	strb	r3, [r7, #1]
	uint8_t regValue;
	uint8_t regAddr = mcp23017_regForPin(pin,portAaddr,portBaddr);
 800628c:	7e3a      	ldrb	r2, [r7, #24]
 800628e:	7879      	ldrb	r1, [r7, #1]
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff ff8c 	bl	80061b0 <mcp23017_regForPin>
 8006298:	4603      	mov	r3, r0
 800629a:	73fb      	strb	r3, [r7, #15]
	uint8_t bit = mcp23017_bitForPin(pin);
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff ff9b 	bl	80061da <mcp23017_bitForPin>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73bb      	strb	r3, [r7, #14]
	mcp23017_readRegister(hdev, regAddr, &regValue);
 80062a8:	f107 020d 	add.w	r2, r7, #13
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	4619      	mov	r1, r3
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7ff ffa1 	bl	80061f8 <mcp23017_readRegister>

	// set the value for the particular bit
	bitWrite(regValue,bit,pValue);
 80062b6:	78bb      	ldrb	r3, [r7, #2]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d009      	beq.n	80062d0 <mcp23017_updateRegisterBit+0x5e>
 80062bc:	7bbb      	ldrb	r3, [r7, #14]
 80062be:	2201      	movs	r2, #1
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	7b7b      	ldrb	r3, [r7, #13]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	737b      	strb	r3, [r7, #13]
 80062ce:	e00a      	b.n	80062e6 <mcp23017_updateRegisterBit+0x74>
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	2201      	movs	r2, #1
 80062d4:	fa02 f303 	lsl.w	r3, r2, r3
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	43db      	mvns	r3, r3
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	7b7b      	ldrb	r3, [r7, #13]
 80062e0:	4013      	ands	r3, r2
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	737b      	strb	r3, [r7, #13]

	return (mcp23017_writeRegister(hdev, regAddr,regValue));
 80062e6:	7b7a      	ldrb	r2, [r7, #13]
 80062e8:	7bfb      	ldrb	r3, [r7, #15]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff ffa1 	bl	8006234 <mcp23017_writeRegister>
 80062f2:	4603      	mov	r3, r0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <mcp23017_init>:
 * @param hdev
 * @param hi2c1
 * @param addr
 */
HAL_StatusTypeDef mcp23017_init(MCP23017_HandleTypeDef *hdev, I2C_HandleTypeDef *hi2c1, uint16_t addr)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	4613      	mov	r3, r2
 8006308:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef ret;

	hdev->hi2c1 = hi2c1;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	601a      	str	r2, [r3, #0]
	hdev->addr = addr << 1;
 8006310:	88fb      	ldrh	r3, [r7, #6]
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	809a      	strh	r2, [r3, #4]

	ret = HAL_I2C_IsDeviceReady(hi2c1, hdev->addr, 20, I2C_READYNESS_DELAY);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8899      	ldrh	r1, [r3, #4]
 800631e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8006322:	2214      	movs	r2, #20
 8006324:	68b8      	ldr	r0, [r7, #8]
 8006326:	f7fc fccf 	bl	8002cc8 <HAL_I2C_IsDeviceReady>
 800632a:	4603      	mov	r3, r0
 800632c:	75bb      	strb	r3, [r7, #22]
	if (ret != HAL_OK) return ret;
 800632e:	7dbb      	ldrb	r3, [r7, #22]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <mcp23017_init+0x3c>
 8006334:	7dbb      	ldrb	r3, [r7, #22]
 8006336:	e01a      	b.n	800636e <mcp23017_init+0x72>
	//DISSLW = 	0 : slew rate enabled
	//HAEN = 	0 : hardware address pin is always enabled on 23017
	//ODR = 	0 : open drain output
	//INTPOL = 	0 : interrupt active low
	// bit0 - unplemented read as 0
	uint8_t byte = 0 | 1 << 5 | 1 << 6;
 8006338:	2360      	movs	r3, #96	@ 0x60
 800633a:	757b      	strb	r3, [r7, #21]

	for (uint8_t i = 0; i < 2; i++) {
 800633c:	2300      	movs	r3, #0
 800633e:	75fb      	strb	r3, [r7, #23]
 8006340:	e011      	b.n	8006366 <mcp23017_init+0x6a>
		ret = mcp23017_writeRegister(hdev, MCP23017_IOCONA+i, byte);
 8006342:	7dfb      	ldrb	r3, [r7, #23]
 8006344:	330a      	adds	r3, #10
 8006346:	b2db      	uxtb	r3, r3
 8006348:	7d7a      	ldrb	r2, [r7, #21]
 800634a:	4619      	mov	r1, r3
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f7ff ff71 	bl	8006234 <mcp23017_writeRegister>
 8006352:	4603      	mov	r3, r0
 8006354:	75bb      	strb	r3, [r7, #22]
		if (ret != HAL_OK) return ret;
 8006356:	7dbb      	ldrb	r3, [r7, #22]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <mcp23017_init+0x64>
 800635c:	7dbb      	ldrb	r3, [r7, #22]
 800635e:	e006      	b.n	800636e <mcp23017_init+0x72>
	for (uint8_t i = 0; i < 2; i++) {
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	3301      	adds	r3, #1
 8006364:	75fb      	strb	r3, [r7, #23]
 8006366:	7dfb      	ldrb	r3, [r7, #23]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d9ea      	bls.n	8006342 <mcp23017_init+0x46>
	}

	return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <mcp23017_portMode>:
 * @param pullups
 * @param inverted
 * @return
 */
HAL_StatusTypeDef mcp23017_portMode(MCP23017_HandleTypeDef *hdev, MCP23017Port_t port, MCP23017_PinModeIO_t pinmode, MCP23017_PinPolarity_t pinpolarity)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	4608      	mov	r0, r1
 8006380:	4611      	mov	r1, r2
 8006382:	461a      	mov	r2, r3
 8006384:	4603      	mov	r3, r0
 8006386:	70fb      	strb	r3, [r7, #3]
 8006388:	460b      	mov	r3, r1
 800638a:	70bb      	strb	r3, [r7, #2]
 800638c:	4613      	mov	r3, r2
 800638e:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	ret = mcp23017_writeRegister(hdev, MCP23017_IODIRA + port,
 8006390:	78bb      	ldrb	r3, [r7, #2]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d002      	beq.n	800639c <mcp23017_portMode+0x26>
			(pinmode == MCP23017_PIN_MODE_INPUT || pinmode == MCP23017_PIN_MODE_INPUT_PULLUP) ? 0xFF : 0x00);
 8006396:	78bb      	ldrb	r3, [r7, #2]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <mcp23017_portMode+0x2a>
	ret = mcp23017_writeRegister(hdev, MCP23017_IODIRA + port,
 800639c:	22ff      	movs	r2, #255	@ 0xff
 800639e:	e000      	b.n	80063a2 <mcp23017_portMode+0x2c>
 80063a0:	2200      	movs	r2, #0
 80063a2:	78fb      	ldrb	r3, [r7, #3]
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff ff44 	bl	8006234 <mcp23017_writeRegister>
 80063ac:	4603      	mov	r3, r0
 80063ae:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <mcp23017_portMode+0x44>
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	e028      	b.n	800640c <mcp23017_portMode+0x96>

	ret = mcp23017_writeRegister(hdev, MCP23017_GPPUA + port, (pinmode == MCP23017_PIN_MODE_INPUT_PULLUP ? 0xff : 0x00));
 80063ba:	78fb      	ldrb	r3, [r7, #3]
 80063bc:	330c      	adds	r3, #12
 80063be:	b2d9      	uxtb	r1, r3
 80063c0:	78bb      	ldrb	r3, [r7, #2]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d101      	bne.n	80063ca <mcp23017_portMode+0x54>
 80063c6:	23ff      	movs	r3, #255	@ 0xff
 80063c8:	e000      	b.n	80063cc <mcp23017_portMode+0x56>
 80063ca:	2300      	movs	r3, #0
 80063cc:	461a      	mov	r2, r3
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff ff30 	bl	8006234 <mcp23017_writeRegister>
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <mcp23017_portMode+0x6c>
 80063de:	7bfb      	ldrb	r3, [r7, #15]
 80063e0:	e014      	b.n	800640c <mcp23017_portMode+0x96>

	ret = mcp23017_writeRegister(hdev, MCP23017_IPOLA + port, pinpolarity ? 0xff : 0x00);
 80063e2:	78fb      	ldrb	r3, [r7, #3]
 80063e4:	3302      	adds	r3, #2
 80063e6:	b2d9      	uxtb	r1, r3
 80063e8:	787b      	ldrb	r3, [r7, #1]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <mcp23017_portMode+0x7c>
 80063ee:	23ff      	movs	r3, #255	@ 0xff
 80063f0:	e000      	b.n	80063f4 <mcp23017_portMode+0x7e>
 80063f2:	2300      	movs	r3, #0
 80063f4:	461a      	mov	r2, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff ff1c 	bl	8006234 <mcp23017_writeRegister>
 80063fc:	4603      	mov	r3, r0
 80063fe:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 8006400:	7bfb      	ldrb	r3, [r7, #15]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <mcp23017_portMode+0x94>
 8006406:	7bfb      	ldrb	r3, [r7, #15]
 8006408:	e000      	b.n	800640c <mcp23017_portMode+0x96>

	return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <mcp23017_pinMode>:
 * @param mode
 * @param inverted
 * @return
 */
HAL_StatusTypeDef mcp23017_pinMode(MCP23017_HandleTypeDef *hdev, uint8_t pin, MCP23017_PinModeIO_t mode, MCP23017_PinPolarity_t polarity)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af02      	add	r7, sp, #8
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	4608      	mov	r0, r1
 800641e:	4611      	mov	r1, r2
 8006420:	461a      	mov	r2, r3
 8006422:	4603      	mov	r3, r0
 8006424:	70fb      	strb	r3, [r7, #3]
 8006426:	460b      	mov	r3, r1
 8006428:	70bb      	strb	r3, [r7, #2]
 800642a:	4613      	mov	r3, r2
 800642c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	/* if input we set IODIRA or IODIRB (depending on pin number) to 1 */
	ret = mcp23017_updateRegisterBit(hdev, pin, (mode == MCP23017_PIN_MODE_INPUT || mode == MCP23017_PIN_MODE_INPUT_PULLUP),
 800642e:	78bb      	ldrb	r3, [r7, #2]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <mcp23017_pinMode+0x26>
 8006434:	78bb      	ldrb	r3, [r7, #2]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d101      	bne.n	800643e <mcp23017_pinMode+0x2a>
 800643a:	2301      	movs	r3, #1
 800643c:	e000      	b.n	8006440 <mcp23017_pinMode+0x2c>
 800643e:	2300      	movs	r3, #0
 8006440:	b2da      	uxtb	r2, r3
 8006442:	78f9      	ldrb	r1, [r7, #3]
 8006444:	2301      	movs	r3, #1
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	2300      	movs	r3, #0
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f7ff ff11 	bl	8006272 <mcp23017_updateRegisterBit>
 8006450:	4603      	mov	r3, r0
 8006452:	73fb      	strb	r3, [r7, #15]
			MCP23017_IODIRA, MCP23017_IODIRB);
	if (ret != HAL_OK) return ret;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <mcp23017_pinMode+0x4a>
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	e02a      	b.n	80064b4 <mcp23017_pinMode+0xa0>

	/* we also need to control the polarity, will be ignored anyway if output, 1 if pol inverted */
	ret = mcp23017_updateRegisterBit(hdev, pin, polarity == MCP23017_PIN_POLARITY_INVERTED, MCP23017_IPOLA, MCP23017_IPOLB);
 800645e:	787b      	ldrb	r3, [r7, #1]
 8006460:	2b01      	cmp	r3, #1
 8006462:	bf0c      	ite	eq
 8006464:	2301      	moveq	r3, #1
 8006466:	2300      	movne	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	461a      	mov	r2, r3
 800646c:	78f9      	ldrb	r1, [r7, #3]
 800646e:	2303      	movs	r3, #3
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	2302      	movs	r3, #2
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fefc 	bl	8006272 <mcp23017_updateRegisterBit>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <mcp23017_pinMode+0x74>
 8006484:	7bfb      	ldrb	r3, [r7, #15]
 8006486:	e015      	b.n	80064b4 <mcp23017_pinMode+0xa0>

	/* then we need to setup the pull up for that pin if MCP23017_PIN_MODE_INPUT_PULLUP was selected */
	ret = mcp23017_updateRegisterBit(hdev, pin, mode == MCP23017_PIN_MODE_INPUT_PULLUP, MCP23017_GPPUA, MCP23017_GPPUB);
 8006488:	78bb      	ldrb	r3, [r7, #2]
 800648a:	2b01      	cmp	r3, #1
 800648c:	bf0c      	ite	eq
 800648e:	2301      	moveq	r3, #1
 8006490:	2300      	movne	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	461a      	mov	r2, r3
 8006496:	78f9      	ldrb	r1, [r7, #3]
 8006498:	230d      	movs	r3, #13
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	230c      	movs	r3, #12
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fee7 	bl	8006272 <mcp23017_updateRegisterBit>
 80064a4:	4603      	mov	r3, r0
 80064a6:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK) return ret;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <mcp23017_pinMode+0x9e>
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
 80064b0:	e000      	b.n	80064b4 <mcp23017_pinMode+0xa0>

	return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <Ex_gpio_init>:

MCP23017_HandleTypeDef hmcp;


void Ex_gpio_init(void)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	af00      	add	r7, sp, #0
	mcp23017_init(&hmcp, &hi2c1, MCP23017_ADD_27);
 80064c0:	2227      	movs	r2, #39	@ 0x27
 80064c2:	4918      	ldr	r1, [pc, #96]	@ (8006524 <Ex_gpio_init+0x68>)
 80064c4:	4818      	ldr	r0, [pc, #96]	@ (8006528 <Ex_gpio_init+0x6c>)
 80064c6:	f7ff ff19 	bl	80062fc <mcp23017_init>
	mcp23017_portMode(&hmcp, MCP23017Port_A, MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80064ca:	2300      	movs	r3, #0
 80064cc:	2202      	movs	r2, #2
 80064ce:	2100      	movs	r1, #0
 80064d0:	4815      	ldr	r0, [pc, #84]	@ (8006528 <Ex_gpio_init+0x6c>)
 80064d2:	f7ff ff50 	bl	8006376 <mcp23017_portMode>
	mcp23017_portMode(&hmcp, MCP23017Port_B, MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80064d6:	2300      	movs	r3, #0
 80064d8:	2202      	movs	r2, #2
 80064da:	2101      	movs	r1, #1
 80064dc:	4812      	ldr	r0, [pc, #72]	@ (8006528 <Ex_gpio_init+0x6c>)
 80064de:	f7ff ff4a 	bl	8006376 <mcp23017_portMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPB0_Pin | MCP23017_GPB1_Pin | MCP23017_GPB2_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80064e2:	2300      	movs	r3, #0
 80064e4:	2202      	movs	r2, #2
 80064e6:	210b      	movs	r1, #11
 80064e8:	480f      	ldr	r0, [pc, #60]	@ (8006528 <Ex_gpio_init+0x6c>)
 80064ea:	f7ff ff93 	bl	8006414 <mcp23017_pinMode>
    mcp23017_pinMode(&hmcp,MCP23017_GPB3_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80064ee:	2300      	movs	r3, #0
 80064f0:	2202      	movs	r2, #2
 80064f2:	210b      	movs	r1, #11
 80064f4:	480c      	ldr	r0, [pc, #48]	@ (8006528 <Ex_gpio_init+0x6c>)
 80064f6:	f7ff ff8d 	bl	8006414 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA0_Pin | MCP23017_GPA1_Pin | MCP23017_GPA2_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 80064fa:	2300      	movs	r3, #0
 80064fc:	2202      	movs	r2, #2
 80064fe:	2103      	movs	r1, #3
 8006500:	4809      	ldr	r0, [pc, #36]	@ (8006528 <Ex_gpio_init+0x6c>)
 8006502:	f7ff ff87 	bl	8006414 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA3_Pin | MCP23017_GPA4_Pin | MCP23017_GPA5_Pin,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8006506:	2300      	movs	r3, #0
 8006508:	2202      	movs	r2, #2
 800650a:	2107      	movs	r1, #7
 800650c:	4806      	ldr	r0, [pc, #24]	@ (8006528 <Ex_gpio_init+0x6c>)
 800650e:	f7ff ff81 	bl	8006414 <mcp23017_pinMode>
	mcp23017_pinMode(&hmcp,MCP23017_GPA6_Pin | MCP23017_GPA7_Pin ,MCP23017_PIN_MODE_OUTPUT,MCP23017_PIN_POLARITY_NORMAL);
 8006512:	2300      	movs	r3, #0
 8006514:	2202      	movs	r2, #2
 8006516:	2107      	movs	r1, #7
 8006518:	4803      	ldr	r0, [pc, #12]	@ (8006528 <Ex_gpio_init+0x6c>)
 800651a:	f7ff ff7b 	bl	8006414 <mcp23017_pinMode>

}
 800651e:	bf00      	nop
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	200058c8 	.word	0x200058c8
 8006528:	2000591c 	.word	0x2000591c

0800652c <USART_ReceiveData>:
DEVInfo devInfo;

char *crcOK;

uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]

  assert_param(IS_USART_ALL_PERIPH(USARTx));

  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653e:	b29b      	uxth	r3, r3
}
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <USART_SendData>:

void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	807b      	strh	r3, [r7, #2]

  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data));

  USARTx->DR = (Data & (uint16_t)0x01FF);
 8006558:	887b      	ldrh	r3, [r7, #2]
 800655a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	605a      	str	r2, [r3, #4]
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
	...

08006570 <usart_setup>:

uint8_t getUsartIndex(void);

void usart_setup(uint32_t baud) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]

	ow_uart.Instance = OW_USART;
 8006578:	4b15      	ldr	r3, [pc, #84]	@ (80065d0 <usart_setup+0x60>)
 800657a:	4a16      	ldr	r2, [pc, #88]	@ (80065d4 <usart_setup+0x64>)
 800657c:	601a      	str	r2, [r3, #0]
	ow_uart.Init.BaudRate = baud;
 800657e:	4a14      	ldr	r2, [pc, #80]	@ (80065d0 <usart_setup+0x60>)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6053      	str	r3, [r2, #4]
	ow_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8006584:	4b12      	ldr	r3, [pc, #72]	@ (80065d0 <usart_setup+0x60>)
 8006586:	2200      	movs	r2, #0
 8006588:	609a      	str	r2, [r3, #8]
	ow_uart.Init.StopBits = UART_STOPBITS_1;
 800658a:	4b11      	ldr	r3, [pc, #68]	@ (80065d0 <usart_setup+0x60>)
 800658c:	2200      	movs	r2, #0
 800658e:	60da      	str	r2, [r3, #12]
	ow_uart.Init.Parity = UART_PARITY_NONE;
 8006590:	4b0f      	ldr	r3, [pc, #60]	@ (80065d0 <usart_setup+0x60>)
 8006592:	2200      	movs	r2, #0
 8006594:	611a      	str	r2, [r3, #16]
	ow_uart.Init.Mode = UART_MODE_TX_RX;
 8006596:	4b0e      	ldr	r3, [pc, #56]	@ (80065d0 <usart_setup+0x60>)
 8006598:	220c      	movs	r2, #12
 800659a:	615a      	str	r2, [r3, #20]
	ow_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800659c:	4b0c      	ldr	r3, [pc, #48]	@ (80065d0 <usart_setup+0x60>)
 800659e:	2200      	movs	r2, #0
 80065a0:	619a      	str	r2, [r3, #24]
	ow_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80065a2:	4b0b      	ldr	r3, [pc, #44]	@ (80065d0 <usart_setup+0x60>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	61da      	str	r2, [r3, #28]
	if (HAL_HalfDuplex_Init(&ow_uart) != HAL_OK)
 80065a8:	4809      	ldr	r0, [pc, #36]	@ (80065d0 <usart_setup+0x60>)
 80065aa:	f7fe fad9 	bl	8004b60 <HAL_HalfDuplex_Init>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d000      	beq.n	80065b6 <usart_setup+0x46>
	{

		__asm__("NOP");
 80065b4:	bf00      	nop
	}

	__HAL_UART_ENABLE_IT(&ow_uart, UART_IT_RXNE);
 80065b6:	4b06      	ldr	r3, [pc, #24]	@ (80065d0 <usart_setup+0x60>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	4b04      	ldr	r3, [pc, #16]	@ (80065d0 <usart_setup+0x60>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f042 0220 	orr.w	r2, r2, #32
 80065c4:	60da      	str	r2, [r3, #12]
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200037f0 	.word	0x200037f0
 80065d4:	40011000 	.word	0x40011000

080065d8 <owInit>:

void owInit(OneWire *ow) {
 80065d8:	b480      	push	{r7}
 80065da:	b087      	sub	sp, #28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  int i=0, k = 0;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 80065e8:	e015      	b.n	8006616 <owInit+0x3e>
   uint8_t *r = (uint8_t *)&ow->ids[i];
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	4413      	add	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
    k=0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	613b      	str	r3, [r7, #16]
    for (; k < 8; k++)
 80065f8:	e007      	b.n	800660a <owInit+0x32>
    r[k] = 0;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
    for (; k < 8; k++)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	3301      	adds	r3, #1
 8006608:	613b      	str	r3, [r7, #16]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2b07      	cmp	r3, #7
 800660e:	ddf4      	ble.n	80065fa <owInit+0x22>
  for (; i < MAXDEVICES_ON_THE_BUS; i++) {
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	3301      	adds	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	dde6      	ble.n	80065ea <owInit+0x12>
  }
  k=0;
 800661c:	2300      	movs	r3, #0
 800661e:	613b      	str	r3, [r7, #16]
  for (; k < 8; k++)
 8006620:	e008      	b.n	8006634 <owInit+0x5c>
    ow->lastROM[k] = 0x00;
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	330c      	adds	r3, #12
 800662a:	2200      	movs	r2, #0
 800662c:	701a      	strb	r2, [r3, #0]
  for (; k < 8; k++)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	3301      	adds	r3, #1
 8006632:	613b      	str	r3, [r7, #16]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	2b07      	cmp	r3, #7
 8006638:	ddf3      	ble.n	8006622 <owInit+0x4a>
  ow->lastDiscrepancy = 64;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2240      	movs	r2, #64	@ 0x40
 800663e:	609a      	str	r2, [r3, #8]

}
 8006640:	bf00      	nop
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <owReadHandler>:

void owReadHandler() {
 800664c:	b590      	push	{r4, r7, lr}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
  uint8_t index = getUsartIndex();
 8006652:	f000 f850 	bl	80066f6 <getUsartIndex>
 8006656:	4603      	mov	r3, r0
 8006658:	71fb      	strb	r3, [r7, #7]
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800665a:	4b18      	ldr	r3, [pc, #96]	@ (80066bc <owReadHandler+0x70>)
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b00      	cmp	r3, #0
 8006664:	d025      	beq.n	80066b2 <owReadHandler+0x66>
      ((OW_USART->SR & UART_FLAG_RXNE) != (uint16_t)RESET)) {
 8006666:	4b15      	ldr	r3, [pc, #84]	@ (80066bc <owReadHandler+0x70>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0320 	and.w	r3, r3, #32
  if (((OW_USART->CR1 & USART_CR1_RXNEIE) != 0) &&
 800666e:	2b00      	cmp	r3, #0
 8006670:	d01f      	beq.n	80066b2 <owReadHandler+0x66>

		while ((OW_USART->SR & UART_FLAG_RXNE) == (uint16_t)RESET){;}
 8006672:	bf00      	nop
 8006674:	4b11      	ldr	r3, [pc, #68]	@ (80066bc <owReadHandler+0x70>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0f9      	beq.n	8006674 <owReadHandler+0x28>
    rc_buffer[index] = USART_ReceiveData(OW_USART);
 8006680:	79fc      	ldrb	r4, [r7, #7]
 8006682:	480e      	ldr	r0, [pc, #56]	@ (80066bc <owReadHandler+0x70>)
 8006684:	f7ff ff52 	bl	800652c <USART_ReceiveData>
 8006688:	4603      	mov	r3, r0
 800668a:	461a      	mov	r2, r3
 800668c:	4b0c      	ldr	r3, [pc, #48]	@ (80066c0 <owReadHandler+0x74>)
 800668e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    recvFlag &= ~(1 << index);
 8006692:	79fb      	ldrb	r3, [r7, #7]
 8006694:	2201      	movs	r2, #1
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	b25b      	sxtb	r3, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	b25a      	sxtb	r2, r3
 80066a0:	4b08      	ldr	r3, [pc, #32]	@ (80066c4 <owReadHandler+0x78>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	b25b      	sxtb	r3, r3
 80066a8:	4013      	ands	r3, r2
 80066aa:	b25b      	sxtb	r3, r3
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	4b05      	ldr	r3, [pc, #20]	@ (80066c4 <owReadHandler+0x78>)
 80066b0:	701a      	strb	r2, [r3, #0]
  }
}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd90      	pop	{r4, r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40011000 	.word	0x40011000
 80066c0:	20005928 	.word	0x20005928
 80066c4:	20005924 	.word	0x20005924

080066c8 <owResetCmd>:

  uint16_t owResetCmd() {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
	uint16_t owPresence;

	usart_setup(9600);
 80066ce:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 80066d2:	f7ff ff4d 	bl	8006570 <usart_setup>

  owSend(0xF0);
 80066d6:	20f0      	movs	r0, #240	@ 0xf0
 80066d8:	f000 f816 	bl	8006708 <owSend>
  owPresence = owEchoRead();
 80066dc:	f000 f854 	bl	8006788 <owEchoRead>
 80066e0:	4603      	mov	r3, r0
 80066e2:	80fb      	strh	r3, [r7, #6]
	usart_setup(115200);
 80066e4:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80066e8:	f7ff ff42 	bl	8006570 <usart_setup>
  return owPresence;
 80066ec:	88fb      	ldrh	r3, [r7, #6]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <getUsartIndex>:

uint8_t getUsartIndex() {
 80066f6:	b480      	push	{r7}
 80066f8:	af00      	add	r7, sp, #0

	return 0;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
	...

08006708 <owSend>:

void owSend(uint16_t data) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	4603      	mov	r3, r0
 8006710:	80fb      	strh	r3, [r7, #6]
  recvFlag |= (1 << getUsartIndex());
 8006712:	f7ff fff0 	bl	80066f6 <getUsartIndex>
 8006716:	4603      	mov	r3, r0
 8006718:	461a      	mov	r2, r3
 800671a:	2301      	movs	r3, #1
 800671c:	4093      	lsls	r3, r2
 800671e:	b25a      	sxtb	r2, r3
 8006720:	4b0d      	ldr	r3, [pc, #52]	@ (8006758 <owSend+0x50>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b2db      	uxtb	r3, r3
 8006726:	b25b      	sxtb	r3, r3
 8006728:	4313      	orrs	r3, r2
 800672a:	b25b      	sxtb	r3, r3
 800672c:	b2da      	uxtb	r2, r3
 800672e:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <owSend+0x50>)
 8006730:	701a      	strb	r2, [r3, #0]
  USART_SendData(OW_USART, data);
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	4619      	mov	r1, r3
 8006736:	4809      	ldr	r0, [pc, #36]	@ (800675c <owSend+0x54>)
 8006738:	f7ff ff08 	bl	800654c <USART_SendData>
	while(__HAL_UART_GET_FLAG(&ow_uart, UART_FLAG_TC) == RESET);
 800673c:	bf00      	nop
 800673e:	4b08      	ldr	r3, [pc, #32]	@ (8006760 <owSend+0x58>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006748:	2b40      	cmp	r3, #64	@ 0x40
 800674a:	d1f8      	bne.n	800673e <owSend+0x36>
}
 800674c:	bf00      	nop
 800674e:	bf00      	nop
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20005924 	.word	0x20005924
 800675c:	40011000 	.word	0x40011000
 8006760:	200037f0 	.word	0x200037f0

08006764 <owReadSlot>:

uint8_t owReadSlot(uint16_t data) {
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	4603      	mov	r3, r0
 800676c:	80fb      	strh	r3, [r7, #6]
  return (data == OW_READ) ? 1 : 0;
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	2bff      	cmp	r3, #255	@ 0xff
 8006772:	bf0c      	ite	eq
 8006774:	2301      	moveq	r3, #1
 8006776:	2300      	movne	r3, #0
 8006778:	b2db      	uxtb	r3, r3
}
 800677a:	4618      	mov	r0, r3
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
	...

08006788 <owEchoRead>:

uint16_t owEchoRead() {
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
  uint8_t i = getUsartIndex();
 800678e:	f7ff ffb2 	bl	80066f6 <getUsartIndex>
 8006792:	4603      	mov	r3, r0
 8006794:	717b      	strb	r3, [r7, #5]
  uint16_t pause = 1000;
 8006796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800679a:	80fb      	strh	r3, [r7, #6]
  while (recvFlag & (1 << i) && pause--);
 800679c:	bf00      	nop
 800679e:	4b0c      	ldr	r3, [pc, #48]	@ (80067d0 <owEchoRead+0x48>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	797b      	ldrb	r3, [r7, #5]
 80067a8:	fa42 f303 	asr.w	r3, r2, r3
 80067ac:	f003 0301 	and.w	r3, r3, #1
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d004      	beq.n	80067be <owEchoRead+0x36>
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	1e5a      	subs	r2, r3, #1
 80067b8:	80fa      	strh	r2, [r7, #6]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1ef      	bne.n	800679e <owEchoRead+0x16>
  return rc_buffer[i];
 80067be:	797b      	ldrb	r3, [r7, #5]
 80067c0:	4a04      	ldr	r2, [pc, #16]	@ (80067d4 <owEchoRead+0x4c>)
 80067c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c6:	b29b      	uxth	r3, r3
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20005924 	.word	0x20005924
 80067d4:	20005928 	.word	0x20005928

080067d8 <byteToBits>:

uint8_t *byteToBits(uint8_t ow_byte, uint8_t *bits) {
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	6039      	str	r1, [r7, #0]
 80067e2:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  for (i = 0; i < 8; i++) {
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]
 80067e8:	e014      	b.n	8006814 <byteToBits+0x3c>
    if (ow_byte & 0x01) {
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	f003 0301 	and.w	r3, r3, #1
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <byteToBits+0x24>
      *bits = WIRE_1;
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	22ff      	movs	r2, #255	@ 0xff
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	e002      	b.n	8006802 <byteToBits+0x2a>
    } else {
      *bits = WIRE_0;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
    }
    bits++;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	3301      	adds	r3, #1
 8006806:	603b      	str	r3, [r7, #0]
    ow_byte = ow_byte >> 1;
 8006808:	79fb      	ldrb	r3, [r7, #7]
 800680a:	085b      	lsrs	r3, r3, #1
 800680c:	71fb      	strb	r3, [r7, #7]
  for (i = 0; i < 8; i++) {
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	3301      	adds	r3, #1
 8006812:	73fb      	strb	r3, [r7, #15]
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2b07      	cmp	r3, #7
 8006818:	d9e7      	bls.n	80067ea <byteToBits+0x12>
  }
  return bits;
 800681a:	683b      	ldr	r3, [r7, #0]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <owSendByte>:

void owSendByte(uint8_t d) {
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	71fb      	strb	r3, [r7, #7]
  uint8_t data[8];
	int i;
  byteToBits(d, data);
 8006832:	f107 020c 	add.w	r2, r7, #12
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	4611      	mov	r1, r2
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff ffcc 	bl	80067d8 <byteToBits>
  for (i = 0; i < 8; ++i) {
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	e00a      	b.n	800685c <owSendByte+0x34>
    owSend(data[i]);
 8006846:	f107 020c 	add.w	r2, r7, #12
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	4413      	add	r3, r2
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f7ff ff59 	bl	8006708 <owSend>
  for (i = 0; i < 8; ++i) {
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	3301      	adds	r3, #1
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2b07      	cmp	r3, #7
 8006860:	ddf1      	ble.n	8006846 <owSendByte+0x1e>
  }
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <owCRC>:
    bits++;
  }
  return target_byte;
}

uint8_t owCRC(uint8_t *mas, uint8_t Len) {
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	460b      	mov	r3, r1
 8006876:	70fb      	strb	r3, [r7, #3]
  uint8_t i, dat, crc, fb, st_byt;
  st_byt = 0;
 8006878:	2300      	movs	r3, #0
 800687a:	733b      	strb	r3, [r7, #12]
  crc = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	737b      	strb	r3, [r7, #13]
  do {
    dat = mas[st_byt];
 8006880:	7b3b      	ldrb	r3, [r7, #12]
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	4413      	add	r3, r2
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 8; i++) {
 800688a:	2300      	movs	r3, #0
 800688c:	73fb      	strb	r3, [r7, #15]
 800688e:	e018      	b.n	80068c2 <owCRC+0x56>
      fb = crc ^ dat;
 8006890:	7b7a      	ldrb	r2, [r7, #13]
 8006892:	7bbb      	ldrb	r3, [r7, #14]
 8006894:	4053      	eors	r3, r2
 8006896:	72fb      	strb	r3, [r7, #11]
      fb &= 1;
 8006898:	7afb      	ldrb	r3, [r7, #11]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	72fb      	strb	r3, [r7, #11]
      crc >>= 1;
 80068a0:	7b7b      	ldrb	r3, [r7, #13]
 80068a2:	085b      	lsrs	r3, r3, #1
 80068a4:	737b      	strb	r3, [r7, #13]
      dat >>= 1;
 80068a6:	7bbb      	ldrb	r3, [r7, #14]
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	73bb      	strb	r3, [r7, #14]
      if (fb == 1) crc ^= 0x8c;
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d104      	bne.n	80068bc <owCRC+0x50>
 80068b2:	7b7b      	ldrb	r3, [r7, #13]
 80068b4:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 80068b8:	43db      	mvns	r3, r3
 80068ba:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 8; i++) {
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	3301      	adds	r3, #1
 80068c0:	73fb      	strb	r3, [r7, #15]
 80068c2:	7bfb      	ldrb	r3, [r7, #15]
 80068c4:	2b07      	cmp	r3, #7
 80068c6:	d9e3      	bls.n	8006890 <owCRC+0x24>
    }
    st_byt++;
 80068c8:	7b3b      	ldrb	r3, [r7, #12]
 80068ca:	3301      	adds	r3, #1
 80068cc:	733b      	strb	r3, [r7, #12]
  } while (st_byt < Len);
 80068ce:	7b3a      	ldrb	r2, [r7, #12]
 80068d0:	78fb      	ldrb	r3, [r7, #3]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d3d4      	bcc.n	8006880 <owCRC+0x14>
  return crc;
 80068d6:	7b7b      	ldrb	r3, [r7, #13]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <owCRC8>:

uint8_t owCRC8(RomCode *rom){
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  return owCRC((uint8_t*)rom, 7);
 80068ec:	2107      	movs	r1, #7
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f7ff ffbc 	bl	800686c <owCRC>
 80068f4:	4603      	mov	r3, r0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3708      	adds	r7, #8
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <hasNextRom>:

int hasNextRom(OneWire *ow, uint8_t *ROM) {
 80068fe:	b580      	push	{r7, lr}
 8006900:	b088      	sub	sp, #32
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
	uint8_t ui32BitNumber = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	77fb      	strb	r3, [r7, #31]
  int zeroFork = -1;
 800690c:	f04f 33ff 	mov.w	r3, #4294967295
 8006910:	61bb      	str	r3, [r7, #24]
	uint8_t i = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	75fb      	strb	r3, [r7, #23]
  if (owResetCmd() == ONEWIRE_NOBODY) {
 8006916:	f7ff fed7 	bl	80066c8 <owResetCmd>
 800691a:	4603      	mov	r3, r0
 800691c:	2bf0      	cmp	r3, #240	@ 0xf0
 800691e:	d101      	bne.n	8006924 <hasNextRom+0x26>
    return 0;
 8006920:	2300      	movs	r3, #0
 8006922:	e097      	b.n	8006a54 <hasNextRom+0x156>
  }
  owSendByte(ONEWIRE_SEARCH);
 8006924:	20f0      	movs	r0, #240	@ 0xf0
 8006926:	f7ff ff7f 	bl	8006828 <owSendByte>
  do {
		uint8_t answerBit =0;
 800692a:	2300      	movs	r3, #0
 800692c:	757b      	strb	r3, [r7, #21]
    int byteNum = ui32BitNumber / 8;
 800692e:	7ffb      	ldrb	r3, [r7, #31]
 8006930:	08db      	lsrs	r3, r3, #3
 8006932:	b2db      	uxtb	r3, r3
 8006934:	613b      	str	r3, [r7, #16]
    uint8_t *current = (ROM) + byteNum;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	4413      	add	r3, r2
 800693c:	60fb      	str	r3, [r7, #12]
    uint8_t cB, cmp_cB, searchDirection = 0;
 800693e:	2300      	movs	r3, #0
 8006940:	75bb      	strb	r3, [r7, #22]
    owSend(OW_READ);
 8006942:	20ff      	movs	r0, #255	@ 0xff
 8006944:	f7ff fee0 	bl	8006708 <owSend>
    cB = owReadSlot(owEchoRead());
 8006948:	f7ff ff1e 	bl	8006788 <owEchoRead>
 800694c:	4603      	mov	r3, r0
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff ff08 	bl	8006764 <owReadSlot>
 8006954:	4603      	mov	r3, r0
 8006956:	72fb      	strb	r3, [r7, #11]
    owSend(OW_READ);
 8006958:	20ff      	movs	r0, #255	@ 0xff
 800695a:	f7ff fed5 	bl	8006708 <owSend>
    cmp_cB = owReadSlot(owEchoRead());
 800695e:	f7ff ff13 	bl	8006788 <owEchoRead>
 8006962:	4603      	mov	r3, r0
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fefd 	bl	8006764 <owReadSlot>
 800696a:	4603      	mov	r3, r0
 800696c:	72bb      	strb	r3, [r7, #10]
    if (cB == cmp_cB && cB == 1)
 800696e:	7afa      	ldrb	r2, [r7, #11]
 8006970:	7abb      	ldrb	r3, [r7, #10]
 8006972:	429a      	cmp	r2, r3
 8006974:	d105      	bne.n	8006982 <hasNextRom+0x84>
 8006976:	7afb      	ldrb	r3, [r7, #11]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d102      	bne.n	8006982 <hasNextRom+0x84>
      return -1;
 800697c:	f04f 33ff 	mov.w	r3, #4294967295
 8006980:	e068      	b.n	8006a54 <hasNextRom+0x156>
    if (cB != cmp_cB) {
 8006982:	7afa      	ldrb	r2, [r7, #11]
 8006984:	7abb      	ldrb	r3, [r7, #10]
 8006986:	429a      	cmp	r2, r3
 8006988:	d002      	beq.n	8006990 <hasNextRom+0x92>
      searchDirection = cB;
 800698a:	7afb      	ldrb	r3, [r7, #11]
 800698c:	75bb      	strb	r3, [r7, #22]
 800698e:	e023      	b.n	80069d8 <hasNextRom+0xda>
			} else {
				if (ui32BitNumber == ow->lastDiscrepancy)
 8006990:	7ffa      	ldrb	r2, [r7, #31]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	429a      	cmp	r2, r3
 8006998:	d102      	bne.n	80069a0 <hasNextRom+0xa2>
        searchDirection = 1;
 800699a:	2301      	movs	r3, #1
 800699c:	75bb      	strb	r3, [r7, #22]
 800699e:	e01b      	b.n	80069d8 <hasNextRom+0xda>
      else {
        if (ui32BitNumber > ow->lastDiscrepancy) {
 80069a0:	7ffa      	ldrb	r2, [r7, #31]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	dd02      	ble.n	80069b0 <hasNextRom+0xb2>
          searchDirection = 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	75bb      	strb	r3, [r7, #22]
 80069ae:	e00e      	b.n	80069ce <hasNextRom+0xd0>
        } else {
          searchDirection = (uint8_t) ((ow->lastROM[byteNum] >> ui32BitNumber % 8) & 0x01);
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4413      	add	r3, r2
 80069b6:	330c      	adds	r3, #12
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	461a      	mov	r2, r3
 80069bc:	7ffb      	ldrb	r3, [r7, #31]
 80069be:	f003 0307 	and.w	r3, r3, #7
 80069c2:	fa42 f303 	asr.w	r3, r2, r3
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	75bb      	strb	r3, [r7, #22]
        }
        if (searchDirection == 0)
 80069ce:	7dbb      	ldrb	r3, [r7, #22]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <hasNextRom+0xda>
          zeroFork = ui32BitNumber;
 80069d4:	7ffb      	ldrb	r3, [r7, #31]
 80069d6:	61bb      	str	r3, [r7, #24]
      }
    }

    if (searchDirection)
 80069d8:	7dbb      	ldrb	r3, [r7, #22]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00e      	beq.n	80069fc <hasNextRom+0xfe>
      *(current) |= 1 << ui32BitNumber % 8;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b25a      	sxtb	r2, r3
 80069e4:	7ffb      	ldrb	r3, [r7, #31]
 80069e6:	f003 0307 	and.w	r3, r3, #7
 80069ea:	2101      	movs	r1, #1
 80069ec:	fa01 f303 	lsl.w	r3, r1, r3
 80069f0:	b25b      	sxtb	r3, r3
 80069f2:	4313      	orrs	r3, r2
 80069f4:	b25b      	sxtb	r3, r3
 80069f6:	b2da      	uxtb	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	701a      	strb	r2, [r3, #0]
    answerBit = (uint8_t) ((searchDirection == 0) ? WIRE_0 : WIRE_1);
 80069fc:	7dbb      	ldrb	r3, [r7, #22]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <hasNextRom+0x108>
 8006a02:	2300      	movs	r3, #0
 8006a04:	e000      	b.n	8006a08 <hasNextRom+0x10a>
 8006a06:	23ff      	movs	r3, #255	@ 0xff
 8006a08:	757b      	strb	r3, [r7, #21]
    owSend(answerBit);
 8006a0a:	7d7b      	ldrb	r3, [r7, #21]
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7ff fe7a 	bl	8006708 <owSend>
    ui32BitNumber++;
 8006a14:	7ffb      	ldrb	r3, [r7, #31]
 8006a16:	3301      	adds	r3, #1
 8006a18:	77fb      	strb	r3, [r7, #31]
		} while (ui32BitNumber < 64);
 8006a1a:	7ffb      	ldrb	r3, [r7, #31]
 8006a1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a1e:	d984      	bls.n	800692a <hasNextRom+0x2c>
  ow->lastDiscrepancy = zeroFork;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	609a      	str	r2, [r3, #8]
  for (; i < 7; i++)
 8006a26:	e00b      	b.n	8006a40 <hasNextRom+0x142>
    ow->lastROM[i] = ROM[i];
 8006a28:	7dfb      	ldrb	r3, [r7, #23]
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	441a      	add	r2, r3
 8006a2e:	7dfb      	ldrb	r3, [r7, #23]
 8006a30:	7811      	ldrb	r1, [r2, #0]
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	4413      	add	r3, r2
 8006a36:	460a      	mov	r2, r1
 8006a38:	731a      	strb	r2, [r3, #12]
  for (; i < 7; i++)
 8006a3a:	7dfb      	ldrb	r3, [r7, #23]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	75fb      	strb	r3, [r7, #23]
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b06      	cmp	r3, #6
 8006a44:	d9f0      	bls.n	8006a28 <hasNextRom+0x12a>
  return ow->lastDiscrepancy > 0;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	bfcc      	ite	gt
 8006a4e:	2301      	movgt	r3, #1
 8006a50:	2300      	movle	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3720      	adds	r7, #32
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <owSearchCmd>:

int owSearchCmd(OneWire *ow) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  int device = 0, nextROM;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]
  owInit(ow);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff fdb5 	bl	80065d8 <owInit>
  do {
    nextROM = hasNextRom(ow, (uint8_t*)(&ow->ids[device]));
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	00db      	lsls	r3, r3, #3
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	4413      	add	r3, r2
 8006a76:	4619      	mov	r1, r3
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f7ff ff40 	bl	80068fe <hasNextRom>
 8006a7e:	60b8      	str	r0, [r7, #8]
    if (nextROM<0)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	da02      	bge.n	8006a8c <owSearchCmd+0x30>
      return -1;
 8006a86:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8a:	e009      	b.n	8006aa0 <owSearchCmd+0x44>
    device++;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]
		} while (nextROM && device < MAXDEVICES_ON_THE_BUS);
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <owSearchCmd+0x42>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	dde7      	ble.n	8006a6e <owSearchCmd+0x12>
		return device;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3710      	adds	r7, #16
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <owMatchRomCmd>:
void owSkipRomCmd(OneWire *ow) {
  owResetCmd();
  owSendByte(ONEWIRE_SKIP_ROM);
}

void owMatchRomCmd(RomCode *rom) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
	int i = 0;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60fb      	str	r3, [r7, #12]
  owResetCmd();
 8006ab4:	f7ff fe08 	bl	80066c8 <owResetCmd>
  owSendByte(ONEWIRE_MATCH_ROM);
 8006ab8:	2055      	movs	r0, #85	@ 0x55
 8006aba:	f7ff feb5 	bl	8006828 <owSendByte>
  for (; i < 8; i++)
 8006abe:	e009      	b.n	8006ad4 <owMatchRomCmd+0x2c>
	owSendByte(*(((uint8_t *) rom) + i));
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff fead 	bl	8006828 <owSendByte>
  for (; i < 8; i++)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b07      	cmp	r3, #7
 8006ad8:	ddf2      	ble.n	8006ac0 <owMatchRomCmd+0x18>
}
 8006ada:	bf00      	nop
 8006adc:	bf00      	nop
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <owConvertTemperatureCmd>:

void owConvertTemperatureCmd(OneWire *ow, RomCode *rom) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  owMatchRomCmd(rom);
 8006aee:	6838      	ldr	r0, [r7, #0]
 8006af0:	f7ff ffda 	bl	8006aa8 <owMatchRomCmd>
  owSendByte(ONEWIRE_CONVERT_TEMPERATURE);
 8006af4:	2044      	movs	r0, #68	@ 0x44
 8006af6:	f7ff fe97 	bl	8006828 <owSendByte>
}
 8006afa:	bf00      	nop
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <owReadScratchpadCmd>:

uint8_t *owReadScratchpadCmd(OneWire *ow, RomCode *rom, uint8_t *data) {
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
  uint16_t b = 0, p;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	82fb      	strh	r3, [r7, #22]
  switch (rom->family) {
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	2b10      	cmp	r3, #16
 8006b18:	d001      	beq.n	8006b1e <owReadScratchpadCmd+0x1c>
 8006b1a:	2b28      	cmp	r3, #40	@ 0x28
 8006b1c:	d109      	bne.n	8006b32 <owReadScratchpadCmd+0x30>
    case DS18B20:
    case DS18S20:
      p = 72;
 8006b1e:	2348      	movs	r3, #72	@ 0x48
 8006b20:	82bb      	strh	r3, [r7, #20]
      break;
 8006b22:	bf00      	nop
    default:
      return data;

  }
  owMatchRomCmd(rom);
 8006b24:	68b8      	ldr	r0, [r7, #8]
 8006b26:	f7ff ffbf 	bl	8006aa8 <owMatchRomCmd>
  owSendByte(ONEWIRE_READ_SCRATCHPAD);
 8006b2a:	20be      	movs	r0, #190	@ 0xbe
 8006b2c:	f7ff fe7c 	bl	8006828 <owSendByte>
  while (b < p) {
 8006b30:	e048      	b.n	8006bc4 <owReadScratchpadCmd+0xc2>
      return data;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	e04b      	b.n	8006bce <owReadScratchpadCmd+0xcc>
    uint8_t pos = (uint8_t) ((p - 8) / 8 - (b / 8));
 8006b36:	8abb      	ldrh	r3, [r7, #20]
 8006b38:	3b08      	subs	r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	da00      	bge.n	8006b40 <owReadScratchpadCmd+0x3e>
 8006b3e:	3307      	adds	r3, #7
 8006b40:	10db      	asrs	r3, r3, #3
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	8afb      	ldrh	r3, [r7, #22]
 8006b46:	08db      	lsrs	r3, r3, #3
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	74fb      	strb	r3, [r7, #19]
    uint8_t bt;
		owSend(OW_READ);
 8006b50:	20ff      	movs	r0, #255	@ 0xff
 8006b52:	f7ff fdd9 	bl	8006708 <owSend>
    bt = owReadSlot(owEchoRead());
 8006b56:	f7ff fe17 	bl	8006788 <owEchoRead>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7ff fe01 	bl	8006764 <owReadSlot>
 8006b62:	4603      	mov	r3, r0
 8006b64:	74bb      	strb	r3, [r7, #18]
    if (bt == 1)
 8006b66:	7cbb      	ldrb	r3, [r7, #18]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d113      	bne.n	8006b94 <owReadScratchpadCmd+0x92>
      data[pos] |= 1 << b % 8;
 8006b6c:	7cfb      	ldrb	r3, [r7, #19]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	4413      	add	r3, r2
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	b25a      	sxtb	r2, r3
 8006b76:	8afb      	ldrh	r3, [r7, #22]
 8006b78:	f003 0307 	and.w	r3, r3, #7
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b82:	b25b      	sxtb	r3, r3
 8006b84:	4313      	orrs	r3, r2
 8006b86:	b259      	sxtb	r1, r3
 8006b88:	7cfb      	ldrb	r3, [r7, #19]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	b2ca      	uxtb	r2, r1
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	e014      	b.n	8006bbe <owReadScratchpadCmd+0xbc>
    else
      data[pos] &= ~(1 << b % 8);
 8006b94:	7cfb      	ldrb	r3, [r7, #19]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	4413      	add	r3, r2
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	b25a      	sxtb	r2, r3
 8006b9e:	8afb      	ldrh	r3, [r7, #22]
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	2101      	movs	r1, #1
 8006ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8006baa:	b25b      	sxtb	r3, r3
 8006bac:	43db      	mvns	r3, r3
 8006bae:	b25b      	sxtb	r3, r3
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	b259      	sxtb	r1, r3
 8006bb4:	7cfb      	ldrb	r3, [r7, #19]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	4413      	add	r3, r2
 8006bba:	b2ca      	uxtb	r2, r1
 8006bbc:	701a      	strb	r2, [r3, #0]
    b++;
 8006bbe:	8afb      	ldrh	r3, [r7, #22]
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	82fb      	strh	r3, [r7, #22]
  while (b < p) {
 8006bc4:	8afa      	ldrh	r2, [r7, #22]
 8006bc6:	8abb      	ldrh	r3, [r7, #20]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d3b4      	bcc.n	8006b36 <owReadScratchpadCmd+0x34>
  }
  return data;
 8006bcc:	687b      	ldr	r3, [r7, #4]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <readTemperature>:
  owSendByte(th);
  owSendByte(tl);
  owSendByte(conf);
}

Temperature readTemperature(OneWire *ow, RomCode *rom, uint8_t reSense) {
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b08c      	sub	sp, #48	@ 0x30
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	4613      	mov	r3, r2
 8006be2:	71fb      	strb	r3, [r7, #7]
	Scratchpad_DS18B20 *sp;
	Scratchpad_DS18S20 *spP;
  Temperature t;
	uint8_t pad[9];
  t.inCelsus = 0x00;
 8006be4:	2300      	movs	r3, #0
 8006be6:	f887 3020 	strb.w	r3, [r7, #32]
  t.frac = 0x00;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  sp = (Scratchpad_DS18B20 *) &pad;
 8006bf0:	f107 0314 	add.w	r3, r7, #20
 8006bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  spP = (Scratchpad_DS18S20 *) &pad;
 8006bf6:	f107 0314 	add.w	r3, r7, #20
 8006bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  switch (rom->family) {
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d022      	beq.n	8006c4a <readTemperature+0x74>
 8006c04:	2b28      	cmp	r3, #40	@ 0x28
 8006c06:	d13a      	bne.n	8006c7e <readTemperature+0xa8>
    case DS18B20:
      owReadScratchpadCmd(ow, rom, pad);
 8006c08:	f107 0314 	add.w	r3, r7, #20
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	68b9      	ldr	r1, [r7, #8]
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f7ff ff76 	bl	8006b02 <owReadScratchpadCmd>
      t.inCelsus = (int8_t) (sp->temp_msb << 4) | (sp->temp_lsb >> 4);
 8006c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c18:	79db      	ldrb	r3, [r3, #7]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	b25a      	sxtb	r2, r3
 8006c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c20:	7a1b      	ldrb	r3, [r3, #8]
 8006c22:	091b      	lsrs	r3, r3, #4
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	b25b      	sxtb	r3, r3
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	b25b      	sxtb	r3, r3
 8006c2c:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) ((((sp->temp_lsb & 0x0F)) * 10) >> 4);
 8006c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c32:	7a1b      	ldrb	r3, [r3, #8]
 8006c34:	f003 020f 	and.w	r2, r3, #15
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	005b      	lsls	r3, r3, #1
 8006c40:	111b      	asrs	r3, r3, #4
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 8006c48:	e01c      	b.n	8006c84 <readTemperature+0xae>
    case DS18S20:
      owReadScratchpadCmd(ow, rom, pad);
 8006c4a:	f107 0314 	add.w	r3, r7, #20
 8006c4e:	461a      	mov	r2, r3
 8006c50:	68b9      	ldr	r1, [r7, #8]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f7ff ff55 	bl	8006b02 <owReadScratchpadCmd>
      t.inCelsus = spP->temp_lsb >> 1;
 8006c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5a:	7a1b      	ldrb	r3, [r3, #8]
 8006c5c:	085b      	lsrs	r3, r3, #1
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	b25b      	sxtb	r3, r3
 8006c62:	f887 3020 	strb.w	r3, [r7, #32]
      t.frac = (uint8_t) 5 * (spP->temp_lsb & 0x01);
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	7a1b      	ldrb	r3, [r3, #8]
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	0092      	lsls	r2, r2, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      break;
 8006c7c:	e002      	b.n	8006c84 <readTemperature+0xae>
    default:
      return t;
 8006c7e:	8c3b      	ldrh	r3, [r7, #32]
 8006c80:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006c82:	e008      	b.n	8006c96 <readTemperature+0xc0>
  }
  if (reSense) {
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <readTemperature+0xbc>
    owConvertTemperatureCmd(ow, rom);
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f7ff ff29 	bl	8006ae4 <owConvertTemperatureCmd>
  }
  return t;
 8006c92:	8c3b      	ldrh	r3, [r7, #32]
 8006c94:	84bb      	strh	r3, [r7, #36]	@ 0x24
}
 8006c96:	2300      	movs	r3, #0
 8006c98:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8006c9c:	f362 0307 	bfi	r3, r2, #0, #8
 8006ca0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8006ca4:	f362 230f 	bfi	r3, r2, #8, #8
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3730      	adds	r7, #48	@ 0x30
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <get_ROMid>:
void owRecallE2Cmd(OneWire *ow, RomCode *rom) {
  owMatchRomCmd(rom);
  owSendByte(ONEWIRE_RECALL_E2);
}

int get_ROMid (void){
 8006cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb2:	b089      	sub	sp, #36	@ 0x24
 8006cb4:	af06      	add	r7, sp, #24
	if (owResetCmd() != ONEWIRE_NOBODY) {
 8006cb6:	f7ff fd07 	bl	80066c8 <owResetCmd>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2bf0      	cmp	r3, #240	@ 0xf0
 8006cbe:	d079      	beq.n	8006db4 <get_ROMid+0x104>
		devices = owSearchCmd(&ow);
 8006cc0:	484e      	ldr	r0, [pc, #312]	@ (8006dfc <get_ROMid+0x14c>)
 8006cc2:	f7ff fecb 	bl	8006a5c <owSearchCmd>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	b2da      	uxtb	r2, r3
 8006cca:	4b4d      	ldr	r3, [pc, #308]	@ (8006e00 <get_ROMid+0x150>)
 8006ccc:	701a      	strb	r2, [r3, #0]
		if (devices <= 0) {
 8006cce:	4b4c      	ldr	r3, [pc, #304]	@ (8006e00 <get_ROMid+0x150>)
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d113      	bne.n	8006cfe <get_ROMid+0x4e>
			while (1){
				pDelay = 1000000;
 8006cd6:	4b4b      	ldr	r3, [pc, #300]	@ (8006e04 <get_ROMid+0x154>)
 8006cd8:	4a4b      	ldr	r2, [pc, #300]	@ (8006e08 <get_ROMid+0x158>)
 8006cda:	601a      	str	r2, [r3, #0]
				for (i = 0; i < pDelay * 1; i++)
 8006cdc:	4b4b      	ldr	r3, [pc, #300]	@ (8006e0c <get_ROMid+0x15c>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	e005      	b.n	8006cf0 <get_ROMid+0x40>
					__asm__("nop");
 8006ce4:	bf00      	nop
				for (i = 0; i < pDelay * 1; i++)
 8006ce6:	4b49      	ldr	r3, [pc, #292]	@ (8006e0c <get_ROMid+0x15c>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	4a47      	ldr	r2, [pc, #284]	@ (8006e0c <get_ROMid+0x15c>)
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	4b46      	ldr	r3, [pc, #280]	@ (8006e0c <get_ROMid+0x15c>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4b43      	ldr	r3, [pc, #268]	@ (8006e04 <get_ROMid+0x154>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d3f3      	bcc.n	8006ce4 <get_ROMid+0x34>
				pDelay = 1000000;
 8006cfc:	e7eb      	b.n	8006cd6 <get_ROMid+0x26>
			}

		}
		i = 0;
 8006cfe:	4b43      	ldr	r3, [pc, #268]	@ (8006e0c <get_ROMid+0x15c>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
		for (; i < devices; i++) {
 8006d04:	e04f      	b.n	8006da6 <get_ROMid+0xf6>
			RomCode *r = &ow.ids[i];
 8006d06:	4b41      	ldr	r3, [pc, #260]	@ (8006e0c <get_ROMid+0x15c>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	4a3b      	ldr	r2, [pc, #236]	@ (8006dfc <get_ROMid+0x14c>)
 8006d0e:	4413      	add	r3, r2
 8006d10:	607b      	str	r3, [r7, #4]
			uint8_t crc = owCRC8(r);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7ff fde6 	bl	80068e4 <owCRC8>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	70fb      	strb	r3, [r7, #3]
			crcOK = (crc == r->crc)?"CRC OK":"CRC ERROR!";
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	79db      	ldrb	r3, [r3, #7]
 8006d20:	78fa      	ldrb	r2, [r7, #3]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d101      	bne.n	8006d2a <get_ROMid+0x7a>
 8006d26:	4b3a      	ldr	r3, [pc, #232]	@ (8006e10 <get_ROMid+0x160>)
 8006d28:	e000      	b.n	8006d2c <get_ROMid+0x7c>
 8006d2a:	4b3a      	ldr	r3, [pc, #232]	@ (8006e14 <get_ROMid+0x164>)
 8006d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8006e18 <get_ROMid+0x168>)
 8006d2e:	6013      	str	r3, [r2, #0]
			devInfo.device = i;
 8006d30:	4b36      	ldr	r3, [pc, #216]	@ (8006e0c <get_ROMid+0x15c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	461a      	mov	r2, r3
 8006d36:	4b39      	ldr	r3, [pc, #228]	@ (8006e1c <get_ROMid+0x16c>)
 8006d38:	601a      	str	r2, [r3, #0]

			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	461e      	mov	r6, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	799b      	ldrb	r3, [r3, #6]
 8006d44:	469c      	mov	ip, r3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	795b      	ldrb	r3, [r3, #5]
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	791b      	ldrb	r3, [r3, #4]
 8006d50:	4619      	mov	r1, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	78db      	ldrb	r3, [r3, #3]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8006d56:	4618      	mov	r0, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	789b      	ldrb	r3, [r3, #2]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8006d5c:	461c      	mov	r4, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	785b      	ldrb	r3, [r3, #1]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8006d62:	461d      	mov	r5, r3
					r->code[2], r->code[1], r->code[0], r->crc);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	79db      	ldrb	r3, [r3, #7]
			sprintf(devInfo.info, "SN: %02X/%02X%02X%02X%02X%02X%02X/%02X", r->family, r->code[5], r->code[4], r->code[3],
 8006d68:	9305      	str	r3, [sp, #20]
 8006d6a:	9504      	str	r5, [sp, #16]
 8006d6c:	9403      	str	r4, [sp, #12]
 8006d6e:	9002      	str	r0, [sp, #8]
 8006d70:	9101      	str	r1, [sp, #4]
 8006d72:	9200      	str	r2, [sp, #0]
 8006d74:	4663      	mov	r3, ip
 8006d76:	4632      	mov	r2, r6
 8006d78:	4929      	ldr	r1, [pc, #164]	@ (8006e20 <get_ROMid+0x170>)
 8006d7a:	482a      	ldr	r0, [pc, #168]	@ (8006e24 <get_ROMid+0x174>)
 8006d7c:	f000 fdf2 	bl	8007964 <siprintf>

			if (crc != r->crc) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	79db      	ldrb	r3, [r3, #7]
 8006d84:	78fa      	ldrb	r2, [r7, #3]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d008      	beq.n	8006d9c <get_ROMid+0xec>
				devInfo.device = i;
 8006d8a:	4b20      	ldr	r3, [pc, #128]	@ (8006e0c <get_ROMid+0x15c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	4b22      	ldr	r3, [pc, #136]	@ (8006e1c <get_ROMid+0x16c>)
 8006d92:	601a      	str	r2, [r3, #0]
				sprintf (devInfo.info,"\n can't read cause CNC error");
 8006d94:	4924      	ldr	r1, [pc, #144]	@ (8006e28 <get_ROMid+0x178>)
 8006d96:	4823      	ldr	r0, [pc, #140]	@ (8006e24 <get_ROMid+0x174>)
 8006d98:	f000 fde4 	bl	8007964 <siprintf>
		for (; i < devices; i++) {
 8006d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8006e0c <get_ROMid+0x15c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	3301      	adds	r3, #1
 8006da2:	4a1a      	ldr	r2, [pc, #104]	@ (8006e0c <get_ROMid+0x15c>)
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	4b16      	ldr	r3, [pc, #88]	@ (8006e00 <get_ROMid+0x150>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	4b17      	ldr	r3, [pc, #92]	@ (8006e0c <get_ROMid+0x15c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d8a8      	bhi.n	8006d06 <get_ROMid+0x56>
			}
		}

	}
	pDelay = 1000000;
 8006db4:	4b13      	ldr	r3, [pc, #76]	@ (8006e04 <get_ROMid+0x154>)
 8006db6:	4a14      	ldr	r2, [pc, #80]	@ (8006e08 <get_ROMid+0x158>)
 8006db8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < pDelay * 1; i++)
 8006dba:	4b14      	ldr	r3, [pc, #80]	@ (8006e0c <get_ROMid+0x15c>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	e005      	b.n	8006dce <get_ROMid+0x11e>
		__asm__("nop");
 8006dc2:	bf00      	nop
	for (i = 0; i < pDelay * 1; i++)
 8006dc4:	4b11      	ldr	r3, [pc, #68]	@ (8006e0c <get_ROMid+0x15c>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3301      	adds	r3, #1
 8006dca:	4a10      	ldr	r2, [pc, #64]	@ (8006e0c <get_ROMid+0x15c>)
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	4b0f      	ldr	r3, [pc, #60]	@ (8006e0c <get_ROMid+0x15c>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8006e04 <get_ROMid+0x154>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d3f3      	bcc.n	8006dc2 <get_ROMid+0x112>

	if (strcmp(crcOK,"CRC OK") == 0) return 0;
 8006dda:	4b0f      	ldr	r3, [pc, #60]	@ (8006e18 <get_ROMid+0x168>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	490c      	ldr	r1, [pc, #48]	@ (8006e10 <get_ROMid+0x160>)
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7f9 fa15 	bl	8000210 <strcmp>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <get_ROMid+0x140>
 8006dec:	2300      	movs	r3, #0
 8006dee:	e001      	b.n	8006df4 <get_ROMid+0x144>
	else return -1;
 8006df0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dfc:	2000593c 	.word	0x2000593c
 8006e00:	20005938 	.word	0x20005938
 8006e04:	20003608 	.word	0x20003608
 8006e08:	000f4240 	.word	0x000f4240
 8006e0c:	20005950 	.word	0x20005950
 8006e10:	08009c68 	.word	0x08009c68
 8006e14:	08009c70 	.word	0x08009c70
 8006e18:	2000597c 	.word	0x2000597c
 8006e1c:	20005958 	.word	0x20005958
 8006e20:	08009c7c 	.word	0x08009c7c
 8006e24:	2000595c 	.word	0x2000595c
 8006e28:	08009ca4 	.word	0x08009ca4

08006e2c <get_Temperature>:

void get_Temperature (void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0
	i=0;
 8006e30:	4b3a      	ldr	r3, [pc, #232]	@ (8006f1c <get_Temperature+0xf0>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
	for (; i < devices; i++) {
 8006e36:	e067      	b.n	8006f08 <get_Temperature+0xdc>
		switch ((ow.ids[i]).family) {
 8006e38:	4b38      	ldr	r3, [pc, #224]	@ (8006f1c <get_Temperature+0xf0>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a38      	ldr	r2, [pc, #224]	@ (8006f20 <get_Temperature+0xf4>)
 8006e3e:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006e42:	2b28      	cmp	r3, #40	@ 0x28
 8006e44:	d006      	beq.n	8006e54 <get_Temperature+0x28>
 8006e46:	2b28      	cmp	r3, #40	@ 0x28
 8006e48:	dc56      	bgt.n	8006ef8 <get_Temperature+0xcc>
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d056      	beq.n	8006efc <get_Temperature+0xd0>
 8006e4e:	2b10      	cmp	r3, #16
 8006e50:	d029      	beq.n	8006ea6 <get_Temperature+0x7a>
			break;
		case 0x00:
			break;
		default:

			break;
 8006e52:	e051      	b.n	8006ef8 <get_Temperature+0xcc>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8006e54:	4b31      	ldr	r3, [pc, #196]	@ (8006f1c <get_Temperature+0xf0>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	4a31      	ldr	r2, [pc, #196]	@ (8006f20 <get_Temperature+0xf4>)
 8006e5c:	4413      	add	r3, r2
 8006e5e:	2201      	movs	r2, #1
 8006e60:	4619      	mov	r1, r3
 8006e62:	482f      	ldr	r0, [pc, #188]	@ (8006f20 <get_Temperature+0xf4>)
 8006e64:	f7ff feb7 	bl	8006bd6 <readTemperature>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f24 <get_Temperature+0xf8>)
 8006e6c:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8006e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8006f24 <get_Temperature+0xf8>)
 8006e70:	f993 3000 	ldrsb.w	r3, [r3]
 8006e74:	461a      	mov	r2, r3
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	461a      	mov	r2, r3
 8006e80:	4b28      	ldr	r3, [pc, #160]	@ (8006f24 <get_Temperature+0xf8>)
 8006e82:	785b      	ldrb	r3, [r3, #1]
 8006e84:	4413      	add	r3, r2
 8006e86:	ee07 3a90 	vmov	s15, r3
 8006e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e8e:	4b23      	ldr	r3, [pc, #140]	@ (8006f1c <get_Temperature+0xf0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e9a:	4a23      	ldr	r2, [pc, #140]	@ (8006f28 <get_Temperature+0xfc>)
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	edc3 7a00 	vstr	s15, [r3]
			break;
 8006ea4:	e02b      	b.n	8006efe <get_Temperature+0xd2>
			t = readTemperature(&ow, &ow.ids[i], 1);
 8006ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8006f1c <get_Temperature+0xf0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	4a1c      	ldr	r2, [pc, #112]	@ (8006f20 <get_Temperature+0xf4>)
 8006eae:	4413      	add	r3, r2
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	481a      	ldr	r0, [pc, #104]	@ (8006f20 <get_Temperature+0xf4>)
 8006eb6:	f7ff fe8e 	bl	8006bd6 <readTemperature>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	4a19      	ldr	r2, [pc, #100]	@ (8006f24 <get_Temperature+0xf8>)
 8006ebe:	8013      	strh	r3, [r2, #0]
			Temp[i] = (float)(t.inCelsus*10+t.frac)/10.0;
 8006ec0:	4b18      	ldr	r3, [pc, #96]	@ (8006f24 <get_Temperature+0xf8>)
 8006ec2:	f993 3000 	ldrsb.w	r3, [r3]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	4613      	mov	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	005b      	lsls	r3, r3, #1
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4b14      	ldr	r3, [pc, #80]	@ (8006f24 <get_Temperature+0xf8>)
 8006ed4:	785b      	ldrb	r3, [r3, #1]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	ee07 3a90 	vmov	s15, r3
 8006edc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f1c <get_Temperature+0xf0>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8006ee8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006eec:	4a0e      	ldr	r2, [pc, #56]	@ (8006f28 <get_Temperature+0xfc>)
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4413      	add	r3, r2
 8006ef2:	edc3 7a00 	vstr	s15, [r3]
			break;
 8006ef6:	e002      	b.n	8006efe <get_Temperature+0xd2>
			break;
 8006ef8:	bf00      	nop
 8006efa:	e000      	b.n	8006efe <get_Temperature+0xd2>
			break;
 8006efc:	bf00      	nop
	for (; i < devices; i++) {
 8006efe:	4b07      	ldr	r3, [pc, #28]	@ (8006f1c <get_Temperature+0xf0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3301      	adds	r3, #1
 8006f04:	4a05      	ldr	r2, [pc, #20]	@ (8006f1c <get_Temperature+0xf0>)
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	4b08      	ldr	r3, [pc, #32]	@ (8006f2c <get_Temperature+0x100>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4b03      	ldr	r3, [pc, #12]	@ (8006f1c <get_Temperature+0xf0>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d890      	bhi.n	8006e38 <get_Temperature+0xc>
		}
	}

}
 8006f16:	bf00      	nop
 8006f18:	bf00      	nop
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	20005950 	.word	0x20005950
 8006f20:	2000593c 	.word	0x2000593c
 8006f24:	20005954 	.word	0x20005954
 8006f28:	20005934 	.word	0x20005934
 8006f2c:	20005938 	.word	0x20005938

08006f30 <__cvt>:
 8006f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	ec57 6b10 	vmov	r6, r7, d0
 8006f38:	2f00      	cmp	r7, #0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	463b      	mov	r3, r7
 8006f40:	bfbb      	ittet	lt
 8006f42:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f46:	461f      	movlt	r7, r3
 8006f48:	2300      	movge	r3, #0
 8006f4a:	232d      	movlt	r3, #45	@ 0x2d
 8006f4c:	700b      	strb	r3, [r1, #0]
 8006f4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f50:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f54:	4691      	mov	r9, r2
 8006f56:	f023 0820 	bic.w	r8, r3, #32
 8006f5a:	bfbc      	itt	lt
 8006f5c:	4632      	movlt	r2, r6
 8006f5e:	4616      	movlt	r6, r2
 8006f60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f64:	d005      	beq.n	8006f72 <__cvt+0x42>
 8006f66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f6a:	d100      	bne.n	8006f6e <__cvt+0x3e>
 8006f6c:	3401      	adds	r4, #1
 8006f6e:	2102      	movs	r1, #2
 8006f70:	e000      	b.n	8006f74 <__cvt+0x44>
 8006f72:	2103      	movs	r1, #3
 8006f74:	ab03      	add	r3, sp, #12
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	ab02      	add	r3, sp, #8
 8006f7a:	9300      	str	r3, [sp, #0]
 8006f7c:	ec47 6b10 	vmov	d0, r6, r7
 8006f80:	4653      	mov	r3, sl
 8006f82:	4622      	mov	r2, r4
 8006f84:	f000 fe5c 	bl	8007c40 <_dtoa_r>
 8006f88:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f8c:	4605      	mov	r5, r0
 8006f8e:	d119      	bne.n	8006fc4 <__cvt+0x94>
 8006f90:	f019 0f01 	tst.w	r9, #1
 8006f94:	d00e      	beq.n	8006fb4 <__cvt+0x84>
 8006f96:	eb00 0904 	add.w	r9, r0, r4
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	4639      	mov	r1, r7
 8006fa2:	f7f9 fdc1 	bl	8000b28 <__aeabi_dcmpeq>
 8006fa6:	b108      	cbz	r0, 8006fac <__cvt+0x7c>
 8006fa8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fac:	2230      	movs	r2, #48	@ 0x30
 8006fae:	9b03      	ldr	r3, [sp, #12]
 8006fb0:	454b      	cmp	r3, r9
 8006fb2:	d31e      	bcc.n	8006ff2 <__cvt+0xc2>
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fb8:	1b5b      	subs	r3, r3, r5
 8006fba:	4628      	mov	r0, r5
 8006fbc:	6013      	str	r3, [r2, #0]
 8006fbe:	b004      	add	sp, #16
 8006fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fc8:	eb00 0904 	add.w	r9, r0, r4
 8006fcc:	d1e5      	bne.n	8006f9a <__cvt+0x6a>
 8006fce:	7803      	ldrb	r3, [r0, #0]
 8006fd0:	2b30      	cmp	r3, #48	@ 0x30
 8006fd2:	d10a      	bne.n	8006fea <__cvt+0xba>
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	4630      	mov	r0, r6
 8006fda:	4639      	mov	r1, r7
 8006fdc:	f7f9 fda4 	bl	8000b28 <__aeabi_dcmpeq>
 8006fe0:	b918      	cbnz	r0, 8006fea <__cvt+0xba>
 8006fe2:	f1c4 0401 	rsb	r4, r4, #1
 8006fe6:	f8ca 4000 	str.w	r4, [sl]
 8006fea:	f8da 3000 	ldr.w	r3, [sl]
 8006fee:	4499      	add	r9, r3
 8006ff0:	e7d3      	b.n	8006f9a <__cvt+0x6a>
 8006ff2:	1c59      	adds	r1, r3, #1
 8006ff4:	9103      	str	r1, [sp, #12]
 8006ff6:	701a      	strb	r2, [r3, #0]
 8006ff8:	e7d9      	b.n	8006fae <__cvt+0x7e>

08006ffa <__exponent>:
 8006ffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	bfba      	itte	lt
 8007000:	4249      	neglt	r1, r1
 8007002:	232d      	movlt	r3, #45	@ 0x2d
 8007004:	232b      	movge	r3, #43	@ 0x2b
 8007006:	2909      	cmp	r1, #9
 8007008:	7002      	strb	r2, [r0, #0]
 800700a:	7043      	strb	r3, [r0, #1]
 800700c:	dd29      	ble.n	8007062 <__exponent+0x68>
 800700e:	f10d 0307 	add.w	r3, sp, #7
 8007012:	461d      	mov	r5, r3
 8007014:	270a      	movs	r7, #10
 8007016:	461a      	mov	r2, r3
 8007018:	fbb1 f6f7 	udiv	r6, r1, r7
 800701c:	fb07 1416 	mls	r4, r7, r6, r1
 8007020:	3430      	adds	r4, #48	@ 0x30
 8007022:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007026:	460c      	mov	r4, r1
 8007028:	2c63      	cmp	r4, #99	@ 0x63
 800702a:	f103 33ff 	add.w	r3, r3, #4294967295
 800702e:	4631      	mov	r1, r6
 8007030:	dcf1      	bgt.n	8007016 <__exponent+0x1c>
 8007032:	3130      	adds	r1, #48	@ 0x30
 8007034:	1e94      	subs	r4, r2, #2
 8007036:	f803 1c01 	strb.w	r1, [r3, #-1]
 800703a:	1c41      	adds	r1, r0, #1
 800703c:	4623      	mov	r3, r4
 800703e:	42ab      	cmp	r3, r5
 8007040:	d30a      	bcc.n	8007058 <__exponent+0x5e>
 8007042:	f10d 0309 	add.w	r3, sp, #9
 8007046:	1a9b      	subs	r3, r3, r2
 8007048:	42ac      	cmp	r4, r5
 800704a:	bf88      	it	hi
 800704c:	2300      	movhi	r3, #0
 800704e:	3302      	adds	r3, #2
 8007050:	4403      	add	r3, r0
 8007052:	1a18      	subs	r0, r3, r0
 8007054:	b003      	add	sp, #12
 8007056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007058:	f813 6b01 	ldrb.w	r6, [r3], #1
 800705c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007060:	e7ed      	b.n	800703e <__exponent+0x44>
 8007062:	2330      	movs	r3, #48	@ 0x30
 8007064:	3130      	adds	r1, #48	@ 0x30
 8007066:	7083      	strb	r3, [r0, #2]
 8007068:	70c1      	strb	r1, [r0, #3]
 800706a:	1d03      	adds	r3, r0, #4
 800706c:	e7f1      	b.n	8007052 <__exponent+0x58>
	...

08007070 <_printf_float>:
 8007070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007074:	b08d      	sub	sp, #52	@ 0x34
 8007076:	460c      	mov	r4, r1
 8007078:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800707c:	4616      	mov	r6, r2
 800707e:	461f      	mov	r7, r3
 8007080:	4605      	mov	r5, r0
 8007082:	f000 fcdb 	bl	8007a3c <_localeconv_r>
 8007086:	6803      	ldr	r3, [r0, #0]
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	4618      	mov	r0, r3
 800708c:	f7f9 f920 	bl	80002d0 <strlen>
 8007090:	2300      	movs	r3, #0
 8007092:	930a      	str	r3, [sp, #40]	@ 0x28
 8007094:	f8d8 3000 	ldr.w	r3, [r8]
 8007098:	9005      	str	r0, [sp, #20]
 800709a:	3307      	adds	r3, #7
 800709c:	f023 0307 	bic.w	r3, r3, #7
 80070a0:	f103 0208 	add.w	r2, r3, #8
 80070a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80070a8:	f8d4 b000 	ldr.w	fp, [r4]
 80070ac:	f8c8 2000 	str.w	r2, [r8]
 80070b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070b8:	9307      	str	r3, [sp, #28]
 80070ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80070be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070c6:	4b9c      	ldr	r3, [pc, #624]	@ (8007338 <_printf_float+0x2c8>)
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295
 80070cc:	f7f9 fd5e 	bl	8000b8c <__aeabi_dcmpun>
 80070d0:	bb70      	cbnz	r0, 8007130 <_printf_float+0xc0>
 80070d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070d6:	4b98      	ldr	r3, [pc, #608]	@ (8007338 <_printf_float+0x2c8>)
 80070d8:	f04f 32ff 	mov.w	r2, #4294967295
 80070dc:	f7f9 fd38 	bl	8000b50 <__aeabi_dcmple>
 80070e0:	bb30      	cbnz	r0, 8007130 <_printf_float+0xc0>
 80070e2:	2200      	movs	r2, #0
 80070e4:	2300      	movs	r3, #0
 80070e6:	4640      	mov	r0, r8
 80070e8:	4649      	mov	r1, r9
 80070ea:	f7f9 fd27 	bl	8000b3c <__aeabi_dcmplt>
 80070ee:	b110      	cbz	r0, 80070f6 <_printf_float+0x86>
 80070f0:	232d      	movs	r3, #45	@ 0x2d
 80070f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070f6:	4a91      	ldr	r2, [pc, #580]	@ (800733c <_printf_float+0x2cc>)
 80070f8:	4b91      	ldr	r3, [pc, #580]	@ (8007340 <_printf_float+0x2d0>)
 80070fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80070fe:	bf94      	ite	ls
 8007100:	4690      	movls	r8, r2
 8007102:	4698      	movhi	r8, r3
 8007104:	2303      	movs	r3, #3
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	f02b 0304 	bic.w	r3, fp, #4
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	f04f 0900 	mov.w	r9, #0
 8007112:	9700      	str	r7, [sp, #0]
 8007114:	4633      	mov	r3, r6
 8007116:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007118:	4621      	mov	r1, r4
 800711a:	4628      	mov	r0, r5
 800711c:	f000 f9d2 	bl	80074c4 <_printf_common>
 8007120:	3001      	adds	r0, #1
 8007122:	f040 808d 	bne.w	8007240 <_printf_float+0x1d0>
 8007126:	f04f 30ff 	mov.w	r0, #4294967295
 800712a:	b00d      	add	sp, #52	@ 0x34
 800712c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007130:	4642      	mov	r2, r8
 8007132:	464b      	mov	r3, r9
 8007134:	4640      	mov	r0, r8
 8007136:	4649      	mov	r1, r9
 8007138:	f7f9 fd28 	bl	8000b8c <__aeabi_dcmpun>
 800713c:	b140      	cbz	r0, 8007150 <_printf_float+0xe0>
 800713e:	464b      	mov	r3, r9
 8007140:	2b00      	cmp	r3, #0
 8007142:	bfbc      	itt	lt
 8007144:	232d      	movlt	r3, #45	@ 0x2d
 8007146:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800714a:	4a7e      	ldr	r2, [pc, #504]	@ (8007344 <_printf_float+0x2d4>)
 800714c:	4b7e      	ldr	r3, [pc, #504]	@ (8007348 <_printf_float+0x2d8>)
 800714e:	e7d4      	b.n	80070fa <_printf_float+0x8a>
 8007150:	6863      	ldr	r3, [r4, #4]
 8007152:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007156:	9206      	str	r2, [sp, #24]
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	d13b      	bne.n	80071d4 <_printf_float+0x164>
 800715c:	2306      	movs	r3, #6
 800715e:	6063      	str	r3, [r4, #4]
 8007160:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007164:	2300      	movs	r3, #0
 8007166:	6022      	str	r2, [r4, #0]
 8007168:	9303      	str	r3, [sp, #12]
 800716a:	ab0a      	add	r3, sp, #40	@ 0x28
 800716c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007170:	ab09      	add	r3, sp, #36	@ 0x24
 8007172:	9300      	str	r3, [sp, #0]
 8007174:	6861      	ldr	r1, [r4, #4]
 8007176:	ec49 8b10 	vmov	d0, r8, r9
 800717a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800717e:	4628      	mov	r0, r5
 8007180:	f7ff fed6 	bl	8006f30 <__cvt>
 8007184:	9b06      	ldr	r3, [sp, #24]
 8007186:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007188:	2b47      	cmp	r3, #71	@ 0x47
 800718a:	4680      	mov	r8, r0
 800718c:	d129      	bne.n	80071e2 <_printf_float+0x172>
 800718e:	1cc8      	adds	r0, r1, #3
 8007190:	db02      	blt.n	8007198 <_printf_float+0x128>
 8007192:	6863      	ldr	r3, [r4, #4]
 8007194:	4299      	cmp	r1, r3
 8007196:	dd41      	ble.n	800721c <_printf_float+0x1ac>
 8007198:	f1aa 0a02 	sub.w	sl, sl, #2
 800719c:	fa5f fa8a 	uxtb.w	sl, sl
 80071a0:	3901      	subs	r1, #1
 80071a2:	4652      	mov	r2, sl
 80071a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80071a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80071aa:	f7ff ff26 	bl	8006ffa <__exponent>
 80071ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071b0:	1813      	adds	r3, r2, r0
 80071b2:	2a01      	cmp	r2, #1
 80071b4:	4681      	mov	r9, r0
 80071b6:	6123      	str	r3, [r4, #16]
 80071b8:	dc02      	bgt.n	80071c0 <_printf_float+0x150>
 80071ba:	6822      	ldr	r2, [r4, #0]
 80071bc:	07d2      	lsls	r2, r2, #31
 80071be:	d501      	bpl.n	80071c4 <_printf_float+0x154>
 80071c0:	3301      	adds	r3, #1
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0a2      	beq.n	8007112 <_printf_float+0xa2>
 80071cc:	232d      	movs	r3, #45	@ 0x2d
 80071ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071d2:	e79e      	b.n	8007112 <_printf_float+0xa2>
 80071d4:	9a06      	ldr	r2, [sp, #24]
 80071d6:	2a47      	cmp	r2, #71	@ 0x47
 80071d8:	d1c2      	bne.n	8007160 <_printf_float+0xf0>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d1c0      	bne.n	8007160 <_printf_float+0xf0>
 80071de:	2301      	movs	r3, #1
 80071e0:	e7bd      	b.n	800715e <_printf_float+0xee>
 80071e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071e6:	d9db      	bls.n	80071a0 <_printf_float+0x130>
 80071e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80071ec:	d118      	bne.n	8007220 <_printf_float+0x1b0>
 80071ee:	2900      	cmp	r1, #0
 80071f0:	6863      	ldr	r3, [r4, #4]
 80071f2:	dd0b      	ble.n	800720c <_printf_float+0x19c>
 80071f4:	6121      	str	r1, [r4, #16]
 80071f6:	b913      	cbnz	r3, 80071fe <_printf_float+0x18e>
 80071f8:	6822      	ldr	r2, [r4, #0]
 80071fa:	07d0      	lsls	r0, r2, #31
 80071fc:	d502      	bpl.n	8007204 <_printf_float+0x194>
 80071fe:	3301      	adds	r3, #1
 8007200:	440b      	add	r3, r1
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007206:	f04f 0900 	mov.w	r9, #0
 800720a:	e7db      	b.n	80071c4 <_printf_float+0x154>
 800720c:	b913      	cbnz	r3, 8007214 <_printf_float+0x1a4>
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	07d2      	lsls	r2, r2, #31
 8007212:	d501      	bpl.n	8007218 <_printf_float+0x1a8>
 8007214:	3302      	adds	r3, #2
 8007216:	e7f4      	b.n	8007202 <_printf_float+0x192>
 8007218:	2301      	movs	r3, #1
 800721a:	e7f2      	b.n	8007202 <_printf_float+0x192>
 800721c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007222:	4299      	cmp	r1, r3
 8007224:	db05      	blt.n	8007232 <_printf_float+0x1c2>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	6121      	str	r1, [r4, #16]
 800722a:	07d8      	lsls	r0, r3, #31
 800722c:	d5ea      	bpl.n	8007204 <_printf_float+0x194>
 800722e:	1c4b      	adds	r3, r1, #1
 8007230:	e7e7      	b.n	8007202 <_printf_float+0x192>
 8007232:	2900      	cmp	r1, #0
 8007234:	bfd4      	ite	le
 8007236:	f1c1 0202 	rsble	r2, r1, #2
 800723a:	2201      	movgt	r2, #1
 800723c:	4413      	add	r3, r2
 800723e:	e7e0      	b.n	8007202 <_printf_float+0x192>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	055a      	lsls	r2, r3, #21
 8007244:	d407      	bmi.n	8007256 <_printf_float+0x1e6>
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	4642      	mov	r2, r8
 800724a:	4631      	mov	r1, r6
 800724c:	4628      	mov	r0, r5
 800724e:	47b8      	blx	r7
 8007250:	3001      	adds	r0, #1
 8007252:	d12b      	bne.n	80072ac <_printf_float+0x23c>
 8007254:	e767      	b.n	8007126 <_printf_float+0xb6>
 8007256:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800725a:	f240 80dd 	bls.w	8007418 <_printf_float+0x3a8>
 800725e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007262:	2200      	movs	r2, #0
 8007264:	2300      	movs	r3, #0
 8007266:	f7f9 fc5f 	bl	8000b28 <__aeabi_dcmpeq>
 800726a:	2800      	cmp	r0, #0
 800726c:	d033      	beq.n	80072d6 <_printf_float+0x266>
 800726e:	4a37      	ldr	r2, [pc, #220]	@ (800734c <_printf_float+0x2dc>)
 8007270:	2301      	movs	r3, #1
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	f43f af54 	beq.w	8007126 <_printf_float+0xb6>
 800727e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007282:	4543      	cmp	r3, r8
 8007284:	db02      	blt.n	800728c <_printf_float+0x21c>
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	07d8      	lsls	r0, r3, #31
 800728a:	d50f      	bpl.n	80072ac <_printf_float+0x23c>
 800728c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007290:	4631      	mov	r1, r6
 8007292:	4628      	mov	r0, r5
 8007294:	47b8      	blx	r7
 8007296:	3001      	adds	r0, #1
 8007298:	f43f af45 	beq.w	8007126 <_printf_float+0xb6>
 800729c:	f04f 0900 	mov.w	r9, #0
 80072a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80072a4:	f104 0a1a 	add.w	sl, r4, #26
 80072a8:	45c8      	cmp	r8, r9
 80072aa:	dc09      	bgt.n	80072c0 <_printf_float+0x250>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	079b      	lsls	r3, r3, #30
 80072b0:	f100 8103 	bmi.w	80074ba <_printf_float+0x44a>
 80072b4:	68e0      	ldr	r0, [r4, #12]
 80072b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072b8:	4298      	cmp	r0, r3
 80072ba:	bfb8      	it	lt
 80072bc:	4618      	movlt	r0, r3
 80072be:	e734      	b.n	800712a <_printf_float+0xba>
 80072c0:	2301      	movs	r3, #1
 80072c2:	4652      	mov	r2, sl
 80072c4:	4631      	mov	r1, r6
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b8      	blx	r7
 80072ca:	3001      	adds	r0, #1
 80072cc:	f43f af2b 	beq.w	8007126 <_printf_float+0xb6>
 80072d0:	f109 0901 	add.w	r9, r9, #1
 80072d4:	e7e8      	b.n	80072a8 <_printf_float+0x238>
 80072d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072d8:	2b00      	cmp	r3, #0
 80072da:	dc39      	bgt.n	8007350 <_printf_float+0x2e0>
 80072dc:	4a1b      	ldr	r2, [pc, #108]	@ (800734c <_printf_float+0x2dc>)
 80072de:	2301      	movs	r3, #1
 80072e0:	4631      	mov	r1, r6
 80072e2:	4628      	mov	r0, r5
 80072e4:	47b8      	blx	r7
 80072e6:	3001      	adds	r0, #1
 80072e8:	f43f af1d 	beq.w	8007126 <_printf_float+0xb6>
 80072ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80072f0:	ea59 0303 	orrs.w	r3, r9, r3
 80072f4:	d102      	bne.n	80072fc <_printf_float+0x28c>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	07d9      	lsls	r1, r3, #31
 80072fa:	d5d7      	bpl.n	80072ac <_printf_float+0x23c>
 80072fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007300:	4631      	mov	r1, r6
 8007302:	4628      	mov	r0, r5
 8007304:	47b8      	blx	r7
 8007306:	3001      	adds	r0, #1
 8007308:	f43f af0d 	beq.w	8007126 <_printf_float+0xb6>
 800730c:	f04f 0a00 	mov.w	sl, #0
 8007310:	f104 0b1a 	add.w	fp, r4, #26
 8007314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007316:	425b      	negs	r3, r3
 8007318:	4553      	cmp	r3, sl
 800731a:	dc01      	bgt.n	8007320 <_printf_float+0x2b0>
 800731c:	464b      	mov	r3, r9
 800731e:	e793      	b.n	8007248 <_printf_float+0x1d8>
 8007320:	2301      	movs	r3, #1
 8007322:	465a      	mov	r2, fp
 8007324:	4631      	mov	r1, r6
 8007326:	4628      	mov	r0, r5
 8007328:	47b8      	blx	r7
 800732a:	3001      	adds	r0, #1
 800732c:	f43f aefb 	beq.w	8007126 <_printf_float+0xb6>
 8007330:	f10a 0a01 	add.w	sl, sl, #1
 8007334:	e7ee      	b.n	8007314 <_printf_float+0x2a4>
 8007336:	bf00      	nop
 8007338:	7fefffff 	.word	0x7fefffff
 800733c:	0800e8ac 	.word	0x0800e8ac
 8007340:	0800e8b0 	.word	0x0800e8b0
 8007344:	0800e8b4 	.word	0x0800e8b4
 8007348:	0800e8b8 	.word	0x0800e8b8
 800734c:	0800e8bc 	.word	0x0800e8bc
 8007350:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007352:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007356:	4553      	cmp	r3, sl
 8007358:	bfa8      	it	ge
 800735a:	4653      	movge	r3, sl
 800735c:	2b00      	cmp	r3, #0
 800735e:	4699      	mov	r9, r3
 8007360:	dc36      	bgt.n	80073d0 <_printf_float+0x360>
 8007362:	f04f 0b00 	mov.w	fp, #0
 8007366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800736a:	f104 021a 	add.w	r2, r4, #26
 800736e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007370:	9306      	str	r3, [sp, #24]
 8007372:	eba3 0309 	sub.w	r3, r3, r9
 8007376:	455b      	cmp	r3, fp
 8007378:	dc31      	bgt.n	80073de <_printf_float+0x36e>
 800737a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800737c:	459a      	cmp	sl, r3
 800737e:	dc3a      	bgt.n	80073f6 <_printf_float+0x386>
 8007380:	6823      	ldr	r3, [r4, #0]
 8007382:	07da      	lsls	r2, r3, #31
 8007384:	d437      	bmi.n	80073f6 <_printf_float+0x386>
 8007386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007388:	ebaa 0903 	sub.w	r9, sl, r3
 800738c:	9b06      	ldr	r3, [sp, #24]
 800738e:	ebaa 0303 	sub.w	r3, sl, r3
 8007392:	4599      	cmp	r9, r3
 8007394:	bfa8      	it	ge
 8007396:	4699      	movge	r9, r3
 8007398:	f1b9 0f00 	cmp.w	r9, #0
 800739c:	dc33      	bgt.n	8007406 <_printf_float+0x396>
 800739e:	f04f 0800 	mov.w	r8, #0
 80073a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073a6:	f104 0b1a 	add.w	fp, r4, #26
 80073aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ac:	ebaa 0303 	sub.w	r3, sl, r3
 80073b0:	eba3 0309 	sub.w	r3, r3, r9
 80073b4:	4543      	cmp	r3, r8
 80073b6:	f77f af79 	ble.w	80072ac <_printf_float+0x23c>
 80073ba:	2301      	movs	r3, #1
 80073bc:	465a      	mov	r2, fp
 80073be:	4631      	mov	r1, r6
 80073c0:	4628      	mov	r0, r5
 80073c2:	47b8      	blx	r7
 80073c4:	3001      	adds	r0, #1
 80073c6:	f43f aeae 	beq.w	8007126 <_printf_float+0xb6>
 80073ca:	f108 0801 	add.w	r8, r8, #1
 80073ce:	e7ec      	b.n	80073aa <_printf_float+0x33a>
 80073d0:	4642      	mov	r2, r8
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	d1c2      	bne.n	8007362 <_printf_float+0x2f2>
 80073dc:	e6a3      	b.n	8007126 <_printf_float+0xb6>
 80073de:	2301      	movs	r3, #1
 80073e0:	4631      	mov	r1, r6
 80073e2:	4628      	mov	r0, r5
 80073e4:	9206      	str	r2, [sp, #24]
 80073e6:	47b8      	blx	r7
 80073e8:	3001      	adds	r0, #1
 80073ea:	f43f ae9c 	beq.w	8007126 <_printf_float+0xb6>
 80073ee:	9a06      	ldr	r2, [sp, #24]
 80073f0:	f10b 0b01 	add.w	fp, fp, #1
 80073f4:	e7bb      	b.n	800736e <_printf_float+0x2fe>
 80073f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073fa:	4631      	mov	r1, r6
 80073fc:	4628      	mov	r0, r5
 80073fe:	47b8      	blx	r7
 8007400:	3001      	adds	r0, #1
 8007402:	d1c0      	bne.n	8007386 <_printf_float+0x316>
 8007404:	e68f      	b.n	8007126 <_printf_float+0xb6>
 8007406:	9a06      	ldr	r2, [sp, #24]
 8007408:	464b      	mov	r3, r9
 800740a:	4442      	add	r2, r8
 800740c:	4631      	mov	r1, r6
 800740e:	4628      	mov	r0, r5
 8007410:	47b8      	blx	r7
 8007412:	3001      	adds	r0, #1
 8007414:	d1c3      	bne.n	800739e <_printf_float+0x32e>
 8007416:	e686      	b.n	8007126 <_printf_float+0xb6>
 8007418:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800741c:	f1ba 0f01 	cmp.w	sl, #1
 8007420:	dc01      	bgt.n	8007426 <_printf_float+0x3b6>
 8007422:	07db      	lsls	r3, r3, #31
 8007424:	d536      	bpl.n	8007494 <_printf_float+0x424>
 8007426:	2301      	movs	r3, #1
 8007428:	4642      	mov	r2, r8
 800742a:	4631      	mov	r1, r6
 800742c:	4628      	mov	r0, r5
 800742e:	47b8      	blx	r7
 8007430:	3001      	adds	r0, #1
 8007432:	f43f ae78 	beq.w	8007126 <_printf_float+0xb6>
 8007436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800743a:	4631      	mov	r1, r6
 800743c:	4628      	mov	r0, r5
 800743e:	47b8      	blx	r7
 8007440:	3001      	adds	r0, #1
 8007442:	f43f ae70 	beq.w	8007126 <_printf_float+0xb6>
 8007446:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007452:	f7f9 fb69 	bl	8000b28 <__aeabi_dcmpeq>
 8007456:	b9c0      	cbnz	r0, 800748a <_printf_float+0x41a>
 8007458:	4653      	mov	r3, sl
 800745a:	f108 0201 	add.w	r2, r8, #1
 800745e:	4631      	mov	r1, r6
 8007460:	4628      	mov	r0, r5
 8007462:	47b8      	blx	r7
 8007464:	3001      	adds	r0, #1
 8007466:	d10c      	bne.n	8007482 <_printf_float+0x412>
 8007468:	e65d      	b.n	8007126 <_printf_float+0xb6>
 800746a:	2301      	movs	r3, #1
 800746c:	465a      	mov	r2, fp
 800746e:	4631      	mov	r1, r6
 8007470:	4628      	mov	r0, r5
 8007472:	47b8      	blx	r7
 8007474:	3001      	adds	r0, #1
 8007476:	f43f ae56 	beq.w	8007126 <_printf_float+0xb6>
 800747a:	f108 0801 	add.w	r8, r8, #1
 800747e:	45d0      	cmp	r8, sl
 8007480:	dbf3      	blt.n	800746a <_printf_float+0x3fa>
 8007482:	464b      	mov	r3, r9
 8007484:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007488:	e6df      	b.n	800724a <_printf_float+0x1da>
 800748a:	f04f 0800 	mov.w	r8, #0
 800748e:	f104 0b1a 	add.w	fp, r4, #26
 8007492:	e7f4      	b.n	800747e <_printf_float+0x40e>
 8007494:	2301      	movs	r3, #1
 8007496:	4642      	mov	r2, r8
 8007498:	e7e1      	b.n	800745e <_printf_float+0x3ee>
 800749a:	2301      	movs	r3, #1
 800749c:	464a      	mov	r2, r9
 800749e:	4631      	mov	r1, r6
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b8      	blx	r7
 80074a4:	3001      	adds	r0, #1
 80074a6:	f43f ae3e 	beq.w	8007126 <_printf_float+0xb6>
 80074aa:	f108 0801 	add.w	r8, r8, #1
 80074ae:	68e3      	ldr	r3, [r4, #12]
 80074b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074b2:	1a5b      	subs	r3, r3, r1
 80074b4:	4543      	cmp	r3, r8
 80074b6:	dcf0      	bgt.n	800749a <_printf_float+0x42a>
 80074b8:	e6fc      	b.n	80072b4 <_printf_float+0x244>
 80074ba:	f04f 0800 	mov.w	r8, #0
 80074be:	f104 0919 	add.w	r9, r4, #25
 80074c2:	e7f4      	b.n	80074ae <_printf_float+0x43e>

080074c4 <_printf_common>:
 80074c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	4616      	mov	r6, r2
 80074ca:	4698      	mov	r8, r3
 80074cc:	688a      	ldr	r2, [r1, #8]
 80074ce:	690b      	ldr	r3, [r1, #16]
 80074d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074d4:	4293      	cmp	r3, r2
 80074d6:	bfb8      	it	lt
 80074d8:	4613      	movlt	r3, r2
 80074da:	6033      	str	r3, [r6, #0]
 80074dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074e0:	4607      	mov	r7, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	b10a      	cbz	r2, 80074ea <_printf_common+0x26>
 80074e6:	3301      	adds	r3, #1
 80074e8:	6033      	str	r3, [r6, #0]
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	0699      	lsls	r1, r3, #26
 80074ee:	bf42      	ittt	mi
 80074f0:	6833      	ldrmi	r3, [r6, #0]
 80074f2:	3302      	addmi	r3, #2
 80074f4:	6033      	strmi	r3, [r6, #0]
 80074f6:	6825      	ldr	r5, [r4, #0]
 80074f8:	f015 0506 	ands.w	r5, r5, #6
 80074fc:	d106      	bne.n	800750c <_printf_common+0x48>
 80074fe:	f104 0a19 	add.w	sl, r4, #25
 8007502:	68e3      	ldr	r3, [r4, #12]
 8007504:	6832      	ldr	r2, [r6, #0]
 8007506:	1a9b      	subs	r3, r3, r2
 8007508:	42ab      	cmp	r3, r5
 800750a:	dc26      	bgt.n	800755a <_printf_common+0x96>
 800750c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007510:	6822      	ldr	r2, [r4, #0]
 8007512:	3b00      	subs	r3, #0
 8007514:	bf18      	it	ne
 8007516:	2301      	movne	r3, #1
 8007518:	0692      	lsls	r2, r2, #26
 800751a:	d42b      	bmi.n	8007574 <_printf_common+0xb0>
 800751c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007520:	4641      	mov	r1, r8
 8007522:	4638      	mov	r0, r7
 8007524:	47c8      	blx	r9
 8007526:	3001      	adds	r0, #1
 8007528:	d01e      	beq.n	8007568 <_printf_common+0xa4>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	6922      	ldr	r2, [r4, #16]
 800752e:	f003 0306 	and.w	r3, r3, #6
 8007532:	2b04      	cmp	r3, #4
 8007534:	bf02      	ittt	eq
 8007536:	68e5      	ldreq	r5, [r4, #12]
 8007538:	6833      	ldreq	r3, [r6, #0]
 800753a:	1aed      	subeq	r5, r5, r3
 800753c:	68a3      	ldr	r3, [r4, #8]
 800753e:	bf0c      	ite	eq
 8007540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007544:	2500      	movne	r5, #0
 8007546:	4293      	cmp	r3, r2
 8007548:	bfc4      	itt	gt
 800754a:	1a9b      	subgt	r3, r3, r2
 800754c:	18ed      	addgt	r5, r5, r3
 800754e:	2600      	movs	r6, #0
 8007550:	341a      	adds	r4, #26
 8007552:	42b5      	cmp	r5, r6
 8007554:	d11a      	bne.n	800758c <_printf_common+0xc8>
 8007556:	2000      	movs	r0, #0
 8007558:	e008      	b.n	800756c <_printf_common+0xa8>
 800755a:	2301      	movs	r3, #1
 800755c:	4652      	mov	r2, sl
 800755e:	4641      	mov	r1, r8
 8007560:	4638      	mov	r0, r7
 8007562:	47c8      	blx	r9
 8007564:	3001      	adds	r0, #1
 8007566:	d103      	bne.n	8007570 <_printf_common+0xac>
 8007568:	f04f 30ff 	mov.w	r0, #4294967295
 800756c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007570:	3501      	adds	r5, #1
 8007572:	e7c6      	b.n	8007502 <_printf_common+0x3e>
 8007574:	18e1      	adds	r1, r4, r3
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	2030      	movs	r0, #48	@ 0x30
 800757a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800757e:	4422      	add	r2, r4
 8007580:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007584:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007588:	3302      	adds	r3, #2
 800758a:	e7c7      	b.n	800751c <_printf_common+0x58>
 800758c:	2301      	movs	r3, #1
 800758e:	4622      	mov	r2, r4
 8007590:	4641      	mov	r1, r8
 8007592:	4638      	mov	r0, r7
 8007594:	47c8      	blx	r9
 8007596:	3001      	adds	r0, #1
 8007598:	d0e6      	beq.n	8007568 <_printf_common+0xa4>
 800759a:	3601      	adds	r6, #1
 800759c:	e7d9      	b.n	8007552 <_printf_common+0x8e>
	...

080075a0 <_printf_i>:
 80075a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075a4:	7e0f      	ldrb	r7, [r1, #24]
 80075a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075a8:	2f78      	cmp	r7, #120	@ 0x78
 80075aa:	4691      	mov	r9, r2
 80075ac:	4680      	mov	r8, r0
 80075ae:	460c      	mov	r4, r1
 80075b0:	469a      	mov	sl, r3
 80075b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075b6:	d807      	bhi.n	80075c8 <_printf_i+0x28>
 80075b8:	2f62      	cmp	r7, #98	@ 0x62
 80075ba:	d80a      	bhi.n	80075d2 <_printf_i+0x32>
 80075bc:	2f00      	cmp	r7, #0
 80075be:	f000 80d2 	beq.w	8007766 <_printf_i+0x1c6>
 80075c2:	2f58      	cmp	r7, #88	@ 0x58
 80075c4:	f000 80b9 	beq.w	800773a <_printf_i+0x19a>
 80075c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075d0:	e03a      	b.n	8007648 <_printf_i+0xa8>
 80075d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075d6:	2b15      	cmp	r3, #21
 80075d8:	d8f6      	bhi.n	80075c8 <_printf_i+0x28>
 80075da:	a101      	add	r1, pc, #4	@ (adr r1, 80075e0 <_printf_i+0x40>)
 80075dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075e0:	08007639 	.word	0x08007639
 80075e4:	0800764d 	.word	0x0800764d
 80075e8:	080075c9 	.word	0x080075c9
 80075ec:	080075c9 	.word	0x080075c9
 80075f0:	080075c9 	.word	0x080075c9
 80075f4:	080075c9 	.word	0x080075c9
 80075f8:	0800764d 	.word	0x0800764d
 80075fc:	080075c9 	.word	0x080075c9
 8007600:	080075c9 	.word	0x080075c9
 8007604:	080075c9 	.word	0x080075c9
 8007608:	080075c9 	.word	0x080075c9
 800760c:	0800774d 	.word	0x0800774d
 8007610:	08007677 	.word	0x08007677
 8007614:	08007707 	.word	0x08007707
 8007618:	080075c9 	.word	0x080075c9
 800761c:	080075c9 	.word	0x080075c9
 8007620:	0800776f 	.word	0x0800776f
 8007624:	080075c9 	.word	0x080075c9
 8007628:	08007677 	.word	0x08007677
 800762c:	080075c9 	.word	0x080075c9
 8007630:	080075c9 	.word	0x080075c9
 8007634:	0800770f 	.word	0x0800770f
 8007638:	6833      	ldr	r3, [r6, #0]
 800763a:	1d1a      	adds	r2, r3, #4
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	6032      	str	r2, [r6, #0]
 8007640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007644:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007648:	2301      	movs	r3, #1
 800764a:	e09d      	b.n	8007788 <_printf_i+0x1e8>
 800764c:	6833      	ldr	r3, [r6, #0]
 800764e:	6820      	ldr	r0, [r4, #0]
 8007650:	1d19      	adds	r1, r3, #4
 8007652:	6031      	str	r1, [r6, #0]
 8007654:	0606      	lsls	r6, r0, #24
 8007656:	d501      	bpl.n	800765c <_printf_i+0xbc>
 8007658:	681d      	ldr	r5, [r3, #0]
 800765a:	e003      	b.n	8007664 <_printf_i+0xc4>
 800765c:	0645      	lsls	r5, r0, #25
 800765e:	d5fb      	bpl.n	8007658 <_printf_i+0xb8>
 8007660:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007664:	2d00      	cmp	r5, #0
 8007666:	da03      	bge.n	8007670 <_printf_i+0xd0>
 8007668:	232d      	movs	r3, #45	@ 0x2d
 800766a:	426d      	negs	r5, r5
 800766c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007670:	4859      	ldr	r0, [pc, #356]	@ (80077d8 <_printf_i+0x238>)
 8007672:	230a      	movs	r3, #10
 8007674:	e011      	b.n	800769a <_printf_i+0xfa>
 8007676:	6821      	ldr	r1, [r4, #0]
 8007678:	6833      	ldr	r3, [r6, #0]
 800767a:	0608      	lsls	r0, r1, #24
 800767c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007680:	d402      	bmi.n	8007688 <_printf_i+0xe8>
 8007682:	0649      	lsls	r1, r1, #25
 8007684:	bf48      	it	mi
 8007686:	b2ad      	uxthmi	r5, r5
 8007688:	2f6f      	cmp	r7, #111	@ 0x6f
 800768a:	4853      	ldr	r0, [pc, #332]	@ (80077d8 <_printf_i+0x238>)
 800768c:	6033      	str	r3, [r6, #0]
 800768e:	bf14      	ite	ne
 8007690:	230a      	movne	r3, #10
 8007692:	2308      	moveq	r3, #8
 8007694:	2100      	movs	r1, #0
 8007696:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800769a:	6866      	ldr	r6, [r4, #4]
 800769c:	60a6      	str	r6, [r4, #8]
 800769e:	2e00      	cmp	r6, #0
 80076a0:	bfa2      	ittt	ge
 80076a2:	6821      	ldrge	r1, [r4, #0]
 80076a4:	f021 0104 	bicge.w	r1, r1, #4
 80076a8:	6021      	strge	r1, [r4, #0]
 80076aa:	b90d      	cbnz	r5, 80076b0 <_printf_i+0x110>
 80076ac:	2e00      	cmp	r6, #0
 80076ae:	d04b      	beq.n	8007748 <_printf_i+0x1a8>
 80076b0:	4616      	mov	r6, r2
 80076b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80076b6:	fb03 5711 	mls	r7, r3, r1, r5
 80076ba:	5dc7      	ldrb	r7, [r0, r7]
 80076bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076c0:	462f      	mov	r7, r5
 80076c2:	42bb      	cmp	r3, r7
 80076c4:	460d      	mov	r5, r1
 80076c6:	d9f4      	bls.n	80076b2 <_printf_i+0x112>
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d10b      	bne.n	80076e4 <_printf_i+0x144>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	07df      	lsls	r7, r3, #31
 80076d0:	d508      	bpl.n	80076e4 <_printf_i+0x144>
 80076d2:	6923      	ldr	r3, [r4, #16]
 80076d4:	6861      	ldr	r1, [r4, #4]
 80076d6:	4299      	cmp	r1, r3
 80076d8:	bfde      	ittt	le
 80076da:	2330      	movle	r3, #48	@ 0x30
 80076dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076e4:	1b92      	subs	r2, r2, r6
 80076e6:	6122      	str	r2, [r4, #16]
 80076e8:	f8cd a000 	str.w	sl, [sp]
 80076ec:	464b      	mov	r3, r9
 80076ee:	aa03      	add	r2, sp, #12
 80076f0:	4621      	mov	r1, r4
 80076f2:	4640      	mov	r0, r8
 80076f4:	f7ff fee6 	bl	80074c4 <_printf_common>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d14a      	bne.n	8007792 <_printf_i+0x1f2>
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007700:	b004      	add	sp, #16
 8007702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007706:	6823      	ldr	r3, [r4, #0]
 8007708:	f043 0320 	orr.w	r3, r3, #32
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	4833      	ldr	r0, [pc, #204]	@ (80077dc <_printf_i+0x23c>)
 8007710:	2778      	movs	r7, #120	@ 0x78
 8007712:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	6831      	ldr	r1, [r6, #0]
 800771a:	061f      	lsls	r7, r3, #24
 800771c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007720:	d402      	bmi.n	8007728 <_printf_i+0x188>
 8007722:	065f      	lsls	r7, r3, #25
 8007724:	bf48      	it	mi
 8007726:	b2ad      	uxthmi	r5, r5
 8007728:	6031      	str	r1, [r6, #0]
 800772a:	07d9      	lsls	r1, r3, #31
 800772c:	bf44      	itt	mi
 800772e:	f043 0320 	orrmi.w	r3, r3, #32
 8007732:	6023      	strmi	r3, [r4, #0]
 8007734:	b11d      	cbz	r5, 800773e <_printf_i+0x19e>
 8007736:	2310      	movs	r3, #16
 8007738:	e7ac      	b.n	8007694 <_printf_i+0xf4>
 800773a:	4827      	ldr	r0, [pc, #156]	@ (80077d8 <_printf_i+0x238>)
 800773c:	e7e9      	b.n	8007712 <_printf_i+0x172>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	f023 0320 	bic.w	r3, r3, #32
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	e7f6      	b.n	8007736 <_printf_i+0x196>
 8007748:	4616      	mov	r6, r2
 800774a:	e7bd      	b.n	80076c8 <_printf_i+0x128>
 800774c:	6833      	ldr	r3, [r6, #0]
 800774e:	6825      	ldr	r5, [r4, #0]
 8007750:	6961      	ldr	r1, [r4, #20]
 8007752:	1d18      	adds	r0, r3, #4
 8007754:	6030      	str	r0, [r6, #0]
 8007756:	062e      	lsls	r6, r5, #24
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	d501      	bpl.n	8007760 <_printf_i+0x1c0>
 800775c:	6019      	str	r1, [r3, #0]
 800775e:	e002      	b.n	8007766 <_printf_i+0x1c6>
 8007760:	0668      	lsls	r0, r5, #25
 8007762:	d5fb      	bpl.n	800775c <_printf_i+0x1bc>
 8007764:	8019      	strh	r1, [r3, #0]
 8007766:	2300      	movs	r3, #0
 8007768:	6123      	str	r3, [r4, #16]
 800776a:	4616      	mov	r6, r2
 800776c:	e7bc      	b.n	80076e8 <_printf_i+0x148>
 800776e:	6833      	ldr	r3, [r6, #0]
 8007770:	1d1a      	adds	r2, r3, #4
 8007772:	6032      	str	r2, [r6, #0]
 8007774:	681e      	ldr	r6, [r3, #0]
 8007776:	6862      	ldr	r2, [r4, #4]
 8007778:	2100      	movs	r1, #0
 800777a:	4630      	mov	r0, r6
 800777c:	f7f8 fd58 	bl	8000230 <memchr>
 8007780:	b108      	cbz	r0, 8007786 <_printf_i+0x1e6>
 8007782:	1b80      	subs	r0, r0, r6
 8007784:	6060      	str	r0, [r4, #4]
 8007786:	6863      	ldr	r3, [r4, #4]
 8007788:	6123      	str	r3, [r4, #16]
 800778a:	2300      	movs	r3, #0
 800778c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007790:	e7aa      	b.n	80076e8 <_printf_i+0x148>
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	4632      	mov	r2, r6
 8007796:	4649      	mov	r1, r9
 8007798:	4640      	mov	r0, r8
 800779a:	47d0      	blx	sl
 800779c:	3001      	adds	r0, #1
 800779e:	d0ad      	beq.n	80076fc <_printf_i+0x15c>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	079b      	lsls	r3, r3, #30
 80077a4:	d413      	bmi.n	80077ce <_printf_i+0x22e>
 80077a6:	68e0      	ldr	r0, [r4, #12]
 80077a8:	9b03      	ldr	r3, [sp, #12]
 80077aa:	4298      	cmp	r0, r3
 80077ac:	bfb8      	it	lt
 80077ae:	4618      	movlt	r0, r3
 80077b0:	e7a6      	b.n	8007700 <_printf_i+0x160>
 80077b2:	2301      	movs	r3, #1
 80077b4:	4632      	mov	r2, r6
 80077b6:	4649      	mov	r1, r9
 80077b8:	4640      	mov	r0, r8
 80077ba:	47d0      	blx	sl
 80077bc:	3001      	adds	r0, #1
 80077be:	d09d      	beq.n	80076fc <_printf_i+0x15c>
 80077c0:	3501      	adds	r5, #1
 80077c2:	68e3      	ldr	r3, [r4, #12]
 80077c4:	9903      	ldr	r1, [sp, #12]
 80077c6:	1a5b      	subs	r3, r3, r1
 80077c8:	42ab      	cmp	r3, r5
 80077ca:	dcf2      	bgt.n	80077b2 <_printf_i+0x212>
 80077cc:	e7eb      	b.n	80077a6 <_printf_i+0x206>
 80077ce:	2500      	movs	r5, #0
 80077d0:	f104 0619 	add.w	r6, r4, #25
 80077d4:	e7f5      	b.n	80077c2 <_printf_i+0x222>
 80077d6:	bf00      	nop
 80077d8:	0800e8be 	.word	0x0800e8be
 80077dc:	0800e8cf 	.word	0x0800e8cf

080077e0 <std>:
 80077e0:	2300      	movs	r3, #0
 80077e2:	b510      	push	{r4, lr}
 80077e4:	4604      	mov	r4, r0
 80077e6:	e9c0 3300 	strd	r3, r3, [r0]
 80077ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077ee:	6083      	str	r3, [r0, #8]
 80077f0:	8181      	strh	r1, [r0, #12]
 80077f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80077f4:	81c2      	strh	r2, [r0, #14]
 80077f6:	6183      	str	r3, [r0, #24]
 80077f8:	4619      	mov	r1, r3
 80077fa:	2208      	movs	r2, #8
 80077fc:	305c      	adds	r0, #92	@ 0x5c
 80077fe:	f000 f914 	bl	8007a2a <memset>
 8007802:	4b0d      	ldr	r3, [pc, #52]	@ (8007838 <std+0x58>)
 8007804:	6263      	str	r3, [r4, #36]	@ 0x24
 8007806:	4b0d      	ldr	r3, [pc, #52]	@ (800783c <std+0x5c>)
 8007808:	62a3      	str	r3, [r4, #40]	@ 0x28
 800780a:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <std+0x60>)
 800780c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800780e:	4b0d      	ldr	r3, [pc, #52]	@ (8007844 <std+0x64>)
 8007810:	6323      	str	r3, [r4, #48]	@ 0x30
 8007812:	4b0d      	ldr	r3, [pc, #52]	@ (8007848 <std+0x68>)
 8007814:	6224      	str	r4, [r4, #32]
 8007816:	429c      	cmp	r4, r3
 8007818:	d006      	beq.n	8007828 <std+0x48>
 800781a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800781e:	4294      	cmp	r4, r2
 8007820:	d002      	beq.n	8007828 <std+0x48>
 8007822:	33d0      	adds	r3, #208	@ 0xd0
 8007824:	429c      	cmp	r4, r3
 8007826:	d105      	bne.n	8007834 <std+0x54>
 8007828:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007830:	f000 b978 	b.w	8007b24 <__retarget_lock_init_recursive>
 8007834:	bd10      	pop	{r4, pc}
 8007836:	bf00      	nop
 8007838:	080079a5 	.word	0x080079a5
 800783c:	080079c7 	.word	0x080079c7
 8007840:	080079ff 	.word	0x080079ff
 8007844:	08007a23 	.word	0x08007a23
 8007848:	20005980 	.word	0x20005980

0800784c <stdio_exit_handler>:
 800784c:	4a02      	ldr	r2, [pc, #8]	@ (8007858 <stdio_exit_handler+0xc>)
 800784e:	4903      	ldr	r1, [pc, #12]	@ (800785c <stdio_exit_handler+0x10>)
 8007850:	4803      	ldr	r0, [pc, #12]	@ (8007860 <stdio_exit_handler+0x14>)
 8007852:	f000 b869 	b.w	8007928 <_fwalk_sglue>
 8007856:	bf00      	nop
 8007858:	2000360c 	.word	0x2000360c
 800785c:	08009485 	.word	0x08009485
 8007860:	2000361c 	.word	0x2000361c

08007864 <cleanup_stdio>:
 8007864:	6841      	ldr	r1, [r0, #4]
 8007866:	4b0c      	ldr	r3, [pc, #48]	@ (8007898 <cleanup_stdio+0x34>)
 8007868:	4299      	cmp	r1, r3
 800786a:	b510      	push	{r4, lr}
 800786c:	4604      	mov	r4, r0
 800786e:	d001      	beq.n	8007874 <cleanup_stdio+0x10>
 8007870:	f001 fe08 	bl	8009484 <_fflush_r>
 8007874:	68a1      	ldr	r1, [r4, #8]
 8007876:	4b09      	ldr	r3, [pc, #36]	@ (800789c <cleanup_stdio+0x38>)
 8007878:	4299      	cmp	r1, r3
 800787a:	d002      	beq.n	8007882 <cleanup_stdio+0x1e>
 800787c:	4620      	mov	r0, r4
 800787e:	f001 fe01 	bl	8009484 <_fflush_r>
 8007882:	68e1      	ldr	r1, [r4, #12]
 8007884:	4b06      	ldr	r3, [pc, #24]	@ (80078a0 <cleanup_stdio+0x3c>)
 8007886:	4299      	cmp	r1, r3
 8007888:	d004      	beq.n	8007894 <cleanup_stdio+0x30>
 800788a:	4620      	mov	r0, r4
 800788c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007890:	f001 bdf8 	b.w	8009484 <_fflush_r>
 8007894:	bd10      	pop	{r4, pc}
 8007896:	bf00      	nop
 8007898:	20005980 	.word	0x20005980
 800789c:	200059e8 	.word	0x200059e8
 80078a0:	20005a50 	.word	0x20005a50

080078a4 <global_stdio_init.part.0>:
 80078a4:	b510      	push	{r4, lr}
 80078a6:	4b0b      	ldr	r3, [pc, #44]	@ (80078d4 <global_stdio_init.part.0+0x30>)
 80078a8:	4c0b      	ldr	r4, [pc, #44]	@ (80078d8 <global_stdio_init.part.0+0x34>)
 80078aa:	4a0c      	ldr	r2, [pc, #48]	@ (80078dc <global_stdio_init.part.0+0x38>)
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	4620      	mov	r0, r4
 80078b0:	2200      	movs	r2, #0
 80078b2:	2104      	movs	r1, #4
 80078b4:	f7ff ff94 	bl	80077e0 <std>
 80078b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078bc:	2201      	movs	r2, #1
 80078be:	2109      	movs	r1, #9
 80078c0:	f7ff ff8e 	bl	80077e0 <std>
 80078c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078c8:	2202      	movs	r2, #2
 80078ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ce:	2112      	movs	r1, #18
 80078d0:	f7ff bf86 	b.w	80077e0 <std>
 80078d4:	20005ab8 	.word	0x20005ab8
 80078d8:	20005980 	.word	0x20005980
 80078dc:	0800784d 	.word	0x0800784d

080078e0 <__sfp_lock_acquire>:
 80078e0:	4801      	ldr	r0, [pc, #4]	@ (80078e8 <__sfp_lock_acquire+0x8>)
 80078e2:	f000 b920 	b.w	8007b26 <__retarget_lock_acquire_recursive>
 80078e6:	bf00      	nop
 80078e8:	20005ac1 	.word	0x20005ac1

080078ec <__sfp_lock_release>:
 80078ec:	4801      	ldr	r0, [pc, #4]	@ (80078f4 <__sfp_lock_release+0x8>)
 80078ee:	f000 b91b 	b.w	8007b28 <__retarget_lock_release_recursive>
 80078f2:	bf00      	nop
 80078f4:	20005ac1 	.word	0x20005ac1

080078f8 <__sinit>:
 80078f8:	b510      	push	{r4, lr}
 80078fa:	4604      	mov	r4, r0
 80078fc:	f7ff fff0 	bl	80078e0 <__sfp_lock_acquire>
 8007900:	6a23      	ldr	r3, [r4, #32]
 8007902:	b11b      	cbz	r3, 800790c <__sinit+0x14>
 8007904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007908:	f7ff bff0 	b.w	80078ec <__sfp_lock_release>
 800790c:	4b04      	ldr	r3, [pc, #16]	@ (8007920 <__sinit+0x28>)
 800790e:	6223      	str	r3, [r4, #32]
 8007910:	4b04      	ldr	r3, [pc, #16]	@ (8007924 <__sinit+0x2c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1f5      	bne.n	8007904 <__sinit+0xc>
 8007918:	f7ff ffc4 	bl	80078a4 <global_stdio_init.part.0>
 800791c:	e7f2      	b.n	8007904 <__sinit+0xc>
 800791e:	bf00      	nop
 8007920:	08007865 	.word	0x08007865
 8007924:	20005ab8 	.word	0x20005ab8

08007928 <_fwalk_sglue>:
 8007928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800792c:	4607      	mov	r7, r0
 800792e:	4688      	mov	r8, r1
 8007930:	4614      	mov	r4, r2
 8007932:	2600      	movs	r6, #0
 8007934:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007938:	f1b9 0901 	subs.w	r9, r9, #1
 800793c:	d505      	bpl.n	800794a <_fwalk_sglue+0x22>
 800793e:	6824      	ldr	r4, [r4, #0]
 8007940:	2c00      	cmp	r4, #0
 8007942:	d1f7      	bne.n	8007934 <_fwalk_sglue+0xc>
 8007944:	4630      	mov	r0, r6
 8007946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800794a:	89ab      	ldrh	r3, [r5, #12]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d907      	bls.n	8007960 <_fwalk_sglue+0x38>
 8007950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007954:	3301      	adds	r3, #1
 8007956:	d003      	beq.n	8007960 <_fwalk_sglue+0x38>
 8007958:	4629      	mov	r1, r5
 800795a:	4638      	mov	r0, r7
 800795c:	47c0      	blx	r8
 800795e:	4306      	orrs	r6, r0
 8007960:	3568      	adds	r5, #104	@ 0x68
 8007962:	e7e9      	b.n	8007938 <_fwalk_sglue+0x10>

08007964 <siprintf>:
 8007964:	b40e      	push	{r1, r2, r3}
 8007966:	b500      	push	{lr}
 8007968:	b09c      	sub	sp, #112	@ 0x70
 800796a:	ab1d      	add	r3, sp, #116	@ 0x74
 800796c:	9002      	str	r0, [sp, #8]
 800796e:	9006      	str	r0, [sp, #24]
 8007970:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007974:	4809      	ldr	r0, [pc, #36]	@ (800799c <siprintf+0x38>)
 8007976:	9107      	str	r1, [sp, #28]
 8007978:	9104      	str	r1, [sp, #16]
 800797a:	4909      	ldr	r1, [pc, #36]	@ (80079a0 <siprintf+0x3c>)
 800797c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007980:	9105      	str	r1, [sp, #20]
 8007982:	6800      	ldr	r0, [r0, #0]
 8007984:	9301      	str	r3, [sp, #4]
 8007986:	a902      	add	r1, sp, #8
 8007988:	f001 fbfc 	bl	8009184 <_svfiprintf_r>
 800798c:	9b02      	ldr	r3, [sp, #8]
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	b01c      	add	sp, #112	@ 0x70
 8007994:	f85d eb04 	ldr.w	lr, [sp], #4
 8007998:	b003      	add	sp, #12
 800799a:	4770      	bx	lr
 800799c:	20003618 	.word	0x20003618
 80079a0:	ffff0208 	.word	0xffff0208

080079a4 <__sread>:
 80079a4:	b510      	push	{r4, lr}
 80079a6:	460c      	mov	r4, r1
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	f000 f86c 	bl	8007a88 <_read_r>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	bfab      	itete	ge
 80079b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079b6:	89a3      	ldrhlt	r3, [r4, #12]
 80079b8:	181b      	addge	r3, r3, r0
 80079ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079be:	bfac      	ite	ge
 80079c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079c2:	81a3      	strhlt	r3, [r4, #12]
 80079c4:	bd10      	pop	{r4, pc}

080079c6 <__swrite>:
 80079c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	461f      	mov	r7, r3
 80079cc:	898b      	ldrh	r3, [r1, #12]
 80079ce:	05db      	lsls	r3, r3, #23
 80079d0:	4605      	mov	r5, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	4616      	mov	r6, r2
 80079d6:	d505      	bpl.n	80079e4 <__swrite+0x1e>
 80079d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079dc:	2302      	movs	r3, #2
 80079de:	2200      	movs	r2, #0
 80079e0:	f000 f840 	bl	8007a64 <_lseek_r>
 80079e4:	89a3      	ldrh	r3, [r4, #12]
 80079e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079ee:	81a3      	strh	r3, [r4, #12]
 80079f0:	4632      	mov	r2, r6
 80079f2:	463b      	mov	r3, r7
 80079f4:	4628      	mov	r0, r5
 80079f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079fa:	f000 b857 	b.w	8007aac <_write_r>

080079fe <__sseek>:
 80079fe:	b510      	push	{r4, lr}
 8007a00:	460c      	mov	r4, r1
 8007a02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a06:	f000 f82d 	bl	8007a64 <_lseek_r>
 8007a0a:	1c43      	adds	r3, r0, #1
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	bf15      	itete	ne
 8007a10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a1a:	81a3      	strheq	r3, [r4, #12]
 8007a1c:	bf18      	it	ne
 8007a1e:	81a3      	strhne	r3, [r4, #12]
 8007a20:	bd10      	pop	{r4, pc}

08007a22 <__sclose>:
 8007a22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a26:	f000 b80d 	b.w	8007a44 <_close_r>

08007a2a <memset>:
 8007a2a:	4402      	add	r2, r0
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d100      	bne.n	8007a34 <memset+0xa>
 8007a32:	4770      	bx	lr
 8007a34:	f803 1b01 	strb.w	r1, [r3], #1
 8007a38:	e7f9      	b.n	8007a2e <memset+0x4>
	...

08007a3c <_localeconv_r>:
 8007a3c:	4800      	ldr	r0, [pc, #0]	@ (8007a40 <_localeconv_r+0x4>)
 8007a3e:	4770      	bx	lr
 8007a40:	20003758 	.word	0x20003758

08007a44 <_close_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4d06      	ldr	r5, [pc, #24]	@ (8007a60 <_close_r+0x1c>)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	602b      	str	r3, [r5, #0]
 8007a50:	f7fa f85b 	bl	8001b0a <_close>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	d102      	bne.n	8007a5e <_close_r+0x1a>
 8007a58:	682b      	ldr	r3, [r5, #0]
 8007a5a:	b103      	cbz	r3, 8007a5e <_close_r+0x1a>
 8007a5c:	6023      	str	r3, [r4, #0]
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	20005abc 	.word	0x20005abc

08007a64 <_lseek_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4d07      	ldr	r5, [pc, #28]	@ (8007a84 <_lseek_r+0x20>)
 8007a68:	4604      	mov	r4, r0
 8007a6a:	4608      	mov	r0, r1
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	2200      	movs	r2, #0
 8007a70:	602a      	str	r2, [r5, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	f7fa f870 	bl	8001b58 <_lseek>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_lseek_r+0x1e>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_lseek_r+0x1e>
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	20005abc 	.word	0x20005abc

08007a88 <_read_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4d07      	ldr	r5, [pc, #28]	@ (8007aa8 <_read_r+0x20>)
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	4608      	mov	r0, r1
 8007a90:	4611      	mov	r1, r2
 8007a92:	2200      	movs	r2, #0
 8007a94:	602a      	str	r2, [r5, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f7f9 fffe 	bl	8001a98 <_read>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_read_r+0x1e>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_read_r+0x1e>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	20005abc 	.word	0x20005abc

08007aac <_write_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d07      	ldr	r5, [pc, #28]	@ (8007acc <_write_r+0x20>)
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	602a      	str	r2, [r5, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	f7fa f809 	bl	8001ad2 <_write>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_write_r+0x1e>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_write_r+0x1e>
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	20005abc 	.word	0x20005abc

08007ad0 <__errno>:
 8007ad0:	4b01      	ldr	r3, [pc, #4]	@ (8007ad8 <__errno+0x8>)
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	20003618 	.word	0x20003618

08007adc <__libc_init_array>:
 8007adc:	b570      	push	{r4, r5, r6, lr}
 8007ade:	4d0d      	ldr	r5, [pc, #52]	@ (8007b14 <__libc_init_array+0x38>)
 8007ae0:	4c0d      	ldr	r4, [pc, #52]	@ (8007b18 <__libc_init_array+0x3c>)
 8007ae2:	1b64      	subs	r4, r4, r5
 8007ae4:	10a4      	asrs	r4, r4, #2
 8007ae6:	2600      	movs	r6, #0
 8007ae8:	42a6      	cmp	r6, r4
 8007aea:	d109      	bne.n	8007b00 <__libc_init_array+0x24>
 8007aec:	4d0b      	ldr	r5, [pc, #44]	@ (8007b1c <__libc_init_array+0x40>)
 8007aee:	4c0c      	ldr	r4, [pc, #48]	@ (8007b20 <__libc_init_array+0x44>)
 8007af0:	f002 f866 	bl	8009bc0 <_init>
 8007af4:	1b64      	subs	r4, r4, r5
 8007af6:	10a4      	asrs	r4, r4, #2
 8007af8:	2600      	movs	r6, #0
 8007afa:	42a6      	cmp	r6, r4
 8007afc:	d105      	bne.n	8007b0a <__libc_init_array+0x2e>
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b04:	4798      	blx	r3
 8007b06:	3601      	adds	r6, #1
 8007b08:	e7ee      	b.n	8007ae8 <__libc_init_array+0xc>
 8007b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b0e:	4798      	blx	r3
 8007b10:	3601      	adds	r6, #1
 8007b12:	e7f2      	b.n	8007afa <__libc_init_array+0x1e>
 8007b14:	0800ec28 	.word	0x0800ec28
 8007b18:	0800ec28 	.word	0x0800ec28
 8007b1c:	0800ec28 	.word	0x0800ec28
 8007b20:	0800ec2c 	.word	0x0800ec2c

08007b24 <__retarget_lock_init_recursive>:
 8007b24:	4770      	bx	lr

08007b26 <__retarget_lock_acquire_recursive>:
 8007b26:	4770      	bx	lr

08007b28 <__retarget_lock_release_recursive>:
 8007b28:	4770      	bx	lr

08007b2a <quorem>:
 8007b2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b2e:	6903      	ldr	r3, [r0, #16]
 8007b30:	690c      	ldr	r4, [r1, #16]
 8007b32:	42a3      	cmp	r3, r4
 8007b34:	4607      	mov	r7, r0
 8007b36:	db7e      	blt.n	8007c36 <quorem+0x10c>
 8007b38:	3c01      	subs	r4, #1
 8007b3a:	f101 0814 	add.w	r8, r1, #20
 8007b3e:	00a3      	lsls	r3, r4, #2
 8007b40:	f100 0514 	add.w	r5, r0, #20
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b54:	3301      	adds	r3, #1
 8007b56:	429a      	cmp	r2, r3
 8007b58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b60:	d32e      	bcc.n	8007bc0 <quorem+0x96>
 8007b62:	f04f 0a00 	mov.w	sl, #0
 8007b66:	46c4      	mov	ip, r8
 8007b68:	46ae      	mov	lr, r5
 8007b6a:	46d3      	mov	fp, sl
 8007b6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b70:	b298      	uxth	r0, r3
 8007b72:	fb06 a000 	mla	r0, r6, r0, sl
 8007b76:	0c02      	lsrs	r2, r0, #16
 8007b78:	0c1b      	lsrs	r3, r3, #16
 8007b7a:	fb06 2303 	mla	r3, r6, r3, r2
 8007b7e:	f8de 2000 	ldr.w	r2, [lr]
 8007b82:	b280      	uxth	r0, r0
 8007b84:	b292      	uxth	r2, r2
 8007b86:	1a12      	subs	r2, r2, r0
 8007b88:	445a      	add	r2, fp
 8007b8a:	f8de 0000 	ldr.w	r0, [lr]
 8007b8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007b98:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007b9c:	b292      	uxth	r2, r2
 8007b9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ba2:	45e1      	cmp	r9, ip
 8007ba4:	f84e 2b04 	str.w	r2, [lr], #4
 8007ba8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007bac:	d2de      	bcs.n	8007b6c <quorem+0x42>
 8007bae:	9b00      	ldr	r3, [sp, #0]
 8007bb0:	58eb      	ldr	r3, [r5, r3]
 8007bb2:	b92b      	cbnz	r3, 8007bc0 <quorem+0x96>
 8007bb4:	9b01      	ldr	r3, [sp, #4]
 8007bb6:	3b04      	subs	r3, #4
 8007bb8:	429d      	cmp	r5, r3
 8007bba:	461a      	mov	r2, r3
 8007bbc:	d32f      	bcc.n	8007c1e <quorem+0xf4>
 8007bbe:	613c      	str	r4, [r7, #16]
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	f001 f97b 	bl	8008ebc <__mcmp>
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	db25      	blt.n	8007c16 <quorem+0xec>
 8007bca:	4629      	mov	r1, r5
 8007bcc:	2000      	movs	r0, #0
 8007bce:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bd2:	f8d1 c000 	ldr.w	ip, [r1]
 8007bd6:	fa1f fe82 	uxth.w	lr, r2
 8007bda:	fa1f f38c 	uxth.w	r3, ip
 8007bde:	eba3 030e 	sub.w	r3, r3, lr
 8007be2:	4403      	add	r3, r0
 8007be4:	0c12      	lsrs	r2, r2, #16
 8007be6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007bea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bf4:	45c1      	cmp	r9, r8
 8007bf6:	f841 3b04 	str.w	r3, [r1], #4
 8007bfa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007bfe:	d2e6      	bcs.n	8007bce <quorem+0xa4>
 8007c00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c08:	b922      	cbnz	r2, 8007c14 <quorem+0xea>
 8007c0a:	3b04      	subs	r3, #4
 8007c0c:	429d      	cmp	r5, r3
 8007c0e:	461a      	mov	r2, r3
 8007c10:	d30b      	bcc.n	8007c2a <quorem+0x100>
 8007c12:	613c      	str	r4, [r7, #16]
 8007c14:	3601      	adds	r6, #1
 8007c16:	4630      	mov	r0, r6
 8007c18:	b003      	add	sp, #12
 8007c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1e:	6812      	ldr	r2, [r2, #0]
 8007c20:	3b04      	subs	r3, #4
 8007c22:	2a00      	cmp	r2, #0
 8007c24:	d1cb      	bne.n	8007bbe <quorem+0x94>
 8007c26:	3c01      	subs	r4, #1
 8007c28:	e7c6      	b.n	8007bb8 <quorem+0x8e>
 8007c2a:	6812      	ldr	r2, [r2, #0]
 8007c2c:	3b04      	subs	r3, #4
 8007c2e:	2a00      	cmp	r2, #0
 8007c30:	d1ef      	bne.n	8007c12 <quorem+0xe8>
 8007c32:	3c01      	subs	r4, #1
 8007c34:	e7ea      	b.n	8007c0c <quorem+0xe2>
 8007c36:	2000      	movs	r0, #0
 8007c38:	e7ee      	b.n	8007c18 <quorem+0xee>
 8007c3a:	0000      	movs	r0, r0
 8007c3c:	0000      	movs	r0, r0
	...

08007c40 <_dtoa_r>:
 8007c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c44:	69c7      	ldr	r7, [r0, #28]
 8007c46:	b099      	sub	sp, #100	@ 0x64
 8007c48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007c4c:	ec55 4b10 	vmov	r4, r5, d0
 8007c50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007c52:	9109      	str	r1, [sp, #36]	@ 0x24
 8007c54:	4683      	mov	fp, r0
 8007c56:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c5a:	b97f      	cbnz	r7, 8007c7c <_dtoa_r+0x3c>
 8007c5c:	2010      	movs	r0, #16
 8007c5e:	f000 fdfd 	bl	800885c <malloc>
 8007c62:	4602      	mov	r2, r0
 8007c64:	f8cb 001c 	str.w	r0, [fp, #28]
 8007c68:	b920      	cbnz	r0, 8007c74 <_dtoa_r+0x34>
 8007c6a:	4ba7      	ldr	r3, [pc, #668]	@ (8007f08 <_dtoa_r+0x2c8>)
 8007c6c:	21ef      	movs	r1, #239	@ 0xef
 8007c6e:	48a7      	ldr	r0, [pc, #668]	@ (8007f0c <_dtoa_r+0x2cc>)
 8007c70:	f001 fc68 	bl	8009544 <__assert_func>
 8007c74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007c78:	6007      	str	r7, [r0, #0]
 8007c7a:	60c7      	str	r7, [r0, #12]
 8007c7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c80:	6819      	ldr	r1, [r3, #0]
 8007c82:	b159      	cbz	r1, 8007c9c <_dtoa_r+0x5c>
 8007c84:	685a      	ldr	r2, [r3, #4]
 8007c86:	604a      	str	r2, [r1, #4]
 8007c88:	2301      	movs	r3, #1
 8007c8a:	4093      	lsls	r3, r2
 8007c8c:	608b      	str	r3, [r1, #8]
 8007c8e:	4658      	mov	r0, fp
 8007c90:	f000 feda 	bl	8008a48 <_Bfree>
 8007c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	1e2b      	subs	r3, r5, #0
 8007c9e:	bfb9      	ittee	lt
 8007ca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ca4:	9303      	strlt	r3, [sp, #12]
 8007ca6:	2300      	movge	r3, #0
 8007ca8:	6033      	strge	r3, [r6, #0]
 8007caa:	9f03      	ldr	r7, [sp, #12]
 8007cac:	4b98      	ldr	r3, [pc, #608]	@ (8007f10 <_dtoa_r+0x2d0>)
 8007cae:	bfbc      	itt	lt
 8007cb0:	2201      	movlt	r2, #1
 8007cb2:	6032      	strlt	r2, [r6, #0]
 8007cb4:	43bb      	bics	r3, r7
 8007cb6:	d112      	bne.n	8007cde <_dtoa_r+0x9e>
 8007cb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007cba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007cbe:	6013      	str	r3, [r2, #0]
 8007cc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007cc4:	4323      	orrs	r3, r4
 8007cc6:	f000 854d 	beq.w	8008764 <_dtoa_r+0xb24>
 8007cca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ccc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007f24 <_dtoa_r+0x2e4>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 854f 	beq.w	8008774 <_dtoa_r+0xb34>
 8007cd6:	f10a 0303 	add.w	r3, sl, #3
 8007cda:	f000 bd49 	b.w	8008770 <_dtoa_r+0xb30>
 8007cde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	ec51 0b17 	vmov	r0, r1, d7
 8007ce8:	2300      	movs	r3, #0
 8007cea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007cee:	f7f8 ff1b 	bl	8000b28 <__aeabi_dcmpeq>
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	b158      	cbz	r0, 8007d0e <_dtoa_r+0xce>
 8007cf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	6013      	str	r3, [r2, #0]
 8007cfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cfe:	b113      	cbz	r3, 8007d06 <_dtoa_r+0xc6>
 8007d00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007d02:	4b84      	ldr	r3, [pc, #528]	@ (8007f14 <_dtoa_r+0x2d4>)
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007f28 <_dtoa_r+0x2e8>
 8007d0a:	f000 bd33 	b.w	8008774 <_dtoa_r+0xb34>
 8007d0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007d12:	aa16      	add	r2, sp, #88	@ 0x58
 8007d14:	a917      	add	r1, sp, #92	@ 0x5c
 8007d16:	4658      	mov	r0, fp
 8007d18:	f001 f980 	bl	800901c <__d2b>
 8007d1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007d20:	4681      	mov	r9, r0
 8007d22:	2e00      	cmp	r6, #0
 8007d24:	d077      	beq.n	8007e16 <_dtoa_r+0x1d6>
 8007d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d40:	4619      	mov	r1, r3
 8007d42:	2200      	movs	r2, #0
 8007d44:	4b74      	ldr	r3, [pc, #464]	@ (8007f18 <_dtoa_r+0x2d8>)
 8007d46:	f7f8 facf 	bl	80002e8 <__aeabi_dsub>
 8007d4a:	a369      	add	r3, pc, #420	@ (adr r3, 8007ef0 <_dtoa_r+0x2b0>)
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f7f8 fc82 	bl	8000658 <__aeabi_dmul>
 8007d54:	a368      	add	r3, pc, #416	@ (adr r3, 8007ef8 <_dtoa_r+0x2b8>)
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	f7f8 fac7 	bl	80002ec <__adddf3>
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4630      	mov	r0, r6
 8007d62:	460d      	mov	r5, r1
 8007d64:	f7f8 fc0e 	bl	8000584 <__aeabi_i2d>
 8007d68:	a365      	add	r3, pc, #404	@ (adr r3, 8007f00 <_dtoa_r+0x2c0>)
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f7f8 fc73 	bl	8000658 <__aeabi_dmul>
 8007d72:	4602      	mov	r2, r0
 8007d74:	460b      	mov	r3, r1
 8007d76:	4620      	mov	r0, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7f8 fab7 	bl	80002ec <__adddf3>
 8007d7e:	4604      	mov	r4, r0
 8007d80:	460d      	mov	r5, r1
 8007d82:	f7f8 ff19 	bl	8000bb8 <__aeabi_d2iz>
 8007d86:	2200      	movs	r2, #0
 8007d88:	4607      	mov	r7, r0
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f7f8 fed4 	bl	8000b3c <__aeabi_dcmplt>
 8007d94:	b140      	cbz	r0, 8007da8 <_dtoa_r+0x168>
 8007d96:	4638      	mov	r0, r7
 8007d98:	f7f8 fbf4 	bl	8000584 <__aeabi_i2d>
 8007d9c:	4622      	mov	r2, r4
 8007d9e:	462b      	mov	r3, r5
 8007da0:	f7f8 fec2 	bl	8000b28 <__aeabi_dcmpeq>
 8007da4:	b900      	cbnz	r0, 8007da8 <_dtoa_r+0x168>
 8007da6:	3f01      	subs	r7, #1
 8007da8:	2f16      	cmp	r7, #22
 8007daa:	d851      	bhi.n	8007e50 <_dtoa_r+0x210>
 8007dac:	4b5b      	ldr	r3, [pc, #364]	@ (8007f1c <_dtoa_r+0x2dc>)
 8007dae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dba:	f7f8 febf 	bl	8000b3c <__aeabi_dcmplt>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	d048      	beq.n	8007e54 <_dtoa_r+0x214>
 8007dc2:	3f01      	subs	r7, #1
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8007dc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007dca:	1b9b      	subs	r3, r3, r6
 8007dcc:	1e5a      	subs	r2, r3, #1
 8007dce:	bf44      	itt	mi
 8007dd0:	f1c3 0801 	rsbmi	r8, r3, #1
 8007dd4:	2300      	movmi	r3, #0
 8007dd6:	9208      	str	r2, [sp, #32]
 8007dd8:	bf54      	ite	pl
 8007dda:	f04f 0800 	movpl.w	r8, #0
 8007dde:	9308      	strmi	r3, [sp, #32]
 8007de0:	2f00      	cmp	r7, #0
 8007de2:	db39      	blt.n	8007e58 <_dtoa_r+0x218>
 8007de4:	9b08      	ldr	r3, [sp, #32]
 8007de6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007de8:	443b      	add	r3, r7
 8007dea:	9308      	str	r3, [sp, #32]
 8007dec:	2300      	movs	r3, #0
 8007dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8007df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007df2:	2b09      	cmp	r3, #9
 8007df4:	d864      	bhi.n	8007ec0 <_dtoa_r+0x280>
 8007df6:	2b05      	cmp	r3, #5
 8007df8:	bfc4      	itt	gt
 8007dfa:	3b04      	subgt	r3, #4
 8007dfc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e00:	f1a3 0302 	sub.w	r3, r3, #2
 8007e04:	bfcc      	ite	gt
 8007e06:	2400      	movgt	r4, #0
 8007e08:	2401      	movle	r4, #1
 8007e0a:	2b03      	cmp	r3, #3
 8007e0c:	d863      	bhi.n	8007ed6 <_dtoa_r+0x296>
 8007e0e:	e8df f003 	tbb	[pc, r3]
 8007e12:	372a      	.short	0x372a
 8007e14:	5535      	.short	0x5535
 8007e16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007e1a:	441e      	add	r6, r3
 8007e1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	bfc1      	itttt	gt
 8007e24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e28:	409f      	lslgt	r7, r3
 8007e2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e32:	bfd6      	itet	le
 8007e34:	f1c3 0320 	rsble	r3, r3, #32
 8007e38:	ea47 0003 	orrgt.w	r0, r7, r3
 8007e3c:	fa04 f003 	lslle.w	r0, r4, r3
 8007e40:	f7f8 fb90 	bl	8000564 <__aeabi_ui2d>
 8007e44:	2201      	movs	r2, #1
 8007e46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007e4a:	3e01      	subs	r6, #1
 8007e4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007e4e:	e777      	b.n	8007d40 <_dtoa_r+0x100>
 8007e50:	2301      	movs	r3, #1
 8007e52:	e7b8      	b.n	8007dc6 <_dtoa_r+0x186>
 8007e54:	9012      	str	r0, [sp, #72]	@ 0x48
 8007e56:	e7b7      	b.n	8007dc8 <_dtoa_r+0x188>
 8007e58:	427b      	negs	r3, r7
 8007e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	eba8 0807 	sub.w	r8, r8, r7
 8007e62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e64:	e7c4      	b.n	8007df0 <_dtoa_r+0x1b0>
 8007e66:	2300      	movs	r3, #0
 8007e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dc35      	bgt.n	8007edc <_dtoa_r+0x29c>
 8007e70:	2301      	movs	r3, #1
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	9307      	str	r3, [sp, #28]
 8007e76:	461a      	mov	r2, r3
 8007e78:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e7a:	e00b      	b.n	8007e94 <_dtoa_r+0x254>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e7f3      	b.n	8007e68 <_dtoa_r+0x228>
 8007e80:	2300      	movs	r3, #0
 8007e82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e86:	18fb      	adds	r3, r7, r3
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	9307      	str	r3, [sp, #28]
 8007e90:	bfb8      	it	lt
 8007e92:	2301      	movlt	r3, #1
 8007e94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	2204      	movs	r2, #4
 8007e9c:	f102 0514 	add.w	r5, r2, #20
 8007ea0:	429d      	cmp	r5, r3
 8007ea2:	d91f      	bls.n	8007ee4 <_dtoa_r+0x2a4>
 8007ea4:	6041      	str	r1, [r0, #4]
 8007ea6:	4658      	mov	r0, fp
 8007ea8:	f000 fd8e 	bl	80089c8 <_Balloc>
 8007eac:	4682      	mov	sl, r0
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d13c      	bne.n	8007f2c <_dtoa_r+0x2ec>
 8007eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8007f20 <_dtoa_r+0x2e0>)
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007eba:	e6d8      	b.n	8007c6e <_dtoa_r+0x2e>
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e7e0      	b.n	8007e82 <_dtoa_r+0x242>
 8007ec0:	2401      	movs	r4, #1
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	9307      	str	r3, [sp, #28]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2312      	movs	r3, #18
 8007ed4:	e7d0      	b.n	8007e78 <_dtoa_r+0x238>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eda:	e7f5      	b.n	8007ec8 <_dtoa_r+0x288>
 8007edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	9307      	str	r3, [sp, #28]
 8007ee2:	e7d7      	b.n	8007e94 <_dtoa_r+0x254>
 8007ee4:	3101      	adds	r1, #1
 8007ee6:	0052      	lsls	r2, r2, #1
 8007ee8:	e7d8      	b.n	8007e9c <_dtoa_r+0x25c>
 8007eea:	bf00      	nop
 8007eec:	f3af 8000 	nop.w
 8007ef0:	636f4361 	.word	0x636f4361
 8007ef4:	3fd287a7 	.word	0x3fd287a7
 8007ef8:	8b60c8b3 	.word	0x8b60c8b3
 8007efc:	3fc68a28 	.word	0x3fc68a28
 8007f00:	509f79fb 	.word	0x509f79fb
 8007f04:	3fd34413 	.word	0x3fd34413
 8007f08:	0800e8ed 	.word	0x0800e8ed
 8007f0c:	0800e904 	.word	0x0800e904
 8007f10:	7ff00000 	.word	0x7ff00000
 8007f14:	0800e8bd 	.word	0x0800e8bd
 8007f18:	3ff80000 	.word	0x3ff80000
 8007f1c:	0800ea00 	.word	0x0800ea00
 8007f20:	0800e95c 	.word	0x0800e95c
 8007f24:	0800e8e9 	.word	0x0800e8e9
 8007f28:	0800e8bc 	.word	0x0800e8bc
 8007f2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f30:	6018      	str	r0, [r3, #0]
 8007f32:	9b07      	ldr	r3, [sp, #28]
 8007f34:	2b0e      	cmp	r3, #14
 8007f36:	f200 80a4 	bhi.w	8008082 <_dtoa_r+0x442>
 8007f3a:	2c00      	cmp	r4, #0
 8007f3c:	f000 80a1 	beq.w	8008082 <_dtoa_r+0x442>
 8007f40:	2f00      	cmp	r7, #0
 8007f42:	dd33      	ble.n	8007fac <_dtoa_r+0x36c>
 8007f44:	4bad      	ldr	r3, [pc, #692]	@ (80081fc <_dtoa_r+0x5bc>)
 8007f46:	f007 020f 	and.w	r2, r7, #15
 8007f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f4e:	ed93 7b00 	vldr	d7, [r3]
 8007f52:	05f8      	lsls	r0, r7, #23
 8007f54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007f58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007f5c:	d516      	bpl.n	8007f8c <_dtoa_r+0x34c>
 8007f5e:	4ba8      	ldr	r3, [pc, #672]	@ (8008200 <_dtoa_r+0x5c0>)
 8007f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f68:	f7f8 fca0 	bl	80008ac <__aeabi_ddiv>
 8007f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f70:	f004 040f 	and.w	r4, r4, #15
 8007f74:	2603      	movs	r6, #3
 8007f76:	4da2      	ldr	r5, [pc, #648]	@ (8008200 <_dtoa_r+0x5c0>)
 8007f78:	b954      	cbnz	r4, 8007f90 <_dtoa_r+0x350>
 8007f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f82:	f7f8 fc93 	bl	80008ac <__aeabi_ddiv>
 8007f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f8a:	e028      	b.n	8007fde <_dtoa_r+0x39e>
 8007f8c:	2602      	movs	r6, #2
 8007f8e:	e7f2      	b.n	8007f76 <_dtoa_r+0x336>
 8007f90:	07e1      	lsls	r1, r4, #31
 8007f92:	d508      	bpl.n	8007fa6 <_dtoa_r+0x366>
 8007f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f9c:	f7f8 fb5c 	bl	8000658 <__aeabi_dmul>
 8007fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fa4:	3601      	adds	r6, #1
 8007fa6:	1064      	asrs	r4, r4, #1
 8007fa8:	3508      	adds	r5, #8
 8007faa:	e7e5      	b.n	8007f78 <_dtoa_r+0x338>
 8007fac:	f000 80d2 	beq.w	8008154 <_dtoa_r+0x514>
 8007fb0:	427c      	negs	r4, r7
 8007fb2:	4b92      	ldr	r3, [pc, #584]	@ (80081fc <_dtoa_r+0x5bc>)
 8007fb4:	4d92      	ldr	r5, [pc, #584]	@ (8008200 <_dtoa_r+0x5c0>)
 8007fb6:	f004 020f 	and.w	r2, r4, #15
 8007fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fc6:	f7f8 fb47 	bl	8000658 <__aeabi_dmul>
 8007fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fce:	1124      	asrs	r4, r4, #4
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2602      	movs	r6, #2
 8007fd4:	2c00      	cmp	r4, #0
 8007fd6:	f040 80b2 	bne.w	800813e <_dtoa_r+0x4fe>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1d3      	bne.n	8007f86 <_dtoa_r+0x346>
 8007fde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fe0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 80b7 	beq.w	8008158 <_dtoa_r+0x518>
 8007fea:	4b86      	ldr	r3, [pc, #536]	@ (8008204 <_dtoa_r+0x5c4>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	4620      	mov	r0, r4
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	f7f8 fda3 	bl	8000b3c <__aeabi_dcmplt>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f000 80ae 	beq.w	8008158 <_dtoa_r+0x518>
 8007ffc:	9b07      	ldr	r3, [sp, #28]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 80aa 	beq.w	8008158 <_dtoa_r+0x518>
 8008004:	9b00      	ldr	r3, [sp, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	dd37      	ble.n	800807a <_dtoa_r+0x43a>
 800800a:	1e7b      	subs	r3, r7, #1
 800800c:	9304      	str	r3, [sp, #16]
 800800e:	4620      	mov	r0, r4
 8008010:	4b7d      	ldr	r3, [pc, #500]	@ (8008208 <_dtoa_r+0x5c8>)
 8008012:	2200      	movs	r2, #0
 8008014:	4629      	mov	r1, r5
 8008016:	f7f8 fb1f 	bl	8000658 <__aeabi_dmul>
 800801a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800801e:	9c00      	ldr	r4, [sp, #0]
 8008020:	3601      	adds	r6, #1
 8008022:	4630      	mov	r0, r6
 8008024:	f7f8 faae 	bl	8000584 <__aeabi_i2d>
 8008028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800802c:	f7f8 fb14 	bl	8000658 <__aeabi_dmul>
 8008030:	4b76      	ldr	r3, [pc, #472]	@ (800820c <_dtoa_r+0x5cc>)
 8008032:	2200      	movs	r2, #0
 8008034:	f7f8 f95a 	bl	80002ec <__adddf3>
 8008038:	4605      	mov	r5, r0
 800803a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800803e:	2c00      	cmp	r4, #0
 8008040:	f040 808d 	bne.w	800815e <_dtoa_r+0x51e>
 8008044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008048:	4b71      	ldr	r3, [pc, #452]	@ (8008210 <_dtoa_r+0x5d0>)
 800804a:	2200      	movs	r2, #0
 800804c:	f7f8 f94c 	bl	80002e8 <__aeabi_dsub>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008058:	462a      	mov	r2, r5
 800805a:	4633      	mov	r3, r6
 800805c:	f7f8 fd8c 	bl	8000b78 <__aeabi_dcmpgt>
 8008060:	2800      	cmp	r0, #0
 8008062:	f040 828b 	bne.w	800857c <_dtoa_r+0x93c>
 8008066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800806a:	462a      	mov	r2, r5
 800806c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008070:	f7f8 fd64 	bl	8000b3c <__aeabi_dcmplt>
 8008074:	2800      	cmp	r0, #0
 8008076:	f040 8128 	bne.w	80082ca <_dtoa_r+0x68a>
 800807a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800807e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008082:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008084:	2b00      	cmp	r3, #0
 8008086:	f2c0 815a 	blt.w	800833e <_dtoa_r+0x6fe>
 800808a:	2f0e      	cmp	r7, #14
 800808c:	f300 8157 	bgt.w	800833e <_dtoa_r+0x6fe>
 8008090:	4b5a      	ldr	r3, [pc, #360]	@ (80081fc <_dtoa_r+0x5bc>)
 8008092:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008096:	ed93 7b00 	vldr	d7, [r3]
 800809a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800809c:	2b00      	cmp	r3, #0
 800809e:	ed8d 7b00 	vstr	d7, [sp]
 80080a2:	da03      	bge.n	80080ac <_dtoa_r+0x46c>
 80080a4:	9b07      	ldr	r3, [sp, #28]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f340 8101 	ble.w	80082ae <_dtoa_r+0x66e>
 80080ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080b0:	4656      	mov	r6, sl
 80080b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080b6:	4620      	mov	r0, r4
 80080b8:	4629      	mov	r1, r5
 80080ba:	f7f8 fbf7 	bl	80008ac <__aeabi_ddiv>
 80080be:	f7f8 fd7b 	bl	8000bb8 <__aeabi_d2iz>
 80080c2:	4680      	mov	r8, r0
 80080c4:	f7f8 fa5e 	bl	8000584 <__aeabi_i2d>
 80080c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080cc:	f7f8 fac4 	bl	8000658 <__aeabi_dmul>
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	4620      	mov	r0, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080dc:	f7f8 f904 	bl	80002e8 <__aeabi_dsub>
 80080e0:	f806 4b01 	strb.w	r4, [r6], #1
 80080e4:	9d07      	ldr	r5, [sp, #28]
 80080e6:	eba6 040a 	sub.w	r4, r6, sl
 80080ea:	42a5      	cmp	r5, r4
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	f040 8117 	bne.w	8008322 <_dtoa_r+0x6e2>
 80080f4:	f7f8 f8fa 	bl	80002ec <__adddf3>
 80080f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080fc:	4604      	mov	r4, r0
 80080fe:	460d      	mov	r5, r1
 8008100:	f7f8 fd3a 	bl	8000b78 <__aeabi_dcmpgt>
 8008104:	2800      	cmp	r0, #0
 8008106:	f040 80f9 	bne.w	80082fc <_dtoa_r+0x6bc>
 800810a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	f7f8 fd09 	bl	8000b28 <__aeabi_dcmpeq>
 8008116:	b118      	cbz	r0, 8008120 <_dtoa_r+0x4e0>
 8008118:	f018 0f01 	tst.w	r8, #1
 800811c:	f040 80ee 	bne.w	80082fc <_dtoa_r+0x6bc>
 8008120:	4649      	mov	r1, r9
 8008122:	4658      	mov	r0, fp
 8008124:	f000 fc90 	bl	8008a48 <_Bfree>
 8008128:	2300      	movs	r3, #0
 800812a:	7033      	strb	r3, [r6, #0]
 800812c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800812e:	3701      	adds	r7, #1
 8008130:	601f      	str	r7, [r3, #0]
 8008132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 831d 	beq.w	8008774 <_dtoa_r+0xb34>
 800813a:	601e      	str	r6, [r3, #0]
 800813c:	e31a      	b.n	8008774 <_dtoa_r+0xb34>
 800813e:	07e2      	lsls	r2, r4, #31
 8008140:	d505      	bpl.n	800814e <_dtoa_r+0x50e>
 8008142:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008146:	f7f8 fa87 	bl	8000658 <__aeabi_dmul>
 800814a:	3601      	adds	r6, #1
 800814c:	2301      	movs	r3, #1
 800814e:	1064      	asrs	r4, r4, #1
 8008150:	3508      	adds	r5, #8
 8008152:	e73f      	b.n	8007fd4 <_dtoa_r+0x394>
 8008154:	2602      	movs	r6, #2
 8008156:	e742      	b.n	8007fde <_dtoa_r+0x39e>
 8008158:	9c07      	ldr	r4, [sp, #28]
 800815a:	9704      	str	r7, [sp, #16]
 800815c:	e761      	b.n	8008022 <_dtoa_r+0x3e2>
 800815e:	4b27      	ldr	r3, [pc, #156]	@ (80081fc <_dtoa_r+0x5bc>)
 8008160:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008166:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800816a:	4454      	add	r4, sl
 800816c:	2900      	cmp	r1, #0
 800816e:	d053      	beq.n	8008218 <_dtoa_r+0x5d8>
 8008170:	4928      	ldr	r1, [pc, #160]	@ (8008214 <_dtoa_r+0x5d4>)
 8008172:	2000      	movs	r0, #0
 8008174:	f7f8 fb9a 	bl	80008ac <__aeabi_ddiv>
 8008178:	4633      	mov	r3, r6
 800817a:	462a      	mov	r2, r5
 800817c:	f7f8 f8b4 	bl	80002e8 <__aeabi_dsub>
 8008180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008184:	4656      	mov	r6, sl
 8008186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800818a:	f7f8 fd15 	bl	8000bb8 <__aeabi_d2iz>
 800818e:	4605      	mov	r5, r0
 8008190:	f7f8 f9f8 	bl	8000584 <__aeabi_i2d>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800819c:	f7f8 f8a4 	bl	80002e8 <__aeabi_dsub>
 80081a0:	3530      	adds	r5, #48	@ 0x30
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80081aa:	f806 5b01 	strb.w	r5, [r6], #1
 80081ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081b2:	f7f8 fcc3 	bl	8000b3c <__aeabi_dcmplt>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d171      	bne.n	800829e <_dtoa_r+0x65e>
 80081ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081be:	4911      	ldr	r1, [pc, #68]	@ (8008204 <_dtoa_r+0x5c4>)
 80081c0:	2000      	movs	r0, #0
 80081c2:	f7f8 f891 	bl	80002e8 <__aeabi_dsub>
 80081c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80081ca:	f7f8 fcb7 	bl	8000b3c <__aeabi_dcmplt>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f040 8095 	bne.w	80082fe <_dtoa_r+0x6be>
 80081d4:	42a6      	cmp	r6, r4
 80081d6:	f43f af50 	beq.w	800807a <_dtoa_r+0x43a>
 80081da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80081de:	4b0a      	ldr	r3, [pc, #40]	@ (8008208 <_dtoa_r+0x5c8>)
 80081e0:	2200      	movs	r2, #0
 80081e2:	f7f8 fa39 	bl	8000658 <__aeabi_dmul>
 80081e6:	4b08      	ldr	r3, [pc, #32]	@ (8008208 <_dtoa_r+0x5c8>)
 80081e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081ec:	2200      	movs	r2, #0
 80081ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f2:	f7f8 fa31 	bl	8000658 <__aeabi_dmul>
 80081f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081fa:	e7c4      	b.n	8008186 <_dtoa_r+0x546>
 80081fc:	0800ea00 	.word	0x0800ea00
 8008200:	0800e9d8 	.word	0x0800e9d8
 8008204:	3ff00000 	.word	0x3ff00000
 8008208:	40240000 	.word	0x40240000
 800820c:	401c0000 	.word	0x401c0000
 8008210:	40140000 	.word	0x40140000
 8008214:	3fe00000 	.word	0x3fe00000
 8008218:	4631      	mov	r1, r6
 800821a:	4628      	mov	r0, r5
 800821c:	f7f8 fa1c 	bl	8000658 <__aeabi_dmul>
 8008220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008224:	9415      	str	r4, [sp, #84]	@ 0x54
 8008226:	4656      	mov	r6, sl
 8008228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800822c:	f7f8 fcc4 	bl	8000bb8 <__aeabi_d2iz>
 8008230:	4605      	mov	r5, r0
 8008232:	f7f8 f9a7 	bl	8000584 <__aeabi_i2d>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800823e:	f7f8 f853 	bl	80002e8 <__aeabi_dsub>
 8008242:	3530      	adds	r5, #48	@ 0x30
 8008244:	f806 5b01 	strb.w	r5, [r6], #1
 8008248:	4602      	mov	r2, r0
 800824a:	460b      	mov	r3, r1
 800824c:	42a6      	cmp	r6, r4
 800824e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	d124      	bne.n	80082a2 <_dtoa_r+0x662>
 8008258:	4bac      	ldr	r3, [pc, #688]	@ (800850c <_dtoa_r+0x8cc>)
 800825a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800825e:	f7f8 f845 	bl	80002ec <__adddf3>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800826a:	f7f8 fc85 	bl	8000b78 <__aeabi_dcmpgt>
 800826e:	2800      	cmp	r0, #0
 8008270:	d145      	bne.n	80082fe <_dtoa_r+0x6be>
 8008272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008276:	49a5      	ldr	r1, [pc, #660]	@ (800850c <_dtoa_r+0x8cc>)
 8008278:	2000      	movs	r0, #0
 800827a:	f7f8 f835 	bl	80002e8 <__aeabi_dsub>
 800827e:	4602      	mov	r2, r0
 8008280:	460b      	mov	r3, r1
 8008282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008286:	f7f8 fc59 	bl	8000b3c <__aeabi_dcmplt>
 800828a:	2800      	cmp	r0, #0
 800828c:	f43f aef5 	beq.w	800807a <_dtoa_r+0x43a>
 8008290:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008292:	1e73      	subs	r3, r6, #1
 8008294:	9315      	str	r3, [sp, #84]	@ 0x54
 8008296:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800829a:	2b30      	cmp	r3, #48	@ 0x30
 800829c:	d0f8      	beq.n	8008290 <_dtoa_r+0x650>
 800829e:	9f04      	ldr	r7, [sp, #16]
 80082a0:	e73e      	b.n	8008120 <_dtoa_r+0x4e0>
 80082a2:	4b9b      	ldr	r3, [pc, #620]	@ (8008510 <_dtoa_r+0x8d0>)
 80082a4:	f7f8 f9d8 	bl	8000658 <__aeabi_dmul>
 80082a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ac:	e7bc      	b.n	8008228 <_dtoa_r+0x5e8>
 80082ae:	d10c      	bne.n	80082ca <_dtoa_r+0x68a>
 80082b0:	4b98      	ldr	r3, [pc, #608]	@ (8008514 <_dtoa_r+0x8d4>)
 80082b2:	2200      	movs	r2, #0
 80082b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082b8:	f7f8 f9ce 	bl	8000658 <__aeabi_dmul>
 80082bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082c0:	f7f8 fc50 	bl	8000b64 <__aeabi_dcmpge>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	f000 8157 	beq.w	8008578 <_dtoa_r+0x938>
 80082ca:	2400      	movs	r4, #0
 80082cc:	4625      	mov	r5, r4
 80082ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082d0:	43db      	mvns	r3, r3
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	4656      	mov	r6, sl
 80082d6:	2700      	movs	r7, #0
 80082d8:	4621      	mov	r1, r4
 80082da:	4658      	mov	r0, fp
 80082dc:	f000 fbb4 	bl	8008a48 <_Bfree>
 80082e0:	2d00      	cmp	r5, #0
 80082e2:	d0dc      	beq.n	800829e <_dtoa_r+0x65e>
 80082e4:	b12f      	cbz	r7, 80082f2 <_dtoa_r+0x6b2>
 80082e6:	42af      	cmp	r7, r5
 80082e8:	d003      	beq.n	80082f2 <_dtoa_r+0x6b2>
 80082ea:	4639      	mov	r1, r7
 80082ec:	4658      	mov	r0, fp
 80082ee:	f000 fbab 	bl	8008a48 <_Bfree>
 80082f2:	4629      	mov	r1, r5
 80082f4:	4658      	mov	r0, fp
 80082f6:	f000 fba7 	bl	8008a48 <_Bfree>
 80082fa:	e7d0      	b.n	800829e <_dtoa_r+0x65e>
 80082fc:	9704      	str	r7, [sp, #16]
 80082fe:	4633      	mov	r3, r6
 8008300:	461e      	mov	r6, r3
 8008302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008306:	2a39      	cmp	r2, #57	@ 0x39
 8008308:	d107      	bne.n	800831a <_dtoa_r+0x6da>
 800830a:	459a      	cmp	sl, r3
 800830c:	d1f8      	bne.n	8008300 <_dtoa_r+0x6c0>
 800830e:	9a04      	ldr	r2, [sp, #16]
 8008310:	3201      	adds	r2, #1
 8008312:	9204      	str	r2, [sp, #16]
 8008314:	2230      	movs	r2, #48	@ 0x30
 8008316:	f88a 2000 	strb.w	r2, [sl]
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	3201      	adds	r2, #1
 800831e:	701a      	strb	r2, [r3, #0]
 8008320:	e7bd      	b.n	800829e <_dtoa_r+0x65e>
 8008322:	4b7b      	ldr	r3, [pc, #492]	@ (8008510 <_dtoa_r+0x8d0>)
 8008324:	2200      	movs	r2, #0
 8008326:	f7f8 f997 	bl	8000658 <__aeabi_dmul>
 800832a:	2200      	movs	r2, #0
 800832c:	2300      	movs	r3, #0
 800832e:	4604      	mov	r4, r0
 8008330:	460d      	mov	r5, r1
 8008332:	f7f8 fbf9 	bl	8000b28 <__aeabi_dcmpeq>
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f aebb 	beq.w	80080b2 <_dtoa_r+0x472>
 800833c:	e6f0      	b.n	8008120 <_dtoa_r+0x4e0>
 800833e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008340:	2a00      	cmp	r2, #0
 8008342:	f000 80db 	beq.w	80084fc <_dtoa_r+0x8bc>
 8008346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008348:	2a01      	cmp	r2, #1
 800834a:	f300 80bf 	bgt.w	80084cc <_dtoa_r+0x88c>
 800834e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008350:	2a00      	cmp	r2, #0
 8008352:	f000 80b7 	beq.w	80084c4 <_dtoa_r+0x884>
 8008356:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800835a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800835c:	4646      	mov	r6, r8
 800835e:	9a08      	ldr	r2, [sp, #32]
 8008360:	2101      	movs	r1, #1
 8008362:	441a      	add	r2, r3
 8008364:	4658      	mov	r0, fp
 8008366:	4498      	add	r8, r3
 8008368:	9208      	str	r2, [sp, #32]
 800836a:	f000 fc21 	bl	8008bb0 <__i2b>
 800836e:	4605      	mov	r5, r0
 8008370:	b15e      	cbz	r6, 800838a <_dtoa_r+0x74a>
 8008372:	9b08      	ldr	r3, [sp, #32]
 8008374:	2b00      	cmp	r3, #0
 8008376:	dd08      	ble.n	800838a <_dtoa_r+0x74a>
 8008378:	42b3      	cmp	r3, r6
 800837a:	9a08      	ldr	r2, [sp, #32]
 800837c:	bfa8      	it	ge
 800837e:	4633      	movge	r3, r6
 8008380:	eba8 0803 	sub.w	r8, r8, r3
 8008384:	1af6      	subs	r6, r6, r3
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	9308      	str	r3, [sp, #32]
 800838a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800838c:	b1f3      	cbz	r3, 80083cc <_dtoa_r+0x78c>
 800838e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 80b7 	beq.w	8008504 <_dtoa_r+0x8c4>
 8008396:	b18c      	cbz	r4, 80083bc <_dtoa_r+0x77c>
 8008398:	4629      	mov	r1, r5
 800839a:	4622      	mov	r2, r4
 800839c:	4658      	mov	r0, fp
 800839e:	f000 fcc7 	bl	8008d30 <__pow5mult>
 80083a2:	464a      	mov	r2, r9
 80083a4:	4601      	mov	r1, r0
 80083a6:	4605      	mov	r5, r0
 80083a8:	4658      	mov	r0, fp
 80083aa:	f000 fc17 	bl	8008bdc <__multiply>
 80083ae:	4649      	mov	r1, r9
 80083b0:	9004      	str	r0, [sp, #16]
 80083b2:	4658      	mov	r0, fp
 80083b4:	f000 fb48 	bl	8008a48 <_Bfree>
 80083b8:	9b04      	ldr	r3, [sp, #16]
 80083ba:	4699      	mov	r9, r3
 80083bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083be:	1b1a      	subs	r2, r3, r4
 80083c0:	d004      	beq.n	80083cc <_dtoa_r+0x78c>
 80083c2:	4649      	mov	r1, r9
 80083c4:	4658      	mov	r0, fp
 80083c6:	f000 fcb3 	bl	8008d30 <__pow5mult>
 80083ca:	4681      	mov	r9, r0
 80083cc:	2101      	movs	r1, #1
 80083ce:	4658      	mov	r0, fp
 80083d0:	f000 fbee 	bl	8008bb0 <__i2b>
 80083d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083d6:	4604      	mov	r4, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	f000 81cf 	beq.w	800877c <_dtoa_r+0xb3c>
 80083de:	461a      	mov	r2, r3
 80083e0:	4601      	mov	r1, r0
 80083e2:	4658      	mov	r0, fp
 80083e4:	f000 fca4 	bl	8008d30 <__pow5mult>
 80083e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	4604      	mov	r4, r0
 80083ee:	f300 8095 	bgt.w	800851c <_dtoa_r+0x8dc>
 80083f2:	9b02      	ldr	r3, [sp, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f040 8087 	bne.w	8008508 <_dtoa_r+0x8c8>
 80083fa:	9b03      	ldr	r3, [sp, #12]
 80083fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008400:	2b00      	cmp	r3, #0
 8008402:	f040 8089 	bne.w	8008518 <_dtoa_r+0x8d8>
 8008406:	9b03      	ldr	r3, [sp, #12]
 8008408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800840c:	0d1b      	lsrs	r3, r3, #20
 800840e:	051b      	lsls	r3, r3, #20
 8008410:	b12b      	cbz	r3, 800841e <_dtoa_r+0x7de>
 8008412:	9b08      	ldr	r3, [sp, #32]
 8008414:	3301      	adds	r3, #1
 8008416:	9308      	str	r3, [sp, #32]
 8008418:	f108 0801 	add.w	r8, r8, #1
 800841c:	2301      	movs	r3, #1
 800841e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 81b0 	beq.w	8008788 <_dtoa_r+0xb48>
 8008428:	6923      	ldr	r3, [r4, #16]
 800842a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800842e:	6918      	ldr	r0, [r3, #16]
 8008430:	f000 fb72 	bl	8008b18 <__hi0bits>
 8008434:	f1c0 0020 	rsb	r0, r0, #32
 8008438:	9b08      	ldr	r3, [sp, #32]
 800843a:	4418      	add	r0, r3
 800843c:	f010 001f 	ands.w	r0, r0, #31
 8008440:	d077      	beq.n	8008532 <_dtoa_r+0x8f2>
 8008442:	f1c0 0320 	rsb	r3, r0, #32
 8008446:	2b04      	cmp	r3, #4
 8008448:	dd6b      	ble.n	8008522 <_dtoa_r+0x8e2>
 800844a:	9b08      	ldr	r3, [sp, #32]
 800844c:	f1c0 001c 	rsb	r0, r0, #28
 8008450:	4403      	add	r3, r0
 8008452:	4480      	add	r8, r0
 8008454:	4406      	add	r6, r0
 8008456:	9308      	str	r3, [sp, #32]
 8008458:	f1b8 0f00 	cmp.w	r8, #0
 800845c:	dd05      	ble.n	800846a <_dtoa_r+0x82a>
 800845e:	4649      	mov	r1, r9
 8008460:	4642      	mov	r2, r8
 8008462:	4658      	mov	r0, fp
 8008464:	f000 fcbe 	bl	8008de4 <__lshift>
 8008468:	4681      	mov	r9, r0
 800846a:	9b08      	ldr	r3, [sp, #32]
 800846c:	2b00      	cmp	r3, #0
 800846e:	dd05      	ble.n	800847c <_dtoa_r+0x83c>
 8008470:	4621      	mov	r1, r4
 8008472:	461a      	mov	r2, r3
 8008474:	4658      	mov	r0, fp
 8008476:	f000 fcb5 	bl	8008de4 <__lshift>
 800847a:	4604      	mov	r4, r0
 800847c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800847e:	2b00      	cmp	r3, #0
 8008480:	d059      	beq.n	8008536 <_dtoa_r+0x8f6>
 8008482:	4621      	mov	r1, r4
 8008484:	4648      	mov	r0, r9
 8008486:	f000 fd19 	bl	8008ebc <__mcmp>
 800848a:	2800      	cmp	r0, #0
 800848c:	da53      	bge.n	8008536 <_dtoa_r+0x8f6>
 800848e:	1e7b      	subs	r3, r7, #1
 8008490:	9304      	str	r3, [sp, #16]
 8008492:	4649      	mov	r1, r9
 8008494:	2300      	movs	r3, #0
 8008496:	220a      	movs	r2, #10
 8008498:	4658      	mov	r0, fp
 800849a:	f000 faf7 	bl	8008a8c <__multadd>
 800849e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084a0:	4681      	mov	r9, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	f000 8172 	beq.w	800878c <_dtoa_r+0xb4c>
 80084a8:	2300      	movs	r3, #0
 80084aa:	4629      	mov	r1, r5
 80084ac:	220a      	movs	r2, #10
 80084ae:	4658      	mov	r0, fp
 80084b0:	f000 faec 	bl	8008a8c <__multadd>
 80084b4:	9b00      	ldr	r3, [sp, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	4605      	mov	r5, r0
 80084ba:	dc67      	bgt.n	800858c <_dtoa_r+0x94c>
 80084bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084be:	2b02      	cmp	r3, #2
 80084c0:	dc41      	bgt.n	8008546 <_dtoa_r+0x906>
 80084c2:	e063      	b.n	800858c <_dtoa_r+0x94c>
 80084c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80084c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80084ca:	e746      	b.n	800835a <_dtoa_r+0x71a>
 80084cc:	9b07      	ldr	r3, [sp, #28]
 80084ce:	1e5c      	subs	r4, r3, #1
 80084d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	bfbf      	itttt	lt
 80084d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80084d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80084da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80084dc:	1ae3      	sublt	r3, r4, r3
 80084de:	bfb4      	ite	lt
 80084e0:	18d2      	addlt	r2, r2, r3
 80084e2:	1b1c      	subge	r4, r3, r4
 80084e4:	9b07      	ldr	r3, [sp, #28]
 80084e6:	bfbc      	itt	lt
 80084e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80084ea:	2400      	movlt	r4, #0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	bfb5      	itete	lt
 80084f0:	eba8 0603 	sublt.w	r6, r8, r3
 80084f4:	9b07      	ldrge	r3, [sp, #28]
 80084f6:	2300      	movlt	r3, #0
 80084f8:	4646      	movge	r6, r8
 80084fa:	e730      	b.n	800835e <_dtoa_r+0x71e>
 80084fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80084fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008500:	4646      	mov	r6, r8
 8008502:	e735      	b.n	8008370 <_dtoa_r+0x730>
 8008504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008506:	e75c      	b.n	80083c2 <_dtoa_r+0x782>
 8008508:	2300      	movs	r3, #0
 800850a:	e788      	b.n	800841e <_dtoa_r+0x7de>
 800850c:	3fe00000 	.word	0x3fe00000
 8008510:	40240000 	.word	0x40240000
 8008514:	40140000 	.word	0x40140000
 8008518:	9b02      	ldr	r3, [sp, #8]
 800851a:	e780      	b.n	800841e <_dtoa_r+0x7de>
 800851c:	2300      	movs	r3, #0
 800851e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008520:	e782      	b.n	8008428 <_dtoa_r+0x7e8>
 8008522:	d099      	beq.n	8008458 <_dtoa_r+0x818>
 8008524:	9a08      	ldr	r2, [sp, #32]
 8008526:	331c      	adds	r3, #28
 8008528:	441a      	add	r2, r3
 800852a:	4498      	add	r8, r3
 800852c:	441e      	add	r6, r3
 800852e:	9208      	str	r2, [sp, #32]
 8008530:	e792      	b.n	8008458 <_dtoa_r+0x818>
 8008532:	4603      	mov	r3, r0
 8008534:	e7f6      	b.n	8008524 <_dtoa_r+0x8e4>
 8008536:	9b07      	ldr	r3, [sp, #28]
 8008538:	9704      	str	r7, [sp, #16]
 800853a:	2b00      	cmp	r3, #0
 800853c:	dc20      	bgt.n	8008580 <_dtoa_r+0x940>
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008542:	2b02      	cmp	r3, #2
 8008544:	dd1e      	ble.n	8008584 <_dtoa_r+0x944>
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	f47f aec0 	bne.w	80082ce <_dtoa_r+0x68e>
 800854e:	4621      	mov	r1, r4
 8008550:	2205      	movs	r2, #5
 8008552:	4658      	mov	r0, fp
 8008554:	f000 fa9a 	bl	8008a8c <__multadd>
 8008558:	4601      	mov	r1, r0
 800855a:	4604      	mov	r4, r0
 800855c:	4648      	mov	r0, r9
 800855e:	f000 fcad 	bl	8008ebc <__mcmp>
 8008562:	2800      	cmp	r0, #0
 8008564:	f77f aeb3 	ble.w	80082ce <_dtoa_r+0x68e>
 8008568:	4656      	mov	r6, sl
 800856a:	2331      	movs	r3, #49	@ 0x31
 800856c:	f806 3b01 	strb.w	r3, [r6], #1
 8008570:	9b04      	ldr	r3, [sp, #16]
 8008572:	3301      	adds	r3, #1
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	e6ae      	b.n	80082d6 <_dtoa_r+0x696>
 8008578:	9c07      	ldr	r4, [sp, #28]
 800857a:	9704      	str	r7, [sp, #16]
 800857c:	4625      	mov	r5, r4
 800857e:	e7f3      	b.n	8008568 <_dtoa_r+0x928>
 8008580:	9b07      	ldr	r3, [sp, #28]
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 8104 	beq.w	8008794 <_dtoa_r+0xb54>
 800858c:	2e00      	cmp	r6, #0
 800858e:	dd05      	ble.n	800859c <_dtoa_r+0x95c>
 8008590:	4629      	mov	r1, r5
 8008592:	4632      	mov	r2, r6
 8008594:	4658      	mov	r0, fp
 8008596:	f000 fc25 	bl	8008de4 <__lshift>
 800859a:	4605      	mov	r5, r0
 800859c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d05a      	beq.n	8008658 <_dtoa_r+0xa18>
 80085a2:	6869      	ldr	r1, [r5, #4]
 80085a4:	4658      	mov	r0, fp
 80085a6:	f000 fa0f 	bl	80089c8 <_Balloc>
 80085aa:	4606      	mov	r6, r0
 80085ac:	b928      	cbnz	r0, 80085ba <_dtoa_r+0x97a>
 80085ae:	4b84      	ldr	r3, [pc, #528]	@ (80087c0 <_dtoa_r+0xb80>)
 80085b0:	4602      	mov	r2, r0
 80085b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80085b6:	f7ff bb5a 	b.w	8007c6e <_dtoa_r+0x2e>
 80085ba:	692a      	ldr	r2, [r5, #16]
 80085bc:	3202      	adds	r2, #2
 80085be:	0092      	lsls	r2, r2, #2
 80085c0:	f105 010c 	add.w	r1, r5, #12
 80085c4:	300c      	adds	r0, #12
 80085c6:	f000 ffaf 	bl	8009528 <memcpy>
 80085ca:	2201      	movs	r2, #1
 80085cc:	4631      	mov	r1, r6
 80085ce:	4658      	mov	r0, fp
 80085d0:	f000 fc08 	bl	8008de4 <__lshift>
 80085d4:	f10a 0301 	add.w	r3, sl, #1
 80085d8:	9307      	str	r3, [sp, #28]
 80085da:	9b00      	ldr	r3, [sp, #0]
 80085dc:	4453      	add	r3, sl
 80085de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085e0:	9b02      	ldr	r3, [sp, #8]
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	462f      	mov	r7, r5
 80085e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80085ea:	4605      	mov	r5, r0
 80085ec:	9b07      	ldr	r3, [sp, #28]
 80085ee:	4621      	mov	r1, r4
 80085f0:	3b01      	subs	r3, #1
 80085f2:	4648      	mov	r0, r9
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	f7ff fa98 	bl	8007b2a <quorem>
 80085fa:	4639      	mov	r1, r7
 80085fc:	9002      	str	r0, [sp, #8]
 80085fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008602:	4648      	mov	r0, r9
 8008604:	f000 fc5a 	bl	8008ebc <__mcmp>
 8008608:	462a      	mov	r2, r5
 800860a:	9008      	str	r0, [sp, #32]
 800860c:	4621      	mov	r1, r4
 800860e:	4658      	mov	r0, fp
 8008610:	f000 fc70 	bl	8008ef4 <__mdiff>
 8008614:	68c2      	ldr	r2, [r0, #12]
 8008616:	4606      	mov	r6, r0
 8008618:	bb02      	cbnz	r2, 800865c <_dtoa_r+0xa1c>
 800861a:	4601      	mov	r1, r0
 800861c:	4648      	mov	r0, r9
 800861e:	f000 fc4d 	bl	8008ebc <__mcmp>
 8008622:	4602      	mov	r2, r0
 8008624:	4631      	mov	r1, r6
 8008626:	4658      	mov	r0, fp
 8008628:	920e      	str	r2, [sp, #56]	@ 0x38
 800862a:	f000 fa0d 	bl	8008a48 <_Bfree>
 800862e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008632:	9e07      	ldr	r6, [sp, #28]
 8008634:	ea43 0102 	orr.w	r1, r3, r2
 8008638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800863a:	4319      	orrs	r1, r3
 800863c:	d110      	bne.n	8008660 <_dtoa_r+0xa20>
 800863e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008642:	d029      	beq.n	8008698 <_dtoa_r+0xa58>
 8008644:	9b08      	ldr	r3, [sp, #32]
 8008646:	2b00      	cmp	r3, #0
 8008648:	dd02      	ble.n	8008650 <_dtoa_r+0xa10>
 800864a:	9b02      	ldr	r3, [sp, #8]
 800864c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008650:	9b00      	ldr	r3, [sp, #0]
 8008652:	f883 8000 	strb.w	r8, [r3]
 8008656:	e63f      	b.n	80082d8 <_dtoa_r+0x698>
 8008658:	4628      	mov	r0, r5
 800865a:	e7bb      	b.n	80085d4 <_dtoa_r+0x994>
 800865c:	2201      	movs	r2, #1
 800865e:	e7e1      	b.n	8008624 <_dtoa_r+0x9e4>
 8008660:	9b08      	ldr	r3, [sp, #32]
 8008662:	2b00      	cmp	r3, #0
 8008664:	db04      	blt.n	8008670 <_dtoa_r+0xa30>
 8008666:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008668:	430b      	orrs	r3, r1
 800866a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800866c:	430b      	orrs	r3, r1
 800866e:	d120      	bne.n	80086b2 <_dtoa_r+0xa72>
 8008670:	2a00      	cmp	r2, #0
 8008672:	dded      	ble.n	8008650 <_dtoa_r+0xa10>
 8008674:	4649      	mov	r1, r9
 8008676:	2201      	movs	r2, #1
 8008678:	4658      	mov	r0, fp
 800867a:	f000 fbb3 	bl	8008de4 <__lshift>
 800867e:	4621      	mov	r1, r4
 8008680:	4681      	mov	r9, r0
 8008682:	f000 fc1b 	bl	8008ebc <__mcmp>
 8008686:	2800      	cmp	r0, #0
 8008688:	dc03      	bgt.n	8008692 <_dtoa_r+0xa52>
 800868a:	d1e1      	bne.n	8008650 <_dtoa_r+0xa10>
 800868c:	f018 0f01 	tst.w	r8, #1
 8008690:	d0de      	beq.n	8008650 <_dtoa_r+0xa10>
 8008692:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008696:	d1d8      	bne.n	800864a <_dtoa_r+0xa0a>
 8008698:	9a00      	ldr	r2, [sp, #0]
 800869a:	2339      	movs	r3, #57	@ 0x39
 800869c:	7013      	strb	r3, [r2, #0]
 800869e:	4633      	mov	r3, r6
 80086a0:	461e      	mov	r6, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80086a8:	2a39      	cmp	r2, #57	@ 0x39
 80086aa:	d052      	beq.n	8008752 <_dtoa_r+0xb12>
 80086ac:	3201      	adds	r2, #1
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	e612      	b.n	80082d8 <_dtoa_r+0x698>
 80086b2:	2a00      	cmp	r2, #0
 80086b4:	dd07      	ble.n	80086c6 <_dtoa_r+0xa86>
 80086b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086ba:	d0ed      	beq.n	8008698 <_dtoa_r+0xa58>
 80086bc:	9a00      	ldr	r2, [sp, #0]
 80086be:	f108 0301 	add.w	r3, r8, #1
 80086c2:	7013      	strb	r3, [r2, #0]
 80086c4:	e608      	b.n	80082d8 <_dtoa_r+0x698>
 80086c6:	9b07      	ldr	r3, [sp, #28]
 80086c8:	9a07      	ldr	r2, [sp, #28]
 80086ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80086ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d028      	beq.n	8008726 <_dtoa_r+0xae6>
 80086d4:	4649      	mov	r1, r9
 80086d6:	2300      	movs	r3, #0
 80086d8:	220a      	movs	r2, #10
 80086da:	4658      	mov	r0, fp
 80086dc:	f000 f9d6 	bl	8008a8c <__multadd>
 80086e0:	42af      	cmp	r7, r5
 80086e2:	4681      	mov	r9, r0
 80086e4:	f04f 0300 	mov.w	r3, #0
 80086e8:	f04f 020a 	mov.w	r2, #10
 80086ec:	4639      	mov	r1, r7
 80086ee:	4658      	mov	r0, fp
 80086f0:	d107      	bne.n	8008702 <_dtoa_r+0xac2>
 80086f2:	f000 f9cb 	bl	8008a8c <__multadd>
 80086f6:	4607      	mov	r7, r0
 80086f8:	4605      	mov	r5, r0
 80086fa:	9b07      	ldr	r3, [sp, #28]
 80086fc:	3301      	adds	r3, #1
 80086fe:	9307      	str	r3, [sp, #28]
 8008700:	e774      	b.n	80085ec <_dtoa_r+0x9ac>
 8008702:	f000 f9c3 	bl	8008a8c <__multadd>
 8008706:	4629      	mov	r1, r5
 8008708:	4607      	mov	r7, r0
 800870a:	2300      	movs	r3, #0
 800870c:	220a      	movs	r2, #10
 800870e:	4658      	mov	r0, fp
 8008710:	f000 f9bc 	bl	8008a8c <__multadd>
 8008714:	4605      	mov	r5, r0
 8008716:	e7f0      	b.n	80086fa <_dtoa_r+0xaba>
 8008718:	9b00      	ldr	r3, [sp, #0]
 800871a:	2b00      	cmp	r3, #0
 800871c:	bfcc      	ite	gt
 800871e:	461e      	movgt	r6, r3
 8008720:	2601      	movle	r6, #1
 8008722:	4456      	add	r6, sl
 8008724:	2700      	movs	r7, #0
 8008726:	4649      	mov	r1, r9
 8008728:	2201      	movs	r2, #1
 800872a:	4658      	mov	r0, fp
 800872c:	f000 fb5a 	bl	8008de4 <__lshift>
 8008730:	4621      	mov	r1, r4
 8008732:	4681      	mov	r9, r0
 8008734:	f000 fbc2 	bl	8008ebc <__mcmp>
 8008738:	2800      	cmp	r0, #0
 800873a:	dcb0      	bgt.n	800869e <_dtoa_r+0xa5e>
 800873c:	d102      	bne.n	8008744 <_dtoa_r+0xb04>
 800873e:	f018 0f01 	tst.w	r8, #1
 8008742:	d1ac      	bne.n	800869e <_dtoa_r+0xa5e>
 8008744:	4633      	mov	r3, r6
 8008746:	461e      	mov	r6, r3
 8008748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800874c:	2a30      	cmp	r2, #48	@ 0x30
 800874e:	d0fa      	beq.n	8008746 <_dtoa_r+0xb06>
 8008750:	e5c2      	b.n	80082d8 <_dtoa_r+0x698>
 8008752:	459a      	cmp	sl, r3
 8008754:	d1a4      	bne.n	80086a0 <_dtoa_r+0xa60>
 8008756:	9b04      	ldr	r3, [sp, #16]
 8008758:	3301      	adds	r3, #1
 800875a:	9304      	str	r3, [sp, #16]
 800875c:	2331      	movs	r3, #49	@ 0x31
 800875e:	f88a 3000 	strb.w	r3, [sl]
 8008762:	e5b9      	b.n	80082d8 <_dtoa_r+0x698>
 8008764:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008766:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80087c4 <_dtoa_r+0xb84>
 800876a:	b11b      	cbz	r3, 8008774 <_dtoa_r+0xb34>
 800876c:	f10a 0308 	add.w	r3, sl, #8
 8008770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	4650      	mov	r0, sl
 8008776:	b019      	add	sp, #100	@ 0x64
 8008778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800877c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800877e:	2b01      	cmp	r3, #1
 8008780:	f77f ae37 	ble.w	80083f2 <_dtoa_r+0x7b2>
 8008784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008786:	930a      	str	r3, [sp, #40]	@ 0x28
 8008788:	2001      	movs	r0, #1
 800878a:	e655      	b.n	8008438 <_dtoa_r+0x7f8>
 800878c:	9b00      	ldr	r3, [sp, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	f77f aed6 	ble.w	8008540 <_dtoa_r+0x900>
 8008794:	4656      	mov	r6, sl
 8008796:	4621      	mov	r1, r4
 8008798:	4648      	mov	r0, r9
 800879a:	f7ff f9c6 	bl	8007b2a <quorem>
 800879e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087a2:	f806 8b01 	strb.w	r8, [r6], #1
 80087a6:	9b00      	ldr	r3, [sp, #0]
 80087a8:	eba6 020a 	sub.w	r2, r6, sl
 80087ac:	4293      	cmp	r3, r2
 80087ae:	ddb3      	ble.n	8008718 <_dtoa_r+0xad8>
 80087b0:	4649      	mov	r1, r9
 80087b2:	2300      	movs	r3, #0
 80087b4:	220a      	movs	r2, #10
 80087b6:	4658      	mov	r0, fp
 80087b8:	f000 f968 	bl	8008a8c <__multadd>
 80087bc:	4681      	mov	r9, r0
 80087be:	e7ea      	b.n	8008796 <_dtoa_r+0xb56>
 80087c0:	0800e95c 	.word	0x0800e95c
 80087c4:	0800e8e0 	.word	0x0800e8e0

080087c8 <_free_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4605      	mov	r5, r0
 80087cc:	2900      	cmp	r1, #0
 80087ce:	d041      	beq.n	8008854 <_free_r+0x8c>
 80087d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087d4:	1f0c      	subs	r4, r1, #4
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	bfb8      	it	lt
 80087da:	18e4      	addlt	r4, r4, r3
 80087dc:	f000 f8e8 	bl	80089b0 <__malloc_lock>
 80087e0:	4a1d      	ldr	r2, [pc, #116]	@ (8008858 <_free_r+0x90>)
 80087e2:	6813      	ldr	r3, [r2, #0]
 80087e4:	b933      	cbnz	r3, 80087f4 <_free_r+0x2c>
 80087e6:	6063      	str	r3, [r4, #4]
 80087e8:	6014      	str	r4, [r2, #0]
 80087ea:	4628      	mov	r0, r5
 80087ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087f0:	f000 b8e4 	b.w	80089bc <__malloc_unlock>
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	d908      	bls.n	800880a <_free_r+0x42>
 80087f8:	6820      	ldr	r0, [r4, #0]
 80087fa:	1821      	adds	r1, r4, r0
 80087fc:	428b      	cmp	r3, r1
 80087fe:	bf01      	itttt	eq
 8008800:	6819      	ldreq	r1, [r3, #0]
 8008802:	685b      	ldreq	r3, [r3, #4]
 8008804:	1809      	addeq	r1, r1, r0
 8008806:	6021      	streq	r1, [r4, #0]
 8008808:	e7ed      	b.n	80087e6 <_free_r+0x1e>
 800880a:	461a      	mov	r2, r3
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	b10b      	cbz	r3, 8008814 <_free_r+0x4c>
 8008810:	42a3      	cmp	r3, r4
 8008812:	d9fa      	bls.n	800880a <_free_r+0x42>
 8008814:	6811      	ldr	r1, [r2, #0]
 8008816:	1850      	adds	r0, r2, r1
 8008818:	42a0      	cmp	r0, r4
 800881a:	d10b      	bne.n	8008834 <_free_r+0x6c>
 800881c:	6820      	ldr	r0, [r4, #0]
 800881e:	4401      	add	r1, r0
 8008820:	1850      	adds	r0, r2, r1
 8008822:	4283      	cmp	r3, r0
 8008824:	6011      	str	r1, [r2, #0]
 8008826:	d1e0      	bne.n	80087ea <_free_r+0x22>
 8008828:	6818      	ldr	r0, [r3, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	6053      	str	r3, [r2, #4]
 800882e:	4408      	add	r0, r1
 8008830:	6010      	str	r0, [r2, #0]
 8008832:	e7da      	b.n	80087ea <_free_r+0x22>
 8008834:	d902      	bls.n	800883c <_free_r+0x74>
 8008836:	230c      	movs	r3, #12
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	e7d6      	b.n	80087ea <_free_r+0x22>
 800883c:	6820      	ldr	r0, [r4, #0]
 800883e:	1821      	adds	r1, r4, r0
 8008840:	428b      	cmp	r3, r1
 8008842:	bf04      	itt	eq
 8008844:	6819      	ldreq	r1, [r3, #0]
 8008846:	685b      	ldreq	r3, [r3, #4]
 8008848:	6063      	str	r3, [r4, #4]
 800884a:	bf04      	itt	eq
 800884c:	1809      	addeq	r1, r1, r0
 800884e:	6021      	streq	r1, [r4, #0]
 8008850:	6054      	str	r4, [r2, #4]
 8008852:	e7ca      	b.n	80087ea <_free_r+0x22>
 8008854:	bd38      	pop	{r3, r4, r5, pc}
 8008856:	bf00      	nop
 8008858:	20005ac8 	.word	0x20005ac8

0800885c <malloc>:
 800885c:	4b02      	ldr	r3, [pc, #8]	@ (8008868 <malloc+0xc>)
 800885e:	4601      	mov	r1, r0
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	f000 b825 	b.w	80088b0 <_malloc_r>
 8008866:	bf00      	nop
 8008868:	20003618 	.word	0x20003618

0800886c <sbrk_aligned>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	4e0f      	ldr	r6, [pc, #60]	@ (80088ac <sbrk_aligned+0x40>)
 8008870:	460c      	mov	r4, r1
 8008872:	6831      	ldr	r1, [r6, #0]
 8008874:	4605      	mov	r5, r0
 8008876:	b911      	cbnz	r1, 800887e <sbrk_aligned+0x12>
 8008878:	f000 fe46 	bl	8009508 <_sbrk_r>
 800887c:	6030      	str	r0, [r6, #0]
 800887e:	4621      	mov	r1, r4
 8008880:	4628      	mov	r0, r5
 8008882:	f000 fe41 	bl	8009508 <_sbrk_r>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d103      	bne.n	8008892 <sbrk_aligned+0x26>
 800888a:	f04f 34ff 	mov.w	r4, #4294967295
 800888e:	4620      	mov	r0, r4
 8008890:	bd70      	pop	{r4, r5, r6, pc}
 8008892:	1cc4      	adds	r4, r0, #3
 8008894:	f024 0403 	bic.w	r4, r4, #3
 8008898:	42a0      	cmp	r0, r4
 800889a:	d0f8      	beq.n	800888e <sbrk_aligned+0x22>
 800889c:	1a21      	subs	r1, r4, r0
 800889e:	4628      	mov	r0, r5
 80088a0:	f000 fe32 	bl	8009508 <_sbrk_r>
 80088a4:	3001      	adds	r0, #1
 80088a6:	d1f2      	bne.n	800888e <sbrk_aligned+0x22>
 80088a8:	e7ef      	b.n	800888a <sbrk_aligned+0x1e>
 80088aa:	bf00      	nop
 80088ac:	20005ac4 	.word	0x20005ac4

080088b0 <_malloc_r>:
 80088b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088b4:	1ccd      	adds	r5, r1, #3
 80088b6:	f025 0503 	bic.w	r5, r5, #3
 80088ba:	3508      	adds	r5, #8
 80088bc:	2d0c      	cmp	r5, #12
 80088be:	bf38      	it	cc
 80088c0:	250c      	movcc	r5, #12
 80088c2:	2d00      	cmp	r5, #0
 80088c4:	4606      	mov	r6, r0
 80088c6:	db01      	blt.n	80088cc <_malloc_r+0x1c>
 80088c8:	42a9      	cmp	r1, r5
 80088ca:	d904      	bls.n	80088d6 <_malloc_r+0x26>
 80088cc:	230c      	movs	r3, #12
 80088ce:	6033      	str	r3, [r6, #0]
 80088d0:	2000      	movs	r0, #0
 80088d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089ac <_malloc_r+0xfc>
 80088da:	f000 f869 	bl	80089b0 <__malloc_lock>
 80088de:	f8d8 3000 	ldr.w	r3, [r8]
 80088e2:	461c      	mov	r4, r3
 80088e4:	bb44      	cbnz	r4, 8008938 <_malloc_r+0x88>
 80088e6:	4629      	mov	r1, r5
 80088e8:	4630      	mov	r0, r6
 80088ea:	f7ff ffbf 	bl	800886c <sbrk_aligned>
 80088ee:	1c43      	adds	r3, r0, #1
 80088f0:	4604      	mov	r4, r0
 80088f2:	d158      	bne.n	80089a6 <_malloc_r+0xf6>
 80088f4:	f8d8 4000 	ldr.w	r4, [r8]
 80088f8:	4627      	mov	r7, r4
 80088fa:	2f00      	cmp	r7, #0
 80088fc:	d143      	bne.n	8008986 <_malloc_r+0xd6>
 80088fe:	2c00      	cmp	r4, #0
 8008900:	d04b      	beq.n	800899a <_malloc_r+0xea>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	4639      	mov	r1, r7
 8008906:	4630      	mov	r0, r6
 8008908:	eb04 0903 	add.w	r9, r4, r3
 800890c:	f000 fdfc 	bl	8009508 <_sbrk_r>
 8008910:	4581      	cmp	r9, r0
 8008912:	d142      	bne.n	800899a <_malloc_r+0xea>
 8008914:	6821      	ldr	r1, [r4, #0]
 8008916:	1a6d      	subs	r5, r5, r1
 8008918:	4629      	mov	r1, r5
 800891a:	4630      	mov	r0, r6
 800891c:	f7ff ffa6 	bl	800886c <sbrk_aligned>
 8008920:	3001      	adds	r0, #1
 8008922:	d03a      	beq.n	800899a <_malloc_r+0xea>
 8008924:	6823      	ldr	r3, [r4, #0]
 8008926:	442b      	add	r3, r5
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	f8d8 3000 	ldr.w	r3, [r8]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	bb62      	cbnz	r2, 800898c <_malloc_r+0xdc>
 8008932:	f8c8 7000 	str.w	r7, [r8]
 8008936:	e00f      	b.n	8008958 <_malloc_r+0xa8>
 8008938:	6822      	ldr	r2, [r4, #0]
 800893a:	1b52      	subs	r2, r2, r5
 800893c:	d420      	bmi.n	8008980 <_malloc_r+0xd0>
 800893e:	2a0b      	cmp	r2, #11
 8008940:	d917      	bls.n	8008972 <_malloc_r+0xc2>
 8008942:	1961      	adds	r1, r4, r5
 8008944:	42a3      	cmp	r3, r4
 8008946:	6025      	str	r5, [r4, #0]
 8008948:	bf18      	it	ne
 800894a:	6059      	strne	r1, [r3, #4]
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	bf08      	it	eq
 8008950:	f8c8 1000 	streq.w	r1, [r8]
 8008954:	5162      	str	r2, [r4, r5]
 8008956:	604b      	str	r3, [r1, #4]
 8008958:	4630      	mov	r0, r6
 800895a:	f000 f82f 	bl	80089bc <__malloc_unlock>
 800895e:	f104 000b 	add.w	r0, r4, #11
 8008962:	1d23      	adds	r3, r4, #4
 8008964:	f020 0007 	bic.w	r0, r0, #7
 8008968:	1ac2      	subs	r2, r0, r3
 800896a:	bf1c      	itt	ne
 800896c:	1a1b      	subne	r3, r3, r0
 800896e:	50a3      	strne	r3, [r4, r2]
 8008970:	e7af      	b.n	80088d2 <_malloc_r+0x22>
 8008972:	6862      	ldr	r2, [r4, #4]
 8008974:	42a3      	cmp	r3, r4
 8008976:	bf0c      	ite	eq
 8008978:	f8c8 2000 	streq.w	r2, [r8]
 800897c:	605a      	strne	r2, [r3, #4]
 800897e:	e7eb      	b.n	8008958 <_malloc_r+0xa8>
 8008980:	4623      	mov	r3, r4
 8008982:	6864      	ldr	r4, [r4, #4]
 8008984:	e7ae      	b.n	80088e4 <_malloc_r+0x34>
 8008986:	463c      	mov	r4, r7
 8008988:	687f      	ldr	r7, [r7, #4]
 800898a:	e7b6      	b.n	80088fa <_malloc_r+0x4a>
 800898c:	461a      	mov	r2, r3
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	42a3      	cmp	r3, r4
 8008992:	d1fb      	bne.n	800898c <_malloc_r+0xdc>
 8008994:	2300      	movs	r3, #0
 8008996:	6053      	str	r3, [r2, #4]
 8008998:	e7de      	b.n	8008958 <_malloc_r+0xa8>
 800899a:	230c      	movs	r3, #12
 800899c:	6033      	str	r3, [r6, #0]
 800899e:	4630      	mov	r0, r6
 80089a0:	f000 f80c 	bl	80089bc <__malloc_unlock>
 80089a4:	e794      	b.n	80088d0 <_malloc_r+0x20>
 80089a6:	6005      	str	r5, [r0, #0]
 80089a8:	e7d6      	b.n	8008958 <_malloc_r+0xa8>
 80089aa:	bf00      	nop
 80089ac:	20005ac8 	.word	0x20005ac8

080089b0 <__malloc_lock>:
 80089b0:	4801      	ldr	r0, [pc, #4]	@ (80089b8 <__malloc_lock+0x8>)
 80089b2:	f7ff b8b8 	b.w	8007b26 <__retarget_lock_acquire_recursive>
 80089b6:	bf00      	nop
 80089b8:	20005ac0 	.word	0x20005ac0

080089bc <__malloc_unlock>:
 80089bc:	4801      	ldr	r0, [pc, #4]	@ (80089c4 <__malloc_unlock+0x8>)
 80089be:	f7ff b8b3 	b.w	8007b28 <__retarget_lock_release_recursive>
 80089c2:	bf00      	nop
 80089c4:	20005ac0 	.word	0x20005ac0

080089c8 <_Balloc>:
 80089c8:	b570      	push	{r4, r5, r6, lr}
 80089ca:	69c6      	ldr	r6, [r0, #28]
 80089cc:	4604      	mov	r4, r0
 80089ce:	460d      	mov	r5, r1
 80089d0:	b976      	cbnz	r6, 80089f0 <_Balloc+0x28>
 80089d2:	2010      	movs	r0, #16
 80089d4:	f7ff ff42 	bl	800885c <malloc>
 80089d8:	4602      	mov	r2, r0
 80089da:	61e0      	str	r0, [r4, #28]
 80089dc:	b920      	cbnz	r0, 80089e8 <_Balloc+0x20>
 80089de:	4b18      	ldr	r3, [pc, #96]	@ (8008a40 <_Balloc+0x78>)
 80089e0:	4818      	ldr	r0, [pc, #96]	@ (8008a44 <_Balloc+0x7c>)
 80089e2:	216b      	movs	r1, #107	@ 0x6b
 80089e4:	f000 fdae 	bl	8009544 <__assert_func>
 80089e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089ec:	6006      	str	r6, [r0, #0]
 80089ee:	60c6      	str	r6, [r0, #12]
 80089f0:	69e6      	ldr	r6, [r4, #28]
 80089f2:	68f3      	ldr	r3, [r6, #12]
 80089f4:	b183      	cbz	r3, 8008a18 <_Balloc+0x50>
 80089f6:	69e3      	ldr	r3, [r4, #28]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089fe:	b9b8      	cbnz	r0, 8008a30 <_Balloc+0x68>
 8008a00:	2101      	movs	r1, #1
 8008a02:	fa01 f605 	lsl.w	r6, r1, r5
 8008a06:	1d72      	adds	r2, r6, #5
 8008a08:	0092      	lsls	r2, r2, #2
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f000 fdb8 	bl	8009580 <_calloc_r>
 8008a10:	b160      	cbz	r0, 8008a2c <_Balloc+0x64>
 8008a12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a16:	e00e      	b.n	8008a36 <_Balloc+0x6e>
 8008a18:	2221      	movs	r2, #33	@ 0x21
 8008a1a:	2104      	movs	r1, #4
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f000 fdaf 	bl	8009580 <_calloc_r>
 8008a22:	69e3      	ldr	r3, [r4, #28]
 8008a24:	60f0      	str	r0, [r6, #12]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e4      	bne.n	80089f6 <_Balloc+0x2e>
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
 8008a30:	6802      	ldr	r2, [r0, #0]
 8008a32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a36:	2300      	movs	r3, #0
 8008a38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a3c:	e7f7      	b.n	8008a2e <_Balloc+0x66>
 8008a3e:	bf00      	nop
 8008a40:	0800e8ed 	.word	0x0800e8ed
 8008a44:	0800e96d 	.word	0x0800e96d

08008a48 <_Bfree>:
 8008a48:	b570      	push	{r4, r5, r6, lr}
 8008a4a:	69c6      	ldr	r6, [r0, #28]
 8008a4c:	4605      	mov	r5, r0
 8008a4e:	460c      	mov	r4, r1
 8008a50:	b976      	cbnz	r6, 8008a70 <_Bfree+0x28>
 8008a52:	2010      	movs	r0, #16
 8008a54:	f7ff ff02 	bl	800885c <malloc>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	61e8      	str	r0, [r5, #28]
 8008a5c:	b920      	cbnz	r0, 8008a68 <_Bfree+0x20>
 8008a5e:	4b09      	ldr	r3, [pc, #36]	@ (8008a84 <_Bfree+0x3c>)
 8008a60:	4809      	ldr	r0, [pc, #36]	@ (8008a88 <_Bfree+0x40>)
 8008a62:	218f      	movs	r1, #143	@ 0x8f
 8008a64:	f000 fd6e 	bl	8009544 <__assert_func>
 8008a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a6c:	6006      	str	r6, [r0, #0]
 8008a6e:	60c6      	str	r6, [r0, #12]
 8008a70:	b13c      	cbz	r4, 8008a82 <_Bfree+0x3a>
 8008a72:	69eb      	ldr	r3, [r5, #28]
 8008a74:	6862      	ldr	r2, [r4, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a7c:	6021      	str	r1, [r4, #0]
 8008a7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a82:	bd70      	pop	{r4, r5, r6, pc}
 8008a84:	0800e8ed 	.word	0x0800e8ed
 8008a88:	0800e96d 	.word	0x0800e96d

08008a8c <__multadd>:
 8008a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a90:	690d      	ldr	r5, [r1, #16]
 8008a92:	4607      	mov	r7, r0
 8008a94:	460c      	mov	r4, r1
 8008a96:	461e      	mov	r6, r3
 8008a98:	f101 0c14 	add.w	ip, r1, #20
 8008a9c:	2000      	movs	r0, #0
 8008a9e:	f8dc 3000 	ldr.w	r3, [ip]
 8008aa2:	b299      	uxth	r1, r3
 8008aa4:	fb02 6101 	mla	r1, r2, r1, r6
 8008aa8:	0c1e      	lsrs	r6, r3, #16
 8008aaa:	0c0b      	lsrs	r3, r1, #16
 8008aac:	fb02 3306 	mla	r3, r2, r6, r3
 8008ab0:	b289      	uxth	r1, r1
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008ab8:	4285      	cmp	r5, r0
 8008aba:	f84c 1b04 	str.w	r1, [ip], #4
 8008abe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ac2:	dcec      	bgt.n	8008a9e <__multadd+0x12>
 8008ac4:	b30e      	cbz	r6, 8008b0a <__multadd+0x7e>
 8008ac6:	68a3      	ldr	r3, [r4, #8]
 8008ac8:	42ab      	cmp	r3, r5
 8008aca:	dc19      	bgt.n	8008b00 <__multadd+0x74>
 8008acc:	6861      	ldr	r1, [r4, #4]
 8008ace:	4638      	mov	r0, r7
 8008ad0:	3101      	adds	r1, #1
 8008ad2:	f7ff ff79 	bl	80089c8 <_Balloc>
 8008ad6:	4680      	mov	r8, r0
 8008ad8:	b928      	cbnz	r0, 8008ae6 <__multadd+0x5a>
 8008ada:	4602      	mov	r2, r0
 8008adc:	4b0c      	ldr	r3, [pc, #48]	@ (8008b10 <__multadd+0x84>)
 8008ade:	480d      	ldr	r0, [pc, #52]	@ (8008b14 <__multadd+0x88>)
 8008ae0:	21ba      	movs	r1, #186	@ 0xba
 8008ae2:	f000 fd2f 	bl	8009544 <__assert_func>
 8008ae6:	6922      	ldr	r2, [r4, #16]
 8008ae8:	3202      	adds	r2, #2
 8008aea:	f104 010c 	add.w	r1, r4, #12
 8008aee:	0092      	lsls	r2, r2, #2
 8008af0:	300c      	adds	r0, #12
 8008af2:	f000 fd19 	bl	8009528 <memcpy>
 8008af6:	4621      	mov	r1, r4
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7ff ffa5 	bl	8008a48 <_Bfree>
 8008afe:	4644      	mov	r4, r8
 8008b00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b04:	3501      	adds	r5, #1
 8008b06:	615e      	str	r6, [r3, #20]
 8008b08:	6125      	str	r5, [r4, #16]
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b10:	0800e95c 	.word	0x0800e95c
 8008b14:	0800e96d 	.word	0x0800e96d

08008b18 <__hi0bits>:
 8008b18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	bf36      	itet	cc
 8008b20:	0403      	lslcc	r3, r0, #16
 8008b22:	2000      	movcs	r0, #0
 8008b24:	2010      	movcc	r0, #16
 8008b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b2a:	bf3c      	itt	cc
 8008b2c:	021b      	lslcc	r3, r3, #8
 8008b2e:	3008      	addcc	r0, #8
 8008b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b34:	bf3c      	itt	cc
 8008b36:	011b      	lslcc	r3, r3, #4
 8008b38:	3004      	addcc	r0, #4
 8008b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b3e:	bf3c      	itt	cc
 8008b40:	009b      	lslcc	r3, r3, #2
 8008b42:	3002      	addcc	r0, #2
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	db05      	blt.n	8008b54 <__hi0bits+0x3c>
 8008b48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008b4c:	f100 0001 	add.w	r0, r0, #1
 8008b50:	bf08      	it	eq
 8008b52:	2020      	moveq	r0, #32
 8008b54:	4770      	bx	lr

08008b56 <__lo0bits>:
 8008b56:	6803      	ldr	r3, [r0, #0]
 8008b58:	4602      	mov	r2, r0
 8008b5a:	f013 0007 	ands.w	r0, r3, #7
 8008b5e:	d00b      	beq.n	8008b78 <__lo0bits+0x22>
 8008b60:	07d9      	lsls	r1, r3, #31
 8008b62:	d421      	bmi.n	8008ba8 <__lo0bits+0x52>
 8008b64:	0798      	lsls	r0, r3, #30
 8008b66:	bf49      	itett	mi
 8008b68:	085b      	lsrmi	r3, r3, #1
 8008b6a:	089b      	lsrpl	r3, r3, #2
 8008b6c:	2001      	movmi	r0, #1
 8008b6e:	6013      	strmi	r3, [r2, #0]
 8008b70:	bf5c      	itt	pl
 8008b72:	6013      	strpl	r3, [r2, #0]
 8008b74:	2002      	movpl	r0, #2
 8008b76:	4770      	bx	lr
 8008b78:	b299      	uxth	r1, r3
 8008b7a:	b909      	cbnz	r1, 8008b80 <__lo0bits+0x2a>
 8008b7c:	0c1b      	lsrs	r3, r3, #16
 8008b7e:	2010      	movs	r0, #16
 8008b80:	b2d9      	uxtb	r1, r3
 8008b82:	b909      	cbnz	r1, 8008b88 <__lo0bits+0x32>
 8008b84:	3008      	adds	r0, #8
 8008b86:	0a1b      	lsrs	r3, r3, #8
 8008b88:	0719      	lsls	r1, r3, #28
 8008b8a:	bf04      	itt	eq
 8008b8c:	091b      	lsreq	r3, r3, #4
 8008b8e:	3004      	addeq	r0, #4
 8008b90:	0799      	lsls	r1, r3, #30
 8008b92:	bf04      	itt	eq
 8008b94:	089b      	lsreq	r3, r3, #2
 8008b96:	3002      	addeq	r0, #2
 8008b98:	07d9      	lsls	r1, r3, #31
 8008b9a:	d403      	bmi.n	8008ba4 <__lo0bits+0x4e>
 8008b9c:	085b      	lsrs	r3, r3, #1
 8008b9e:	f100 0001 	add.w	r0, r0, #1
 8008ba2:	d003      	beq.n	8008bac <__lo0bits+0x56>
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	4770      	bx	lr
 8008ba8:	2000      	movs	r0, #0
 8008baa:	4770      	bx	lr
 8008bac:	2020      	movs	r0, #32
 8008bae:	4770      	bx	lr

08008bb0 <__i2b>:
 8008bb0:	b510      	push	{r4, lr}
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	f7ff ff07 	bl	80089c8 <_Balloc>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	b928      	cbnz	r0, 8008bca <__i2b+0x1a>
 8008bbe:	4b05      	ldr	r3, [pc, #20]	@ (8008bd4 <__i2b+0x24>)
 8008bc0:	4805      	ldr	r0, [pc, #20]	@ (8008bd8 <__i2b+0x28>)
 8008bc2:	f240 1145 	movw	r1, #325	@ 0x145
 8008bc6:	f000 fcbd 	bl	8009544 <__assert_func>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	6144      	str	r4, [r0, #20]
 8008bce:	6103      	str	r3, [r0, #16]
 8008bd0:	bd10      	pop	{r4, pc}
 8008bd2:	bf00      	nop
 8008bd4:	0800e95c 	.word	0x0800e95c
 8008bd8:	0800e96d 	.word	0x0800e96d

08008bdc <__multiply>:
 8008bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be0:	4614      	mov	r4, r2
 8008be2:	690a      	ldr	r2, [r1, #16]
 8008be4:	6923      	ldr	r3, [r4, #16]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	bfa8      	it	ge
 8008bea:	4623      	movge	r3, r4
 8008bec:	460f      	mov	r7, r1
 8008bee:	bfa4      	itt	ge
 8008bf0:	460c      	movge	r4, r1
 8008bf2:	461f      	movge	r7, r3
 8008bf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008bf8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008bfc:	68a3      	ldr	r3, [r4, #8]
 8008bfe:	6861      	ldr	r1, [r4, #4]
 8008c00:	eb0a 0609 	add.w	r6, sl, r9
 8008c04:	42b3      	cmp	r3, r6
 8008c06:	b085      	sub	sp, #20
 8008c08:	bfb8      	it	lt
 8008c0a:	3101      	addlt	r1, #1
 8008c0c:	f7ff fedc 	bl	80089c8 <_Balloc>
 8008c10:	b930      	cbnz	r0, 8008c20 <__multiply+0x44>
 8008c12:	4602      	mov	r2, r0
 8008c14:	4b44      	ldr	r3, [pc, #272]	@ (8008d28 <__multiply+0x14c>)
 8008c16:	4845      	ldr	r0, [pc, #276]	@ (8008d2c <__multiply+0x150>)
 8008c18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008c1c:	f000 fc92 	bl	8009544 <__assert_func>
 8008c20:	f100 0514 	add.w	r5, r0, #20
 8008c24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c28:	462b      	mov	r3, r5
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	4543      	cmp	r3, r8
 8008c2e:	d321      	bcc.n	8008c74 <__multiply+0x98>
 8008c30:	f107 0114 	add.w	r1, r7, #20
 8008c34:	f104 0214 	add.w	r2, r4, #20
 8008c38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008c3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008c40:	9302      	str	r3, [sp, #8]
 8008c42:	1b13      	subs	r3, r2, r4
 8008c44:	3b15      	subs	r3, #21
 8008c46:	f023 0303 	bic.w	r3, r3, #3
 8008c4a:	3304      	adds	r3, #4
 8008c4c:	f104 0715 	add.w	r7, r4, #21
 8008c50:	42ba      	cmp	r2, r7
 8008c52:	bf38      	it	cc
 8008c54:	2304      	movcc	r3, #4
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	9b02      	ldr	r3, [sp, #8]
 8008c5a:	9103      	str	r1, [sp, #12]
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	d80c      	bhi.n	8008c7a <__multiply+0x9e>
 8008c60:	2e00      	cmp	r6, #0
 8008c62:	dd03      	ble.n	8008c6c <__multiply+0x90>
 8008c64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d05b      	beq.n	8008d24 <__multiply+0x148>
 8008c6c:	6106      	str	r6, [r0, #16]
 8008c6e:	b005      	add	sp, #20
 8008c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c74:	f843 2b04 	str.w	r2, [r3], #4
 8008c78:	e7d8      	b.n	8008c2c <__multiply+0x50>
 8008c7a:	f8b1 a000 	ldrh.w	sl, [r1]
 8008c7e:	f1ba 0f00 	cmp.w	sl, #0
 8008c82:	d024      	beq.n	8008cce <__multiply+0xf2>
 8008c84:	f104 0e14 	add.w	lr, r4, #20
 8008c88:	46a9      	mov	r9, r5
 8008c8a:	f04f 0c00 	mov.w	ip, #0
 8008c8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c92:	f8d9 3000 	ldr.w	r3, [r9]
 8008c96:	fa1f fb87 	uxth.w	fp, r7
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ca0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008ca4:	f8d9 7000 	ldr.w	r7, [r9]
 8008ca8:	4463      	add	r3, ip
 8008caa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cae:	fb0a c70b 	mla	r7, sl, fp, ip
 8008cb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cbc:	4572      	cmp	r2, lr
 8008cbe:	f849 3b04 	str.w	r3, [r9], #4
 8008cc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008cc6:	d8e2      	bhi.n	8008c8e <__multiply+0xb2>
 8008cc8:	9b01      	ldr	r3, [sp, #4]
 8008cca:	f845 c003 	str.w	ip, [r5, r3]
 8008cce:	9b03      	ldr	r3, [sp, #12]
 8008cd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008cd4:	3104      	adds	r1, #4
 8008cd6:	f1b9 0f00 	cmp.w	r9, #0
 8008cda:	d021      	beq.n	8008d20 <__multiply+0x144>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	f104 0c14 	add.w	ip, r4, #20
 8008ce2:	46ae      	mov	lr, r5
 8008ce4:	f04f 0a00 	mov.w	sl, #0
 8008ce8:	f8bc b000 	ldrh.w	fp, [ip]
 8008cec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008cf0:	fb09 770b 	mla	r7, r9, fp, r7
 8008cf4:	4457      	add	r7, sl
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008cfc:	f84e 3b04 	str.w	r3, [lr], #4
 8008d00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008d04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d08:	f8be 3000 	ldrh.w	r3, [lr]
 8008d0c:	fb09 330a 	mla	r3, r9, sl, r3
 8008d10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008d14:	4562      	cmp	r2, ip
 8008d16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d1a:	d8e5      	bhi.n	8008ce8 <__multiply+0x10c>
 8008d1c:	9f01      	ldr	r7, [sp, #4]
 8008d1e:	51eb      	str	r3, [r5, r7]
 8008d20:	3504      	adds	r5, #4
 8008d22:	e799      	b.n	8008c58 <__multiply+0x7c>
 8008d24:	3e01      	subs	r6, #1
 8008d26:	e79b      	b.n	8008c60 <__multiply+0x84>
 8008d28:	0800e95c 	.word	0x0800e95c
 8008d2c:	0800e96d 	.word	0x0800e96d

08008d30 <__pow5mult>:
 8008d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d34:	4615      	mov	r5, r2
 8008d36:	f012 0203 	ands.w	r2, r2, #3
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	460e      	mov	r6, r1
 8008d3e:	d007      	beq.n	8008d50 <__pow5mult+0x20>
 8008d40:	4c25      	ldr	r4, [pc, #148]	@ (8008dd8 <__pow5mult+0xa8>)
 8008d42:	3a01      	subs	r2, #1
 8008d44:	2300      	movs	r3, #0
 8008d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d4a:	f7ff fe9f 	bl	8008a8c <__multadd>
 8008d4e:	4606      	mov	r6, r0
 8008d50:	10ad      	asrs	r5, r5, #2
 8008d52:	d03d      	beq.n	8008dd0 <__pow5mult+0xa0>
 8008d54:	69fc      	ldr	r4, [r7, #28]
 8008d56:	b97c      	cbnz	r4, 8008d78 <__pow5mult+0x48>
 8008d58:	2010      	movs	r0, #16
 8008d5a:	f7ff fd7f 	bl	800885c <malloc>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	61f8      	str	r0, [r7, #28]
 8008d62:	b928      	cbnz	r0, 8008d70 <__pow5mult+0x40>
 8008d64:	4b1d      	ldr	r3, [pc, #116]	@ (8008ddc <__pow5mult+0xac>)
 8008d66:	481e      	ldr	r0, [pc, #120]	@ (8008de0 <__pow5mult+0xb0>)
 8008d68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008d6c:	f000 fbea 	bl	8009544 <__assert_func>
 8008d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d74:	6004      	str	r4, [r0, #0]
 8008d76:	60c4      	str	r4, [r0, #12]
 8008d78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d80:	b94c      	cbnz	r4, 8008d96 <__pow5mult+0x66>
 8008d82:	f240 2171 	movw	r1, #625	@ 0x271
 8008d86:	4638      	mov	r0, r7
 8008d88:	f7ff ff12 	bl	8008bb0 <__i2b>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d92:	4604      	mov	r4, r0
 8008d94:	6003      	str	r3, [r0, #0]
 8008d96:	f04f 0900 	mov.w	r9, #0
 8008d9a:	07eb      	lsls	r3, r5, #31
 8008d9c:	d50a      	bpl.n	8008db4 <__pow5mult+0x84>
 8008d9e:	4631      	mov	r1, r6
 8008da0:	4622      	mov	r2, r4
 8008da2:	4638      	mov	r0, r7
 8008da4:	f7ff ff1a 	bl	8008bdc <__multiply>
 8008da8:	4631      	mov	r1, r6
 8008daa:	4680      	mov	r8, r0
 8008dac:	4638      	mov	r0, r7
 8008dae:	f7ff fe4b 	bl	8008a48 <_Bfree>
 8008db2:	4646      	mov	r6, r8
 8008db4:	106d      	asrs	r5, r5, #1
 8008db6:	d00b      	beq.n	8008dd0 <__pow5mult+0xa0>
 8008db8:	6820      	ldr	r0, [r4, #0]
 8008dba:	b938      	cbnz	r0, 8008dcc <__pow5mult+0x9c>
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	4621      	mov	r1, r4
 8008dc0:	4638      	mov	r0, r7
 8008dc2:	f7ff ff0b 	bl	8008bdc <__multiply>
 8008dc6:	6020      	str	r0, [r4, #0]
 8008dc8:	f8c0 9000 	str.w	r9, [r0]
 8008dcc:	4604      	mov	r4, r0
 8008dce:	e7e4      	b.n	8008d9a <__pow5mult+0x6a>
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dd6:	bf00      	nop
 8008dd8:	0800e9c8 	.word	0x0800e9c8
 8008ddc:	0800e8ed 	.word	0x0800e8ed
 8008de0:	0800e96d 	.word	0x0800e96d

08008de4 <__lshift>:
 8008de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de8:	460c      	mov	r4, r1
 8008dea:	6849      	ldr	r1, [r1, #4]
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	4607      	mov	r7, r0
 8008df6:	4691      	mov	r9, r2
 8008df8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dfc:	f108 0601 	add.w	r6, r8, #1
 8008e00:	42b3      	cmp	r3, r6
 8008e02:	db0b      	blt.n	8008e1c <__lshift+0x38>
 8008e04:	4638      	mov	r0, r7
 8008e06:	f7ff fddf 	bl	80089c8 <_Balloc>
 8008e0a:	4605      	mov	r5, r0
 8008e0c:	b948      	cbnz	r0, 8008e22 <__lshift+0x3e>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	4b28      	ldr	r3, [pc, #160]	@ (8008eb4 <__lshift+0xd0>)
 8008e12:	4829      	ldr	r0, [pc, #164]	@ (8008eb8 <__lshift+0xd4>)
 8008e14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008e18:	f000 fb94 	bl	8009544 <__assert_func>
 8008e1c:	3101      	adds	r1, #1
 8008e1e:	005b      	lsls	r3, r3, #1
 8008e20:	e7ee      	b.n	8008e00 <__lshift+0x1c>
 8008e22:	2300      	movs	r3, #0
 8008e24:	f100 0114 	add.w	r1, r0, #20
 8008e28:	f100 0210 	add.w	r2, r0, #16
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	4553      	cmp	r3, sl
 8008e30:	db33      	blt.n	8008e9a <__lshift+0xb6>
 8008e32:	6920      	ldr	r0, [r4, #16]
 8008e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e38:	f104 0314 	add.w	r3, r4, #20
 8008e3c:	f019 091f 	ands.w	r9, r9, #31
 8008e40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e48:	d02b      	beq.n	8008ea2 <__lshift+0xbe>
 8008e4a:	f1c9 0e20 	rsb	lr, r9, #32
 8008e4e:	468a      	mov	sl, r1
 8008e50:	2200      	movs	r2, #0
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	fa00 f009 	lsl.w	r0, r0, r9
 8008e58:	4310      	orrs	r0, r2
 8008e5a:	f84a 0b04 	str.w	r0, [sl], #4
 8008e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e62:	459c      	cmp	ip, r3
 8008e64:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e68:	d8f3      	bhi.n	8008e52 <__lshift+0x6e>
 8008e6a:	ebac 0304 	sub.w	r3, ip, r4
 8008e6e:	3b15      	subs	r3, #21
 8008e70:	f023 0303 	bic.w	r3, r3, #3
 8008e74:	3304      	adds	r3, #4
 8008e76:	f104 0015 	add.w	r0, r4, #21
 8008e7a:	4584      	cmp	ip, r0
 8008e7c:	bf38      	it	cc
 8008e7e:	2304      	movcc	r3, #4
 8008e80:	50ca      	str	r2, [r1, r3]
 8008e82:	b10a      	cbz	r2, 8008e88 <__lshift+0xa4>
 8008e84:	f108 0602 	add.w	r6, r8, #2
 8008e88:	3e01      	subs	r6, #1
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	612e      	str	r6, [r5, #16]
 8008e8e:	4621      	mov	r1, r4
 8008e90:	f7ff fdda 	bl	8008a48 <_Bfree>
 8008e94:	4628      	mov	r0, r5
 8008e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	e7c5      	b.n	8008e2e <__lshift+0x4a>
 8008ea2:	3904      	subs	r1, #4
 8008ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8008eac:	459c      	cmp	ip, r3
 8008eae:	d8f9      	bhi.n	8008ea4 <__lshift+0xc0>
 8008eb0:	e7ea      	b.n	8008e88 <__lshift+0xa4>
 8008eb2:	bf00      	nop
 8008eb4:	0800e95c 	.word	0x0800e95c
 8008eb8:	0800e96d 	.word	0x0800e96d

08008ebc <__mcmp>:
 8008ebc:	690a      	ldr	r2, [r1, #16]
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6900      	ldr	r0, [r0, #16]
 8008ec2:	1a80      	subs	r0, r0, r2
 8008ec4:	b530      	push	{r4, r5, lr}
 8008ec6:	d10e      	bne.n	8008ee6 <__mcmp+0x2a>
 8008ec8:	3314      	adds	r3, #20
 8008eca:	3114      	adds	r1, #20
 8008ecc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ed0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ed4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008edc:	4295      	cmp	r5, r2
 8008ede:	d003      	beq.n	8008ee8 <__mcmp+0x2c>
 8008ee0:	d205      	bcs.n	8008eee <__mcmp+0x32>
 8008ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee6:	bd30      	pop	{r4, r5, pc}
 8008ee8:	42a3      	cmp	r3, r4
 8008eea:	d3f3      	bcc.n	8008ed4 <__mcmp+0x18>
 8008eec:	e7fb      	b.n	8008ee6 <__mcmp+0x2a>
 8008eee:	2001      	movs	r0, #1
 8008ef0:	e7f9      	b.n	8008ee6 <__mcmp+0x2a>
	...

08008ef4 <__mdiff>:
 8008ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef8:	4689      	mov	r9, r1
 8008efa:	4606      	mov	r6, r0
 8008efc:	4611      	mov	r1, r2
 8008efe:	4648      	mov	r0, r9
 8008f00:	4614      	mov	r4, r2
 8008f02:	f7ff ffdb 	bl	8008ebc <__mcmp>
 8008f06:	1e05      	subs	r5, r0, #0
 8008f08:	d112      	bne.n	8008f30 <__mdiff+0x3c>
 8008f0a:	4629      	mov	r1, r5
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7ff fd5b 	bl	80089c8 <_Balloc>
 8008f12:	4602      	mov	r2, r0
 8008f14:	b928      	cbnz	r0, 8008f22 <__mdiff+0x2e>
 8008f16:	4b3f      	ldr	r3, [pc, #252]	@ (8009014 <__mdiff+0x120>)
 8008f18:	f240 2137 	movw	r1, #567	@ 0x237
 8008f1c:	483e      	ldr	r0, [pc, #248]	@ (8009018 <__mdiff+0x124>)
 8008f1e:	f000 fb11 	bl	8009544 <__assert_func>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f28:	4610      	mov	r0, r2
 8008f2a:	b003      	add	sp, #12
 8008f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f30:	bfbc      	itt	lt
 8008f32:	464b      	movlt	r3, r9
 8008f34:	46a1      	movlt	r9, r4
 8008f36:	4630      	mov	r0, r6
 8008f38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008f3c:	bfba      	itte	lt
 8008f3e:	461c      	movlt	r4, r3
 8008f40:	2501      	movlt	r5, #1
 8008f42:	2500      	movge	r5, #0
 8008f44:	f7ff fd40 	bl	80089c8 <_Balloc>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	b918      	cbnz	r0, 8008f54 <__mdiff+0x60>
 8008f4c:	4b31      	ldr	r3, [pc, #196]	@ (8009014 <__mdiff+0x120>)
 8008f4e:	f240 2145 	movw	r1, #581	@ 0x245
 8008f52:	e7e3      	b.n	8008f1c <__mdiff+0x28>
 8008f54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008f58:	6926      	ldr	r6, [r4, #16]
 8008f5a:	60c5      	str	r5, [r0, #12]
 8008f5c:	f109 0310 	add.w	r3, r9, #16
 8008f60:	f109 0514 	add.w	r5, r9, #20
 8008f64:	f104 0e14 	add.w	lr, r4, #20
 8008f68:	f100 0b14 	add.w	fp, r0, #20
 8008f6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008f70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008f74:	9301      	str	r3, [sp, #4]
 8008f76:	46d9      	mov	r9, fp
 8008f78:	f04f 0c00 	mov.w	ip, #0
 8008f7c:	9b01      	ldr	r3, [sp, #4]
 8008f7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008f82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	fa1f f38a 	uxth.w	r3, sl
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	b283      	uxth	r3, r0
 8008f90:	1acb      	subs	r3, r1, r3
 8008f92:	0c00      	lsrs	r0, r0, #16
 8008f94:	4463      	add	r3, ip
 8008f96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008f9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008fa4:	4576      	cmp	r6, lr
 8008fa6:	f849 3b04 	str.w	r3, [r9], #4
 8008faa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fae:	d8e5      	bhi.n	8008f7c <__mdiff+0x88>
 8008fb0:	1b33      	subs	r3, r6, r4
 8008fb2:	3b15      	subs	r3, #21
 8008fb4:	f023 0303 	bic.w	r3, r3, #3
 8008fb8:	3415      	adds	r4, #21
 8008fba:	3304      	adds	r3, #4
 8008fbc:	42a6      	cmp	r6, r4
 8008fbe:	bf38      	it	cc
 8008fc0:	2304      	movcc	r3, #4
 8008fc2:	441d      	add	r5, r3
 8008fc4:	445b      	add	r3, fp
 8008fc6:	461e      	mov	r6, r3
 8008fc8:	462c      	mov	r4, r5
 8008fca:	4544      	cmp	r4, r8
 8008fcc:	d30e      	bcc.n	8008fec <__mdiff+0xf8>
 8008fce:	f108 0103 	add.w	r1, r8, #3
 8008fd2:	1b49      	subs	r1, r1, r5
 8008fd4:	f021 0103 	bic.w	r1, r1, #3
 8008fd8:	3d03      	subs	r5, #3
 8008fda:	45a8      	cmp	r8, r5
 8008fdc:	bf38      	it	cc
 8008fde:	2100      	movcc	r1, #0
 8008fe0:	440b      	add	r3, r1
 8008fe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008fe6:	b191      	cbz	r1, 800900e <__mdiff+0x11a>
 8008fe8:	6117      	str	r7, [r2, #16]
 8008fea:	e79d      	b.n	8008f28 <__mdiff+0x34>
 8008fec:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ff0:	46e6      	mov	lr, ip
 8008ff2:	0c08      	lsrs	r0, r1, #16
 8008ff4:	fa1c fc81 	uxtah	ip, ip, r1
 8008ff8:	4471      	add	r1, lr
 8008ffa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ffe:	b289      	uxth	r1, r1
 8009000:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009004:	f846 1b04 	str.w	r1, [r6], #4
 8009008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800900c:	e7dd      	b.n	8008fca <__mdiff+0xd6>
 800900e:	3f01      	subs	r7, #1
 8009010:	e7e7      	b.n	8008fe2 <__mdiff+0xee>
 8009012:	bf00      	nop
 8009014:	0800e95c 	.word	0x0800e95c
 8009018:	0800e96d 	.word	0x0800e96d

0800901c <__d2b>:
 800901c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009020:	460f      	mov	r7, r1
 8009022:	2101      	movs	r1, #1
 8009024:	ec59 8b10 	vmov	r8, r9, d0
 8009028:	4616      	mov	r6, r2
 800902a:	f7ff fccd 	bl	80089c8 <_Balloc>
 800902e:	4604      	mov	r4, r0
 8009030:	b930      	cbnz	r0, 8009040 <__d2b+0x24>
 8009032:	4602      	mov	r2, r0
 8009034:	4b23      	ldr	r3, [pc, #140]	@ (80090c4 <__d2b+0xa8>)
 8009036:	4824      	ldr	r0, [pc, #144]	@ (80090c8 <__d2b+0xac>)
 8009038:	f240 310f 	movw	r1, #783	@ 0x30f
 800903c:	f000 fa82 	bl	8009544 <__assert_func>
 8009040:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009048:	b10d      	cbz	r5, 800904e <__d2b+0x32>
 800904a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	f1b8 0300 	subs.w	r3, r8, #0
 8009054:	d023      	beq.n	800909e <__d2b+0x82>
 8009056:	4668      	mov	r0, sp
 8009058:	9300      	str	r3, [sp, #0]
 800905a:	f7ff fd7c 	bl	8008b56 <__lo0bits>
 800905e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009062:	b1d0      	cbz	r0, 800909a <__d2b+0x7e>
 8009064:	f1c0 0320 	rsb	r3, r0, #32
 8009068:	fa02 f303 	lsl.w	r3, r2, r3
 800906c:	430b      	orrs	r3, r1
 800906e:	40c2      	lsrs	r2, r0
 8009070:	6163      	str	r3, [r4, #20]
 8009072:	9201      	str	r2, [sp, #4]
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	61a3      	str	r3, [r4, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	bf0c      	ite	eq
 800907c:	2201      	moveq	r2, #1
 800907e:	2202      	movne	r2, #2
 8009080:	6122      	str	r2, [r4, #16]
 8009082:	b1a5      	cbz	r5, 80090ae <__d2b+0x92>
 8009084:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009088:	4405      	add	r5, r0
 800908a:	603d      	str	r5, [r7, #0]
 800908c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009090:	6030      	str	r0, [r6, #0]
 8009092:	4620      	mov	r0, r4
 8009094:	b003      	add	sp, #12
 8009096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800909a:	6161      	str	r1, [r4, #20]
 800909c:	e7ea      	b.n	8009074 <__d2b+0x58>
 800909e:	a801      	add	r0, sp, #4
 80090a0:	f7ff fd59 	bl	8008b56 <__lo0bits>
 80090a4:	9b01      	ldr	r3, [sp, #4]
 80090a6:	6163      	str	r3, [r4, #20]
 80090a8:	3020      	adds	r0, #32
 80090aa:	2201      	movs	r2, #1
 80090ac:	e7e8      	b.n	8009080 <__d2b+0x64>
 80090ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80090b6:	6038      	str	r0, [r7, #0]
 80090b8:	6918      	ldr	r0, [r3, #16]
 80090ba:	f7ff fd2d 	bl	8008b18 <__hi0bits>
 80090be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090c2:	e7e5      	b.n	8009090 <__d2b+0x74>
 80090c4:	0800e95c 	.word	0x0800e95c
 80090c8:	0800e96d 	.word	0x0800e96d

080090cc <__ssputs_r>:
 80090cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090d0:	688e      	ldr	r6, [r1, #8]
 80090d2:	461f      	mov	r7, r3
 80090d4:	42be      	cmp	r6, r7
 80090d6:	680b      	ldr	r3, [r1, #0]
 80090d8:	4682      	mov	sl, r0
 80090da:	460c      	mov	r4, r1
 80090dc:	4690      	mov	r8, r2
 80090de:	d82d      	bhi.n	800913c <__ssputs_r+0x70>
 80090e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80090e8:	d026      	beq.n	8009138 <__ssputs_r+0x6c>
 80090ea:	6965      	ldr	r5, [r4, #20]
 80090ec:	6909      	ldr	r1, [r1, #16]
 80090ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090f2:	eba3 0901 	sub.w	r9, r3, r1
 80090f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090fa:	1c7b      	adds	r3, r7, #1
 80090fc:	444b      	add	r3, r9
 80090fe:	106d      	asrs	r5, r5, #1
 8009100:	429d      	cmp	r5, r3
 8009102:	bf38      	it	cc
 8009104:	461d      	movcc	r5, r3
 8009106:	0553      	lsls	r3, r2, #21
 8009108:	d527      	bpl.n	800915a <__ssputs_r+0x8e>
 800910a:	4629      	mov	r1, r5
 800910c:	f7ff fbd0 	bl	80088b0 <_malloc_r>
 8009110:	4606      	mov	r6, r0
 8009112:	b360      	cbz	r0, 800916e <__ssputs_r+0xa2>
 8009114:	6921      	ldr	r1, [r4, #16]
 8009116:	464a      	mov	r2, r9
 8009118:	f000 fa06 	bl	8009528 <memcpy>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	6126      	str	r6, [r4, #16]
 800912a:	6165      	str	r5, [r4, #20]
 800912c:	444e      	add	r6, r9
 800912e:	eba5 0509 	sub.w	r5, r5, r9
 8009132:	6026      	str	r6, [r4, #0]
 8009134:	60a5      	str	r5, [r4, #8]
 8009136:	463e      	mov	r6, r7
 8009138:	42be      	cmp	r6, r7
 800913a:	d900      	bls.n	800913e <__ssputs_r+0x72>
 800913c:	463e      	mov	r6, r7
 800913e:	6820      	ldr	r0, [r4, #0]
 8009140:	4632      	mov	r2, r6
 8009142:	4641      	mov	r1, r8
 8009144:	f000 f9c6 	bl	80094d4 <memmove>
 8009148:	68a3      	ldr	r3, [r4, #8]
 800914a:	1b9b      	subs	r3, r3, r6
 800914c:	60a3      	str	r3, [r4, #8]
 800914e:	6823      	ldr	r3, [r4, #0]
 8009150:	4433      	add	r3, r6
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	2000      	movs	r0, #0
 8009156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800915a:	462a      	mov	r2, r5
 800915c:	f000 fa36 	bl	80095cc <_realloc_r>
 8009160:	4606      	mov	r6, r0
 8009162:	2800      	cmp	r0, #0
 8009164:	d1e0      	bne.n	8009128 <__ssputs_r+0x5c>
 8009166:	6921      	ldr	r1, [r4, #16]
 8009168:	4650      	mov	r0, sl
 800916a:	f7ff fb2d 	bl	80087c8 <_free_r>
 800916e:	230c      	movs	r3, #12
 8009170:	f8ca 3000 	str.w	r3, [sl]
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800917a:	81a3      	strh	r3, [r4, #12]
 800917c:	f04f 30ff 	mov.w	r0, #4294967295
 8009180:	e7e9      	b.n	8009156 <__ssputs_r+0x8a>
	...

08009184 <_svfiprintf_r>:
 8009184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009188:	4698      	mov	r8, r3
 800918a:	898b      	ldrh	r3, [r1, #12]
 800918c:	061b      	lsls	r3, r3, #24
 800918e:	b09d      	sub	sp, #116	@ 0x74
 8009190:	4607      	mov	r7, r0
 8009192:	460d      	mov	r5, r1
 8009194:	4614      	mov	r4, r2
 8009196:	d510      	bpl.n	80091ba <_svfiprintf_r+0x36>
 8009198:	690b      	ldr	r3, [r1, #16]
 800919a:	b973      	cbnz	r3, 80091ba <_svfiprintf_r+0x36>
 800919c:	2140      	movs	r1, #64	@ 0x40
 800919e:	f7ff fb87 	bl	80088b0 <_malloc_r>
 80091a2:	6028      	str	r0, [r5, #0]
 80091a4:	6128      	str	r0, [r5, #16]
 80091a6:	b930      	cbnz	r0, 80091b6 <_svfiprintf_r+0x32>
 80091a8:	230c      	movs	r3, #12
 80091aa:	603b      	str	r3, [r7, #0]
 80091ac:	f04f 30ff 	mov.w	r0, #4294967295
 80091b0:	b01d      	add	sp, #116	@ 0x74
 80091b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	2340      	movs	r3, #64	@ 0x40
 80091b8:	616b      	str	r3, [r5, #20]
 80091ba:	2300      	movs	r3, #0
 80091bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091be:	2320      	movs	r3, #32
 80091c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80091c8:	2330      	movs	r3, #48	@ 0x30
 80091ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009368 <_svfiprintf_r+0x1e4>
 80091ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091d2:	f04f 0901 	mov.w	r9, #1
 80091d6:	4623      	mov	r3, r4
 80091d8:	469a      	mov	sl, r3
 80091da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091de:	b10a      	cbz	r2, 80091e4 <_svfiprintf_r+0x60>
 80091e0:	2a25      	cmp	r2, #37	@ 0x25
 80091e2:	d1f9      	bne.n	80091d8 <_svfiprintf_r+0x54>
 80091e4:	ebba 0b04 	subs.w	fp, sl, r4
 80091e8:	d00b      	beq.n	8009202 <_svfiprintf_r+0x7e>
 80091ea:	465b      	mov	r3, fp
 80091ec:	4622      	mov	r2, r4
 80091ee:	4629      	mov	r1, r5
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff ff6b 	bl	80090cc <__ssputs_r>
 80091f6:	3001      	adds	r0, #1
 80091f8:	f000 80a7 	beq.w	800934a <_svfiprintf_r+0x1c6>
 80091fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091fe:	445a      	add	r2, fp
 8009200:	9209      	str	r2, [sp, #36]	@ 0x24
 8009202:	f89a 3000 	ldrb.w	r3, [sl]
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 809f 	beq.w	800934a <_svfiprintf_r+0x1c6>
 800920c:	2300      	movs	r3, #0
 800920e:	f04f 32ff 	mov.w	r2, #4294967295
 8009212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009216:	f10a 0a01 	add.w	sl, sl, #1
 800921a:	9304      	str	r3, [sp, #16]
 800921c:	9307      	str	r3, [sp, #28]
 800921e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009222:	931a      	str	r3, [sp, #104]	@ 0x68
 8009224:	4654      	mov	r4, sl
 8009226:	2205      	movs	r2, #5
 8009228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922c:	484e      	ldr	r0, [pc, #312]	@ (8009368 <_svfiprintf_r+0x1e4>)
 800922e:	f7f6 ffff 	bl	8000230 <memchr>
 8009232:	9a04      	ldr	r2, [sp, #16]
 8009234:	b9d8      	cbnz	r0, 800926e <_svfiprintf_r+0xea>
 8009236:	06d0      	lsls	r0, r2, #27
 8009238:	bf44      	itt	mi
 800923a:	2320      	movmi	r3, #32
 800923c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009240:	0711      	lsls	r1, r2, #28
 8009242:	bf44      	itt	mi
 8009244:	232b      	movmi	r3, #43	@ 0x2b
 8009246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800924a:	f89a 3000 	ldrb.w	r3, [sl]
 800924e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009250:	d015      	beq.n	800927e <_svfiprintf_r+0xfa>
 8009252:	9a07      	ldr	r2, [sp, #28]
 8009254:	4654      	mov	r4, sl
 8009256:	2000      	movs	r0, #0
 8009258:	f04f 0c0a 	mov.w	ip, #10
 800925c:	4621      	mov	r1, r4
 800925e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009262:	3b30      	subs	r3, #48	@ 0x30
 8009264:	2b09      	cmp	r3, #9
 8009266:	d94b      	bls.n	8009300 <_svfiprintf_r+0x17c>
 8009268:	b1b0      	cbz	r0, 8009298 <_svfiprintf_r+0x114>
 800926a:	9207      	str	r2, [sp, #28]
 800926c:	e014      	b.n	8009298 <_svfiprintf_r+0x114>
 800926e:	eba0 0308 	sub.w	r3, r0, r8
 8009272:	fa09 f303 	lsl.w	r3, r9, r3
 8009276:	4313      	orrs	r3, r2
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	46a2      	mov	sl, r4
 800927c:	e7d2      	b.n	8009224 <_svfiprintf_r+0xa0>
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	1d19      	adds	r1, r3, #4
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	9103      	str	r1, [sp, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	bfbb      	ittet	lt
 800928a:	425b      	neglt	r3, r3
 800928c:	f042 0202 	orrlt.w	r2, r2, #2
 8009290:	9307      	strge	r3, [sp, #28]
 8009292:	9307      	strlt	r3, [sp, #28]
 8009294:	bfb8      	it	lt
 8009296:	9204      	strlt	r2, [sp, #16]
 8009298:	7823      	ldrb	r3, [r4, #0]
 800929a:	2b2e      	cmp	r3, #46	@ 0x2e
 800929c:	d10a      	bne.n	80092b4 <_svfiprintf_r+0x130>
 800929e:	7863      	ldrb	r3, [r4, #1]
 80092a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80092a2:	d132      	bne.n	800930a <_svfiprintf_r+0x186>
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	1d1a      	adds	r2, r3, #4
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	9203      	str	r2, [sp, #12]
 80092ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092b0:	3402      	adds	r4, #2
 80092b2:	9305      	str	r3, [sp, #20]
 80092b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009378 <_svfiprintf_r+0x1f4>
 80092b8:	7821      	ldrb	r1, [r4, #0]
 80092ba:	2203      	movs	r2, #3
 80092bc:	4650      	mov	r0, sl
 80092be:	f7f6 ffb7 	bl	8000230 <memchr>
 80092c2:	b138      	cbz	r0, 80092d4 <_svfiprintf_r+0x150>
 80092c4:	9b04      	ldr	r3, [sp, #16]
 80092c6:	eba0 000a 	sub.w	r0, r0, sl
 80092ca:	2240      	movs	r2, #64	@ 0x40
 80092cc:	4082      	lsls	r2, r0
 80092ce:	4313      	orrs	r3, r2
 80092d0:	3401      	adds	r4, #1
 80092d2:	9304      	str	r3, [sp, #16]
 80092d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092d8:	4824      	ldr	r0, [pc, #144]	@ (800936c <_svfiprintf_r+0x1e8>)
 80092da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092de:	2206      	movs	r2, #6
 80092e0:	f7f6 ffa6 	bl	8000230 <memchr>
 80092e4:	2800      	cmp	r0, #0
 80092e6:	d036      	beq.n	8009356 <_svfiprintf_r+0x1d2>
 80092e8:	4b21      	ldr	r3, [pc, #132]	@ (8009370 <_svfiprintf_r+0x1ec>)
 80092ea:	bb1b      	cbnz	r3, 8009334 <_svfiprintf_r+0x1b0>
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	3307      	adds	r3, #7
 80092f0:	f023 0307 	bic.w	r3, r3, #7
 80092f4:	3308      	adds	r3, #8
 80092f6:	9303      	str	r3, [sp, #12]
 80092f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092fa:	4433      	add	r3, r6
 80092fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092fe:	e76a      	b.n	80091d6 <_svfiprintf_r+0x52>
 8009300:	fb0c 3202 	mla	r2, ip, r2, r3
 8009304:	460c      	mov	r4, r1
 8009306:	2001      	movs	r0, #1
 8009308:	e7a8      	b.n	800925c <_svfiprintf_r+0xd8>
 800930a:	2300      	movs	r3, #0
 800930c:	3401      	adds	r4, #1
 800930e:	9305      	str	r3, [sp, #20]
 8009310:	4619      	mov	r1, r3
 8009312:	f04f 0c0a 	mov.w	ip, #10
 8009316:	4620      	mov	r0, r4
 8009318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800931c:	3a30      	subs	r2, #48	@ 0x30
 800931e:	2a09      	cmp	r2, #9
 8009320:	d903      	bls.n	800932a <_svfiprintf_r+0x1a6>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0c6      	beq.n	80092b4 <_svfiprintf_r+0x130>
 8009326:	9105      	str	r1, [sp, #20]
 8009328:	e7c4      	b.n	80092b4 <_svfiprintf_r+0x130>
 800932a:	fb0c 2101 	mla	r1, ip, r1, r2
 800932e:	4604      	mov	r4, r0
 8009330:	2301      	movs	r3, #1
 8009332:	e7f0      	b.n	8009316 <_svfiprintf_r+0x192>
 8009334:	ab03      	add	r3, sp, #12
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	462a      	mov	r2, r5
 800933a:	4b0e      	ldr	r3, [pc, #56]	@ (8009374 <_svfiprintf_r+0x1f0>)
 800933c:	a904      	add	r1, sp, #16
 800933e:	4638      	mov	r0, r7
 8009340:	f7fd fe96 	bl	8007070 <_printf_float>
 8009344:	1c42      	adds	r2, r0, #1
 8009346:	4606      	mov	r6, r0
 8009348:	d1d6      	bne.n	80092f8 <_svfiprintf_r+0x174>
 800934a:	89ab      	ldrh	r3, [r5, #12]
 800934c:	065b      	lsls	r3, r3, #25
 800934e:	f53f af2d 	bmi.w	80091ac <_svfiprintf_r+0x28>
 8009352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009354:	e72c      	b.n	80091b0 <_svfiprintf_r+0x2c>
 8009356:	ab03      	add	r3, sp, #12
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	462a      	mov	r2, r5
 800935c:	4b05      	ldr	r3, [pc, #20]	@ (8009374 <_svfiprintf_r+0x1f0>)
 800935e:	a904      	add	r1, sp, #16
 8009360:	4638      	mov	r0, r7
 8009362:	f7fe f91d 	bl	80075a0 <_printf_i>
 8009366:	e7ed      	b.n	8009344 <_svfiprintf_r+0x1c0>
 8009368:	0800eac8 	.word	0x0800eac8
 800936c:	0800ead2 	.word	0x0800ead2
 8009370:	08007071 	.word	0x08007071
 8009374:	080090cd 	.word	0x080090cd
 8009378:	0800eace 	.word	0x0800eace

0800937c <__sflush_r>:
 800937c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009384:	0716      	lsls	r6, r2, #28
 8009386:	4605      	mov	r5, r0
 8009388:	460c      	mov	r4, r1
 800938a:	d454      	bmi.n	8009436 <__sflush_r+0xba>
 800938c:	684b      	ldr	r3, [r1, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	dc02      	bgt.n	8009398 <__sflush_r+0x1c>
 8009392:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009394:	2b00      	cmp	r3, #0
 8009396:	dd48      	ble.n	800942a <__sflush_r+0xae>
 8009398:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800939a:	2e00      	cmp	r6, #0
 800939c:	d045      	beq.n	800942a <__sflush_r+0xae>
 800939e:	2300      	movs	r3, #0
 80093a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80093a4:	682f      	ldr	r7, [r5, #0]
 80093a6:	6a21      	ldr	r1, [r4, #32]
 80093a8:	602b      	str	r3, [r5, #0]
 80093aa:	d030      	beq.n	800940e <__sflush_r+0x92>
 80093ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	0759      	lsls	r1, r3, #29
 80093b2:	d505      	bpl.n	80093c0 <__sflush_r+0x44>
 80093b4:	6863      	ldr	r3, [r4, #4]
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80093ba:	b10b      	cbz	r3, 80093c0 <__sflush_r+0x44>
 80093bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80093be:	1ad2      	subs	r2, r2, r3
 80093c0:	2300      	movs	r3, #0
 80093c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80093c4:	6a21      	ldr	r1, [r4, #32]
 80093c6:	4628      	mov	r0, r5
 80093c8:	47b0      	blx	r6
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	89a3      	ldrh	r3, [r4, #12]
 80093ce:	d106      	bne.n	80093de <__sflush_r+0x62>
 80093d0:	6829      	ldr	r1, [r5, #0]
 80093d2:	291d      	cmp	r1, #29
 80093d4:	d82b      	bhi.n	800942e <__sflush_r+0xb2>
 80093d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009480 <__sflush_r+0x104>)
 80093d8:	410a      	asrs	r2, r1
 80093da:	07d6      	lsls	r6, r2, #31
 80093dc:	d427      	bmi.n	800942e <__sflush_r+0xb2>
 80093de:	2200      	movs	r2, #0
 80093e0:	6062      	str	r2, [r4, #4]
 80093e2:	04d9      	lsls	r1, r3, #19
 80093e4:	6922      	ldr	r2, [r4, #16]
 80093e6:	6022      	str	r2, [r4, #0]
 80093e8:	d504      	bpl.n	80093f4 <__sflush_r+0x78>
 80093ea:	1c42      	adds	r2, r0, #1
 80093ec:	d101      	bne.n	80093f2 <__sflush_r+0x76>
 80093ee:	682b      	ldr	r3, [r5, #0]
 80093f0:	b903      	cbnz	r3, 80093f4 <__sflush_r+0x78>
 80093f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80093f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093f6:	602f      	str	r7, [r5, #0]
 80093f8:	b1b9      	cbz	r1, 800942a <__sflush_r+0xae>
 80093fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093fe:	4299      	cmp	r1, r3
 8009400:	d002      	beq.n	8009408 <__sflush_r+0x8c>
 8009402:	4628      	mov	r0, r5
 8009404:	f7ff f9e0 	bl	80087c8 <_free_r>
 8009408:	2300      	movs	r3, #0
 800940a:	6363      	str	r3, [r4, #52]	@ 0x34
 800940c:	e00d      	b.n	800942a <__sflush_r+0xae>
 800940e:	2301      	movs	r3, #1
 8009410:	4628      	mov	r0, r5
 8009412:	47b0      	blx	r6
 8009414:	4602      	mov	r2, r0
 8009416:	1c50      	adds	r0, r2, #1
 8009418:	d1c9      	bne.n	80093ae <__sflush_r+0x32>
 800941a:	682b      	ldr	r3, [r5, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d0c6      	beq.n	80093ae <__sflush_r+0x32>
 8009420:	2b1d      	cmp	r3, #29
 8009422:	d001      	beq.n	8009428 <__sflush_r+0xac>
 8009424:	2b16      	cmp	r3, #22
 8009426:	d11e      	bne.n	8009466 <__sflush_r+0xea>
 8009428:	602f      	str	r7, [r5, #0]
 800942a:	2000      	movs	r0, #0
 800942c:	e022      	b.n	8009474 <__sflush_r+0xf8>
 800942e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009432:	b21b      	sxth	r3, r3
 8009434:	e01b      	b.n	800946e <__sflush_r+0xf2>
 8009436:	690f      	ldr	r7, [r1, #16]
 8009438:	2f00      	cmp	r7, #0
 800943a:	d0f6      	beq.n	800942a <__sflush_r+0xae>
 800943c:	0793      	lsls	r3, r2, #30
 800943e:	680e      	ldr	r6, [r1, #0]
 8009440:	bf08      	it	eq
 8009442:	694b      	ldreq	r3, [r1, #20]
 8009444:	600f      	str	r7, [r1, #0]
 8009446:	bf18      	it	ne
 8009448:	2300      	movne	r3, #0
 800944a:	eba6 0807 	sub.w	r8, r6, r7
 800944e:	608b      	str	r3, [r1, #8]
 8009450:	f1b8 0f00 	cmp.w	r8, #0
 8009454:	dde9      	ble.n	800942a <__sflush_r+0xae>
 8009456:	6a21      	ldr	r1, [r4, #32]
 8009458:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800945a:	4643      	mov	r3, r8
 800945c:	463a      	mov	r2, r7
 800945e:	4628      	mov	r0, r5
 8009460:	47b0      	blx	r6
 8009462:	2800      	cmp	r0, #0
 8009464:	dc08      	bgt.n	8009478 <__sflush_r+0xfc>
 8009466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800946e:	81a3      	strh	r3, [r4, #12]
 8009470:	f04f 30ff 	mov.w	r0, #4294967295
 8009474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009478:	4407      	add	r7, r0
 800947a:	eba8 0800 	sub.w	r8, r8, r0
 800947e:	e7e7      	b.n	8009450 <__sflush_r+0xd4>
 8009480:	dfbffffe 	.word	0xdfbffffe

08009484 <_fflush_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	690b      	ldr	r3, [r1, #16]
 8009488:	4605      	mov	r5, r0
 800948a:	460c      	mov	r4, r1
 800948c:	b913      	cbnz	r3, 8009494 <_fflush_r+0x10>
 800948e:	2500      	movs	r5, #0
 8009490:	4628      	mov	r0, r5
 8009492:	bd38      	pop	{r3, r4, r5, pc}
 8009494:	b118      	cbz	r0, 800949e <_fflush_r+0x1a>
 8009496:	6a03      	ldr	r3, [r0, #32]
 8009498:	b90b      	cbnz	r3, 800949e <_fflush_r+0x1a>
 800949a:	f7fe fa2d 	bl	80078f8 <__sinit>
 800949e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0f3      	beq.n	800948e <_fflush_r+0xa>
 80094a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80094a8:	07d0      	lsls	r0, r2, #31
 80094aa:	d404      	bmi.n	80094b6 <_fflush_r+0x32>
 80094ac:	0599      	lsls	r1, r3, #22
 80094ae:	d402      	bmi.n	80094b6 <_fflush_r+0x32>
 80094b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094b2:	f7fe fb38 	bl	8007b26 <__retarget_lock_acquire_recursive>
 80094b6:	4628      	mov	r0, r5
 80094b8:	4621      	mov	r1, r4
 80094ba:	f7ff ff5f 	bl	800937c <__sflush_r>
 80094be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80094c0:	07da      	lsls	r2, r3, #31
 80094c2:	4605      	mov	r5, r0
 80094c4:	d4e4      	bmi.n	8009490 <_fflush_r+0xc>
 80094c6:	89a3      	ldrh	r3, [r4, #12]
 80094c8:	059b      	lsls	r3, r3, #22
 80094ca:	d4e1      	bmi.n	8009490 <_fflush_r+0xc>
 80094cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80094ce:	f7fe fb2b 	bl	8007b28 <__retarget_lock_release_recursive>
 80094d2:	e7dd      	b.n	8009490 <_fflush_r+0xc>

080094d4 <memmove>:
 80094d4:	4288      	cmp	r0, r1
 80094d6:	b510      	push	{r4, lr}
 80094d8:	eb01 0402 	add.w	r4, r1, r2
 80094dc:	d902      	bls.n	80094e4 <memmove+0x10>
 80094de:	4284      	cmp	r4, r0
 80094e0:	4623      	mov	r3, r4
 80094e2:	d807      	bhi.n	80094f4 <memmove+0x20>
 80094e4:	1e43      	subs	r3, r0, #1
 80094e6:	42a1      	cmp	r1, r4
 80094e8:	d008      	beq.n	80094fc <memmove+0x28>
 80094ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094f2:	e7f8      	b.n	80094e6 <memmove+0x12>
 80094f4:	4402      	add	r2, r0
 80094f6:	4601      	mov	r1, r0
 80094f8:	428a      	cmp	r2, r1
 80094fa:	d100      	bne.n	80094fe <memmove+0x2a>
 80094fc:	bd10      	pop	{r4, pc}
 80094fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009506:	e7f7      	b.n	80094f8 <memmove+0x24>

08009508 <_sbrk_r>:
 8009508:	b538      	push	{r3, r4, r5, lr}
 800950a:	4d06      	ldr	r5, [pc, #24]	@ (8009524 <_sbrk_r+0x1c>)
 800950c:	2300      	movs	r3, #0
 800950e:	4604      	mov	r4, r0
 8009510:	4608      	mov	r0, r1
 8009512:	602b      	str	r3, [r5, #0]
 8009514:	f7f8 fb2e 	bl	8001b74 <_sbrk>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_sbrk_r+0x1a>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_sbrk_r+0x1a>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	20005abc 	.word	0x20005abc

08009528 <memcpy>:
 8009528:	440a      	add	r2, r1
 800952a:	4291      	cmp	r1, r2
 800952c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009530:	d100      	bne.n	8009534 <memcpy+0xc>
 8009532:	4770      	bx	lr
 8009534:	b510      	push	{r4, lr}
 8009536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800953a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800953e:	4291      	cmp	r1, r2
 8009540:	d1f9      	bne.n	8009536 <memcpy+0xe>
 8009542:	bd10      	pop	{r4, pc}

08009544 <__assert_func>:
 8009544:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009546:	4614      	mov	r4, r2
 8009548:	461a      	mov	r2, r3
 800954a:	4b09      	ldr	r3, [pc, #36]	@ (8009570 <__assert_func+0x2c>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4605      	mov	r5, r0
 8009550:	68d8      	ldr	r0, [r3, #12]
 8009552:	b954      	cbnz	r4, 800956a <__assert_func+0x26>
 8009554:	4b07      	ldr	r3, [pc, #28]	@ (8009574 <__assert_func+0x30>)
 8009556:	461c      	mov	r4, r3
 8009558:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800955c:	9100      	str	r1, [sp, #0]
 800955e:	462b      	mov	r3, r5
 8009560:	4905      	ldr	r1, [pc, #20]	@ (8009578 <__assert_func+0x34>)
 8009562:	f000 f86f 	bl	8009644 <fiprintf>
 8009566:	f000 f87f 	bl	8009668 <abort>
 800956a:	4b04      	ldr	r3, [pc, #16]	@ (800957c <__assert_func+0x38>)
 800956c:	e7f4      	b.n	8009558 <__assert_func+0x14>
 800956e:	bf00      	nop
 8009570:	20003618 	.word	0x20003618
 8009574:	0800eb1e 	.word	0x0800eb1e
 8009578:	0800eaf0 	.word	0x0800eaf0
 800957c:	0800eae3 	.word	0x0800eae3

08009580 <_calloc_r>:
 8009580:	b570      	push	{r4, r5, r6, lr}
 8009582:	fba1 5402 	umull	r5, r4, r1, r2
 8009586:	b93c      	cbnz	r4, 8009598 <_calloc_r+0x18>
 8009588:	4629      	mov	r1, r5
 800958a:	f7ff f991 	bl	80088b0 <_malloc_r>
 800958e:	4606      	mov	r6, r0
 8009590:	b928      	cbnz	r0, 800959e <_calloc_r+0x1e>
 8009592:	2600      	movs	r6, #0
 8009594:	4630      	mov	r0, r6
 8009596:	bd70      	pop	{r4, r5, r6, pc}
 8009598:	220c      	movs	r2, #12
 800959a:	6002      	str	r2, [r0, #0]
 800959c:	e7f9      	b.n	8009592 <_calloc_r+0x12>
 800959e:	462a      	mov	r2, r5
 80095a0:	4621      	mov	r1, r4
 80095a2:	f7fe fa42 	bl	8007a2a <memset>
 80095a6:	e7f5      	b.n	8009594 <_calloc_r+0x14>

080095a8 <__ascii_mbtowc>:
 80095a8:	b082      	sub	sp, #8
 80095aa:	b901      	cbnz	r1, 80095ae <__ascii_mbtowc+0x6>
 80095ac:	a901      	add	r1, sp, #4
 80095ae:	b142      	cbz	r2, 80095c2 <__ascii_mbtowc+0x1a>
 80095b0:	b14b      	cbz	r3, 80095c6 <__ascii_mbtowc+0x1e>
 80095b2:	7813      	ldrb	r3, [r2, #0]
 80095b4:	600b      	str	r3, [r1, #0]
 80095b6:	7812      	ldrb	r2, [r2, #0]
 80095b8:	1e10      	subs	r0, r2, #0
 80095ba:	bf18      	it	ne
 80095bc:	2001      	movne	r0, #1
 80095be:	b002      	add	sp, #8
 80095c0:	4770      	bx	lr
 80095c2:	4610      	mov	r0, r2
 80095c4:	e7fb      	b.n	80095be <__ascii_mbtowc+0x16>
 80095c6:	f06f 0001 	mvn.w	r0, #1
 80095ca:	e7f8      	b.n	80095be <__ascii_mbtowc+0x16>

080095cc <_realloc_r>:
 80095cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095d0:	4680      	mov	r8, r0
 80095d2:	4615      	mov	r5, r2
 80095d4:	460c      	mov	r4, r1
 80095d6:	b921      	cbnz	r1, 80095e2 <_realloc_r+0x16>
 80095d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095dc:	4611      	mov	r1, r2
 80095de:	f7ff b967 	b.w	80088b0 <_malloc_r>
 80095e2:	b92a      	cbnz	r2, 80095f0 <_realloc_r+0x24>
 80095e4:	f7ff f8f0 	bl	80087c8 <_free_r>
 80095e8:	2400      	movs	r4, #0
 80095ea:	4620      	mov	r0, r4
 80095ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f0:	f000 f841 	bl	8009676 <_malloc_usable_size_r>
 80095f4:	4285      	cmp	r5, r0
 80095f6:	4606      	mov	r6, r0
 80095f8:	d802      	bhi.n	8009600 <_realloc_r+0x34>
 80095fa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80095fe:	d8f4      	bhi.n	80095ea <_realloc_r+0x1e>
 8009600:	4629      	mov	r1, r5
 8009602:	4640      	mov	r0, r8
 8009604:	f7ff f954 	bl	80088b0 <_malloc_r>
 8009608:	4607      	mov	r7, r0
 800960a:	2800      	cmp	r0, #0
 800960c:	d0ec      	beq.n	80095e8 <_realloc_r+0x1c>
 800960e:	42b5      	cmp	r5, r6
 8009610:	462a      	mov	r2, r5
 8009612:	4621      	mov	r1, r4
 8009614:	bf28      	it	cs
 8009616:	4632      	movcs	r2, r6
 8009618:	f7ff ff86 	bl	8009528 <memcpy>
 800961c:	4621      	mov	r1, r4
 800961e:	4640      	mov	r0, r8
 8009620:	f7ff f8d2 	bl	80087c8 <_free_r>
 8009624:	463c      	mov	r4, r7
 8009626:	e7e0      	b.n	80095ea <_realloc_r+0x1e>

08009628 <__ascii_wctomb>:
 8009628:	4603      	mov	r3, r0
 800962a:	4608      	mov	r0, r1
 800962c:	b141      	cbz	r1, 8009640 <__ascii_wctomb+0x18>
 800962e:	2aff      	cmp	r2, #255	@ 0xff
 8009630:	d904      	bls.n	800963c <__ascii_wctomb+0x14>
 8009632:	228a      	movs	r2, #138	@ 0x8a
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	f04f 30ff 	mov.w	r0, #4294967295
 800963a:	4770      	bx	lr
 800963c:	700a      	strb	r2, [r1, #0]
 800963e:	2001      	movs	r0, #1
 8009640:	4770      	bx	lr
	...

08009644 <fiprintf>:
 8009644:	b40e      	push	{r1, r2, r3}
 8009646:	b503      	push	{r0, r1, lr}
 8009648:	4601      	mov	r1, r0
 800964a:	ab03      	add	r3, sp, #12
 800964c:	4805      	ldr	r0, [pc, #20]	@ (8009664 <fiprintf+0x20>)
 800964e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009652:	6800      	ldr	r0, [r0, #0]
 8009654:	9301      	str	r3, [sp, #4]
 8009656:	f000 f83f 	bl	80096d8 <_vfiprintf_r>
 800965a:	b002      	add	sp, #8
 800965c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009660:	b003      	add	sp, #12
 8009662:	4770      	bx	lr
 8009664:	20003618 	.word	0x20003618

08009668 <abort>:
 8009668:	b508      	push	{r3, lr}
 800966a:	2006      	movs	r0, #6
 800966c:	f000 fa08 	bl	8009a80 <raise>
 8009670:	2001      	movs	r0, #1
 8009672:	f7f8 fa06 	bl	8001a82 <_exit>

08009676 <_malloc_usable_size_r>:
 8009676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800967a:	1f18      	subs	r0, r3, #4
 800967c:	2b00      	cmp	r3, #0
 800967e:	bfbc      	itt	lt
 8009680:	580b      	ldrlt	r3, [r1, r0]
 8009682:	18c0      	addlt	r0, r0, r3
 8009684:	4770      	bx	lr

08009686 <__sfputc_r>:
 8009686:	6893      	ldr	r3, [r2, #8]
 8009688:	3b01      	subs	r3, #1
 800968a:	2b00      	cmp	r3, #0
 800968c:	b410      	push	{r4}
 800968e:	6093      	str	r3, [r2, #8]
 8009690:	da08      	bge.n	80096a4 <__sfputc_r+0x1e>
 8009692:	6994      	ldr	r4, [r2, #24]
 8009694:	42a3      	cmp	r3, r4
 8009696:	db01      	blt.n	800969c <__sfputc_r+0x16>
 8009698:	290a      	cmp	r1, #10
 800969a:	d103      	bne.n	80096a4 <__sfputc_r+0x1e>
 800969c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096a0:	f000 b932 	b.w	8009908 <__swbuf_r>
 80096a4:	6813      	ldr	r3, [r2, #0]
 80096a6:	1c58      	adds	r0, r3, #1
 80096a8:	6010      	str	r0, [r2, #0]
 80096aa:	7019      	strb	r1, [r3, #0]
 80096ac:	4608      	mov	r0, r1
 80096ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <__sfputs_r>:
 80096b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b6:	4606      	mov	r6, r0
 80096b8:	460f      	mov	r7, r1
 80096ba:	4614      	mov	r4, r2
 80096bc:	18d5      	adds	r5, r2, r3
 80096be:	42ac      	cmp	r4, r5
 80096c0:	d101      	bne.n	80096c6 <__sfputs_r+0x12>
 80096c2:	2000      	movs	r0, #0
 80096c4:	e007      	b.n	80096d6 <__sfputs_r+0x22>
 80096c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ca:	463a      	mov	r2, r7
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7ff ffda 	bl	8009686 <__sfputc_r>
 80096d2:	1c43      	adds	r3, r0, #1
 80096d4:	d1f3      	bne.n	80096be <__sfputs_r+0xa>
 80096d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096d8 <_vfiprintf_r>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	460d      	mov	r5, r1
 80096de:	b09d      	sub	sp, #116	@ 0x74
 80096e0:	4614      	mov	r4, r2
 80096e2:	4698      	mov	r8, r3
 80096e4:	4606      	mov	r6, r0
 80096e6:	b118      	cbz	r0, 80096f0 <_vfiprintf_r+0x18>
 80096e8:	6a03      	ldr	r3, [r0, #32]
 80096ea:	b90b      	cbnz	r3, 80096f0 <_vfiprintf_r+0x18>
 80096ec:	f7fe f904 	bl	80078f8 <__sinit>
 80096f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80096f2:	07d9      	lsls	r1, r3, #31
 80096f4:	d405      	bmi.n	8009702 <_vfiprintf_r+0x2a>
 80096f6:	89ab      	ldrh	r3, [r5, #12]
 80096f8:	059a      	lsls	r2, r3, #22
 80096fa:	d402      	bmi.n	8009702 <_vfiprintf_r+0x2a>
 80096fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096fe:	f7fe fa12 	bl	8007b26 <__retarget_lock_acquire_recursive>
 8009702:	89ab      	ldrh	r3, [r5, #12]
 8009704:	071b      	lsls	r3, r3, #28
 8009706:	d501      	bpl.n	800970c <_vfiprintf_r+0x34>
 8009708:	692b      	ldr	r3, [r5, #16]
 800970a:	b99b      	cbnz	r3, 8009734 <_vfiprintf_r+0x5c>
 800970c:	4629      	mov	r1, r5
 800970e:	4630      	mov	r0, r6
 8009710:	f000 f938 	bl	8009984 <__swsetup_r>
 8009714:	b170      	cbz	r0, 8009734 <_vfiprintf_r+0x5c>
 8009716:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009718:	07dc      	lsls	r4, r3, #31
 800971a:	d504      	bpl.n	8009726 <_vfiprintf_r+0x4e>
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	b01d      	add	sp, #116	@ 0x74
 8009722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009726:	89ab      	ldrh	r3, [r5, #12]
 8009728:	0598      	lsls	r0, r3, #22
 800972a:	d4f7      	bmi.n	800971c <_vfiprintf_r+0x44>
 800972c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800972e:	f7fe f9fb 	bl	8007b28 <__retarget_lock_release_recursive>
 8009732:	e7f3      	b.n	800971c <_vfiprintf_r+0x44>
 8009734:	2300      	movs	r3, #0
 8009736:	9309      	str	r3, [sp, #36]	@ 0x24
 8009738:	2320      	movs	r3, #32
 800973a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800973e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009742:	2330      	movs	r3, #48	@ 0x30
 8009744:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80098f4 <_vfiprintf_r+0x21c>
 8009748:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800974c:	f04f 0901 	mov.w	r9, #1
 8009750:	4623      	mov	r3, r4
 8009752:	469a      	mov	sl, r3
 8009754:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009758:	b10a      	cbz	r2, 800975e <_vfiprintf_r+0x86>
 800975a:	2a25      	cmp	r2, #37	@ 0x25
 800975c:	d1f9      	bne.n	8009752 <_vfiprintf_r+0x7a>
 800975e:	ebba 0b04 	subs.w	fp, sl, r4
 8009762:	d00b      	beq.n	800977c <_vfiprintf_r+0xa4>
 8009764:	465b      	mov	r3, fp
 8009766:	4622      	mov	r2, r4
 8009768:	4629      	mov	r1, r5
 800976a:	4630      	mov	r0, r6
 800976c:	f7ff ffa2 	bl	80096b4 <__sfputs_r>
 8009770:	3001      	adds	r0, #1
 8009772:	f000 80a7 	beq.w	80098c4 <_vfiprintf_r+0x1ec>
 8009776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009778:	445a      	add	r2, fp
 800977a:	9209      	str	r2, [sp, #36]	@ 0x24
 800977c:	f89a 3000 	ldrb.w	r3, [sl]
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 809f 	beq.w	80098c4 <_vfiprintf_r+0x1ec>
 8009786:	2300      	movs	r3, #0
 8009788:	f04f 32ff 	mov.w	r2, #4294967295
 800978c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009790:	f10a 0a01 	add.w	sl, sl, #1
 8009794:	9304      	str	r3, [sp, #16]
 8009796:	9307      	str	r3, [sp, #28]
 8009798:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800979c:	931a      	str	r3, [sp, #104]	@ 0x68
 800979e:	4654      	mov	r4, sl
 80097a0:	2205      	movs	r2, #5
 80097a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a6:	4853      	ldr	r0, [pc, #332]	@ (80098f4 <_vfiprintf_r+0x21c>)
 80097a8:	f7f6 fd42 	bl	8000230 <memchr>
 80097ac:	9a04      	ldr	r2, [sp, #16]
 80097ae:	b9d8      	cbnz	r0, 80097e8 <_vfiprintf_r+0x110>
 80097b0:	06d1      	lsls	r1, r2, #27
 80097b2:	bf44      	itt	mi
 80097b4:	2320      	movmi	r3, #32
 80097b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097ba:	0713      	lsls	r3, r2, #28
 80097bc:	bf44      	itt	mi
 80097be:	232b      	movmi	r3, #43	@ 0x2b
 80097c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097c4:	f89a 3000 	ldrb.w	r3, [sl]
 80097c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80097ca:	d015      	beq.n	80097f8 <_vfiprintf_r+0x120>
 80097cc:	9a07      	ldr	r2, [sp, #28]
 80097ce:	4654      	mov	r4, sl
 80097d0:	2000      	movs	r0, #0
 80097d2:	f04f 0c0a 	mov.w	ip, #10
 80097d6:	4621      	mov	r1, r4
 80097d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097dc:	3b30      	subs	r3, #48	@ 0x30
 80097de:	2b09      	cmp	r3, #9
 80097e0:	d94b      	bls.n	800987a <_vfiprintf_r+0x1a2>
 80097e2:	b1b0      	cbz	r0, 8009812 <_vfiprintf_r+0x13a>
 80097e4:	9207      	str	r2, [sp, #28]
 80097e6:	e014      	b.n	8009812 <_vfiprintf_r+0x13a>
 80097e8:	eba0 0308 	sub.w	r3, r0, r8
 80097ec:	fa09 f303 	lsl.w	r3, r9, r3
 80097f0:	4313      	orrs	r3, r2
 80097f2:	9304      	str	r3, [sp, #16]
 80097f4:	46a2      	mov	sl, r4
 80097f6:	e7d2      	b.n	800979e <_vfiprintf_r+0xc6>
 80097f8:	9b03      	ldr	r3, [sp, #12]
 80097fa:	1d19      	adds	r1, r3, #4
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	9103      	str	r1, [sp, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	bfbb      	ittet	lt
 8009804:	425b      	neglt	r3, r3
 8009806:	f042 0202 	orrlt.w	r2, r2, #2
 800980a:	9307      	strge	r3, [sp, #28]
 800980c:	9307      	strlt	r3, [sp, #28]
 800980e:	bfb8      	it	lt
 8009810:	9204      	strlt	r2, [sp, #16]
 8009812:	7823      	ldrb	r3, [r4, #0]
 8009814:	2b2e      	cmp	r3, #46	@ 0x2e
 8009816:	d10a      	bne.n	800982e <_vfiprintf_r+0x156>
 8009818:	7863      	ldrb	r3, [r4, #1]
 800981a:	2b2a      	cmp	r3, #42	@ 0x2a
 800981c:	d132      	bne.n	8009884 <_vfiprintf_r+0x1ac>
 800981e:	9b03      	ldr	r3, [sp, #12]
 8009820:	1d1a      	adds	r2, r3, #4
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	9203      	str	r2, [sp, #12]
 8009826:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800982a:	3402      	adds	r4, #2
 800982c:	9305      	str	r3, [sp, #20]
 800982e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009904 <_vfiprintf_r+0x22c>
 8009832:	7821      	ldrb	r1, [r4, #0]
 8009834:	2203      	movs	r2, #3
 8009836:	4650      	mov	r0, sl
 8009838:	f7f6 fcfa 	bl	8000230 <memchr>
 800983c:	b138      	cbz	r0, 800984e <_vfiprintf_r+0x176>
 800983e:	9b04      	ldr	r3, [sp, #16]
 8009840:	eba0 000a 	sub.w	r0, r0, sl
 8009844:	2240      	movs	r2, #64	@ 0x40
 8009846:	4082      	lsls	r2, r0
 8009848:	4313      	orrs	r3, r2
 800984a:	3401      	adds	r4, #1
 800984c:	9304      	str	r3, [sp, #16]
 800984e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009852:	4829      	ldr	r0, [pc, #164]	@ (80098f8 <_vfiprintf_r+0x220>)
 8009854:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009858:	2206      	movs	r2, #6
 800985a:	f7f6 fce9 	bl	8000230 <memchr>
 800985e:	2800      	cmp	r0, #0
 8009860:	d03f      	beq.n	80098e2 <_vfiprintf_r+0x20a>
 8009862:	4b26      	ldr	r3, [pc, #152]	@ (80098fc <_vfiprintf_r+0x224>)
 8009864:	bb1b      	cbnz	r3, 80098ae <_vfiprintf_r+0x1d6>
 8009866:	9b03      	ldr	r3, [sp, #12]
 8009868:	3307      	adds	r3, #7
 800986a:	f023 0307 	bic.w	r3, r3, #7
 800986e:	3308      	adds	r3, #8
 8009870:	9303      	str	r3, [sp, #12]
 8009872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009874:	443b      	add	r3, r7
 8009876:	9309      	str	r3, [sp, #36]	@ 0x24
 8009878:	e76a      	b.n	8009750 <_vfiprintf_r+0x78>
 800987a:	fb0c 3202 	mla	r2, ip, r2, r3
 800987e:	460c      	mov	r4, r1
 8009880:	2001      	movs	r0, #1
 8009882:	e7a8      	b.n	80097d6 <_vfiprintf_r+0xfe>
 8009884:	2300      	movs	r3, #0
 8009886:	3401      	adds	r4, #1
 8009888:	9305      	str	r3, [sp, #20]
 800988a:	4619      	mov	r1, r3
 800988c:	f04f 0c0a 	mov.w	ip, #10
 8009890:	4620      	mov	r0, r4
 8009892:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009896:	3a30      	subs	r2, #48	@ 0x30
 8009898:	2a09      	cmp	r2, #9
 800989a:	d903      	bls.n	80098a4 <_vfiprintf_r+0x1cc>
 800989c:	2b00      	cmp	r3, #0
 800989e:	d0c6      	beq.n	800982e <_vfiprintf_r+0x156>
 80098a0:	9105      	str	r1, [sp, #20]
 80098a2:	e7c4      	b.n	800982e <_vfiprintf_r+0x156>
 80098a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a8:	4604      	mov	r4, r0
 80098aa:	2301      	movs	r3, #1
 80098ac:	e7f0      	b.n	8009890 <_vfiprintf_r+0x1b8>
 80098ae:	ab03      	add	r3, sp, #12
 80098b0:	9300      	str	r3, [sp, #0]
 80098b2:	462a      	mov	r2, r5
 80098b4:	4b12      	ldr	r3, [pc, #72]	@ (8009900 <_vfiprintf_r+0x228>)
 80098b6:	a904      	add	r1, sp, #16
 80098b8:	4630      	mov	r0, r6
 80098ba:	f7fd fbd9 	bl	8007070 <_printf_float>
 80098be:	4607      	mov	r7, r0
 80098c0:	1c78      	adds	r0, r7, #1
 80098c2:	d1d6      	bne.n	8009872 <_vfiprintf_r+0x19a>
 80098c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098c6:	07d9      	lsls	r1, r3, #31
 80098c8:	d405      	bmi.n	80098d6 <_vfiprintf_r+0x1fe>
 80098ca:	89ab      	ldrh	r3, [r5, #12]
 80098cc:	059a      	lsls	r2, r3, #22
 80098ce:	d402      	bmi.n	80098d6 <_vfiprintf_r+0x1fe>
 80098d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098d2:	f7fe f929 	bl	8007b28 <__retarget_lock_release_recursive>
 80098d6:	89ab      	ldrh	r3, [r5, #12]
 80098d8:	065b      	lsls	r3, r3, #25
 80098da:	f53f af1f 	bmi.w	800971c <_vfiprintf_r+0x44>
 80098de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098e0:	e71e      	b.n	8009720 <_vfiprintf_r+0x48>
 80098e2:	ab03      	add	r3, sp, #12
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	462a      	mov	r2, r5
 80098e8:	4b05      	ldr	r3, [pc, #20]	@ (8009900 <_vfiprintf_r+0x228>)
 80098ea:	a904      	add	r1, sp, #16
 80098ec:	4630      	mov	r0, r6
 80098ee:	f7fd fe57 	bl	80075a0 <_printf_i>
 80098f2:	e7e4      	b.n	80098be <_vfiprintf_r+0x1e6>
 80098f4:	0800eac8 	.word	0x0800eac8
 80098f8:	0800ead2 	.word	0x0800ead2
 80098fc:	08007071 	.word	0x08007071
 8009900:	080096b5 	.word	0x080096b5
 8009904:	0800eace 	.word	0x0800eace

08009908 <__swbuf_r>:
 8009908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990a:	460e      	mov	r6, r1
 800990c:	4614      	mov	r4, r2
 800990e:	4605      	mov	r5, r0
 8009910:	b118      	cbz	r0, 800991a <__swbuf_r+0x12>
 8009912:	6a03      	ldr	r3, [r0, #32]
 8009914:	b90b      	cbnz	r3, 800991a <__swbuf_r+0x12>
 8009916:	f7fd ffef 	bl	80078f8 <__sinit>
 800991a:	69a3      	ldr	r3, [r4, #24]
 800991c:	60a3      	str	r3, [r4, #8]
 800991e:	89a3      	ldrh	r3, [r4, #12]
 8009920:	071a      	lsls	r2, r3, #28
 8009922:	d501      	bpl.n	8009928 <__swbuf_r+0x20>
 8009924:	6923      	ldr	r3, [r4, #16]
 8009926:	b943      	cbnz	r3, 800993a <__swbuf_r+0x32>
 8009928:	4621      	mov	r1, r4
 800992a:	4628      	mov	r0, r5
 800992c:	f000 f82a 	bl	8009984 <__swsetup_r>
 8009930:	b118      	cbz	r0, 800993a <__swbuf_r+0x32>
 8009932:	f04f 37ff 	mov.w	r7, #4294967295
 8009936:	4638      	mov	r0, r7
 8009938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	6922      	ldr	r2, [r4, #16]
 800993e:	1a98      	subs	r0, r3, r2
 8009940:	6963      	ldr	r3, [r4, #20]
 8009942:	b2f6      	uxtb	r6, r6
 8009944:	4283      	cmp	r3, r0
 8009946:	4637      	mov	r7, r6
 8009948:	dc05      	bgt.n	8009956 <__swbuf_r+0x4e>
 800994a:	4621      	mov	r1, r4
 800994c:	4628      	mov	r0, r5
 800994e:	f7ff fd99 	bl	8009484 <_fflush_r>
 8009952:	2800      	cmp	r0, #0
 8009954:	d1ed      	bne.n	8009932 <__swbuf_r+0x2a>
 8009956:	68a3      	ldr	r3, [r4, #8]
 8009958:	3b01      	subs	r3, #1
 800995a:	60a3      	str	r3, [r4, #8]
 800995c:	6823      	ldr	r3, [r4, #0]
 800995e:	1c5a      	adds	r2, r3, #1
 8009960:	6022      	str	r2, [r4, #0]
 8009962:	701e      	strb	r6, [r3, #0]
 8009964:	6962      	ldr	r2, [r4, #20]
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	429a      	cmp	r2, r3
 800996a:	d004      	beq.n	8009976 <__swbuf_r+0x6e>
 800996c:	89a3      	ldrh	r3, [r4, #12]
 800996e:	07db      	lsls	r3, r3, #31
 8009970:	d5e1      	bpl.n	8009936 <__swbuf_r+0x2e>
 8009972:	2e0a      	cmp	r6, #10
 8009974:	d1df      	bne.n	8009936 <__swbuf_r+0x2e>
 8009976:	4621      	mov	r1, r4
 8009978:	4628      	mov	r0, r5
 800997a:	f7ff fd83 	bl	8009484 <_fflush_r>
 800997e:	2800      	cmp	r0, #0
 8009980:	d0d9      	beq.n	8009936 <__swbuf_r+0x2e>
 8009982:	e7d6      	b.n	8009932 <__swbuf_r+0x2a>

08009984 <__swsetup_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4b29      	ldr	r3, [pc, #164]	@ (8009a2c <__swsetup_r+0xa8>)
 8009988:	4605      	mov	r5, r0
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	460c      	mov	r4, r1
 800998e:	b118      	cbz	r0, 8009998 <__swsetup_r+0x14>
 8009990:	6a03      	ldr	r3, [r0, #32]
 8009992:	b90b      	cbnz	r3, 8009998 <__swsetup_r+0x14>
 8009994:	f7fd ffb0 	bl	80078f8 <__sinit>
 8009998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800999c:	0719      	lsls	r1, r3, #28
 800999e:	d422      	bmi.n	80099e6 <__swsetup_r+0x62>
 80099a0:	06da      	lsls	r2, r3, #27
 80099a2:	d407      	bmi.n	80099b4 <__swsetup_r+0x30>
 80099a4:	2209      	movs	r2, #9
 80099a6:	602a      	str	r2, [r5, #0]
 80099a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ac:	81a3      	strh	r3, [r4, #12]
 80099ae:	f04f 30ff 	mov.w	r0, #4294967295
 80099b2:	e033      	b.n	8009a1c <__swsetup_r+0x98>
 80099b4:	0758      	lsls	r0, r3, #29
 80099b6:	d512      	bpl.n	80099de <__swsetup_r+0x5a>
 80099b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099ba:	b141      	cbz	r1, 80099ce <__swsetup_r+0x4a>
 80099bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099c0:	4299      	cmp	r1, r3
 80099c2:	d002      	beq.n	80099ca <__swsetup_r+0x46>
 80099c4:	4628      	mov	r0, r5
 80099c6:	f7fe feff 	bl	80087c8 <_free_r>
 80099ca:	2300      	movs	r3, #0
 80099cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80099ce:	89a3      	ldrh	r3, [r4, #12]
 80099d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80099d4:	81a3      	strh	r3, [r4, #12]
 80099d6:	2300      	movs	r3, #0
 80099d8:	6063      	str	r3, [r4, #4]
 80099da:	6923      	ldr	r3, [r4, #16]
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	89a3      	ldrh	r3, [r4, #12]
 80099e0:	f043 0308 	orr.w	r3, r3, #8
 80099e4:	81a3      	strh	r3, [r4, #12]
 80099e6:	6923      	ldr	r3, [r4, #16]
 80099e8:	b94b      	cbnz	r3, 80099fe <__swsetup_r+0x7a>
 80099ea:	89a3      	ldrh	r3, [r4, #12]
 80099ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80099f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099f4:	d003      	beq.n	80099fe <__swsetup_r+0x7a>
 80099f6:	4621      	mov	r1, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	f000 f883 	bl	8009b04 <__smakebuf_r>
 80099fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a02:	f013 0201 	ands.w	r2, r3, #1
 8009a06:	d00a      	beq.n	8009a1e <__swsetup_r+0x9a>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	60a2      	str	r2, [r4, #8]
 8009a0c:	6962      	ldr	r2, [r4, #20]
 8009a0e:	4252      	negs	r2, r2
 8009a10:	61a2      	str	r2, [r4, #24]
 8009a12:	6922      	ldr	r2, [r4, #16]
 8009a14:	b942      	cbnz	r2, 8009a28 <__swsetup_r+0xa4>
 8009a16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009a1a:	d1c5      	bne.n	80099a8 <__swsetup_r+0x24>
 8009a1c:	bd38      	pop	{r3, r4, r5, pc}
 8009a1e:	0799      	lsls	r1, r3, #30
 8009a20:	bf58      	it	pl
 8009a22:	6962      	ldrpl	r2, [r4, #20]
 8009a24:	60a2      	str	r2, [r4, #8]
 8009a26:	e7f4      	b.n	8009a12 <__swsetup_r+0x8e>
 8009a28:	2000      	movs	r0, #0
 8009a2a:	e7f7      	b.n	8009a1c <__swsetup_r+0x98>
 8009a2c:	20003618 	.word	0x20003618

08009a30 <_raise_r>:
 8009a30:	291f      	cmp	r1, #31
 8009a32:	b538      	push	{r3, r4, r5, lr}
 8009a34:	4605      	mov	r5, r0
 8009a36:	460c      	mov	r4, r1
 8009a38:	d904      	bls.n	8009a44 <_raise_r+0x14>
 8009a3a:	2316      	movs	r3, #22
 8009a3c:	6003      	str	r3, [r0, #0]
 8009a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a42:	bd38      	pop	{r3, r4, r5, pc}
 8009a44:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a46:	b112      	cbz	r2, 8009a4e <_raise_r+0x1e>
 8009a48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a4c:	b94b      	cbnz	r3, 8009a62 <_raise_r+0x32>
 8009a4e:	4628      	mov	r0, r5
 8009a50:	f000 f830 	bl	8009ab4 <_getpid_r>
 8009a54:	4622      	mov	r2, r4
 8009a56:	4601      	mov	r1, r0
 8009a58:	4628      	mov	r0, r5
 8009a5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a5e:	f000 b817 	b.w	8009a90 <_kill_r>
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d00a      	beq.n	8009a7c <_raise_r+0x4c>
 8009a66:	1c59      	adds	r1, r3, #1
 8009a68:	d103      	bne.n	8009a72 <_raise_r+0x42>
 8009a6a:	2316      	movs	r3, #22
 8009a6c:	6003      	str	r3, [r0, #0]
 8009a6e:	2001      	movs	r0, #1
 8009a70:	e7e7      	b.n	8009a42 <_raise_r+0x12>
 8009a72:	2100      	movs	r1, #0
 8009a74:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a78:	4620      	mov	r0, r4
 8009a7a:	4798      	blx	r3
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	e7e0      	b.n	8009a42 <_raise_r+0x12>

08009a80 <raise>:
 8009a80:	4b02      	ldr	r3, [pc, #8]	@ (8009a8c <raise+0xc>)
 8009a82:	4601      	mov	r1, r0
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	f7ff bfd3 	b.w	8009a30 <_raise_r>
 8009a8a:	bf00      	nop
 8009a8c:	20003618 	.word	0x20003618

08009a90 <_kill_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d07      	ldr	r5, [pc, #28]	@ (8009ab0 <_kill_r+0x20>)
 8009a94:	2300      	movs	r3, #0
 8009a96:	4604      	mov	r4, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	602b      	str	r3, [r5, #0]
 8009a9e:	f7f7 ffe0 	bl	8001a62 <_kill>
 8009aa2:	1c43      	adds	r3, r0, #1
 8009aa4:	d102      	bne.n	8009aac <_kill_r+0x1c>
 8009aa6:	682b      	ldr	r3, [r5, #0]
 8009aa8:	b103      	cbz	r3, 8009aac <_kill_r+0x1c>
 8009aaa:	6023      	str	r3, [r4, #0]
 8009aac:	bd38      	pop	{r3, r4, r5, pc}
 8009aae:	bf00      	nop
 8009ab0:	20005abc 	.word	0x20005abc

08009ab4 <_getpid_r>:
 8009ab4:	f7f7 bfcd 	b.w	8001a52 <_getpid>

08009ab8 <__swhatbuf_r>:
 8009ab8:	b570      	push	{r4, r5, r6, lr}
 8009aba:	460c      	mov	r4, r1
 8009abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac0:	2900      	cmp	r1, #0
 8009ac2:	b096      	sub	sp, #88	@ 0x58
 8009ac4:	4615      	mov	r5, r2
 8009ac6:	461e      	mov	r6, r3
 8009ac8:	da0d      	bge.n	8009ae6 <__swhatbuf_r+0x2e>
 8009aca:	89a3      	ldrh	r3, [r4, #12]
 8009acc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009ad0:	f04f 0100 	mov.w	r1, #0
 8009ad4:	bf14      	ite	ne
 8009ad6:	2340      	movne	r3, #64	@ 0x40
 8009ad8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009adc:	2000      	movs	r0, #0
 8009ade:	6031      	str	r1, [r6, #0]
 8009ae0:	602b      	str	r3, [r5, #0]
 8009ae2:	b016      	add	sp, #88	@ 0x58
 8009ae4:	bd70      	pop	{r4, r5, r6, pc}
 8009ae6:	466a      	mov	r2, sp
 8009ae8:	f000 f848 	bl	8009b7c <_fstat_r>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	dbec      	blt.n	8009aca <__swhatbuf_r+0x12>
 8009af0:	9901      	ldr	r1, [sp, #4]
 8009af2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009af6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009afa:	4259      	negs	r1, r3
 8009afc:	4159      	adcs	r1, r3
 8009afe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b02:	e7eb      	b.n	8009adc <__swhatbuf_r+0x24>

08009b04 <__smakebuf_r>:
 8009b04:	898b      	ldrh	r3, [r1, #12]
 8009b06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b08:	079d      	lsls	r5, r3, #30
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	d507      	bpl.n	8009b20 <__smakebuf_r+0x1c>
 8009b10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009b14:	6023      	str	r3, [r4, #0]
 8009b16:	6123      	str	r3, [r4, #16]
 8009b18:	2301      	movs	r3, #1
 8009b1a:	6163      	str	r3, [r4, #20]
 8009b1c:	b003      	add	sp, #12
 8009b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b20:	ab01      	add	r3, sp, #4
 8009b22:	466a      	mov	r2, sp
 8009b24:	f7ff ffc8 	bl	8009ab8 <__swhatbuf_r>
 8009b28:	9f00      	ldr	r7, [sp, #0]
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7fe febe 	bl	80088b0 <_malloc_r>
 8009b34:	b948      	cbnz	r0, 8009b4a <__smakebuf_r+0x46>
 8009b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b3a:	059a      	lsls	r2, r3, #22
 8009b3c:	d4ee      	bmi.n	8009b1c <__smakebuf_r+0x18>
 8009b3e:	f023 0303 	bic.w	r3, r3, #3
 8009b42:	f043 0302 	orr.w	r3, r3, #2
 8009b46:	81a3      	strh	r3, [r4, #12]
 8009b48:	e7e2      	b.n	8009b10 <__smakebuf_r+0xc>
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	6020      	str	r0, [r4, #0]
 8009b4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b52:	81a3      	strh	r3, [r4, #12]
 8009b54:	9b01      	ldr	r3, [sp, #4]
 8009b56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009b5a:	b15b      	cbz	r3, 8009b74 <__smakebuf_r+0x70>
 8009b5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b60:	4630      	mov	r0, r6
 8009b62:	f000 f81d 	bl	8009ba0 <_isatty_r>
 8009b66:	b128      	cbz	r0, 8009b74 <__smakebuf_r+0x70>
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	f023 0303 	bic.w	r3, r3, #3
 8009b6e:	f043 0301 	orr.w	r3, r3, #1
 8009b72:	81a3      	strh	r3, [r4, #12]
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	431d      	orrs	r5, r3
 8009b78:	81a5      	strh	r5, [r4, #12]
 8009b7a:	e7cf      	b.n	8009b1c <__smakebuf_r+0x18>

08009b7c <_fstat_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4d07      	ldr	r5, [pc, #28]	@ (8009b9c <_fstat_r+0x20>)
 8009b80:	2300      	movs	r3, #0
 8009b82:	4604      	mov	r4, r0
 8009b84:	4608      	mov	r0, r1
 8009b86:	4611      	mov	r1, r2
 8009b88:	602b      	str	r3, [r5, #0]
 8009b8a:	f7f7 ffca 	bl	8001b22 <_fstat>
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	d102      	bne.n	8009b98 <_fstat_r+0x1c>
 8009b92:	682b      	ldr	r3, [r5, #0]
 8009b94:	b103      	cbz	r3, 8009b98 <_fstat_r+0x1c>
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	bd38      	pop	{r3, r4, r5, pc}
 8009b9a:	bf00      	nop
 8009b9c:	20005abc 	.word	0x20005abc

08009ba0 <_isatty_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4d06      	ldr	r5, [pc, #24]	@ (8009bbc <_isatty_r+0x1c>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	602b      	str	r3, [r5, #0]
 8009bac:	f7f7 ffc9 	bl	8001b42 <_isatty>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_isatty_r+0x1a>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_isatty_r+0x1a>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	20005abc 	.word	0x20005abc

08009bc0 <_init>:
 8009bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bc2:	bf00      	nop
 8009bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bc6:	bc08      	pop	{r3}
 8009bc8:	469e      	mov	lr, r3
 8009bca:	4770      	bx	lr

08009bcc <_fini>:
 8009bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bce:	bf00      	nop
 8009bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bd2:	bc08      	pop	{r3}
 8009bd4:	469e      	mov	lr, r3
 8009bd6:	4770      	bx	lr
